Dataset:Meander/Full.csv
FS:False
Seed:1234
Size:3

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],+660302.8763).all():
      return False
    else:
      return True
  def adf1(index):
    if np.less(sigmoid(x[index]),+077001.4703).all():
      return False
    else:
      return True
  def adf2(index):
    if np.greater(np.sin(x[index]),-133877.1114).all():
      return True
    else:
      return False
  def adf3(index):
    if np.less(x[index],-594645.2658).all():
      return True
    else:
      return False
  def adf4(index):
    if np.greater(psqrt(x[index]),-842209.6242).all():
      return False
    else:
      return True
  def adf5(index):
    if np.equal(x[index],-564715.2692).all():
      return False
    else:
      return True
  def adf6(index):
    if np.equal(np.cos(x[index]),+999802.8805).all():
      return True
    else:
      return True
  def adf7(index):
    if np.equal(psqrt(x[index]),-204113.6993).all():
      return True
    else:
      return True
  def adf8(index):
    if np.less(x[index],+478615.0053).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+113.305, adf1(1)*-658.557, adf2(2)*-082.684, adf3(3)*-901.103, adf4(4)*+910.579, adf5(5)*-466.624, adf6(6)*-441.727, adf7(7)*-044.168, adf8(8)*-660.881], [1, 0, 0, 0, 0, 1, 0, 0], 479.039)
result=p(); 0.6666666666666666
IndLenGenome:417
IndGenome:[92, 76, 73, 65, 15, 17, 67, 22, 73, 58, 94, 23, 61, 40, 49, 39, 22, 52, 5, 23, 40, 17, 53, 87, 82, 14, 57, 22, 7, 23, 30, 44, 78, 96, 92, 94, 20, 70, 11, 83, 97, 43, 8, 82, 74, 22, 99, 85, 21, 19, 81, 75, 58, 62, 31, 30, 51, 56, 45, 37, 73, 57, 28, 77, 20, 64, 37, 62, 63, 87, 49, 10, 99, 86, 55, 55, 53, 28, 40, 30, 89, 6, 96, 61, 15, 46, 62, 10, 38, 84, 89, 8, 50, 55, 89, 48, 95, 79, 43, 73, 45, 90, 9, 81, 48, 43, 32, 90, 53, 17, 1, 28, 43, 83, 84, 39, 87, 28, 52, 68, 96, 53, 74, 18, 81, 58, 60, 48, 61, 73, 45, 98, 89, 80, 51, 28, 71, 67, 83, 27, 75, 9, 66, 71, 64, 76, 66, 95, 69, 37, 80, 23, 5, 53, 94, 60, 78, 41, 90, 15, 48, 52, 34, 66, 64, 14, 45, 50, 75, 18, 68, 27, 53, 18, 95, 50, 64, 41, 17, 23, 18, 89, 91, 17, 83, 75, 50, 63, 11, 12, 12, 21, 70, 58, 27, 74, 99, 52, 30, 81, 91, 81, 43, 72, 77, 32, 56, 41, 96, 29, 56, 99, 17, 66, 92, 36, 96, 49, 28, 44, 17, 66, 92, 40, 53, 64, 96, 61, 13, 31, 71, 99, 42, 24, 79, 34, 96, 12, 41, 87, 13, 12, 28, 62, 95, 60, 34, 73, 75, 89, 12, 79, 67, 55, 46, 41, 66, 36, 32, 15, 77, 73, 24, 91, 16, 44, 10, 86, 91, 95, 55, 90, 94, 26, 55, 61, 58, 45, 25, 95, 89, 85, 96, 85, 52, 87, 91, 22, 8, 40, 20, 18, 16, 88, 51, 35, 15, 25, 32, 68, 39, 15, 33, 17, 6, 67, 47, 46, 88, 77, 60, 100, 29, 23, 71, 26, 67, 13, 27, 83, 93, 67, 89, 11, 97, 89, 18, 27, 46, 75, 39, 23, 19, 3, 27, 80, 99, 87, 77, 68, 62, 98, 18, 6, 38, 24, 66, 57, 12, 26, 50, 81, 91, 72, 95, 15, 35, 95, 90, 69, 12, 49, 24, 71, 39, 3, 31, 7, 37, 3, 63, 1, 49, 45, 5, 58, 19, 85, 34, 67, 54, 33, 31, 4, 10, 93, 60, 54, 60, 32, 97, 67, 11, 83, 21, 48, 25, 38, 84, 18, 66, 83, 89, 83, 34, 11, 52, 33, 90, 7, 41, 40, 29, 63, 2, 0, 42]
last_save: 301

Gen:2001
last_save: 301
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.7777777777777778
TestFitness:0.5555555555555556
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],+022892.0804).all():
      return False
    else:
      return True
  def adf1(index):
    if np.less(x[index],-500175.7347).all():
      return False
    else:
      return False
  def adf2(index):
    if np.equal(x[index],-264982.6679).all():
      return True
    else:
      return True
  def adf3(index):
    if np.less(x[index],-714448.6866).all():
      return False
    else:
      return False
  def adf4(index):
    if np.less(rlog(x[index]),+671525.9257).all():
      return False
    else:
      return True
  def adf5(index):
    if np.greater(x[index],+822008.8015).all():
      return True
    else:
      return False
  def adf6(index):
    if np.greater(x[index],-901874.5811).all():
      return True
    else:
      return True
  def adf7(index):
    if np.equal(np.sin(x[index]),+350279.8202).all():
      return True
    else:
      return True
  def adf8(index):
    if np.less(psqrt(x[index]),+997500.9382).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*-642.801, adf1(1)*-260.044, adf2(2)*+347.654, adf3(3)*-017.684, adf4(4)*+919.455, adf5(5)*+573.017, adf6(6)*-134.247, adf7(7)*+816.929, adf8(8)*+733.629], [0, 1, 0, 1, 1, 0, 1, 0], 967.026)
result=p(); 0.7777777777777778
IndLenGenome:414
IndGenome:[66, 22, 26, 22, 12, 33, 38, 53, 34, 28, 3, 76, 58, 96, 45, 16, 26, 39, 36, 91, 43, 70, 46, 76, 37, 59, 34, 86, 34, 6, 71, 86, 9, 84, 98, 50, 23, 100, 83, 87, 17, 59, 14, 95, 28, 57, 17, 13, 33, 87, 87, 13, 9, 7, 69, 58, 99, 6, 19, 32, 27, 64, 43, 14, 25, 60, 81, 86, 90, 29, 6, 10, 42, 10, 78, 27, 82, 90, 80, 48, 22, 80, 80, 22, 1, 71, 80, 78, 36, 29, 39, 32, 83, 60, 88, 43, 97, 93, 79, 69, 40, 78, 43, 62, 21, 33, 35, 21, 38, 29, 23, 27, 35, 24, 80, 30, 48, 20, 23, 52, 57, 22, 18, 77, 41, 50, 14, 86, 18, 25, 5, 81, 18, 64, 51, 70, 71, 65, 10, 77, 60, 92, 17, 34, 64, 74, 78, 67, 58, 35, 32, 71, 85, 25, 84, 45, 28, 40, 60, 14, 18, 47, 14, 10, 19, 22, 60, 69, 74, 48, 31, 79, 31, 98, 57, 68, 26, 74, 84, 77, 48, 59, 87, 26, 51, 38, 57, 77, 83, 18, 43, 56, 81, 39, 83, 25, 18, 66, 69, 60, 17, 16, 76, 51, 25, 32, 16, 22, 91, 19, 90, 78, 99, 19, 86, 90, 32, 84, 73, 5, 97, 25, 19, 22, 77, 23, 57, 27, 35, 51, 12, 27, 25, 92, 87, 24, 17, 36, 44, 86, 20, 29, 65, 17, 42, 39, 98, 78, 64, 77, 81, 83, 81, 22, 12, 81, 82, 10, 36, 42, 42, 81, 36, 36, 91, 39, 98, 62, 19, 75, 56, 59, 57, 76, 17, 14, 58, 7, 40, 76, 65, 19, 24, 88, 95, 93, 82, 27, 94, 4, 27, 38, 68, 96, 76, 91, 86, 89, 100, 91, 50, 10, 29, 69, 93, 32, 46, 14, 79, 97, 33, 74, 2, 68, 59, 5, 28, 63, 42, 52, 57, 55, 4, 71, 95, 28, 54, 30, 92, 89, 56, 7, 73, 33, 33, 88, 59, 55, 64, 52, 83, 84, 0, 11, 55, 50, 63, 12, 55, 19, 12, 69, 53, 58, 62, 97, 63, 100, 0, 83, 51, 1, 48, 54, 58, 80, 79, 89, 52, 40, 37, 53, 32, 44, 66, 95, 20, 10, 0, 73, 8, 94, 90, 27, 34, 91, 21, 67, 95, 66, 42, 63, 76, 32, 79, 38, 6, 97, 100, 86, 48, 32, 55, 0, 15, 72, 42, 81, 89, 100, 73, 98, 42, 84]
last_save: 302

Gen:2001
last_save: 302
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:1.0
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],-496239.0000).all():
      return True
    else:
      return True
  def adf1(index):
    if np.less(psqrt(x[index]),+733129.1251).all():
      return True
    else:
      return True
  def adf2(index):
    if np.equal(sigmoid(x[index]),+016762.8128).all():
      return True
    else:
      return True
  def adf3(index):
    if np.equal(x[index],-554918.9436).all():
      return True
    else:
      return False
  def adf4(index):
    if np.equal(x[index],-288954.7102).all():
      return False
    else:
      return True
  def adf5(index):
    if np.equal(x[index],+305469.4773).all():
      return True
    else:
      return True
  def adf6(index):
    if np.greater(x[index],-955727.5505).all():
      return False
    else:
      return False
  def adf7(index):
    if np.equal(np.cos(x[index]),+650756.0751).all():
      return False
    else:
      return False
  def adf8(index):
    if np.equal(x[index],+104923.4098).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+571.888, adf1(1)*-329.618, adf2(2)*+112.073, adf3(3)*-033.891, adf4(4)*+183.660, adf5(5)*+388.262, adf6(6)*-764.088, adf7(7)*+416.689, adf8(8)*+769.538], [1, 1, 0, 1, 1, 1, 1, 0], 799.037)
result=p(); 0.6666666666666666
IndLenGenome:414
IndGenome:[94, 59, 10, 75, 84, 46, 83, 89, 87, 80, 43, 40, 85, 67, 63, 89, 4, 97, 37, 44, 57, 29, 56, 9, 35, 70, 20, 80, 98, 39, 67, 55, 55, 61, 45, 50, 30, 10, 31, 93, 97, 57, 30, 32, 47, 9, 6, 55, 53, 6, 64, 79, 47, 66, 89, 9, 64, 85, 95, 25, 96, 41, 14, 67, 46, 61, 59, 59, 49, 43, 44, 48, 46, 17, 72, 85, 76, 37, 83, 37, 41, 85, 38, 49, 90, 33, 47, 59, 18, 25, 62, 11, 80, 54, 15, 47, 24, 23, 12, 45, 70, 77, 88, 22, 46, 69, 62, 36, 62, 91, 39, 95, 11, 48, 27, 82, 62, 76, 93, 8, 77, 8, 95, 57, 77, 47, 12, 51, 4, 23, 46, 65, 51, 40, 58, 46, 78, 85, 50, 56, 93, 79, 38, 51, 21, 32, 44, 99, 48, 52, 89, 49, 58, 13, 10, 46, 48, 86, 97, 19, 10, 2, 7, 17, 88, 30, 35, 64, 55, 4, 58, 56, 75, 26, 73, 88, 26, 57, 79, 4, 66, 27, 18, 41, 93, 75, 10, 41, 90, 70, 72, 16, 45, 23, 16, 69, 54, 13, 26, 45, 61, 74, 39, 72, 38, 53, 48, 98, 81, 73, 54, 32, 40, 15, 93, 92, 65, 89, 88, 81, 12, 98, 79, 75, 4, 33, 26, 97, 36, 92, 74, 52, 52, 18, 26, 91, 88, 38, 78, 41, 10, 77, 14, 84, 19, 63, 72, 19, 42, 21, 51, 36, 88, 55, 15, 45, 67, 10, 10, 51, 59, 50, 26, 13, 63, 66, 52, 17, 12, 25, 39, 61, 71, 77, 23, 41, 91, 35, 19, 41, 99, 91, 66, 31, 62, 21, 46, 83, 65, 47, 10, 53, 51, 80, 61, 76, 20, 21, 14, 46, 35, 57, 25, 33, 27, 40, 93, 2, 6, 89, 85, 28, 56, 54, 16, 36, 14, 34, 9, 63, 45, 32, 23, 59, 10, 4, 11, 41, 41, 45, 61, 29, 21, 92, 10, 32, 31, 72, 41, 62, 40, 43, 5, 92, 95, 53, 16, 73, 79, 57, 15, 61, 31, 72, 15, 67, 15, 38, 59, 93, 85, 27, 86, 39, 55, 0, 75, 67, 19, 65, 24, 91, 80, 96, 41, 24, 69, 45, 34, 60, 60, 87, 20, 81, 95, 99, 86, 34, 13, 67, 24, 70, 92, 60, 32, 40, 68, 91, 93, 78, 35, 6, 6, 13, 0, 83, 52, 92, 24, 46, 62, 24, 14, 9]
last_save: 303

Gen:20
TrainFitness:0.7777777777777778
TestFitness:0.8888888888888888
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],+951971.5771).all():
      if np.less(np.cos(x[index]),-547631.5383).all():
        return False
      else:
        return False
      return False
    else:
      if np.less(x[index],+520847.2438).all():
        return True
      else:
        return True
      return False
  def adf1(index):
    if np.less(np.cos(x[index]),-813590.2600).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(x[index],+136279.5486).all():
      return False
    else:
      return False
  def adf3(index):
    if np.greater(x[index],+245147.8157).all():
      return True
    else:
      return True
  def adf4(index):
    if np.less(x[index],-571089.0019).all():
      return True
    else:
      return True
  def adf5(index):
    if np.equal(x[index],-175495.9950).all():
      if np.equal(x[index],-911801.8676).all():
        if np.less(x[index],+377077.5588).all():
          return False
        else:
          return False
        return True
      else:
        if np.greater(rlog(x[index]),-620769.8836).all():
          return False
        else:
          return False
        return False
      return True
    else:
      if np.greater(x[index],+032231.2106).all():
        return False
      else:
        return True
      return True
  def adf6(index):
    if np.greater(rlog(x[index]),-040256.9487).all():
      return False
    else:
      return True
  def adf7(index):
    if np.less(psqrt(x[index]),-156948.7188).all():
      return False
    else:
      return True
  def adf8(index):
    if np.equal(sigmoid(x[index]),-756784.0730).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*-492.904, adf1(1)*-331.077, adf2(2)*-182.915, adf3(3)*+090.448, adf4(4)*+557.445, adf5(5)*+650.564, adf6(6)*-195.453, adf7(7)*+782.894, adf8(8)*-434.842], [0, 1, 0, 1, 1, 1, 1, 1], 880.719)
result=p(); 0.7777777777777778
IndLenGenome:462
IndGenome:[89, 27, 30, 24, 32, 89, 89, 83, 76, 17, 89, 65, 71, 49, 7, 61, 65, 97, 67, 91, 69, 10, 84, 31, 71, 91, 101, 25, 74, 17, 26, 33, 41, 85, 43, 68, 33, 17, 99, 21, 9, 31, 57, 43, 70, 40, 15, 72, 10, 38, 44, 47, 92, 14, 53, 48, 16, 2, 77, 32, 47, 79, 38, 37, 10, 73, 9, 88, 11, 33, 95, 69, 50, 32, 56, 60, 80, 75, 37, 21, 21, 87, 71, 42, 2, 83, 31, 73, 56, 32, 57, 59, 55, 54, 78, 56, 17, 29, 53, 45, 84, 25, 73, 14, 69, 52, 94, 15, 21, 64, 27, 78, 61, 5, 17, 18, 56, 44, 63, 76, 63, 51, 3, 58, 55, 87, 1, 80, 18, 79, 40, 60, 71, 79, 16, 72, 11, 80, 65, 86, 85, 85, 97, 85, 31, 57, 15, 84, 39, 35, 59, 19, 45, 70, 72, 48, 35, 7, 22, 41, 50, 59, 11, 21, 28, 10, 31, 18, 46, 57, 36, 47, 61, 15, 21, 90, 94, 83, 97, 97, 30, 97, 7, 65, 65, 78, 78, 99, 79, 74, 69, 87, 20, 4, 36, 75, 57, 96, 82, 40, 17, 66, 29, 68, 28, 13, 26, 79, 5, 23, 58, 11, 87, 91, 36, 14, 19, 10, 43, 92, 82, 13, 81, 92, 61, 50, 56, 57, 44, 46, 90, 45, 75, 18, 58, 88, 33, 85, 80, 24, 60, 12, 35, 16, 59, 24, 18, 57, 71, 48, 28, 63, 58, 10, 95, 80, 85, 60, 61, 35, 16, 59, 24, 18, 57, 71, 48, 28, 63, 58, 10, 55, 38, 2, 57, 63, 19, 29, 27, 25, 26, 47, 58, 84, 10, 57, 63, 90, 65, 91, 89, 30, 99, 53, 61, 94, 19, 62, 39, 30, 14, 94, 93, 68, 73, 53, 11, 40, 27, 67, 53, 29, 9, 61, 18, 82, 79, 51, 25, 25, 18, 33, 70, 89, 30, 64, 34, 38, 38, 0, 87, 35, 85, 87, 64, 34, 5, 9, 40, 72, 56, 75, 80, 65, 56, 14, 4, 25, 29, 61, 29, 95, 14, 95, 33, 60, 44, 30, 17, 28, 62, 38, 89, 84, 2, 95, 45, 84, 83, 44, 78, 64, 12, 93, 2, 87, 58, 19, 9, 99, 5, 7, 72, 38, 38, 0, 97, 91, 99, 59, 36, 12, 68, 84, 17, 28, 83, 36, 40, 4, 73, 52, 76, 94, 88, 84, 30, 66, 50, 9, 84, 21, 81, 28, 32, 0, 1, 36, 10, 49, 27, 59, 65, 99, 23, 26, 45, 32, 60, 87, 92, 29, 67, 13, 99, 99, 11, 91, 16, 50, 83, 31, 94, 37, 32, 3, 97, 52, 26, 19, 89, 37, 59, 100, 28, 51, 40, 61, 51, 3, 95, 51]
last_save: 303

Gen:2020
last_save: 303
Exit:FalseFalseTrue