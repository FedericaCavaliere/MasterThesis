Dataset:Spiral/Full.csv
FS:False
Seed:1234
Size:3

Gen:1
TrainFitness:1.0
TestFitness:0.5555555555555556
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(np.cos(x[index]),+569986.4211).all():
      return True
    else:
      return True
  def adf1(index):
    if np.equal(x[index],-279715.5946).all():
      return False
    else:
      return False
  def adf2(index):
    if np.less(np.sin(x[index]),-043077.7925).all():
      return True
    else:
      return True
  def adf3(index):
    if np.less(np.sin(x[index]),-829535.8043).all():
      return True
    else:
      return False
  def adf4(index):
    if np.greater(x[index],+121073.6987).all():
      return True
    else:
      return True
  def adf5(index):
    if np.equal(sigmoid(x[index]),+635824.1043).all():
      return False
    else:
      return True
  def adf6(index):
    if np.less(np.tanh(x[index]),-913789.1785).all():
      return True
    else:
      return True
  def adf7(index):
    if np.equal(x[index],-532158.7009).all():
      return False
    else:
      return False
  def adf8(index):
    if np.greater(x[index],-678940.1170).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+473.384, adf1(1)*+837.077, adf2(2)*-140.492, adf3(3)*+635.471, adf4(4)*+646.810, adf5(5)*+560.150, adf6(6)*-863.207, adf7(7)*+449.745, adf8(8)*-679.460], [0, 0, 1, 1, 0, 1, 0, 1], 896.721)
result=p(); 1.0
IndLenGenome:417
IndGenome:[51, 55, 11, 34, 11, 17, 63, 94, 22, 8, 10, 95, 25, 49, 11, 59, 25, 48, 99, 81, 11, 75, 59, 58, 55, 70, 60, 91, 33, 81, 92, 16, 40, 54, 72, 57, 40, 42, 13, 46, 55, 20, 74, 5, 96, 18, 74, 70, 45, 82, 84, 37, 90, 35, 22, 38, 47, 83, 73, 37, 53, 71, 61, 32, 53, 31, 59, 92, 32, 97, 32, 21, 22, 39, 21, 50, 26, 99, 34, 69, 82, 60, 99, 43, 21, 16, 98, 49, 98, 83, 72, 11, 23, 77, 96, 71, 27, 74, 10, 20, 99, 36, 84, 45, 70, 78, 62, 64, 63, 47, 99, 19, 59, 57, 21, 36, 86, 90, 66, 11, 69, 13, 49, 67, 96, 65, 68, 57, 18, 57, 89, 40, 68, 68, 84, 17, 71, 33, 44, 2, 78, 59, 51, 73, 79, 89, 71, 99, 14, 54, 49, 27, 76, 75, 99, 19, 47, 46, 48, 58, 18, 58, 54, 46, 91, 56, 8, 58, 79, 71, 45, 44, 51, 24, 12, 57, 52, 27, 70, 19, 82, 19, 95, 90, 65, 6, 61, 82, 97, 98, 58, 56, 83, 6, 32, 84, 13, 61, 80, 87, 61, 48, 41, 60, 40, 65, 48, 15, 61, 47, 60, 18, 85, 61, 56, 36, 53, 63, 81, 63, 89, 97, 77, 94, 40, 17, 36, 1, 67, 91, 15, 61, 72, 40, 67, 96, 36, 40, 79, 14, 89, 95, 64, 77, 54, 49, 79, 79, 65, 30, 96, 75, 39, 73, 23, 74, 79, 15, 34, 31, 53, 43, 28, 86, 78, 65, 12, 38, 27, 74, 57, 83, 54, 98, 22, 64, 10, 83, 33, 79, 74, 88, 46, 36, 4, 13, 51, 83, 93, 15, 98, 8, 3, 92, 22, 94, 99, 58, 25, 68, 10, 16, 49, 91, 79, 65, 57, 84, 16, 36, 79, 21, 99, 88, 61, 81, 52, 8, 27, 32, 29, 91, 12, 92, 71, 95, 70, 7, 91, 35, 31, 50, 82, 91, 22, 0, 1, 23, 50, 36, 15, 21, 2, 4, 9, 74, 74, 42, 43, 64, 46, 5, 90, 39, 74, 73, 32, 33, 91, 92, 45, 54, 89, 7, 89, 86, 35, 84, 43, 31, 86, 58, 65, 27, 86, 2, 19, 94, 78, 63, 50, 8, 69, 85, 63, 99, 29, 68, 41, 89, 0, 65, 98, 22, 14, 36, 92, 52, 83, 23, 40, 92, 22, 3, 97, 61, 31, 69, 38, 45, 67, 98, 50, 96, 57, 42, 75]
last_save: 301

Gen:1
last_save: 301
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.8888888888888888
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],-206834.7275).all():
      return False
    else:
      return False
  def adf1(index):
    if np.greater(sigmoid(x[index]),+145910.7720).all():
      return True
    else:
      return False
  def adf2(index):
    if np.less(x[index],-128693.9283).all():
      return True
    else:
      return False
  def adf3(index):
    if np.less(x[index],+011472.3786).all():
      return False
    else:
      return True
  def adf4(index):
    if np.greater(rlog(x[index]),+165222.5836).all():
      return True
    else:
      return False
  def adf5(index):
    if np.equal(sigmoid(x[index]),+022834.8935).all():
      return True
    else:
      return True
  def adf6(index):
    if np.less(psqrt(x[index]),-835895.9849).all():
      return True
    else:
      return False
  def adf7(index):
    if np.less(x[index],+135565.1763).all():
      return False
    else:
      return False
  def adf8(index):
    if np.equal(np.tanh(x[index]),-804614.6631).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+269.786, adf1(1)*-417.997, adf2(2)*+999.259, adf3(3)*+294.750, adf4(4)*-771.732, adf5(5)*-019.280, adf6(6)*-998.676, adf7(7)*-700.447, adf8(8)*+049.829], [0, 0, 1, 1, 0, 1, 1, 1], 149.888)
result=p(); 0.6666666666666666
IndLenGenome:417
IndGenome:[68, 5, 14, 28, 44, 15, 34, 19, 70, 27, 59, 68, 29, 45, 52, 23, 97, 58, 33, 92, 55, 96, 68, 92, 93, 61, 66, 13, 41, 83, 75, 59, 37, 90, 39, 61, 79, 69, 93, 44, 97, 87, 13, 32, 15, 94, 21, 47, 12, 43, 28, 48, 20, 35, 16, 63, 31, 45, 51, 35, 15, 48, 29, 42, 26, 18, 69, 85, 89, 29, 79, 68, 23, 87, 51, 34, 38, 48, 50, 18, 87, 29, 97, 47, 81, 91, 98, 29, 59, 88, 12, 10, 92, 76, 17, 64, 82, 64, 31, 17, 60, 62, 87, 15, 94, 71, 28, 2, 55, 39, 61, 79, 89, 56, 62, 15, 71, 25, 98, 18, 84, 38, 35, 10, 91, 88, 88, 19, 21, 78, 90, 36, 57, 67, 34, 30, 20, 24, 52, 35, 72, 66, 50, 46, 15, 58, 57, 66, 90, 22, 38, 14, 93, 47, 49, 74, 67, 61, 78, 29, 45, 81, 20, 63, 12, 17, 84, 19, 99, 2, 98, 94, 28, 51, 93, 40, 49, 37, 39, 86, 23, 72, 22, 23, 50, 63, 70, 35, 38, 79, 63, 88, 84, 60, 66, 49, 40, 59, 34, 22, 62, 18, 98, 19, 27, 88, 57, 22, 32, 85, 14, 59, 15, 16, 25, 88, 49, 32, 57, 39, 56, 52, 45, 88, 20, 21, 37, 92, 45, 39, 92, 17, 42, 13, 95, 39, 21, 62, 16, 44, 56, 47, 91, 64, 39, 90, 93, 60, 96, 36, 42, 41, 38, 38, 92, 91, 79, 31, 12, 98, 2, 33, 18, 88, 85, 41, 47, 91, 35, 85, 96, 56, 16, 63, 43, 47, 46, 60, 90, 64, 18, 35, 18, 34, 42, 80, 69, 8, 88, 83, 66, 37, 56, 40, 32, 57, 73, 94, 32, 16, 78, 68, 85, 12, 48, 22, 89, 97, 47, 88, 6, 75, 5, 98, 21, 28, 10, 62, 51, 6, 83, 32, 23, 35, 91, 57, 72, 65, 94, 0, 92, 80, 100, 53, 36, 50, 72, 97, 79, 11, 71, 35, 10, 56, 21, 86, 16, 77, 25, 10, 98, 85, 20, 61, 65, 85, 91, 42, 96, 37, 25, 80, 37, 97, 39, 82, 17, 97, 18, 45, 41, 23, 83, 18, 4, 89, 84, 66, 65, 68, 82, 85, 78, 63, 47, 45, 51, 27, 68, 33, 60, 74, 47, 81, 89, 79, 22, 90, 89, 25, 96, 31, 50, 39, 87, 9, 83, 36, 23, 13, 52, 38, 91, 77, 1, 12, 71]
last_save: 302

Gen:39
TrainFitness:0.7777777777777778
TestFitness:0.7777777777777778
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],-470546.9478).all():
      return False
    else:
      return True
  def adf1(index):
    if np.equal(psqrt(x[index]),+374948.5979).all():
      return True
    else:
      return False
  def adf2(index):
    if np.equal(x[index],+838066.9339).all():
      return True
    else:
      return False
  def adf3(index):
    if np.less(x[index],-843615.0406).all():
      return True
    else:
      return True
  def adf4(index):
    if np.greater(x[index],+974566.9339).all():
      return True
    else:
      return False
  def adf5(index):
    if np.less(x[index],-143615.0406).all():
      return True
    else:
      return True
  def adf6(index):
    if np.greater(x[index],+005777.9543).all():
      return False
    else:
      return True
  def adf7(index):
    if np.equal(x[index],-047181.7175).all():
      return True
    else:
      return False
  def adf8(index):
    if np.equal(x[index],-544076.7128).all():
      if np.less(x[index],+973333.0626).all():
        if np.less(np.sin(x[index]),+277199.3087).all():
          return True
        else:
          return False
        return False
      else:
        if np.greater(psqrt(x[index]),-072780.0589).all():
          return True
        else:
          return True
        return True
      return True
    else:
      if np.equal(x[index],-743286.9671).all():
        return True
      else:
        return False
      return False
  return multiple_operation([adf0(0)*+256.714, adf1(1)*-829.343, adf2(2)*-260.236, adf3(3)*+923.319, adf4(4)*-237.492, adf5(5)*-315.190, adf6(6)*+727.326, adf7(7)*-460.632, adf8(8)*-779.543], [0, 0, 1, 1, 1, 0, 1, 0], 471.817)
result=p(); 0.7777777777777778
IndLenGenome:457
IndGenome:[85, 78, 13, 73, 76, 17, 40, 37, 35, 74, 37, 80, 35, 4, 86, 69, 74, 57, 78, 59, 8, 94, 67, 44, 92, 59, 62, 70, 74, 43, 67, 64, 59, 84, 98, 95, 29, 97, 79, 8, 59, 11, 95, 77, 87, 10, 64, 53, 78, 73, 8, 30, 16, 6, 29, 13, 73, 29, 68, 57, 94, 37, 82, 25, 77, 77, 88, 68, 14, 43, 76, 71, 95, 90, 74, 80, 96, 12, 34, 32, 33, 30, 19, 58, 46, 18, 69, 37, 14, 75, 16, 6, 29, 13, 73, 29, 68, 57, 94, 37, 82, 25, 77, 77, 88, 51, 14, 43, 76, 71, 95, 90, 74, 80, 96, 12, 70, 32, 33, 30, 19, 58, 46, 18, 0, 20, 95, 27, 97, 47, 69, 95, 34, 73, 83, 64, 84, 25, 53, 67, 74, 75, 86, 80, 44, 67, 31, 8, 41, 67, 91, 57, 5, 96, 27, 74, 34, 72, 47, 29, 11, 57, 85, 75, 74, 64, 70, 27, 76, 27, 91, 32, 38, 82, 10, 43, 39, 49, 62, 88, 19, 47, 23, 73, 23, 3, 80, 36, 72, 36, 25, 73, 20, 18, 32, 54, 71, 92, 27, 67, 91, 69, 99, 33, 50, 68, 37, 84, 43, 67, 91, 9, 16, 23, 61, 37, 37, 20, 77, 92, 57, 48, 10, 30, 55, 48, 99, 100, 22, 84, 52, 7, 65, 73, 31, 87, 44, 67, 44, 3, 82, 8, 46, 59, 56, 87, 31, 10, 5, 67, 8, 59, 28, 58, 33, 32, 95, 36, 97, 81, 84, 62, 89, 82, 68, 22, 69, 63, 24, 73, 85, 53, 14, 92, 16, 50, 92, 93, 66, 79, 82, 82, 99, 82, 73, 93, 81, 89, 90, 91, 96, 52, 43, 37, 24, 39, 12, 83, 95, 25, 63, 51, 85, 81, 99, 60, 40, 22, 87, 57, 62, 77, 63, 72, 66, 29, 23, 93, 74, 6, 60, 26, 23, 92, 20, 95, 95, 97, 47, 69, 95, 34, 73, 83, 64, 84, 25, 69, 67, 74, 75, 86, 80, 44, 67, 31, 8, 41, 67, 91, 57, 98, 96, 27, 74, 34, 72, 91, 29, 86, 57, 85, 75, 74, 90, 70, 88, 59, 9, 58, 96, 68, 44, 94, 39, 16, 68, 38, 55, 56, 44, 56, 27, 62, 10, 62, 69, 56, 71, 82, 81, 14, 17, 57, 88, 87, 61, 89, 19, 47, 92, 63, 78, 52, 30, 39, 43, 16, 83, 4, 12, 95, 29, 77, 77, 24, 51, 57, 80, 11, 98, 88, 41, 47, 6, 48, 67, 29, 72, 93, 77, 44, 4, 81, 88, 0, 22, 25, 62, 7, 62, 98, 8, 25, 81, 80, 23, 30, 53, 74, 1, 21, 89, 54, 97, 35, 77]
last_save: 302

Gen:2039
last_save: 302
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.5555555555555556
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],+034136.5771).all():
      return True
    else:
      return False
  def adf1(index):
    if np.less(sigmoid(x[index]),-522088.2811).all():
      return False
    else:
      return True
  def adf2(index):
    if np.equal(x[index],-480156.4259).all():
      return False
    else:
      return True
  def adf3(index):
    if np.greater(x[index],+790687.1888).all():
      return True
    else:
      return True
  def adf4(index):
    if np.less(x[index],+491474.8873).all():
      return True
    else:
      return False
  def adf5(index):
    if np.less(rlog(x[index]),+585076.1101).all():
      return True
    else:
      return False
  def adf6(index):
    if np.less(x[index],+008646.5409).all():
      return False
    else:
      return True
  def adf7(index):
    if np.equal(x[index],-056212.8952).all():
      return False
    else:
      return False
  def adf8(index):
    if np.equal(x[index],-488259.2313).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+963.651, adf1(1)*+603.828, adf2(2)*-410.567, adf3(3)*+382.672, adf4(4)*+521.834, adf5(5)*-615.082, adf6(6)*+928.488, adf7(7)*+914.573, adf8(8)*+507.609], [0, 0, 0, 0, 0, 1, 0, 1], 604.892)
result=p(); 0.6666666666666666
IndLenGenome:412
IndGenome:[65, 7, 33, 51, 99, 47, 52, 83, 90, 45, 61, 42, 42, 33, 21, 94, 13, 42, 71, 86, 37, 69, 79, 59, 85, 26, 5, 62, 75, 99, 37, 17, 45, 98, 18, 87, 12, 24, 98, 39, 64, 78, 19, 2, 33, 47, 31, 68, 44, 78, 10, 7, 90, 71, 77, 46, 25, 62, 46, 59, 30, 18, 47, 12, 12, 25, 44, 41, 3, 36, 35, 68, 62, 95, 75, 75, 82, 38, 50, 87, 40, 28, 21, 22, 10, 77, 58, 49, 62, 98, 31, 93, 23, 78, 96, 39, 63, 14, 84, 69, 43, 62, 42, 43, 30, 13, 87, 3, 66, 46, 30, 45, 46, 90, 52, 74, 45, 65, 39, 6, 65, 82, 34, 32, 38, 99, 96, 18, 57, 84, 94, 42, 86, 54, 14, 18, 48, 18, 85, 30, 19, 97, 50, 62, 68, 28, 26, 69, 37, 38, 48, 7, 89, 38, 70, 97, 11, 78, 72, 60, 45, 75, 81, 40, 17, 48, 98, 82, 10, 34, 45, 21, 78, 67, 5, 31, 80, 23, 17, 86, 73, 90, 95, 94, 65, 19, 12, 84, 58, 55, 68, 31, 56, 11, 57, 75, 99, 9, 73, 82, 41, 91, 51, 57, 4, 76, 60, 48, 56, 34, 52, 96, 30, 85, 51, 52, 88, 46, 48, 40, 75, 98, 45, 11, 60, 62, 10, 80, 12, 21, 76, 95, 17, 29, 62, 69, 24, 55, 80, 82, 80, 64, 35, 70, 92, 75, 66, 51, 87, 74, 95, 45, 26, 61, 76, 87, 78, 49, 81, 63, 26, 82, 98, 95, 87, 62, 33, 73, 63, 11, 13, 89, 7, 54, 78, 36, 91, 16, 29, 87, 61, 67, 46, 23, 61, 99, 60, 11, 39, 74, 21, 4, 47, 91, 21, 11, 1, 20, 37, 70, 49, 73, 33, 39, 55, 91, 35, 70, 67, 99, 69, 7, 25, 85, 91, 12, 31, 87, 59, 45, 87, 83, 55, 58, 28, 33, 60, 39, 49, 3, 87, 85, 94, 100, 46, 29, 39, 72, 63, 70, 1, 47, 26, 97, 67, 13, 72, 56, 21, 49, 33, 45, 8, 56, 30, 95, 23, 60, 37, 44, 76, 82, 56, 48, 36, 51, 26, 36, 48, 6, 88, 9, 3, 68, 74, 54, 14, 51, 94, 69, 36, 51, 95, 70, 48, 30, 18, 1, 78, 75, 61, 55, 68, 9, 52, 88, 47, 88, 57, 61, 16, 25, 6, 22, 60, 68, 43, 28, 59, 27, 17, 99]
last_save: 303

Gen:18
TrainFitness:0.7777777777777778
TestFitness:0.3333333333333333
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],+352772.1929).all():
      if np.greater(x[index],-296979.5653).all():
        return False
      else:
        return False
      return True
    else:
      if np.less(np.cos(x[index]),-783661.9336).all():
        return True
      else:
        return True
      return False
  def adf1(index):
    if np.less(sigmoid(x[index]),+554666.0417).all():
      return True
    else:
      return False
  def adf2(index):
    if np.greater(x[index],-331595.2665).all():
      return True
    else:
      return False
  def adf3(index):
    if np.equal(x[index],+165265.4264).all():
      return False
    else:
      return True
  def adf4(index):
    if np.greater(x[index],+211499.9792).all():
      return False
    else:
      return False
  def adf5(index):
    if np.greater(x[index],+005237.8470).all():
      return False
    else:
      return True
  def adf6(index):
    if np.equal(x[index],+033636.4482).all():
      return False
    else:
      return False
  def adf7(index):
    if np.equal(np.tanh(x[index]),-280580.2655).all():
      return False
    else:
      return True
  def adf8(index):
    if np.greater(x[index],-769333.9215).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*-784.891, adf1(1)*+729.181, adf2(2)*+374.358, adf3(3)*+370.507, adf4(4)*-429.852, adf5(5)*+236.159, adf6(6)*+641.377, adf7(7)*+887.158, adf8(8)*-551.640], [0, 1, 0, 1, 0, 0, 1, 1], 075.059)
result=p(); 0.7777777777777778
IndLenGenome:395
IndGenome:[92, 76, 65, 20, 1, 10, 97, 47, 70, 38, 43, 75, 62, 77, 77, 12, 91, 19, 2, 69, 79, 30, 15, 67, 71, 58, 82, 59, 36, 49, 47, 99, 75, 86, 85, 63, 77, 91, 34, 45, 73, 18, 79, 58, 79, 62, 77, 58, 93, 86, 16, 51, 9, 73, 63, 16, 72, 8, 45, 93, 5, 76, 20, 75, 77, 62, 5, 15, 25, 44, 76, 86, 46, 50, 14, 91, 67, 76, 53, 95, 37, 27, 5, 88, 59, 26, 23, 63, 61, 85, 79, 95, 52, 16, 46, 85, 22, 83, 71, 37, 98, 29, 85, 74, 78, 11, 66, 45, 12, 96, 85, 44, 2, 16, 54, 33, 56, 69, 99, 36, 63, 96, 10, 65, 12, 31, 71, 54, 79, 19, 59, 87, 59, 12, 69, 99, 81, 13, 48, 5, 48, 94, 37, 50, 60, 65, 42, 33, 47, 48, 74, 97, 70, 11, 58, 30, 55, 68, 35, 94, 64, 80, 50, 93, 53, 46, 63, 96, 44, 84, 38, 32, 27, 89, 9, 89, 47, 76, 20, 68, 87, 97, 52, 98, 60, 65, 78, 10, 42, 46, 25, 95, 73, 54, 32, 65, 15, 33, 52, 13, 15, 27, 16, 49, 53, 13, 83, 49, 52, 31, 45, 83, 65, 85, 68, 89, 95, 98, 17, 38, 4, 18, 69, 31, 24, 76, 46, 37, 2, 39, 31, 68, 21, 73, 20, 91, 23, 87, 54, 43, 35, 78, 50, 32, 14, 53, 67, 30, 25, 50, 97, 20, 47, 33, 84, 72, 29, 28, 5, 72, 33, 32, 60, 92, 53, 66, 91, 45, 49, 45, 50, 81, 86, 4, 31, 63, 67, 7, 51, 46, 39, 58, 18, 57, 81, 65, 58, 65, 79, 93, 75, 25, 11, 36, 94, 90, 69, 28, 53, 64, 17, 48, 68, 21, 25, 24, 70, 47, 5, 60, 55, 9, 64, 90, 60, 56, 17, 39, 86, 71, 96, 65, 58, 9, 73, 82, 67, 32, 54, 94, 69, 56, 67, 95, 4, 33, 14, 27, 63, 35, 26, 73, 15, 27, 93, 91, 24, 60, 46, 71, 34, 60, 28, 48, 51, 65, 79, 94, 59, 24, 82, 70, 86, 85, 37, 37, 97, 18, 62, 96, 86, 18, 69, 0, 2, 43, 54, 37, 84, 85, 58, 0, 81, 87, 85, 14, 35, 42, 8, 55, 16, 82, 45, 66, 79]
last_save: 303

Gen:2018
last_save: 303
Exit:FalseFalseTrue