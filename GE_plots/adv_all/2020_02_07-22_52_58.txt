Dataset:Meander/Full.csv
FS:True
Seed:1234
Size:3

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(np.tanh(x[index]),-375534.9293).all():
      return False
    else:
      return True
  def adf1(index):
    if np.less(np.sin(x[index]),+563112.7570).all():
      return False
    else:
      return True
  def adf2(index):
    if np.less(np.cos(x[index]),+055765.2091).all():
      return True
    else:
      return True
  def adf3(index):
    if np.equal(x[index],-978485.0336).all():
      return True
    else:
      return False
  def adf4(index):
    if np.less(x[index],-608515.3032).all():
      return False
    else:
      return False
  def adf7(index):
    if np.less(np.sin(x[index]),-370324.9116).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+951.154, adf1(1)*+223.368, adf2(2)*-813.732, adf3(3)*+422.715, adf4(4)*-304.499, adf7(7)*-448.128], [1, 0, 0, 1, 1], 279.177)
result=p(); 0.8333333333333334
IndLenGenome:285
IndGenome:[68, 89, 19, 11, 30, 89, 31, 72, 51, 57, 79, 30, 7, 62, 83, 83, 19, 83, 44, 20, 70, 89, 45, 42, 42, 93, 60, 91, 21, 33, 35, 50, 53, 29, 95, 1, 86, 15, 14, 35, 77, 97, 85, 45, 51, 59, 35, 21, 68, 82, 19, 75, 91, 64, 98, 55, 25, 28, 19, 46, 84, 17, 77, 62, 43, 49, 65, 59, 90, 64, 39, 39, 84, 44, 13, 13, 89, 32, 87, 91, 87, 21, 63, 38, 60, 22, 30, 53, 51, 91, 60, 86, 34, 31, 90, 43, 46, 31, 42, 62, 50, 57, 47, 98, 50, 69, 11, 84, 23, 34, 91, 23, 71, 98, 89, 42, 19, 85, 69, 58, 80, 25, 86, 22, 34, 16, 93, 59, 13, 55, 80, 51, 29, 14, 42, 64, 53, 80, 95, 21, 55, 17, 94, 67, 48, 77, 15, 66, 75, 65, 49, 92, 30, 73, 83, 73, 72, 34, 46, 91, 12, 62, 75, 97, 23, 71, 54, 98, 22, 91, 22, 87, 88, 78, 15, 27, 29, 10, 43, 92, 21, 75, 46, 45, 34, 67, 73, 48, 42, 25, 82, 68, 54, 48, 68, 59, 79, 0, 100, 65, 19, 1, 48, 45, 92, 28, 26, 63, 40, 29, 38, 12, 11, 40, 25, 44, 19, 35, 55, 28, 50, 81, 43, 8, 10, 8, 99, 68, 67, 39, 41, 90, 82, 75, 73, 31, 75, 41, 34, 61, 82, 1, 70, 32, 31, 48, 99, 27, 80, 62, 100, 30, 43, 76, 74, 5, 100, 68, 79, 44, 15, 82, 61, 53, 5, 1, 57, 15, 92, 81, 4, 85, 76, 72, 33, 2, 32, 13, 26, 24, 1, 78, 91, 90, 61]
last_save: 301

Gen:2001
last_save: 301
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],+677078.9561).all():
      return False
    else:
      return True
  def adf1(index):
    if np.greater(x[index],-811971.0993).all():
      return True
    else:
      return False
  def adf2(index):
    if np.equal(x[index],+959049.6671).all():
      return False
    else:
      return True
  def adf3(index):
    if np.less(x[index],-384960.2800).all():
      return False
    else:
      return True
  def adf4(index):
    if np.greater(x[index],-588542.7185).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(np.cos(x[index]),+776944.1696).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+715.783, adf1(1)*-849.996, adf2(2)*-158.106, adf3(3)*-884.036, adf4(4)*-825.817, adf7(7)*-173.377], [1, 0, 0, 0, 0], 707.775)
result=p(); 0.6666666666666666
IndLenGenome:280
IndGenome:[4, 3, 32, 42, 25, 9, 49, 84, 40, 34, 40, 83, 47, 37, 77, 13, 34, 62, 52, 53, 12, 81, 8, 95, 89, 6, 61, 96, 53, 25, 54, 20, 99, 5, 87, 35, 12, 57, 67, 9, 95, 88, 91, 87, 75, 36, 75, 33, 84, 73, 54, 88, 54, 91, 90, 99, 70, 71, 36, 22, 76, 22, 88, 58, 93, 78, 73, 86, 2, 21, 47, 99, 66, 57, 15, 31, 40, 69, 63, 3, 79, 19, 98, 31, 34, 50, 11, 71, 36, 6, 69, 35, 21, 94, 86, 48, 84, 52, 52, 44, 45, 14, 48, 94, 86, 25, 11, 17, 35, 60, 98, 18, 67, 48, 19, 67, 98, 68, 29, 55, 80, 60, 97, 55, 45, 26, 91, 89, 11, 83, 97, 93, 19, 69, 22, 4, 65, 67, 46, 77, 59, 53, 72, 71, 27, 31, 67, 65, 23, 73, 53, 52, 87, 73, 28, 74, 69, 30, 22, 30, 77, 26, 10, 26, 88, 18, 76, 68, 27, 73, 12, 2, 30, 49, 19, 78, 26, 89, 67, 34, 52, 36, 94, 36, 87, 59, 71, 32, 54, 55, 36, 70, 4, 25, 26, 42, 71, 79, 41, 1, 95, 85, 100, 62, 53, 33, 46, 52, 21, 71, 80, 42, 64, 62, 4, 44, 68, 54, 10, 22, 90, 77, 78, 60, 26, 61, 59, 59, 21, 83, 1, 50, 39, 51, 26, 19, 71, 17, 29, 41, 31, 4, 17, 79, 75, 89, 65, 87, 62, 50, 27, 36, 58, 16, 63, 46, 0, 87, 0, 15, 100, 23, 92, 2, 32, 58, 67, 79, 100, 2, 88, 1, 4, 49, 19, 100, 61, 73, 3, 30]
last_save: 302

Gen:3
TrainFitness:0.8333333333333334
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],-603572.5954).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(x[index],-379376.6521).all():
      return False
    else:
      return False
  def adf2(index):
    if np.equal(x[index],-072547.6831).all():
      return True
    else:
      return True
  def adf3(index):
    if np.greater(x[index],+036558.7415).all():
      return False
    else:
      return True
  def adf4(index):
    if np.less(np.tanh(x[index]),-862558.3783).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(x[index],-511881.8759).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*-666.377, adf1(1)*-678.348, adf2(2)*-625.493, adf3(3)*-489.928, adf4(4)*+459.562, adf7(7)*+956.124], [0, 0, 0, 1, 0], 953.143)
result=p(); 0.8333333333333334
IndLenGenome:306
IndGenome:[38, 20, 48, 75, 35, 61, 68, 49, 75, 16, 80, 13, 55, 47, 72, 75, 19, 45, 44, 5, 5, 99, 13, 19, 91, 49, 17, 90, 73, 47, 69, 73, 17, 66, 66, 95, 42, 21, 89, 73, 31, 55, 74, 35, 56, 21, 82, 30, 67, 42, 95, 44, 7, 26, 78, 43, 31, 22, 28, 75, 55, 63, 59, 6, 98, 25, 60, 23, 66, 25, 25, 18, 97, 14, 41, 75, 59, 82, 61, 31, 94, 54, 68, 76, 61, 7, 28, 86, 32, 95, 25, 38, 53, 87, 88, 23, 36, 19, 81, 37, 72, 81, 37, 17, 52, 35, 61, 91, 28, 68, 81, 38, 47, 65, 39, 51, 92, 95, 25, 66, 17, 38, 56, 16, 46, 13, 67, 47, 48, 11, 86, 56, 57, 48, 23, 54, 28, 39, 43, 54, 76, 82, 35, 44, 69, 93, 23, 49, 21, 64, 88, 9, 9, 72, 88, 82, 80, 8, 54, 35, 29, 35, 16, 22, 64, 28, 46, 49, 75, 66, 71, 62, 54, 35, 34, 34, 60, 13, 66, 68, 69, 85, 33, 41, 94, 13, 49, 29, 20, 80, 53, 24, 23, 34, 87, 63, 86, 26, 93, 54, 64, 88, 15, 46, 68, 61, 76, 26, 67, 80, 101, 5, 6, 59, 58, 23, 25, 15, 45, 15, 90, 69, 55, 24, 53, 6, 31, 45, 14, 80, 68, 41, 7, 94, 4, 28, 60, 54, 69, 71, 70, 38, 22, 55, 80, 29, 44, 19, 57, 82, 12, 37, 60, 44, 80, 89, 20, 8, 32, 3, 42, 94, 71, 53, 16, 86, 75, 61, 20, 96, 84, 76, 42, 100, 22, 68, 35, 98, 4, 9, 46, 91, 20, 16, 31, 9, 17, 5, 23, 40, 86, 52, 62, 13, 22, 73, 7, 69, 17, 49, 37, 13, 85, 3, 83, 63]
last_save: 302

Gen:2003
last_save: 302
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:1.0
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(rlog(x[index]),-062274.4933).all():
      return True
    else:
      return False
  def adf1(index):
    if np.less(x[index],+678016.5171).all():
      return True
    else:
      return True
  def adf2(index):
    if np.less(x[index],-220801.4653).all():
      return True
    else:
      return True
  def adf3(index):
    if np.greater(x[index],+668384.2092).all():
      return True
    else:
      return False
  def adf4(index):
    if np.equal(x[index],+684189.5413).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(x[index],+235498.3910).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-426.423, adf1(1)*-913.119, adf2(2)*+408.105, adf3(3)*+201.263, adf4(4)*-145.898, adf7(7)*+468.278], [0, 0, 1, 1, 0], 098.562)
result=p(); 0.6666666666666666
IndLenGenome:280
IndGenome:[5, 98, 49, 86, 12, 33, 73, 38, 70, 23, 42, 99, 55, 15, 93, 86, 82, 49, 31, 64, 16, 95, 5, 97, 5, 86, 44, 25, 20, 85, 66, 68, 43, 82, 87, 30, 58, 89, 76, 19, 62, 41, 77, 3, 87, 29, 16, 80, 48, 84, 22, 98, 71, 75, 44, 59, 85, 73, 21, 86, 52, 19, 45, 42, 32, 91, 43, 73, 59, 33, 21, 99, 10, 20, 11, 79, 62, 97, 36, 83, 88, 19, 22, 94, 56, 18, 67, 82, 71, 98, 34, 89, 4, 14, 38, 15, 30, 83, 30, 94, 84, 12, 21, 16, 27, 19, 65, 58, 9, 44, 54, 82, 98, 39, 45, 61, 23, 7, 8, 92, 52, 66, 75, 69, 94, 61, 82, 78, 43, 39, 33, 78, 60, 67, 89, 51, 14, 18, 60, 52, 12, 13, 74, 99, 31, 43, 32, 83, 96, 61, 33, 81, 86, 9, 31, 60, 50, 30, 86, 48, 78, 30, 9, 73, 88, 69, 55, 96, 92, 45, 76, 40, 27, 88, 85, 46, 74, 81, 10, 62, 75, 48, 60, 42, 57, 14, 14, 33, 35, 47, 86, 76, 14, 44, 80, 3, 95, 17, 96, 80, 88, 19, 17, 19, 21, 19, 93, 45, 89, 79, 50, 41, 24, 46, 91, 83, 85, 48, 36, 7, 11, 92, 81, 22, 74, 32, 49, 19, 55, 25, 83, 2, 91, 18, 95, 57, 74, 80, 41, 40, 45, 43, 32, 93, 71, 34, 63, 41, 71, 29, 98, 7, 30, 1, 32, 78, 42, 89, 18, 62, 35, 19, 32, 59, 35, 73, 27, 97, 26, 39, 86, 30, 45, 83, 97, 66, 98, 10, 81, 93]
last_save: 303

Gen:4
TrainFitness:0.8333333333333334
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],+701944.5714).all():
      return False
    else:
      return False
  def adf1(index):
    if np.equal(sigmoid(x[index]),-681607.5935).all():
      return True
    else:
      return False
  def adf2(index):
    if np.less(x[index],-540828.4142).all():
      if np.less(x[index],-578795.8520).all():
        if np.equal(x[index],+808001.6371).all():
          return False
        else:
          return True
        return True
      else:
        if np.less(x[index],+481827.2849).all():
          return True
        else:
          return True
        return False
      return False
    else:
      if np.greater(x[index],+021735.3109).all():
        if np.equal(x[index],+646471.4732).all():
          return False
        else:
          return True
        return False
      else:
        if np.greater(x[index],-009976.9152).all():
          return False
        else:
          return True
        return True
      return False
  def adf3(index):
    if np.equal(np.tanh(x[index]),-339683.0252).all():
      return True
    else:
      return True
  def adf4(index):
    if np.greater(rlog(x[index]),+710846.6159).all():
      return True
    else:
      return True
  def adf7(index):
    if np.less(np.tanh(x[index]),-109002.2228).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+123.322, adf1(1)*+035.975, adf2(2)*-600.668, adf3(3)*+872.444, adf4(4)*+318.345, adf7(7)*-255.446], [1, 1, 1, 1, 1], 491.797)
result=p(); 0.8333333333333334
IndLenGenome:309
IndGenome:[2, 94, 27, 65, 27, 31, 5, 44, 5, 7, 90, 81, 9, 24, 64, 45, 27, 71, 54, 7, 43, 7, 11, 11, 6, 99, 7, 15, 19, 76, 28, 31, 6, 80, 17, 65, 89, 53, 5, 16, 49, 61, 88, 24, 22, 61, 21, 95, 19, 45, 14, 50, 48, 22, 98, 4, 31, 44, 2, 40, 2, 91, 17, 43, 83, 94, 85, 57, 28, 77, 39, 35, 98, 65, 52, 50, 77, 26, 39, 20, 82, 69, 78, 50, 38, 50, 80, 91, 16, 83, 27, 11, 59, 74, 24, 77, 34, 59, 32, 72, 37, 44, 98, 11, 88, 12, 67, 12, 18, 4, 89, 54, 20, 83, 39, 50, 89, 15, 17, 4, 18, 7, 30, 92, 51, 97, 63, 15, 83, 31, 20, 39, 33, 50, 97, 35, 28, 3, 16, 94, 96, 14, 37, 31, 64, 67, 73, 42, 51, 50, 17, 83, 24, 29, 91, 49, 10, 70, 20, 39, 39, 97, 66, 49, 11, 65, 32, 57, 98, 82, 29, 13, 77, 44, 70, 92, 80, 41, 29, 33, 23, 29, 46, 68, 33, 80, 42, 55, 32, 12, 18, 50, 77, 33, 42, 94, 22, 64, 23, 87, 81, 80, 78, 34, 46, 26, 61, 95, 79, 68, 62, 53, 21, 28, 92, 14, 57, 21, 96, 81, 0, 89, 0, 10, 52, 42, 12, 22, 78, 61, 100, 59, 54, 99, 22, 15, 41, 72, 33, 83, 92, 32, 79, 66, 30, 50, 13, 45, 19, 97, 25, 96, 71, 82, 96, 90, 50, 96, 16, 68, 98, 14, 73, 68, 17, 52, 74, 64, 54, 94, 66, 92, 93, 91, 88, 23, 44, 15, 6, 15, 32, 12, 15, 85, 94, 64, 26, 13, 85, 27, 89, 39, 95, 79, 64, 29, 81, 77, 79, 97, 32, 29, 72, 91, 70, 72, 37, 66, 86]
last_save: 303

Gen:806
TrainFitness:1.0
TestFitness:0.6666666666666666
MaxGenLen:740
Individual: def p():
  def adf0(index):
    if np.greater(x[index],+017778.5131).all():
      return False
    else:
      return True
  def adf1(index):
    if np.greater(x[index],+000012.8155).all():
      return False
    else:
      return True
  def adf2(index):
    if np.equal(np.cos(x[index]),-305482.5133).all():
      return True
    else:
      return False
  def adf3(index):
    if np.greater(x[index],+223986.9970).all():
      return True
    else:
      return True
  def adf4(index):
    if np.less(np.sin(x[index]),-768101.4800).all():
      return True
    else:
      return False
  def adf7(index):
    if np.less(x[index],+912748.6226).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+907.572, adf1(1)*-757.484, adf2(2)*-353.056, adf3(3)*+532.159, adf4(4)*+900.010, adf7(7)*+691.428], [1, 1, 0, 1, 0], 283.801)
result=p(); 1.0
IndLenGenome:600
IndGenome:[45, 29, 12, 19, 18, 29, 52, 54, 32, 40, 51, 37, 27, 47, 18, 15, 91, 53, 1, 7, 2, 89, 7, 30, 7, 6, 42, 16, 50, 80, 70, 20, 21, 82, 18, 1, 35, 55, 37, 8, 69, 61, 8, 28, 31, 70, 91, 75, 83, 50, 65, 24, 98, 42, 35, 81, 63, 73, 58, 83, 39, 31, 72, 37, 44, 98, 70, 62, 12, 3, 99, 18, 26, 89, 19, 7, 40, 64, 62, 68, 15, 82, 4, 18, 14, 37, 7, 57, 36, 28, 31, 70, 31, 44, 98, 50, 100, 24, 57, 12, 35, 4, 63, 73, 58, 83, 39, 31, 72, 37, 44, 98, 36, 62, 22, 76, 99, 70, 26, 89, 19, 12, 75, 39, 50, 47, 15, 17, 12, 68, 39, 100, 47, 15, 17, 4, 18, 14, 56, 7, 90, 83, 85, 83, 80, 45, 6, 23, 20, 42, 65, 73, 42, 51, 15, 29, 57, 68, 82, 19, 40, 10, 80, 41, 0, 44, 6, 20, 66, 49, 11, 24, 32, 58, 96, 29, 29, 96, 77, 50, 10, 72, 58, 83, 28, 80, 51, 54, 41, 44, 18, 44, 91, 53, 30, 63, 80, 70, 67, 5, 82, 18, 79, 10, 55, 76, 37, 8, 69, 94, 8, 28, 31, 12, 70, 66, 25, 63, 18, 24, 35, 55, 92, 37, 8, 69, 61, 8, 28, 31, 70, 70, 71, 83, 50, 65, 56, 42, 16, 83, 80, 45, 19, 23, 71, 36, 65, 73, 42, 51, 92, 29, 46, 68, 54, 69, 95, 59, 54, 82, 40, 82, 95, 13, 44, 18, 73, 15, 29, 46, 68, 64, 19, 40, 10, 80, 41, 0, 44, 6, 4, 66, 13, 90, 11, 55, 92, 37, 55, 74, 98, 95, 89, 15, 59, 45, 39, 50, 47, 15, 31, 72, 37, 44, 98, 36, 62, 22, 30, 75, 70, 26, 89, 19, 12, 40, 39, 50, 47, 15, 17, 4, 18, 14, 37, 7, 90, 42, 85, 83, 53, 45, 19, 23, 20, 59, 65, 73, 42, 51, 15, 29, 35, 68, 52, 5, 16, 49, 61, 87, 24, 22, 61, 21, 95, 19, 45, 21, 50, 48, 22, 98, 4, 58, 44, 2, 40, 2, 91, 17, 43, 83, 94, 85, 57, 28, 77, 39, 35, 98, 65, 52, 50, 77, 26, 39, 20, 82, 69, 78, 50, 38, 44, 98, 11, 88, 22, 67, 12, 18, 4, 89, 54, 20, 83, 39, 50, 53, 15, 17, 4, 66, 7, 30, 39, 51, 97, 63, 15, 83, 31, 20, 39, 33, 50, 11, 35, 28, 3, 16, 94, 96, 14, 37, 31, 64, 67, 73, 42, 51, 50, 17, 83, 24, 29, 91, 49, 10, 70, 20, 39, 97, 97, 66, 49, 11, 65, 32, 57, 98, 82, 29, 13, 77, 44, 70, 92, 80, 4, 29, 33, 23, 29, 46, 68, 33, 80, 42, 55, 32, 12, 18, 50, 77, 33, 42, 94, 22, 64, 23, 87, 81, 80, 78, 34, 46, 26, 61, 95, 79, 68, 62, 53, 39, 28, 92, 14, 57, 21, 96, 81, 0, 89, 0, 10, 52, 42, 12, 22, 78, 61, 100, 59, 54, 99, 22, 15, 41, 72, 33, 83, 92, 32, 79, 66, 30, 50, 13, 45, 19, 97, 25, 96, 71, 82, 96, 90, 50, 96, 16, 68, 98, 14, 73, 68, 17, 52, 74, 64, 54, 94, 66, 92, 93, 91, 88, 23, 44, 15, 6, 15, 32, 12, 15, 85, 94, 64, 26, 13, 85, 27, 89, 39, 95, 79, 64, 29, 81, 77, 79, 97, 32, 29, 72, 91, 70, 72, 37, 66, 86]
last_save: 303

Gen:806
last_save: 303
Exit:TrueFalseFalse