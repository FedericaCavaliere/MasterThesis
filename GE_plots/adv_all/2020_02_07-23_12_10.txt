Dataset:Spiral/Full.csv
FS:True
Seed:1236
Size:3

Gen:1
TrainFitness:1.0
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],+904145.0110).all():
      return True
    else:
      return True
  def adf1(index):
    if np.less(x[index],+257246.7028).all():
      return False
    else:
      return True
  def adf2(index):
    if np.greater(np.sin(x[index]),+713169.8686).all():
      return False
    else:
      return True
  def adf3(index):
    if np.greater(np.sin(x[index]),+277748.3403).all():
      return True
    else:
      return True
  def adf4(index):
    if np.equal(x[index],-533781.4039).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(x[index],-892380.8984).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+088.572, adf1(1)*+169.914, adf2(2)*-198.527, adf3(3)*+208.959, adf4(4)*+891.608, adf7(7)*+831.549], [1, 1, 1, 0, 0], 265.442)
result=p(); 1.0
IndLenGenome:282
IndGenome:[94, 10, 13, 79, 77, 50, 84, 81, 13, 83, 2, 17, 33, 91, 88, 34, 90, 78, 48, 85, 91, 53, 98, 3, 53, 24, 5, 60, 1, 44, 89, 69, 82, 97, 61, 71, 82, 68, 24, 69, 2, 46, 10, 67, 55, 15, 28, 15, 98, 32, 95, 7, 61, 28, 84, 55, 50, 36, 88, 99, 5, 16, 46, 49, 21, 29, 66, 11, 99, 14, 35, 54, 55, 42, 90, 59, 54, 54, 72, 79, 21, 51, 10, 51, 65, 17, 21, 19, 27, 79, 48, 50, 85, 72, 19, 39, 20, 88, 51, 86, 24, 72, 40, 91, 54, 99, 65, 68, 85, 28, 47, 10, 6, 24, 56, 94, 82, 81, 38, 12, 14, 13, 42, 61, 38, 70, 58, 25, 40, 45, 29, 31, 57, 33, 73, 56, 38, 88, 12, 71, 34, 16, 76, 15, 73, 11, 48, 84, 36, 98, 67, 99, 27, 34, 27, 64, 60, 30, 27, 93, 47, 69, 88, 30, 88, 82, 94, 43, 57, 29, 49, 45, 60, 44, 70, 74, 53, 97, 64, 42, 60, 87, 78, 57, 18, 18, 94, 73, 70, 37, 36, 23, 11, 18, 3, 93, 54, 64, 49, 30, 68, 0, 67, 62, 99, 44, 30, 77, 56, 63, 62, 38, 12, 16, 6, 66, 16, 85, 94, 72, 89, 18, 98, 24, 78, 28, 45, 99, 18, 59, 19, 97, 49, 42, 7, 38, 85, 89, 12, 93, 66, 45, 76, 68, 75, 51, 91, 21, 33, 24, 75, 17, 40, 43, 99, 58, 28, 40, 50, 98, 1, 29, 94, 37, 42, 49, 40, 63, 38, 44, 45, 22, 30, 41, 70, 1, 4, 66, 28, 43, 76, 29]
last_save: 321

Gen:1
last_save: 321
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.6666666666666666
TestFitness:1.0
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],-471071.9991).all():
      return True
    else:
      return True
  def adf1(index):
    if np.less(np.tanh(x[index]),-429812.3700).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(np.cos(x[index]),-953813.4385).all():
      return True
    else:
      return True
  def adf3(index):
    if np.equal(rlog(x[index]),+570558.1244).all():
      return True
    else:
      return True
  def adf4(index):
    if np.less(x[index],+309368.6774).all():
      return True
    else:
      return False
  def adf7(index):
    if np.equal(np.cos(x[index]),+002314.7219).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+923.817, adf1(1)*-915.895, adf2(2)*+746.975, adf3(3)*-570.556, adf4(4)*+221.775, adf7(7)*+593.625], [1, 0, 1, 0, 0], 001.776)
result=p(); 0.6666666666666666
IndLenGenome:285
IndGenome:[52, 17, 8, 45, 58, 12, 51, 6, 70, 87, 21, 78, 4, 8, 76, 13, 56, 86, 13, 99, 35, 99, 94, 65, 39, 47, 87, 69, 79, 75, 46, 35, 51, 15, 82, 49, 94, 82, 1, 60, 77, 97, 41, 13, 45, 95, 32, 90, 71, 75, 86, 13, 58, 65, 45, 66, 89, 63, 78, 41, 85, 29, 16, 30, 89, 37, 77, 86, 41, 89, 71, 86, 95, 89, 17, 69, 37, 26, 37, 31, 98, 8, 33, 47, 55, 80, 91, 61, 52, 39, 48, 26, 37, 75, 84, 57, 53, 99, 26, 64, 87, 99, 82, 32, 40, 87, 33, 17, 84, 46, 37, 44, 65, 7, 3, 40, 81, 78, 87, 32, 60, 90, 32, 61, 14, 10, 61, 39, 98, 14, 33, 70, 25, 99, 67, 84, 41, 95, 2, 57, 22, 65, 43, 75, 16, 18, 85, 89, 97, 44, 93, 38, 91, 16, 26, 15, 18, 94, 75, 46, 37, 43, 23, 15, 78, 12, 53, 68, 92, 95, 32, 92, 30, 61, 34, 39, 64, 80, 97, 31, 80, 37, 22, 30, 32, 52, 19, 91, 39, 23, 49, 81, 81, 37, 6, 2, 18, 36, 98, 38, 97, 64, 43, 90, 77, 9, 38, 82, 66, 22, 73, 21, 43, 91, 64, 43, 81, 23, 97, 37, 87, 2, 88, 65, 50, 72, 85, 92, 52, 49, 32, 5, 32, 23, 43, 72, 83, 91, 58, 63, 63, 18, 48, 46, 67, 16, 65, 53, 30, 41, 35, 54, 17, 47, 38, 93, 90, 49, 79, 65, 73, 95, 73, 50, 23, 0, 85, 71, 79, 35, 96, 93, 58, 67, 26, 67, 62, 85, 43, 50, 60, 47, 6, 26, 95]
last_save: 322

Gen:7
TrainFitness:0.8333333333333334
TestFitness:0.5
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(np.cos(x[index]),+168375.4277).all():
      return False
    else:
      return False
  def adf1(index):
    if np.greater(x[index],-287076.4985).all():
      return False
    else:
      return False
  def adf2(index):
    if np.less(x[index],+003478.9276).all():
      if np.greater(x[index],+029186.6390).all():
        return True
      else:
        return False
      return False
    else:
      if np.greater(np.cos(x[index]),+193782.9522).all():
        return True
      else:
        return True
      return True
  def adf3(index):
    if np.less(x[index],+343143.6705).all():
      return True
    else:
      return False
  def adf4(index):
    if np.greater(x[index],+096415.3426).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(x[index],-811714.3402).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+021.544, adf1(1)*-344.944, adf2(2)*-495.510, adf3(3)*-035.095, adf4(4)*-654.119, adf7(7)*-420.580], [1, 0, 1, 1, 1], 032.535)
result=p(); 0.8333333333333334
IndLenGenome:391
IndGenome:[6, 42, 29, 45, 5, 68, 25, 66, 30, 65, 71, 86, 28, 83, 17, 55, 44, 52, 77, 87, 49, 99, 89, 19, 6, 19, 13, 41, 77, 92, 98, 47, 20, 17, 36, 64, 29, 98, 15, 71, 63, 54, 26, 48, 76, 27, 33, 4, 11, 20, 60, 63, 74, 37, 38, 69, 42, 67, 6, 69, 93, 47, 36, 96, 72, 80, 52, 79, 21, 68, 66, 16, 83, 59, 70, 30, 81, 57, 77, 48, 30, 79, 49, 2, 81, 91, 89, 13, 77, 68, 32, 49, 35, 12, 2, 14, 80, 26, 67, 29, 76, 81, 43, 96, 36, 13, 24, 43, 51, 34, 23, 46, 67, 80, 45, 38, 51, 48, 17, 36, 41, 10, 42, 95, 60, 29, 96, 44, 51, 55, 13, 14, 42, 46, 62, 33, 87, 31, 60, 11, 55, 49, 99, 18, 31, 91, 47, 91, 64, 63, 64, 80, 22, 84, 40, 42, 41, 23, 26, 37, 20, 32, 71, 65, 4, 94, 10, 89, 79, 83, 84, 14, 39, 74, 54, 48, 57, 24, 14, 19, 85, 15, 51, 80, 17, 35, 87, 20, 73, 35, 90, 59, 5, 23, 85, 95, 56, 35, 24, 91, 11, 79, 54, 71, 90, 64, 12, 20, 45, 58, 50, 91, 53, 46, 49, 31, 79, 24, 20, 53, 62, 25, 73, 75, 78, 58, 70, 27, 81, 70, 17, 17, 74, 10, 17, 2, 84, 86, 71, 32, 83, 86, 69, 18, 79, 69, 99, 63, 65, 81, 96, 35, 25, 40, 63, 79, 57, 57, 97, 89, 70, 26, 22, 32, 49, 49, 80, 48, 88, 50, 70, 8, 57, 80, 78, 98, 58, 96, 24, 41, 28, 17, 22, 60, 92, 32, 87, 35, 52, 56, 98, 88, 45, 28, 97, 46, 32, 5, 5, 28, 89, 5, 4, 87, 52, 42, 19, 80, 93, 6, 45, 60, 26, 1, 38, 19, 86, 55, 30, 62, 44, 30, 79, 76, 53, 5, 82, 39, 20, 72, 7, 35, 13, 91, 95, 32, 27, 63, 66, 34, 35, 30, 85, 9, 14, 55, 64, 92, 65, 76, 82, 25, 81, 30, 36, 8, 79, 47, 37, 69, 16, 6, 49, 15, 98, 3, 20, 34, 77, 10, 63, 76, 72, 50, 49, 12, 78, 95, 73, 14, 54, 3, 27, 54, 26, 20, 87, 70, 91, 80, 75]
last_save: 322

Gen:9
TrainFitness:0.8333333333333334
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],+004942.0669).all():
      return False
    else:
      return True
  def adf1(index):
    if np.less(np.cos(x[index]),-167536.5171).all():
      return True
    else:
      return True
  def adf2(index):
    if np.greater(np.cos(x[index]),+366429.8812).all():
      return True
    else:
      return True
  def adf3(index):
    if np.less(x[index],+383207.4338).all():
      if np.equal(x[index],-674249.8335).all():
        return True
      else:
        return False
      return True
    else:
      if np.equal(sigmoid(x[index]),-842708.4768).all():
        return False
      else:
        return False
      return False
  def adf4(index):
    if np.greater(x[index],-927358.1751).all():
      return False
    else:
      return True
  def adf7(index):
    if np.greater(x[index],+545932.5971).all():
      if np.less(x[index],+108877.4547).all():
        if np.less(x[index],-899312.3722).all():
          if np.less(np.tanh(x[index]),-367784.9105).all():
            return False
          else:
            return False
          return False
        else:
          if np.less(np.sin(x[index]),-854535.8532).all():
            return True
          else:
            return True
          return False
        return False
      else:
        if np.greater(rlog(x[index]),-020647.7379).all():
          if np.less(x[index],-407327.9580).all():
            return True
          else:
            return True
          return False
        else:
          if np.greater(x[index],-948192.5119).all():
            return True
          else:
            return False
          return False
        return False
      return True
    else:
      if np.greater(psqrt(x[index]),-041300.5296).all():
        return False
      else:
        return False
      return True
  return multiple_operation([adf0(0)*+857.835, adf1(1)*+216.836, adf2(2)*+087.222, adf3(3)*+948.676, adf4(4)*-882.366, adf7(7)*+288.167], [0, 0, 0, 0, 1], 070.934)
result=p(); 0.8333333333333334
IndLenGenome:411
IndGenome:[80, 96, 80, 65, 85, 3, 71, 24, 66, 60, 30, 34, 99, 4, 42, 40, 56, 26, 89, 25, 48, 87, 73, 43, 20, 13, 89, 73, 65, 31, 76, 27, 35, 73, 36, 75, 41, 57, 81, 64, 60, 83, 53, 69, 82, 19, 75, 28, 47, 43, 76, 66, 4, 92, 49, 98, 58, 1, 42, 54, 6, 75, 38, 54, 19, 55, 32, 14, 25, 33, 78, 93, 52, 10, 37, 94, 53, 43, 38, 33, 89, 69, 97, 49, 67, 36, 57, 64, 32, 44, 19, 58, 53, 83, 5, 94, 85, 70, 19, 50, 52, 45, 97, 39, 60, 18, 84, 72, 17, 70, 28, 94, 87, 56, 98, 85, 21, 83, 69, 21, 66, 65, 64, 99, 85, 99, 12, 37, 83, 35, 98, 21, 77, 85, 71, 95, 56, 79, 14, 94, 66, 83, 74, 56, 63, 75, 4, 35, 49, 83, 72, 65, 49, 67, 91, 76, 59, 97, 97, 83, 50, 43, 51, 60, 48, 78, 37, 7, 54, 15, 94, 27, 24, 34, 70, 29, 55, 89, 97, 78, 89, 29, 73, 61, 12, 93, 57, 92, 72, 101, 46, 80, 56, 40, 35, 59, 83, 76, 17, 27, 38, 64, 89, 41, 80, 75, 65, 43, 21, 75, 37, 62, 84, 50, 95, 78, 88, 85, 94, 75, 13, 95, 58, 55, 13, 52, 46, 40, 45, 99, 58, 44, 33, 30, 94, 66, 37, 95, 80, 82, 10, 46, 74, 27, 17, 63, 47, 59, 75, 31, 61, 74, 87, 77, 74, 20, 67, 83, 72, 77, 29, 55, 78, 30, 44, 28, 19, 21, 12, 11, 56, 89, 34, 59, 94, 58, 61, 19, 32, 45, 51, 61, 49, 50, 69, 61, 93, 52, 65, 69, 38, 47, 88, 31, 27, 80, 44, 41, 33, 50, 80, 55, 12, 99, 86, 77, 19, 92, 94, 74, 68, 80, 48, 38, 45, 47, 28, 63, 5, 50, 94, 12, 42, 21, 76, 68, 13, 66, 37, 10, 14, 20, 58, 97, 72, 62, 72, 51, 56, 18, 19, 54, 18, 56, 27, 86, 12, 77, 57, 68, 48, 52, 93, 46, 6, 58, 54, 17, 62, 58, 58, 11, 76, 57, 80, 62, 46, 10, 34, 55, 87, 50, 7, 70, 89, 63, 14, 78, 85, 94, 59, 89, 82, 21, 16, 37, 0, 96, 6, 73, 30, 59, 37, 70, 6, 33, 72, 49, 61, 49, 53, 76, 64, 11, 31, 86, 27, 78, 31, 8, 73]
last_save: 322

Gen:35
TrainFitness:1.0
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(np.cos(x[index]),+168375.4277).all():
      return False
    else:
      return False
  def adf1(index):
    if np.greater(x[index],-287076.4985).all():
      return False
    else:
      return False
  def adf2(index):
    if np.less(x[index],+008478.9276).all():
      if np.greater(x[index],+029186.6390).all():
        return True
      else:
        return False
      return False
    else:
      if np.greater(np.cos(x[index]),+193782.9522).all():
        return True
      else:
        return True
      return True
  def adf3(index):
    if np.less(x[index],+343143.6705).all():
      return True
    else:
      return False
  def adf4(index):
    if np.greater(x[index],+096415.3426).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(x[index],-811714.3402).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+021.544, adf1(1)*-344.944, adf2(2)*-495.510, adf3(3)*-035.095, adf4(4)*-654.119, adf7(7)*-420.580], [1, 0, 1, 1, 1], 032.535)
result=p(); 1.0
IndLenGenome:391
IndGenome:[6, 42, 29, 45, 5, 68, 25, 66, 30, 65, 71, 86, 28, 83, 17, 55, 44, 52, 77, 87, 49, 99, 89, 19, 6, 19, 13, 41, 77, 92, 98, 47, 20, 17, 36, 64, 29, 98, 15, 71, 63, 72, 26, 48, 76, 27, 33, 4, 11, 20, 60, 48, 74, 37, 38, 69, 42, 67, 6, 69, 93, 47, 36, 96, 72, 80, 52, 79, 21, 68, 66, 16, 83, 59, 70, 30, 81, 57, 77, 48, 30, 79, 49, 2, 81, 91, 89, 13, 77, 68, 32, 49, 35, 12, 2, 14, 80, 26, 67, 29, 76, 81, 43, 96, 36, 13, 24, 43, 51, 34, 23, 46, 67, 80, 45, 38, 51, 48, 17, 36, 41, 10, 42, 95, 60, 29, 96, 44, 51, 55, 13, 14, 42, 46, 62, 33, 87, 31, 60, 11, 55, 49, 99, 18, 31, 91, 47, 91, 64, 63, 64, 80, 22, 84, 40, 42, 41, 23, 26, 37, 20, 32, 71, 65, 4, 94, 10, 89, 79, 83, 84, 14, 39, 74, 54, 53, 57, 24, 14, 19, 85, 15, 51, 80, 17, 35, 87, 20, 73, 35, 90, 59, 5, 23, 85, 95, 56, 35, 24, 91, 11, 79, 54, 71, 90, 64, 12, 20, 45, 58, 50, 91, 53, 46, 49, 31, 79, 24, 20, 53, 62, 25, 73, 75, 78, 58, 70, 27, 81, 70, 17, 17, 74, 10, 17, 2, 84, 86, 71, 32, 83, 86, 69, 18, 79, 69, 99, 63, 65, 81, 96, 35, 25, 40, 63, 79, 57, 57, 97, 89, 70, 26, 22, 32, 49, 49, 80, 48, 88, 50, 70, 8, 57, 80, 78, 98, 58, 96, 24, 41, 28, 17, 22, 60, 92, 32, 87, 35, 52, 56, 98, 88, 45, 28, 97, 46, 32, 5, 5, 28, 89, 5, 4, 87, 52, 42, 19, 80, 93, 6, 45, 60, 26, 1, 38, 19, 86, 55, 30, 62, 44, 30, 79, 76, 53, 5, 82, 39, 20, 72, 7, 35, 13, 91, 95, 32, 27, 63, 66, 34, 35, 30, 85, 9, 14, 55, 64, 92, 65, 76, 82, 25, 81, 30, 36, 8, 79, 47, 37, 69, 16, 6, 49, 15, 98, 3, 20, 34, 77, 10, 63, 76, 72, 50, 49, 12, 78, 95, 73, 14, 54, 3, 27, 54, 26, 20, 87, 70, 91, 80, 75]
last_save: 322

Gen:35
last_save: 322
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(rlog(x[index]),+412119.0113).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(rlog(x[index]),+063268.9931).all():
      return False
    else:
      return False
  def adf2(index):
    if np.equal(sigmoid(x[index]),+899803.9087).all():
      return False
    else:
      return False
  def adf3(index):
    if np.greater(np.cos(x[index]),-087160.6394).all():
      return True
    else:
      return True
  def adf4(index):
    if np.greater(x[index],+020360.1325).all():
      return True
    else:
      return False
  def adf7(index):
    if np.less(x[index],-665911.1739).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-916.563, adf1(1)*-327.803, adf2(2)*+258.471, adf3(3)*-370.560, adf4(4)*-746.978, adf7(7)*+283.173], [0, 1, 1, 0, 1], 099.817)
result=p(); 0.8333333333333334
IndLenGenome:285
IndGenome:[97, 54, 6, 41, 9, 17, 87, 50, 29, 47, 52, 37, 69, 89, 61, 18, 30, 28, 9, 47, 78, 10, 59, 13, 8, 60, 30, 52, 72, 10, 27, 51, 71, 26, 60, 96, 62, 26, 47, 60, 62, 75, 21, 5, 88, 47, 51, 11, 30, 97, 73, 89, 48, 31, 26, 73, 23, 24, 80, 34, 93, 87, 23, 15, 11, 43, 97, 4, 31, 33, 80, 90, 45, 52, 96, 82, 55, 29, 71, 56, 81, 84, 19, 15, 74, 38, 98, 15, 26, 93, 72, 19, 66, 14, 85, 27, 37, 39, 57, 55, 71, 94, 55, 19, 63, 86, 66, 40, 83, 41, 91, 12, 97, 13, 71, 38, 99, 64, 33, 33, 50, 45, 82, 32, 42, 29, 23, 83, 32, 96, 94, 51, 46, 40, 46, 33, 28, 94, 67, 29, 37, 72, 25, 45, 14, 60, 66, 31, 47, 63, 39, 10, 10, 79, 33, 37, 89, 88, 40, 80, 29, 63, 38, 33, 76, 36, 28, 26, 41, 79, 88, 17, 15, 29, 34, 81, 58, 38, 65, 11, 70, 88, 63, 39, 67, 60, 34, 93, 86, 57, 35, 36, 35, 23, 24, 70, 56, 48, 69, 81, 77, 11, 79, 10, 15, 31, 79, 19, 77, 13, 89, 35, 64, 23, 8, 82, 82, 28, 46, 32, 72, 10, 38, 62, 46, 35, 66, 41, 48, 90, 52, 44, 50, 44, 19, 76, 16, 68, 12, 44, 83, 68, 63, 54, 93, 68, 85, 18, 25, 55, 77, 78, 82, 70, 87, 68, 66, 0, 11, 9, 73, 26, 44, 90, 29, 66, 5, 0, 96, 30, 82, 40, 22, 70, 51, 69, 17, 95, 12, 10, 94, 5, 45, 80, 100]
last_save: 323

Gen:89
TrainFitness:1.0
TestFitness:0.5
MaxGenLen:515
Individual: def p():
  def adf0(index):
    if np.less(x[index],-177273.4044).all():
      return True
    else:
      return True
  def adf1(index):
    if np.equal(x[index],-154452.8868).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(x[index],+006815.5573).all():
      return False
    else:
      return True
  def adf3(index):
    if np.less(x[index],+374908.5857).all():
      return False
    else:
      return True
  def adf4(index):
    if np.greater(x[index],-199810.1567).all():
      return True
    else:
      return True
  def adf7(index):
    if np.equal(sigmoid(x[index]),+306213.2677).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*-922.231, adf1(1)*+911.757, adf2(2)*-554.061, adf3(3)*-374.140, adf4(4)*-625.916, adf7(7)*+548.756], [0, 1, 0, 0, 1], 174.737)
result=p(); 1.0
IndLenGenome:411
IndGenome:[3, 94, 38, 89, 46, 31, 63, 97, 8, 11, 27, 17, 82, 57, 53, 84, 20, 64, 44, 44, 76, 72, 81, 53, 47, 92, 37, 81, 31, 55, 64, 44, 75, 62, 78, 18, 86, 28, 47, 15, 99, 71, 15, 63, 92, 48, 63, 90, 10, 26, 48, 31, 85, 35, 95, 37, 83, 5, 50, 69, 99, 46, 39, 10, 24, 21, 3, 87, 4, 39, 20, 68, 15, 68, 15, 47, 17, 44, 50, 69, 99, 69, 41, 93, 37, 91, 69, 29, 48, 41, 40, 21, 15, 66, 87, 82, 50, 88, 83, 29, 48, 93, 85, 50, 51, 73, 90, 36, 92, 81, 43, 92, 66, 27, 17, 57, 42, 71, 78, 84, 75, 40, 19, 12, 12, 72, 93, 41, 90, 10, 65, 99, 31, 31, 57, 95, 67, 90, 37, 72, 25, 45, 14, 60, 66, 31, 47, 29, 11, 43, 97, 4, 31, 84, 80, 90, 45, 52, 96, 82, 55, 29, 71, 56, 81, 84, 19, 15, 74, 38, 7, 15, 26, 93, 72, 19, 66, 14, 85, 80, 41, 67, 54, 77, 23, 57, 71, 69, 57, 62, 77, 29, 29, 30, 48, 44, 84, 76, 72, 81, 95, 87, 12, 89, 41, 5, 3, 14, 44, 8, 77, 29, 29, 90, 62, 80, 41, 67, 38, 75, 77, 84, 81, 44, 8, 98, 85, 70, 38, 38, 23, 3, 70, 36, 38, 13, 15, 9, 68, 10, 21, 76, 92, 16, 59, 86, 63, 92, 27, 89, 46, 22, 71, 59, 71, 53, 61, 76, 11, 68, 30, 64, 69, 95, 94, 21, 9, 30, 10, 70, 72, 10, 47, 21, 93, 72, 53, 34, 74, 37, 44, 70, 31, 34, 98, 19, 49, 73, 51, 34, 44, 71, 17, 92, 53, 79, 94, 90, 41, 22, 33, 98, 97, 46, 58, 95, 86, 87, 44, 84, 88, 83, 57, 62, 56, 58, 64, 16, 86, 6, 95, 39, 7, 63, 63, 13, 8, 61, 0, 15, 1, 34, 51, 99, 80, 11, 5, 76, 90, 10, 73, 7, 17, 92, 93, 38, 58, 82, 60, 46, 19, 19, 42, 49, 44, 70, 0, 61, 75, 77, 49, 64, 86, 2, 84, 21, 80, 79, 0, 19, 29, 45, 10, 9, 28, 37, 13, 36, 36, 42, 52, 36, 87, 15, 16, 41, 92, 69, 50, 87, 64, 35, 27, 69, 41, 30, 33, 27, 58, 78, 91, 91, 72, 30, 84, 47, 12, 76, 77, 87, 8]
last_save: 323

Gen:89
last_save: 323
Exit:TrueFalseFalse