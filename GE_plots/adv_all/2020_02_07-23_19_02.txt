Dataset:Spiral/Full.csv
FS:True
Seed:1237
Size:3

Gen:1
TrainFitness:1.0
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],-554325.1186).all():
      return True
    else:
      return False
  def adf1(index):
    if np.less(x[index],-906893.6020).all():
      return False
    else:
      return True
  def adf2(index):
    if np.less(np.cos(x[index]),-203936.2345).all():
      return False
    else:
      return True
  def adf3(index):
    if np.greater(rlog(x[index]),-200473.7529).all():
      return False
    else:
      return True
  def adf4(index):
    if np.greater(x[index],-810458.6541).all():
      return False
    else:
      return False
  def adf7(index):
    if np.greater(x[index],+598693.9308).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-785.345, adf1(1)*+661.430, adf2(2)*-197.093, adf3(3)*+101.416, adf4(4)*+714.311, adf7(7)*-097.092], [0, 0, 0, 0, 0], 587.014)
result=p(); 1.0
IndLenGenome:282
IndGenome:[46, 3, 9, 85, 86, 95, 76, 16, 49, 96, 39, 72, 9, 43, 10, 58, 69, 76, 90, 69, 71, 31, 42, 29, 36, 19, 94, 25, 80, 85, 88, 38, 21, 16, 49, 3, 85, 9, 30, 28, 91, 96, 44, 61, 23, 38, 25, 11, 20, 89, 44, 28, 84, 88, 68, 24, 51, 65, 35, 15, 75, 95, 86, 53, 44, 21, 96, 23, 18, 47, 75, 59, 86, 63, 90, 75, 51, 69, 23, 45, 58, 42, 83, 90, 38, 46, 15, 6, 79, 72, 16, 65, 45, 24, 57, 64, 91, 93, 19, 11, 49, 50, 12, 97, 32, 14, 1, 80, 9, 53, 10, 24, 73, 95, 30, 90, 51, 91, 77, 77, 11, 96, 39, 15, 83, 50, 99, 24, 70, 82, 62, 78, 24, 59, 67, 71, 16, 50, 14, 39, 30, 53, 61, 71, 24, 60, 71, 72, 99, 87, 16, 94, 30, 98, 44, 17, 97, 91, 23, 65, 46, 93, 89, 5, 61, 92, 54, 57, 100, 83, 52, 69, 31, 15, 37, 30, 80, 71, 68, 83, 96, 70, 69, 49, 48, 13, 79, 45, 53, 43, 88, 63, 79, 71, 11, 24, 83, 10, 51, 21, 71, 13, 33, 38, 98, 50, 23, 12, 71, 45, 84, 3, 13, 12, 53, 23, 75, 10, 39, 49, 59, 17, 70, 81, 95, 4, 38, 72, 6, 42, 23, 100, 58, 27, 63, 18, 92, 25, 89, 17, 6, 41, 77, 4, 31, 99, 89, 9, 60, 50, 62, 16, 91, 47, 66, 24, 28, 41, 15, 28, 18, 32, 41, 52, 80, 79, 17, 22, 84, 62, 79, 7, 0, 93, 96, 23, 86, 51, 55, 96, 78, 90]
last_save: 331

Gen:1
last_save: 331
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.6666666666666666
TestFitness:1.0
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],+618568.0100).all():
      return True
    else:
      return True
  def adf1(index):
    if np.equal(x[index],+014742.1666).all():
      return True
    else:
      return True
  def adf2(index):
    if np.less(psqrt(x[index]),+219895.8724).all():
      return True
    else:
      return False
  def adf3(index):
    if np.equal(rlog(x[index]),-799704.4567).all():
      return False
    else:
      return True
  def adf4(index):
    if np.equal(psqrt(x[index]),+108016.4244).all():
      return False
    else:
      return False
  def adf7(index):
    if np.less(np.cos(x[index]),+438358.6076).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*-923.868, adf1(1)*-490.901, adf2(2)*-898.686, adf3(3)*-651.697, adf4(4)*-228.898, adf7(7)*-966.062], [1, 1, 0, 0, 0], 401.719)
result=p(); 0.6666666666666666
IndLenGenome:285
IndGenome:[37, 61, 8, 31, 96, 98, 29, 88, 45, 45, 41, 89, 86, 15, 88, 70, 16, 4, 70, 50, 89, 77, 70, 46, 33, 83, 66, 69, 20, 38, 90, 38, 72, 61, 95, 80, 9, 24, 49, 26, 12, 35, 23, 20, 8, 61, 85, 73, 69, 87, 27, 3, 56, 92, 46, 57, 21, 77, 67, 86, 88, 93, 66, 60, 88, 54, 29, 80, 84, 88, 96, 59, 80, 56, 35, 57, 97, 87, 73, 77, 90, 58, 81, 48, 31, 22, 83, 64, 61, 65, 67, 79, 56, 58, 98, 40, 90, 3, 41, 86, 74, 93, 68, 3, 44, 72, 66, 90, 64, 65, 11, 64, 95, 74, 48, 34, 22, 51, 10, 56, 93, 67, 26, 48, 66, 59, 39, 27, 49, 74, 20, 10, 31, 34, 29, 58, 68, 60, 40, 59, 82, 36, 13, 20, 31, 73, 69, 21, 40, 19, 99, 52, 82, 44, 80, 78, 36, 91, 87, 89, 46, 35, 49, 48, 69, 66, 78, 98, 72, 34, 82, 62, 94, 28, 17, 64, 27, 31, 42, 96, 34, 80, 27, 80, 86, 21, 56, 18, 56, 70, 78, 7, 96, 16, 86, 39, 51, 86, 75, 41, 91, 0, 99, 55, 55, 60, 93, 31, 17, 70, 100, 81, 37, 100, 12, 81, 19, 17, 47, 49, 24, 100, 31, 83, 6, 80, 9, 49, 32, 9, 8, 68, 14, 12, 6, 57, 53, 3, 58, 88, 0, 92, 71, 17, 70, 14, 63, 59, 53, 72, 76, 48, 81, 37, 62, 79, 84, 94, 27, 5, 12, 90, 64, 15, 88, 53, 93, 90, 37, 30, 76, 39, 86, 37, 6, 6, 40, 69, 40, 91, 44, 82, 57, 39, 69]
last_save: 332

Gen:4
TrainFitness:0.8333333333333334
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(sigmoid(x[index]),-600001.7157).all():
      return False
    else:
      return False
  def adf1(index):
    if np.greater(x[index],-843664.0699).all():
      return True
    else:
      return True
  def adf2(index):
    if np.equal(x[index],-717160.1545).all():
      if np.greater(np.cos(x[index]),-358611.6318).all():
        return False
      else:
        return False
      return False
    else:
      if np.less(x[index],+019750.6141).all():
        if np.less(np.cos(x[index]),-194631.5407).all():
          return False
        else:
          return False
        return True
      else:
        if np.less(x[index],+013371.9234).all():
          return True
        else:
          return True
        return False
      return True
  def adf3(index):
    if np.equal(x[index],-003873.8819).all():
      return False
    else:
      return True
  def adf4(index):
    if np.less(np.tanh(x[index]),-687819.5437).all():
      return False
    else:
      return False
  def adf7(index):
    if np.greater(x[index],-187679.3139).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*-452.940, adf1(1)*+251.113, adf2(2)*-836.531, adf3(3)*-670.738, adf4(4)*-605.548, adf7(7)*-509.677], [1, 0, 0, 1, 1], 753.904)
result=p(); 0.8333333333333334
IndLenGenome:326
IndGenome:[83, 97, 14, 25, 32, 66, 27, 34, 31, 65, 96, 80, 20, 30, 70, 71, 67, 51, 65, 7, 39, 69, 51, 61, 51, 97, 81, 49, 54, 28, 44, 23, 36, 36, 64, 10, 76, 79, 39, 24, 28, 5, 54, 16, 11, 43, 64, 97, 9, 57, 71, 77, 21, 66, 40, 1, 5, 54, 85, 85, 18, 28, 31, 31, 59, 29, 33, 5, 68, 76, 41, 21, 66, 53, 21, 38, 45, 55, 73, 62, 97, 52, 19, 40, 36, 39, 30, 91, 99, 47, 15, 80, 16, 11, 34, 91, 41, 58, 76, 55, 13, 59, 89, 21, 19, 24, 76, 43, 91, 65, 14, 10, 37, 39, 73, 88, 59, 49, 57, 55, 96, 90, 20, 41, 23, 33, 27, 101, 49, 72, 93, 74, 64, 74, 17, 52, 97, 1, 14, 7, 50, 47, 92, 80, 50, 33, 98, 87, 93, 88, 68, 61, 49, 47, 92, 38, 77, 85, 26, 68, 38, 23, 50, 56, 68, 37, 68, 101, 69, 85, 44, 73, 27, 75, 23, 13, 39, 36, 21, 37, 49, 70, 31, 68, 17, 96, 7, 49, 3, 91, 43, 89, 18, 54, 97, 81, 65, 13, 95, 74, 45, 52, 49, 74, 30, 56, 90, 86, 72, 85, 51, 31, 41, 23, 15, 75, 82, 18, 43, 76, 75, 93, 11, 22, 73, 87, 66, 87, 30, 97, 33, 18, 61, 33, 65, 96, 50, 65, 95, 14, 58, 83, 79, 21, 45, 10, 9, 66, 67, 97, 65, 31, 12, 28, 91, 81, 7, 97, 75, 73, 89, 100, 74, 25, 67, 91, 18, 74, 31, 93, 69, 64, 24, 12, 0, 2, 48, 28, 65, 29, 82, 54, 68, 42, 28, 76, 6, 62, 13, 18, 76, 70, 53, 53, 96, 29, 79, 37, 54, 59, 81, 7, 55, 53, 68, 15, 92, 10, 41, 27, 47, 73, 68, 59, 69, 92, 3, 97, 15, 31, 56, 100, 39, 88, 82, 24]
last_save: 332

Gen:45
TrainFitness:1.0
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(sigmoid(x[index]),-600001.7157).all():
      return False
    else:
      return False
  def adf1(index):
    if np.greater(x[index],-833664.0699).all():
      return True
    else:
      return True
  def adf2(index):
    if np.equal(x[index],-717360.1545).all():
      if np.greater(np.cos(x[index]),-358611.6318).all():
        return False
      else:
        return False
      return False
    else:
      if np.less(x[index],+008750.8141).all():
        if np.less(np.cos(x[index]),-194631.5407).all():
          return True
        else:
          return False
        return True
      else:
        if np.less(x[index],+013371.9234).all():
          return True
        else:
          return True
        return False
      return True
  def adf3(index):
    if np.equal(x[index],-003873.8819).all():
      return False
    else:
      return True
  def adf4(index):
    if np.less(np.tanh(x[index]),-687819.5437).all():
      return False
    else:
      return False
  def adf7(index):
    if np.greater(x[index],-187677.2273).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+781.954, adf1(1)*-339.617, adf2(2)*+801.636, adf3(3)*-489.478, adf4(4)*+137.287, adf7(7)*+830.687], [1, 1, 1, 0, 1], 533.961)
result=p(); 1.0
IndLenGenome:498
IndGenome:[83, 97, 14, 25, 32, 66, 27, 34, 31, 65, 96, 80, 20, 30, 70, 71, 67, 51, 65, 7, 39, 69, 51, 61, 51, 97, 81, 49, 54, 28, 73, 23, 36, 36, 64, 10, 76, 79, 39, 24, 28, 5, 54, 16, 11, 43, 64, 97, 9, 57, 71, 77, 43, 66, 40, 1, 5, 54, 85, 85, 18, 28, 31, 31, 59, 29, 33, 5, 68, 76, 41, 21, 66, 53, 21, 38, 45, 55, 73, 62, 97, 52, 19, 40, 36, 39, 30, 70, 88, 47, 15, 80, 18, 11, 34, 91, 41, 58, 78, 55, 13, 59, 89, 21, 19, 24, 76, 43, 91, 65, 14, 10, 37, 62, 73, 88, 59, 49, 57, 55, 96, 90, 20, 41, 23, 33, 27, 101, 49, 72, 93, 74, 64, 74, 17, 52, 97, 1, 14, 7, 50, 47, 92, 80, 50, 33, 98, 87, 93, 88, 68, 61, 49, 47, 92, 38, 77, 85, 26, 68, 38, 23, 50, 56, 68, 37, 68, 101, 69, 85, 44, 73, 27, 75, 23, 13, 39, 36, 21, 37, 49, 70, 31, 68, 17, 96, 7, 47, 92, 32, 77, 43, 48, 68, 38, 23, 50, 56, 68, 37, 68, 101, 69, 85, 44, 73, 27, 75, 23, 13, 39, 36, 21, 37, 49, 70, 31, 68, 70, 71, 6, 53, 26, 51, 45, 57, 54, 18, 99, 24, 57, 78, 93, 88, 68, 61, 63, 47, 92, 38, 77, 85, 26, 68, 38, 23, 50, 56, 68, 37, 68, 101, 69, 85, 44, 73, 27, 75, 23, 13, 39, 36, 21, 37, 49, 70, 31, 68, 17, 96, 7, 49, 3, 91, 43, 89, 18, 54, 97, 81, 65, 13, 95, 74, 45, 52, 49, 74, 30, 56, 90, 86, 72, 85, 51, 31, 41, 23, 29, 75, 82, 18, 43, 76, 75, 93, 11, 22, 73, 87, 66, 87, 30, 97, 33, 18, 61, 33, 65, 96, 50, 65, 95, 14, 58, 83, 79, 21, 45, 10, 9, 66, 67, 97, 65, 31, 12, 28, 91, 81, 7, 97, 75, 73, 89, 100, 74, 25, 67, 91, 18, 74, 31, 93, 69, 64, 24, 12, 0, 2, 48, 28, 65, 29, 82, 54, 68, 42, 28, 76, 61, 62, 13, 51, 76, 70, 53, 53, 96, 29, 79, 37, 46, 73, 93, 30, 36, 17, 74, 76, 97, 23, 55, 81, 41, 91, 85, 100, 75, 62, 24, 88, 36, 45, 29, 14, 72, 84, 49, 59, 91, 70, 72, 16, 56, 3, 11, 45, 54, 23, 40, 3, 77, 71, 97, 66, 39, 90, 80, 38, 42, 89, 80, 49, 37, 74, 37, 68, 39, 85, 20, 84, 74, 18, 24, 96, 5, 20, 80, 70, 76, 70, 49, 21, 72, 43, 46, 54, 85, 73, 65, 26, 14, 14, 79, 51, 100, 14, 79, 45, 44, 32, 61, 82, 49, 10, 87, 32, 94, 58, 77, 88, 50, 56, 57, 37, 11, 31, 84, 67, 43, 32, 1, 74, 39, 88, 81, 89]
last_save: 332

Gen:45
last_save: 332
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],-322754.9975).all():
      return True
    else:
      return True
  def adf1(index):
    if np.equal(np.cos(x[index]),-680960.2942).all():
      return True
    else:
      return False
  def adf2(index):
    if np.less(sigmoid(x[index]),-609533.9613).all():
      return True
    else:
      return False
  def adf3(index):
    if np.equal(np.tanh(x[index]),-424683.5729).all():
      return False
    else:
      return True
  def adf4(index):
    if np.less(sigmoid(x[index]),+052686.7066).all():
      return False
    else:
      return True
  def adf7(index):
    if np.less(x[index],+925809.4388).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*-724.865, adf1(1)*+204.427, adf2(2)*+797.827, adf3(3)*+460.730, adf4(4)*-669.564, adf7(7)*-621.048], [1, 1, 1, 0, 1], 411.251)
result=p(); 0.6666666666666666
IndLenGenome:285
IndGenome:[22, 47, 22, 38, 13, 44, 28, 61, 16, 94, 86, 51, 64, 39, 13, 89, 85, 47, 51, 69, 63, 34, 21, 34, 51, 72, 31, 12, 51, 78, 54, 81, 9, 7, 63, 40, 7, 95, 79, 45, 83, 55, 99, 66, 96, 57, 21, 69, 94, 27, 65, 10, 99, 25, 43, 22, 72, 20, 68, 27, 13, 14, 96, 9, 77, 50, 75, 66, 32, 67, 30, 89, 61, 82, 15, 14, 7, 80, 82, 96, 43, 25, 22, 85, 97, 10, 66, 92, 48, 73, 2, 77, 54, 58, 99, 99, 95, 64, 92, 59, 16, 37, 87, 39, 12, 47, 25, 97, 51, 75, 27, 34, 53, 67, 66, 56, 91, 74, 40, 78, 38, 90, 24, 73, 96, 62, 76, 96, 91, 42, 22, 66, 76, 39, 86, 32, 88, 49, 10, 63, 57, 96, 3, 64, 47, 54, 44, 70, 9, 48, 11, 40, 28, 39, 15, 13, 18, 90, 48, 76, 13, 40, 69, 39, 55, 16, 54, 32, 62, 15, 54, 41, 32, 88, 89, 26, 80, 2, 43, 56, 82, 73, 18, 25, 42, 46, 47, 19, 44, 64, 89, 88, 46, 20, 59, 75, 4, 53, 100, 54, 72, 21, 95, 80, 91, 16, 50, 65, 100, 3, 24, 60, 18, 72, 26, 50, 98, 61, 54, 45, 53, 25, 41, 87, 68, 57, 91, 10, 80, 6, 28, 99, 21, 100, 37, 79, 65, 2, 56, 2, 4, 90, 57, 6, 21, 50, 15, 77, 55, 83, 15, 97, 53, 33, 19, 41, 82, 100, 51, 52, 16, 67, 12, 70, 85, 96, 52, 82, 5, 61, 39, 41, 66, 23, 77, 24, 29, 63, 50, 69, 83, 50, 62, 75, 2]
last_save: 333

Gen:12
TrainFitness:1.0
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],-939343.3975).all():
      return False
    else:
      return True
  def adf1(index):
    if np.less(x[index],-303702.8551).all():
      return False
    else:
      return False
  def adf2(index):
    if np.less(x[index],+786069.7761).all():
      return False
    else:
      return True
  def adf3(index):
    if np.greater(x[index],+850757.9894).all():
      return False
    else:
      return True
  def adf4(index):
    if np.equal(rlog(x[index]),+699341.8000).all():
      return True
    else:
      return True
  def adf7(index):
    if np.less(x[index],+006649.9283).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+993.384, adf1(1)*-345.609, adf2(2)*-986.240, adf3(3)*-015.517, adf4(4)*-295.413, adf7(7)*+550.285], [1, 1, 1, 1, 0], 280.571)
result=p(); 1.0
IndLenGenome:457
IndGenome:[82, 85, 3, 49, 56, 55, 73, 3, 28, 99, 43, 49, 13, 44, 83, 33, 9, 17, 15, 65, 58, 52, 33, 76, 95, 76, 99, 71, 93, 70, 33, 97, 90, 52, 68, 75, 85, 61, 37, 95, 72, 61, 55, 49, 7, 34, 59, 67, 78, 86, 90, 26, 39, 77, 77, 36, 41, 27, 74, 66, 43, 93, 57, 84, 92, 38, 8, 45, 20, 27, 85, 37, 19, 78, 19, 44, 27, 86, 51, 69, 86, 2, 34, 17, 46, 40, 56, 49, 69, 33, 14, 91, 68, 20, 50, 60, 10, 42, 54, 67, 25, 39, 14, 40, 31, 50, 60, 56, 66, 24, 39, 39, 42, 18, 53, 6, 19, 73, 40, 45, 10, 74, 39, 89, 33, 73, 88, 84, 50, 33, 32, 63, 44, 35, 26, 20, 29, 26, 89, 81, 99, 38, 76, 72, 34, 90, 54, 25, 69, 40, 81, 15, 55, 61, 27, 10, 73, 55, 42, 9, 45, 94, 71, 73, 52, 12, 68, 65, 25, 30, 12, 58, 25, 61, 85, 47, 19, 53, 56, 7, 92, 38, 10, 35, 7, 61, 76, 29, 95, 26, 61, 42, 88, 24, 91, 75, 3, 19, 80, 93, 61, 53, 94, 67, 16, 32, 19, 64, 76, 3, 75, 59, 35, 42, 42, 18, 89, 82, 82, 22, 70, 49, 45, 53, 71, 97, 83, 40, 5, 13, 13, 61, 97, 19, 54, 48, 26, 69, 21, 76, 66, 85, 33, 38, 74, 25, 79, 77, 23, 27, 47, 86, 29, 84, 22, 87, 74, 40, 56, 49, 69, 33, 14, 91, 68, 20, 50, 60, 10, 42, 54, 67, 25, 39, 14, 89, 31, 50, 46, 50, 50, 58, 10, 33, 94, 73, 56, 28, 33, 35, 67, 99, 69, 95, 0, 97, 92, 78, 38, 21, 40, 84, 77, 67, 62, 80, 56, 9, 50, 96, 43, 43, 59, 18, 56, 94, 86, 29, 65, 56, 73, 48, 46, 67, 32, 23, 9, 43, 42, 25, 61, 79, 54, 92, 80, 81, 63, 88, 55, 57, 57, 71, 36, 58, 28, 36, 91, 74, 42, 45, 97, 51, 34, 92, 84, 17, 61, 28, 25, 16, 14, 78, 39, 74, 45, 63, 23, 84, 86, 78, 65, 37, 76, 73, 92, 76, 71, 96, 15, 78, 62, 86, 99, 85, 64, 51, 0, 20, 40, 91, 83, 89, 29, 33, 4, 85, 0, 79, 51, 71, 85, 53, 54, 33, 67, 10, 21, 3, 93, 29, 62, 80, 60, 56, 34, 69, 44, 8, 83, 4, 48, 47, 21, 90, 11, 0, 30, 57, 34, 53, 74, 78, 19, 39, 69, 51, 1, 71, 99, 94, 82, 78, 83, 65, 69, 12, 86, 62, 18, 71, 9, 90, 42, 24, 85, 1, 84]
last_save: 333

Gen:12
last_save: 333
Exit:TrueFalseFalse