Dataset:Spiral/Full.csv
FS:True
Seed:1238
Size:3

Gen:1
TrainFitness:1.0
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],-095072.7978).all():
      return False
    else:
      return False
  def adf1(index):
    if np.greater(np.cos(x[index]),-575640.1888).all():
      return False
    else:
      return True
  def adf2(index):
    if np.equal(x[index],-603377.8652).all():
      return False
    else:
      return True
  def adf3(index):
    if np.equal(sigmoid(x[index]),+222174.9987).all():
      return False
    else:
      return False
  def adf4(index):
    if np.less(x[index],-091477.1532).all():
      return True
    else:
      return True
  def adf7(index):
    if np.equal(np.cos(x[index]),-684496.4608).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+412.147, adf1(1)*-394.431, adf2(2)*-970.104, adf3(3)*-421.434, adf4(4)*-727.813, adf7(7)*-108.914], [1, 1, 1, 1, 1], 696.596)
result=p(); 1.0
IndLenGenome:283
IndGenome:[85, 34, 93, 85, 94, 43, 62, 79, 40, 80, 93, 49, 83, 49, 20, 51, 52, 86, 15, 5, 19, 98, 76, 58, 42, 44, 89, 44, 57, 25, 49, 44, 77, 32, 79, 45, 19, 19, 95, 62, 83, 53, 90, 32, 32, 74, 91, 15, 59, 67, 46, 96, 99, 21, 75, 57, 86, 92, 93, 52, 76, 78, 5, 64, 8, 63, 78, 25, 61, 67, 30, 43, 74, 82, 31, 13, 59, 61, 15, 68, 25, 24, 15, 47, 89, 33, 43, 45, 67, 91, 89, 84, 16, 47, 93, 28, 30, 81, 80, 52, 9, 53, 99, 24, 76, 78, 72, 93, 64, 97, 46, 90, 50, 79, 57, 47, 96, 96, 3, 85, 30, 67, 92, 87, 51, 38, 68, 95, 36, 84, 21, 99, 40, 25, 44, 11, 80, 38, 14, 24, 11, 81, 37, 65, 17, 20, 58, 91, 3, 94, 74, 44, 44, 26, 48, 54, 38, 71, 73, 15, 77, 40, 46, 67, 52, 11, 91, 88, 19, 32, 91, 33, 53, 89, 97, 39, 17, 9, 17, 75, 82, 77, 20, 49, 78, 47, 17, 89, 70, 48, 57, 98, 17, 62, 71, 78, 69, 82, 32, 21, 87, 89, 55, 29, 60, 3, 10, 68, 13, 42, 76, 1, 83, 45, 94, 21, 61, 50, 72, 47, 75, 19, 84, 5, 43, 40, 84, 85, 65, 58, 29, 89, 51, 100, 76, 89, 55, 22, 99, 54, 68, 3, 30, 60, 81, 52, 77, 4, 87, 26, 22, 94, 79, 49, 19, 20, 8, 84, 44, 42, 51, 73, 63, 4, 61, 34, 92, 44, 27, 92, 75, 65, 80, 64, 98, 31, 91, 50, 77, 14, 30, 74, 54]
last_save: 341

Gen:1
last_save: 341
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.6666666666666666
TestFitness:1.0
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],-969290.3539).all():
      return False
    else:
      return False
  def adf1(index):
    if np.equal(np.cos(x[index]),+851476.4996).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(np.sin(x[index]),+097504.9046).all():
      return False
    else:
      return True
  def adf3(index):
    if np.greater(psqrt(x[index]),+035797.2629).all():
      return False
    else:
      return False
  def adf4(index):
    if np.less(x[index],+742653.6549).all():
      return False
    else:
      return True
  def adf7(index):
    if np.greater(sigmoid(x[index]),-424075.9919).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+733.649, adf1(1)*+468.433, adf2(2)*-910.131, adf3(3)*+938.625, adf4(4)*+350.659, adf7(7)*+113.431], [0, 1, 0, 1, 0], 403.701)
result=p(); 0.6666666666666666
IndLenGenome:285
IndGenome:[56, 33, 77, 78, 98, 53, 39, 61, 52, 18, 54, 92, 63, 10, 48, 69, 5, 77, 84, 31, 49, 63, 54, 20, 33, 76, 29, 80, 87, 13, 50, 41, 35, 53, 43, 24, 5, 73, 65, 93, 38, 74, 29, 33, 67, 49, 73, 16, 51, 98, 53, 27, 93, 99, 23, 74, 56, 26, 90, 24, 7, 65, 93, 39, 87, 65, 98, 36, 55, 95, 89, 87, 35, 68, 28, 24, 86, 70, 26, 72, 47, 22, 30, 48, 54, 79, 45, 51, 81, 68, 29, 79, 70, 93, 42, 19, 92, 83, 97, 21, 21, 76, 58, 75, 26, 99, 20, 13, 79, 14, 20, 98, 75, 83, 76, 76, 44, 18, 37, 21, 77, 82, 59, 93, 51, 97, 45, 74, 70, 84, 13, 79, 23, 20, 17, 14, 29, 24, 67, 75, 89, 73, 82, 77, 29, 35, 82, 13, 57, 16, 16, 95, 89, 63, 87, 19, 81, 40, 40, 11, 10, 49, 47, 99, 36, 93, 21, 96, 6, 14, 59, 64, 84, 74, 85, 89, 19, 92, 57, 55, 45, 56, 27, 96, 40, 56, 30, 30, 13, 44, 20, 8, 19, 6, 9, 58, 70, 9, 60, 61, 77, 33, 8, 87, 31, 46, 5, 20, 28, 14, 62, 73, 85, 7, 9, 47, 80, 58, 4, 9, 94, 60, 16, 49, 56, 92, 36, 8, 61, 38, 54, 9, 62, 41, 27, 64, 26, 10, 80, 15, 91, 7, 51, 97, 79, 99, 40, 23, 91, 74, 6, 24, 4, 2, 60, 7, 73, 79, 83, 1, 30, 37, 23, 46, 51, 23, 34, 88, 84, 92, 90, 58, 65, 30, 32, 6, 34, 20, 67, 39, 46, 58, 97, 81, 27]
last_save: 342

Gen:8
TrainFitness:0.8333333333333334
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],-846962.4380).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(psqrt(x[index]),+034796.0421).all():
      return False
    else:
      return False
  def adf2(index):
    if np.less(np.cos(x[index]),-914898.9415).all():
      return False
    else:
      return False
  def adf3(index):
    if np.greater(x[index],-078961.9903).all():
      return True
    else:
      return False
  def adf4(index):
    if np.greater(sigmoid(x[index]),-515097.1532).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(x[index],+019240.1163).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+767.476, adf1(1)*+529.589, adf2(2)*-078.961, adf3(3)*-369.573, adf4(4)*-785.150, adf7(7)*-562.835], [0, 1, 1, 0, 0], 592.881)
result=p(); 0.8333333333333334
IndLenGenome:392
IndGenome:[7, 94, 19, 47, 37, 53, 47, 27, 21, 78, 84, 96, 59, 46, 12, 24, 73, 18, 20, 33, 7, 35, 75, 94, 74, 5, 87, 60, 76, 30, 53, 84, 37, 29, 56, 10, 84, 82, 41, 67, 31, 93, 27, 37, 48, 19, 24, 3, 29, 69, 31, 54, 88, 29, 28, 59, 44, 71, 45, 61, 45, 46, 27, 78, 91, 19, 67, 60, 20, 37, 28, 29, 36, 61, 19, 49, 80, 93, 16, 35, 45, 77, 3, 70, 21, 32, 17, 88, 85, 31, 25, 80, 89, 87, 61, 95, 43, 12, 88, 83, 15, 59, 36, 31, 57, 32, 82, 90, 1, 49, 62, 54, 50, 61, 11, 46, 13, 96, 85, 89, 64, 17, 98, 26, 87, 76, 37, 44, 67, 6, 52, 90, 33, 25, 42, 19, 5, 58, 79, 15, 67, 32, 20, 37, 28, 29, 36, 61, 19, 49, 80, 93, 16, 29, 45, 77, 3, 67, 21, 32, 17, 88, 85, 31, 25, 80, 25, 87, 61, 95, 36, 12, 88, 83, 15, 59, 36, 31, 57, 32, 82, 98, 45, 49, 62, 28, 88, 31, 33, 66, 24, 59, 11, 24, 84, 87, 99, 46, 86, 22, 49, 39, 9, 48, 42, 77, 26, 28, 26, 94, 35, 84, 74, 45, 28, 92, 53, 31, 62, 90, 83, 90, 26, 86, 18, 78, 22, 27, 28, 88, 14, 38, 52, 23, 75, 34, 94, 37, 64, 65, 39, 32, 42, 55, 32, 78, 36, 48, 97, 98, 82, 98, 97, 80, 50, 43, 26, 83, 22, 27, 16, 69, 74, 26, 25, 68, 23, 31, 70, 23, 83, 97, 15, 49, 70, 72, 35, 15, 84, 79, 77, 43, 55, 97, 74, 30, 16, 77, 83, 24, 67, 33, 69, 74, 67, 32, 54, 63, 56, 72, 33, 66, 91, 71, 26, 22, 7, 12, 82, 79, 91, 39, 5, 38, 98, 19, 8, 41, 57, 23, 77, 57, 22, 16, 65, 94, 44, 75, 84, 19, 58, 59, 34, 9, 90, 50, 26, 86, 35, 81, 26, 35, 56, 92, 21, 64, 100, 29, 68, 68, 64, 17, 33, 95, 41, 51, 8, 10, 63, 32, 72, 14, 83, 28, 79, 4, 63, 6, 82, 92, 77, 96, 76, 81, 39, 40, 41, 90, 74, 31, 5, 63, 39, 29, 3, 41, 19, 25, 78, 38, 8, 36]
last_save: 342

Gen:220
TrainFitness:1.0
TestFitness:0.8333333333333334
MaxGenLen:560
Individual: def p():
  def adf0(index):
    if np.equal(x[index],-503735.4431).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(sigmoid(x[index]),-515097.3212).all():
      return True
    else:
      return False
  def adf2(index):
    if np.greater(x[index],+008541.8364).all():
      return True
    else:
      return False
  def adf3(index):
    if np.equal(x[index],+276771.5514).all():
      return True
    else:
      return False
  def adf4(index):
    if np.less(np.cos(x[index]),+393810.3661).all():
      return False
    else:
      return False
  def adf7(index):
    if np.equal(x[index],+850313.1722).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-708.250, adf1(1)*-515.450, adf2(2)*+546.679, adf3(3)*-801.900, adf4(4)*+619.903, adf7(7)*-730.127], [1, 1, 1, 0, 1], 153.283)
result=p(); 1.0
IndLenGenome:479
IndGenome:[7, 99, 17, 91, 65, 85, 17, 25, 4, 55, 90, 63, 37, 43, 65, 24, 84, 23, 21, 99, 35, 45, 77, 58, 70, 21, 32, 17, 20, 85, 31, 25, 80, 89, 87, 43, 12, 71, 12, 92, 83, 91, 59, 36, 31, 78, 32, 82, 90, 60, 18, 65, 54, 21, 68, 13, 46, 44, 96, 85, 41, 81, 8, 93, 26, 18, 37, 42, 57, 36, 57, 17, 91, 65, 85, 11, 74, 4, 55, 90, 63, 37, 76, 97, 41, 74, 63, 63, 9, 63, 78, 31, 10, 13, 36, 96, 31, 13, 63, 93, 57, 47, 89, 52, 58, 61, 8, 5, 80, 13, 21, 93, 31, 57, 32, 82, 90, 45, 49, 62, 28, 21, 32, 17, 20, 58, 22, 25, 80, 89, 87, 52, 85, 11, 25, 4, 55, 90, 63, 30, 43, 65, 24, 36, 96, 27, 99, 35, 45, 77, 58, 70, 21, 59, 60, 20, 37, 28, 29, 36, 61, 19, 49, 80, 93, 16, 35, 45, 77, 3, 70, 21, 32, 17, 88, 85, 31, 25, 80, 89, 87, 61, 95, 43, 12, 88, 83, 15, 59, 36, 31, 75, 32, 82, 90, 1, 49, 62, 54, 50, 61, 11, 46, 13, 96, 85, 89, 64, 17, 98, 26, 87, 76, 37, 44, 67, 6, 52, 90, 33, 25, 42, 19, 5, 58, 79, 15, 67, 32, 20, 37, 28, 29, 36, 61, 19, 49, 80, 93, 16, 29, 45, 77, 3, 67, 21, 32, 17, 88, 85, 31, 25, 80, 25, 87, 61, 95, 36, 12, 88, 83, 15, 59, 36, 31, 57, 32, 82, 98, 45, 49, 62, 28, 88, 31, 33, 66, 24, 59, 11, 24, 84, 87, 99, 46, 86, 22, 49, 39, 9, 48, 42, 77, 26, 28, 26, 94, 35, 84, 74, 45, 28, 92, 53, 31, 62, 90, 83, 90, 26, 86, 18, 78, 22, 27, 28, 88, 14, 38, 52, 23, 75, 34, 94, 37, 64, 65, 39, 32, 42, 55, 32, 78, 36, 48, 97, 98, 82, 98, 97, 80, 50, 43, 26, 83, 22, 27, 16, 69, 74, 26, 25, 68, 23, 31, 70, 23, 83, 97, 15, 49, 70, 72, 35, 15, 84, 79, 77, 43, 55, 97, 74, 30, 16, 77, 83, 24, 67, 33, 69, 74, 67, 32, 54, 63, 56, 72, 33, 66, 91, 71, 26, 22, 7, 12, 82, 79, 91, 39, 5, 38, 98, 19, 8, 41, 57, 23, 77, 57, 22, 16, 65, 94, 44, 75, 84, 19, 58, 59, 34, 9, 90, 50, 26, 86, 35, 81, 26, 35, 56, 92, 21, 64, 100, 29, 68, 68, 64, 17, 33, 95, 41, 51, 8, 10, 63, 32, 72, 14, 83, 28, 79, 4, 63, 6, 82, 92, 77, 96, 76, 81, 39, 40, 41, 90, 74, 31, 5, 63, 39, 29, 3, 41, 19, 25, 78, 38, 8, 36]
last_save: 342

Gen:220
last_save: 342
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.5
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(np.tanh(x[index]),-120404.7946).all():
      return False
    else:
      return True
  def adf1(index):
    if np.greater(x[index],+985220.0807).all():
      return True
    else:
      return True
  def adf2(index):
    if np.equal(x[index],-569001.5899).all():
      return True
    else:
      return False
  def adf3(index):
    if np.greater(x[index],+006971.5201).all():
      return True
    else:
      return False
  def adf4(index):
    if np.greater(np.cos(x[index]),+428134.4840).all():
      return True
    else:
      return True
  def adf7(index):
    if np.less(x[index],-274637.8050).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+294.604, adf1(1)*+296.770, adf2(2)*-455.327, adf3(3)*+546.597, adf4(4)*+590.264, adf7(7)*+016.941], [0, 1, 1, 1, 1], 312.948)
result=p(); 0.8333333333333334
IndLenGenome:282
IndGenome:[14, 4, 48, 43, 30, 99, 48, 75, 31, 89, 11, 83, 60, 79, 67, 4, 88, 59, 69, 70, 19, 94, 9, 21, 91, 90, 3, 64, 54, 14, 78, 90, 74, 61, 82, 71, 55, 22, 16, 96, 7, 75, 71, 84, 32, 50, 36, 28, 77, 88, 43, 8, 11, 44, 84, 12, 10, 37, 54, 19, 58, 26, 76, 67, 37, 90, 89, 4, 90, 10, 55, 99, 95, 93, 64, 9, 70, 81, 21, 25, 99, 94, 97, 64, 22, 84, 50, 36, 59, 25, 73, 35, 32, 26, 90, 40, 52, 17, 36, 37, 89, 44, 19, 76, 48, 54, 69, 94, 87, 45, 82, 85, 82, 65, 89, 94, 43, 45, 94, 34, 23, 88, 32, 50, 84, 80, 85, 52, 89, 81, 57, 81, 39, 81, 98, 54, 10, 56, 50, 13, 30, 57, 22, 12, 44, 22, 86, 70, 89, 50, 32, 53, 42, 70, 30, 72, 67, 68, 79, 87, 78, 48, 82, 73, 46, 74, 84, 85, 11, 99, 80, 99, 69, 52, 91, 50, 51, 58, 84, 85, 25, 76, 89, 10, 55, 49, 46, 25, 8, 9, 36, 39, 10, 11, 6, 33, 1, 85, 18, 36, 75, 41, 16, 44, 23, 69, 7, 80, 0, 10, 90, 55, 72, 95, 65, 48, 6, 86, 49, 81, 34, 25, 46, 92, 17, 22, 46, 10, 32, 41, 88, 33, 69, 31, 78, 23, 67, 81, 44, 4, 6, 36, 22, 97, 10, 82, 20, 41, 70, 18, 13, 29, 89, 16, 37, 30, 80, 7, 3, 97, 28, 14, 17, 55, 22, 93, 90, 35, 62, 82, 96, 60, 62, 99, 29, 78, 36, 30, 25, 62, 44, 100]
last_save: 343

Gen:3
TrainFitness:0.8333333333333334
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],+077243.6733).all():
      return True
    else:
      return True
  def adf1(index):
    if np.less(psqrt(x[index]),-978053.6810).all():
      return False
    else:
      return True
  def adf2(index):
    if np.equal(psqrt(x[index]),+395270.6718).all():
      return True
    else:
      return False
  def adf3(index):
    if np.greater(x[index],-654539.9369).all():
      return False
    else:
      return False
  def adf4(index):
    if np.equal(np.cos(x[index]),+228068.9971).all():
      return False
    else:
      return False
  def adf7(index):
    if np.greater(x[index],+013982.4112).all():
      if np.equal(x[index],-671573.2167).all():
        return True
      else:
        return True
      return True
    else:
      if np.less(x[index],-353352.4283).all():
        return True
      else:
        return False
      return True
  return multiple_operation([adf0(0)*+914.897, adf1(1)*-080.774, adf2(2)*-008.378, adf3(3)*-708.411, adf4(4)*-376.027, adf7(7)*-099.192], [1, 1, 0, 1, 0], 886.449)
result=p(); 0.8333333333333334
IndLenGenome:283
IndGenome:[59, 21, 42, 57, 98, 41, 19, 10, 99, 80, 77, 7, 32, 24, 3, 76, 7, 13, 93, 62, 14, 47, 63, 70, 22, 29, 72, 85, 75, 89, 77, 58, 10, 35, 23, 6, 88, 41, 80, 39, 86, 77, 63, 71, 14, 35, 77, 34, 32, 43, 29, 75, 72, 17, 40, 66, 37, 11, 98, 36, 33, 95, 33, 15, 93, 23, 89, 48, 76, 35, 54, 25, 53, 49, 69, 33, 66, 49, 63, 45, 31, 5, 29, 12, 73, 25, 92, 78, 92, 92, 98, 60, 56, 28, 89, 59, 47, 41, 35, 39, 69, 98, 57, 93, 69, 16, 38, 20, 60, 41, 93, 89, 38, 52, 74, 61, 51, 52, 89, 62, 27, 15, 69, 17, 76, 97, 71, 95, 47, 33, 52, 31, 16, 67, 66, 40, 16, 97, 22, 81, 43, 97, 58, 73, 55, 63, 13, 95, 42, 94, 12, 88, 13, 64, 37, 40, 70, 11, 61, 70, 78, 99, 31, 34, 98, 99, 47, 38, 75, 17, 50, 18, 30, 67, 97, 94, 73, 99, 96, 80, 40, 18, 23, 87, 78, 70, 65, 54, 47, 100, 88, 84, 11, 51, 27, 65, 64, 73, 27, 96, 50, 92, 57, 66, 49, 72, 100, 79, 19, 51, 79, 12, 35, 49, 21, 6, 95, 10, 15, 48, 38, 96, 34, 94, 49, 33, 0, 98, 45, 22, 53, 89, 15, 18, 70, 61, 85, 56, 51, 16, 49, 9, 10, 63, 17, 8, 46, 11, 15, 61, 54, 12, 79, 74, 54, 59, 46, 42, 27, 61, 93, 16, 70, 73, 84, 89, 67, 92, 28, 92, 30, 22, 50, 66, 76, 14, 92, 100, 94, 72, 28, 36, 84]
last_save: 343

Gen:177
TrainFitness:1.0
TestFitness:0.5
MaxGenLen:545
Individual: def p():
  def adf0(index):
    if np.less(x[index],+077739.9369).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(np.cos(x[index]),+524068.8571).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(x[index],+006783.0612).all():
      if np.equal(x[index],-971073.5567).all():
        return True
      else:
        return True
      return True
    else:
      if np.less(x[index],-357252.1283).all():
        return True
      else:
        return False
      return True
  def adf3(index):
    if np.equal(x[index],+743815.7761).all():
      return True
    else:
      return False
  def adf4(index):
    if np.greater(x[index],+353535.9605).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(x[index],-715000.1808).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*-036.814, adf1(1)*+914.574, adf2(2)*-427.067, adf3(3)*+353.533, adf4(4)*+595.398, adf7(7)*+351.592], [1, 0, 0, 0, 0], 068.997)
result=p(); 1.0
IndLenGenome:419
IndGenome:[59, 21, 21, 57, 88, 69, 19, 80, 26, 80, 77, 7, 7, 53, 49, 69, 33, 66, 49, 69, 17, 31, 5, 100, 16, 73, 25, 92, 78, 45, 92, 34, 60, 56, 98, 8, 55, 47, 91, 35, 39, 32, 98, 57, 93, 53, 16, 38, 20, 60, 60, 6, 77, 38, 23, 100, 86, 51, 52, 89, 62, 27, 15, 69, 17, 99, 97, 71, 0, 47, 33, 5, 25, 16, 67, 66, 40, 16, 97, 22, 81, 89, 97, 58, 73, 15, 17, 82, 95, 42, 91, 12, 88, 13, 0, 47, 98, 46, 33, 95, 33, 15, 84, 75, 57, 14, 33, 98, 71, 95, 47, 87, 56, 31, 16, 33, 51, 19, 66, 67, 35, 98, 39, 33, 95, 33, 85, 93, 45, 89, 46, 100, 35, 90, 25, 53, 49, 69, 41, 80, 39, 52, 87, 61, 15, 40, 40, 70, 11, 78, 70, 78, 99, 31, 34, 39, 39, 69, 26, 50, 23, 6, 88, 41, 14, 0, 86, 77, 99, 71, 14, 35, 77, 34, 32, 43, 29, 64, 72, 17, 40, 66, 37, 11, 98, 36, 33, 95, 33, 15, 93, 23, 89, 48, 76, 35, 79, 25, 53, 49, 68, 33, 66, 49, 63, 45, 31, 5, 29, 12, 73, 25, 92, 78, 92, 92, 98, 60, 56, 28, 89, 59, 47, 41, 35, 39, 69, 98, 57, 93, 69, 16, 38, 20, 60, 41, 93, 89, 76, 52, 74, 61, 51, 52, 89, 62, 27, 15, 23, 25, 53, 49, 69, 33, 66, 49, 63, 45, 34, 5, 29, 12, 73, 25, 92, 78, 92, 92, 63, 60, 56, 28, 89, 59, 47, 41, 35, 39, 57, 14, 33, 97, 71, 95, 47, 87, 56, 31, 16, 33, 51, 12, 23, 60, 88, 53, 78, 99, 31, 34, 98, 99, 47, 69, 75, 17, 50, 18, 30, 67, 1, 42, 73, 99, 96, 80, 40, 18, 23, 87, 78, 70, 65, 54, 47, 47, 88, 84, 11, 51, 27, 65, 64, 73, 27, 96, 50, 92, 57, 66, 49, 72, 100, 79, 19, 51, 79, 12, 35, 49, 21, 6, 95, 10, 15, 48, 38, 96, 34, 94, 49, 33, 0, 98, 45, 22, 53, 89, 15, 18, 70, 61, 85, 56, 51, 16, 49, 9, 10, 63, 17, 8, 46, 11, 15, 61, 54, 12, 79, 74, 54, 59, 46, 42, 27, 61, 93, 16, 70, 73, 84, 89, 67, 92, 28, 92, 30, 22, 50, 66, 76, 14, 92, 100, 94, 72, 28, 36, 84]
last_save: 343

Gen:177
last_save: 343
Exit:TrueFalseFalse