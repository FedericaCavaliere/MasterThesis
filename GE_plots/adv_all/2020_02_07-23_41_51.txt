Dataset:Spiral/Full.csv
FS:True
Seed:1234
Size:7

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],-614965.7145).all():
      return True
    else:
      return True
  def adf1(index):
    if np.equal(psqrt(x[index]),+479722.5095).all():
      return False
    else:
      return False
  def adf2(index):
    if np.equal(x[index],-608164.3066).all():
      return False
    else:
      return True
  def adf3(index):
    if np.equal(sigmoid(x[index]),-918261.6735).all():
      return False
    else:
      return True
  def adf4(index):
    if np.less(x[index],+866145.6230).all():
      return True
    else:
      return True
  def adf7(index):
    if np.less(np.tanh(x[index]),-354690.5973).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+412.496, adf1(1)*-896.173, adf2(2)*-824.146, adf3(3)*+149.360, adf4(4)*+764.523, adf7(7)*+016.154], [1, 1, 0, 0, 0], 610.117)
result=p(); 0.8333333333333334
IndLenGenome:283
IndGenome:[67, 26, 79, 15, 93, 21, 22, 51, 77, 27, 9, 78, 67, 6, 10, 38, 71, 49, 37, 35, 51, 40, 35, 1, 32, 25, 91, 52, 84, 47, 47, 62, 9, 89, 66, 95, 46, 8, 88, 36, 50, 43, 3, 29, 17, 55, 96, 51, 44, 10, 26, 94, 78, 44, 56, 26, 45, 88, 81, 36, 12, 27, 11, 71, 60, 83, 37, 46, 60, 11, 49, 46, 51, 27, 40, 48, 91, 57, 75, 46, 42, 75, 34, 80, 23, 12, 29, 83, 58, 97, 39, 16, 70, 83, 32, 37, 91, 87, 21, 55, 97, 47, 79, 62, 33, 93, 91, 75, 38, 74, 25, 18, 32, 41, 13, 90, 37, 20, 48, 76, 4, 89, 44, 59, 11, 12, 76, 17, 57, 51, 22, 46, 24, 78, 47, 34, 22, 23, 46, 39, 65, 44, 59, 55, 95, 94, 84, 94, 75, 13, 76, 75, 6, 72, 55, 42, 46, 65, 86, 43, 96, 91, 74, 20, 64, 80, 51, 59, 31, 4, 46, 72, 42, 15, 44, 47, 17, 91, 71, 49, 98, 82, 17, 16, 91, 20, 23, 92, 23, 95, 42, 34, 8, 63, 82, 91, 19, 61, 47, 92, 99, 52, 34, 13, 0, 57, 8, 68, 6, 40, 39, 49, 72, 77, 65, 60, 15, 38, 24, 33, 94, 23, 64, 13, 17, 79, 30, 5, 47, 23, 10, 14, 80, 11, 35, 90, 97, 76, 38, 10, 92, 3, 33, 61, 93, 16, 81, 75, 12, 89, 29, 27, 12, 27, 79, 55, 72, 85, 9, 16, 29, 90, 11, 32, 26, 0, 4, 25, 82, 37, 7, 37, 4, 38, 81, 6, 96, 5, 29, 26, 50, 81, 62]
last_save: 701

Gen:2001
last_save: 701
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(psqrt(x[index]),-248996.9398).all():
      return True
    else:
      return True
  def adf1(index):
    if np.less(x[index],+016243.2073).all():
      return False
    else:
      return True
  def adf2(index):
    if np.greater(x[index],-760540.5946).all():
      return False
    else:
      return False
  def adf3(index):
    if np.equal(psqrt(x[index]),+363089.4318).all():
      return False
    else:
      return True
  def adf4(index):
    if np.less(x[index],-362008.0160).all():
      return False
    else:
      return False
  def adf7(index):
    if np.equal(x[index],-517523.2405).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+491.889, adf1(1)*+473.178, adf2(2)*-576.583, adf3(3)*+310.995, adf4(4)*+915.806, adf7(7)*+516.396], [1, 0, 1, 0, 0], 865.077)
result=p(); 0.8333333333333334
IndLenGenome:282
IndGenome:[84, 43, 50, 60, 12, 63, 39, 11, 38, 19, 75, 91, 38, 29, 10, 62, 77, 78, 61, 41, 64, 87, 20, 101, 21, 93, 57, 33, 96, 62, 54, 54, 68, 99, 10, 21, 11, 45, 96, 1, 70, 91, 53, 37, 44, 36, 62, 50, 95, 96, 76, 27, 2, 78, 39, 18, 23, 33, 38, 75, 72, 56, 92, 90, 3, 65, 10, 83, 61, 89, 18, 29, 58, 12, 30, 67, 13, 19, 50, 90, 31, 80, 55, 89, 74, 55, 48, 38, 95, 25, 59, 94, 89, 82, 35, 76, 80, 91, 64, 52, 29, 47, 24, 26, 71, 73, 30, 76, 68, 4, 65, 37, 70, 26, 64, 15, 52, 68, 4, 65, 46, 40, 48, 63, 19, 14, 69, 71, 66, 23, 48, 24, 75, 59, 71, 34, 14, 22, 71, 89, 73, 90, 40, 73, 74, 8, 79, 57, 38, 67, 86, 73, 86, 23, 58, 11, 27, 69, 81, 45, 33, 82, 56, 40, 26, 83, 31, 13, 34, 77, 25, 17, 19, 46, 56, 98, 5, 14, 52, 97, 55, 30, 83, 82, 15, 79, 61, 25, 98, 84, 94, 91, 77, 77, 48, 83, 93, 69, 34, 82, 8, 55, 4, 87, 95, 46, 70, 55, 9, 78, 67, 99, 88, 30, 21, 77, 78, 1, 86, 96, 10, 74, 47, 63, 76, 24, 30, 6, 64, 48, 9, 44, 16, 22, 40, 19, 44, 35, 33, 68, 72, 67, 27, 66, 67, 9, 12, 91, 11, 95, 30, 8, 85, 78, 37, 28, 93, 3, 43, 36, 0, 4, 51, 5, 1, 79, 43, 90, 30, 9, 49, 6, 53, 45, 77, 32, 92, 62, 91, 97, 49, 53]
last_save: 702

Gen:9
TrainFitness:1.0
TestFitness:0.3333333333333333
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(np.cos(x[index]),+209412.6360).all():
      return False
    else:
      return False
  def adf1(index):
    if np.equal(sigmoid(x[index]),-431113.8536).all():
      return False
    else:
      return True
  def adf2(index):
    if np.equal(np.tanh(x[index]),+872122.1304).all():
      return True
    else:
      return False
  def adf3(index):
    if np.equal(x[index],-406279.5515).all():
      return False
    else:
      return True
  def adf4(index):
    if np.greater(psqrt(x[index]),-000526.4826).all():
      return False
    else:
      return False
  def adf7(index):
    if np.less(x[index],+005603.1985).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*-482.978, adf1(1)*-125.115, adf2(2)*+706.168, adf3(3)*+024.847, adf4(4)*-020.998, adf7(7)*+964.434], [0, 1, 0, 0, 1], 679.257)
result=p(); 1.0
IndLenGenome:455
IndGenome:[15, 84, 94, 89, 57, 72, 19, 63, 40, 37, 12, 90, 39, 64, 41, 82, 36, 3, 86, 40, 97, 25, 38, 15, 62, 24, 63, 74, 51, 77, 94, 33, 91, 51, 21, 53, 78, 95, 73, 86, 25, 92, 46, 11, 26, 74, 68, 16, 50, 51, 58, 87, 52, 81, 62, 62, 61, 13, 20, 54, 68, 51, 14, 45, 98, 65, 35, 7, 63, 44, 20, 76, 72, 37, 29, 85, 45, 41, 95, 53, 86, 100, 13, 81, 60, 77, 61, 85, 80, 50, 30, 50, 15, 72, 46, 74, 98, 22, 86, 43, 99, 65, 17, 31, 15, 64, 88, 56, 40, 80, 95, 6, 10, 93, 81, 59, 48, 45, 59, 84, 94, 92, 37, 71, 74, 24, 78, 42, 29, 17, 28, 13, 59, 63, 51, 52, 55, 81, 41, 55, 36, 56, 53, 77, 20, 56, 21, 86, 8, 11, 52, 86, 30, 82, 94, 78, 64, 57, 25, 93, 54, 70, 42, 80, 29, 9, 68, 26, 78, 83, 19, 16, 44, 34, 93, 84, 22, 84, 71, 40, 80, 97, 97, 96, 97, 79, 2, 25, 77, 18, 77, 86, 56, 49, 98, 15, 71, 16, 52, 71, 49, 75, 11, 12, 64, 53, 91, 6, 14, 42, 50, 90, 34, 55, 98, 57, 43, 41, 26, 39, 58, 53, 5, 16, 20, 46, 75, 32, 75, 90, 30, 44, 22, 99, 36, 28, 36, 36, 78, 87, 11, 27, 18, 70, 64, 62, 78, 80, 39, 51, 19, 42, 54, 21, 58, 88, 81, 66, 54, 98, 79, 76, 77, 83, 64, 18, 82, 18, 60, 25, 63, 13, 38, 80, 91, 28, 80, 17, 62, 16, 10, 88, 60, 88, 70, 32, 74, 45, 69, 83, 96, 91, 53, 39, 72, 90, 90, 8, 79, 20, 32, 66, 47, 96, 39, 58, 78, 31, 13, 66, 99, 49, 83, 88, 13, 69, 20, 35, 85, 61, 40, 43, 4, 20, 95, 24, 41, 62, 45, 84, 30, 60, 58, 76, 66, 40, 31, 29, 69, 35, 85, 84, 45, 20, 30, 73, 59, 66, 50, 10, 77, 18, 36, 32, 39, 83, 29, 18, 15, 90, 3, 97, 17, 2, 92, 62, 43, 88, 73, 91, 68, 24, 61, 11, 58, 36, 28, 97, 69, 98, 54, 61, 53, 30, 7, 37, 9, 35, 19, 99, 46, 49, 42, 42, 3, 65, 66, 17, 5, 40, 0, 31, 47, 73, 85, 54, 89, 38, 7, 96, 47, 75, 97, 49, 95, 10, 3, 12, 45, 11, 70, 48, 52, 58, 67, 10, 21, 1, 73, 63, 51, 95, 90, 8, 36, 11, 68, 31, 87, 33, 14, 86, 87, 7, 36, 66, 16, 86, 74, 97, 44, 95, 58, 41, 26]
last_save: 702

Gen:9
last_save: 702
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(np.cos(x[index]),-771268.6480).all():
      return True
    else:
      return False
  def adf1(index):
    if np.greater(np.sin(x[index]),+369588.5565).all():
      return True
    else:
      return False
  def adf2(index):
    if np.greater(rlog(x[index]),-574712.2509).all():
      return False
    else:
      return True
  def adf3(index):
    if np.greater(x[index],+680390.7572).all():
      return True
    else:
      return False
  def adf4(index):
    if np.equal(x[index],+776863.2294).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(x[index],-791087.4414).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*-016.506, adf1(1)*+838.156, adf2(2)*+118.605, adf3(3)*-679.807, adf4(4)*+686.330, adf7(7)*+656.353], [0, 0, 0, 0, 0], 009.512)
result=p(); 0.6666666666666666
IndLenGenome:283
IndGenome:[81, 75, 84, 35, 91, 66, 13, 90, 71, 26, 38, 7, 83, 1, 25, 18, 97, 71, 93, 9, 27, 69, 19, 36, 62, 100, 30, 53, 6, 43, 23, 61, 55, 99, 70, 92, 57, 36, 90, 66, 22, 14, 48, 81, 26, 21, 25, 74, 76, 73, 2, 77, 5, 15, 30, 18, 47, 38, 32, 68, 21, 25, 61, 80, 88, 54, 46, 71, 56, 39, 90, 96, 36, 36, 40, 79, 29, 82, 14, 40, 19, 86, 60, 38, 62, 76, 63, 68, 57, 95, 69, 3, 88, 88, 96, 26, 92, 82, 75, 46, 29, 73, 47, 10, 61, 97, 10, 36, 71, 20, 25, 48, 63, 71, 76, 63, 34, 67, 90, 98, 57, 29, 62, 58, 25, 75, 29, 46, 79, 55, 96, 57, 82, 83, 30, 67, 85, 89, 30, 76, 76, 38, 68, 75, 44, 81, 22, 23, 20, 45, 58, 11, 88, 94, 12, 54, 59, 65, 82, 96, 64, 75, 42, 85, 60, 96, 18, 59, 51, 60, 45, 68, 23, 17, 39, 78, 27, 17, 15, 98, 75, 85, 80, 12, 60, 90, 41, 37, 44, 48, 98, 52, 7, 98, 40, 12, 15, 71, 31, 4, 8, 64, 10, 22, 87, 58, 29, 25, 3, 89, 92, 64, 61, 20, 79, 46, 65, 92, 96, 28, 39, 96, 83, 45, 56, 5, 45, 39, 63, 65, 29, 88, 6, 98, 41, 78, 0, 79, 2, 24, 65, 50, 65, 76, 39, 85, 88, 84, 3, 78, 30, 53, 43, 4, 58, 98, 84, 51, 85, 70, 89, 56, 53, 22, 37, 69, 91, 39, 80, 58, 74, 28, 74, 62, 1, 47, 31, 51, 88, 70, 15, 96, 63]
last_save: 703

Gen:7
TrainFitness:0.8333333333333334
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],-313332.0664).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(sigmoid(x[index]),+799161.5908).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(x[index],+446443.5167).all():
      return False
    else:
      return False
  def adf3(index):
    if np.less(x[index],-704728.4437).all():
      return False
    else:
      return True
  def adf4(index):
    if np.less(x[index],+033905.2349).all():
      if np.greater(x[index],-364750.9154).all():
        return False
      else:
        return True
      return True
    else:
      if np.less(x[index],-450955.8458).all():
        return False
      else:
        return True
      return True
  def adf7(index):
    if np.greater(psqrt(x[index]),-419255.7173).all():
      if np.equal(np.cos(x[index]),-692285.4694).all():
        return False
      else:
        return False
      return True
    else:
      if np.equal(sigmoid(x[index]),-153727.5749).all():
        return True
      else:
        return True
      return True
  return multiple_operation([adf0(0)*+474.653, adf1(1)*-740.170, adf2(2)*-579.413, adf3(3)*+790.344, adf4(4)*-712.836, adf7(7)*-908.896], [0, 0, 1, 0, 1], 924.753)
result=p(); 0.8333333333333334
IndLenGenome:340
IndGenome:[23, 82, 47, 81, 94, 59, 22, 53, 89, 13, 21, 13, 13, 33, 82, 20, 6, 56, 34, 93, 95, 52, 39, 13, 42, 93, 25, 94, 15, 77, 29, 39, 91, 36, 61, 65, 69, 70, 38, 49, 91, 85, 37, 87, 83, 83, 90, 85, 94, 84, 46, 84, 94, 63, 55, 21, 56, 37, 89, 33, 87, 7, 19, 85, 22, 59, 48, 17, 20, 74, 47, 72, 48, 34, 14, 73, 77, 19, 22, 18, 92, 39, 49, 99, 63, 80, 28, 30, 43, 73, 29, 50, 95, 62, 93, 84, 29, 61, 63, 81, 79, 57, 11, 63, 46, 64, 97, 45, 80, 99, 11, 15, 54, 33, 96, 54, 45, 88, 97, 45, 85, 68, 14, 75, 90, 89, 55, 15, 58, 74, 35, 48, 75, 96, 20, 10, 88, 74, 18, 34, 77, 74, 29, 61, 94, 81, 29, 52, 95, 25, 97, 31, 67, 93, 77, 14, 56, 19, 78, 89, 13, 56, 59, 42, 42, 18, 95, 84, 16, 89, 4, 87, 53, 78, 75, 77, 94, 69, 21, 47, 21, 51, 35, 13, 37, 12, 77, 15, 97, 44, 19, 42, 24, 72, 31, 49, 47, 78, 63, 64, 27, 74, 26, 95, 33, 72, 47, 69, 57, 64, 30, 71, 27, 30, 63, 57, 93, 85, 37, 89, 54, 41, 93, 10, 94, 33, 67, 79, 60, 33, 84, 74, 25, 5, 56, 37, 91, 32, 48, 13, 76, 71, 17, 12, 99, 30, 48, 18, 49, 46, 16, 66, 66, 37, 12, 73, 90, 59, 82, 44, 87, 45, 13, 93, 73, 59, 62, 11, 67, 90, 97, 85, 35, 42, 43, 90, 71, 26, 29, 33, 79, 33, 39, 33, 2, 41, 80, 24, 8, 86, 93, 0, 74, 82, 22, 37, 60, 15, 86, 49, 2, 44, 78, 16, 63, 44, 85, 33, 23, 51, 74, 24, 91, 2, 45, 51, 78, 68, 6, 75, 28, 21, 17, 40, 65, 3, 15, 53, 85, 77, 25, 58, 56, 4, 32, 9, 0, 46, 92, 16]
last_save: 703

Gen:596
TrainFitness:1.0
TestFitness:0.6666666666666666
MaxGenLen:665
Individual: def p():
  def adf0(index):
    if np.less(x[index],-313332.0664).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(sigmoid(x[index]),+799161.5908).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(x[index],+008484.7491).all():
      return True
    else:
      return False
  def adf3(index):
    if np.less(x[index],+993080.3574).all():
      if np.greater(x[index],-584509.5584).all():
        return False
      else:
        return True
      return False
    else:
      if np.equal(rlog(x[index]),+449143.9052).all():
        return False
      else:
        return True
      return False
  def adf4(index):
    if np.greater(x[index],-647509.1543).all():
      return True
    else:
      return True
  def adf7(index):
    if np.greater(x[index],+035584.5866).all():
      if np.less(np.sin(x[index]),-914192.5571).all():
        if np.greater(x[index],-393733.3236).all():
          return True
        else:
          return True
        return False
      else:
        if np.less(x[index],+545771.3667).all():
          return False
        else:
          return True
        return False
      return False
    else:
      if np.equal(x[index],+754854.5743).all():
        return False
      else:
        return False
      return True
  return multiple_operation([adf0(0)*-653.279, adf1(1)*-560.376, adf2(2)*-791.401, adf3(3)*+364.794, adf4(4)*-474.910, adf7(7)*-372.757], [1, 0, 0, 0, 1], 783.474)
result=p(); 1.0
IndLenGenome:437
IndGenome:[23, 82, 47, 81, 94, 59, 22, 53, 89, 13, 21, 13, 13, 33, 82, 20, 6, 56, 34, 93, 95, 52, 39, 13, 42, 93, 25, 94, 15, 77, 29, 39, 91, 36, 61, 65, 69, 70, 38, 49, 91, 85, 37, 87, 83, 83, 90, 96, 20, 10, 88, 74, 18, 34, 77, 74, 29, 61, 94, 81, 29, 48, 95, 25, 97, 31, 72, 39, 49, 99, 63, 80, 28, 30, 43, 15, 97, 44, 19, 3, 45, 88, 97, 45, 85, 68, 14, 75, 90, 89, 55, 15, 58, 74, 35, 48, 75, 9, 20, 10, 88, 74, 18, 34, 44, 74, 29, 61, 94, 73, 29, 50, 95, 62, 93, 84, 29, 61, 63, 81, 79, 57, 11, 35, 46, 64, 97, 45, 80, 99, 11, 15, 54, 33, 96, 54, 45, 88, 97, 45, 85, 68, 14, 75, 90, 53, 55, 15, 58, 74, 35, 48, 56, 96, 20, 10, 88, 74, 18, 34, 77, 74, 29, 61, 94, 81, 29, 52, 95, 25, 97, 31, 67, 93, 77, 14, 59, 30, 53, 89, 13, 37, 13, 13, 33, 82, 63, 6, 56, 34, 49, 95, 52, 39, 13, 42, 93, 25, 94, 15, 77, 57, 11, 63, 46, 86, 17, 45, 80, 99, 11, 15, 62, 11, 63, 46, 64, 97, 45, 44, 18, 95, 84, 25, 37, 14, 83, 83, 87, 26, 78, 63, 64, 27, 74, 26, 95, 33, 72, 47, 69, 74, 35, 48, 75, 96, 20, 83, 87, 26, 95, 33, 72, 47, 69, 1, 64, 30, 71, 27, 30, 11, 63, 26, 64, 97, 89, 4, 87, 9, 78, 84, 77, 94, 69, 21, 50, 21, 51, 35, 13, 37, 12, 77, 15, 97, 44, 3, 42, 24, 72, 31, 49, 47, 78, 63, 64, 27, 74, 26, 95, 33, 72, 47, 69, 57, 64, 30, 71, 27, 30, 63, 57, 93, 85, 37, 89, 54, 41, 93, 10, 94, 33, 67, 79, 60, 33, 84, 74, 25, 5, 56, 37, 91, 32, 48, 13, 76, 71, 17, 12, 99, 30, 48, 18, 49, 46, 16, 66, 66, 37, 12, 73, 90, 59, 82, 44, 87, 45, 13, 93, 73, 59, 62, 11, 67, 90, 97, 85, 35, 42, 43, 90, 45, 26, 29, 33, 79, 33, 39, 33, 2, 41, 80, 24, 8, 86, 93, 0, 74, 82, 22, 37, 60, 15, 86, 49, 2, 44, 78, 16, 63, 44, 85, 33, 23, 51, 74, 24, 91, 2, 45, 51, 78, 68, 35, 75, 28, 21, 17, 40, 65, 3, 15, 53, 85, 77, 25, 58, 56, 4, 32, 9, 0, 46, 92, 16]
last_save: 703

Gen:596
last_save: 703
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],-238571.3000).all():
      return True
    else:
      return False
  def adf1(index):
    if np.less(x[index],+449575.3108).all():
      return True
    else:
      return True
  def adf2(index):
    if np.less(x[index],+046816.5576).all():
      return True
    else:
      return False
  def adf3(index):
    if np.greater(x[index],+030844.8557).all():
      return True
    else:
      return False
  def adf4(index):
    if np.equal(x[index],+633455.4780).all():
      return True
    else:
      return True
  def adf7(index):
    if np.equal(x[index],+474988.4868).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*-383.959, adf1(1)*-483.000, adf2(2)*+160.430, adf3(3)*+197.186, adf4(4)*-905.550, adf7(7)*+635.012], [1, 1, 0, 0, 0], 786.052)
result=p(); 0.6666666666666666
IndLenGenome:279
IndGenome:[71, 24, 2, 23, 98, 42, 21, 86, 25, 63, 8, 28, 49, 34, 55, 64, 34, 45, 68, 11, 37, 28, 83, 26, 37, 78, 38, 13, 43, 41, 98, 48, 79, 30, 65, 51, 30, 65, 46, 25, 94, 99, 52, 80, 28, 98, 72, 83, 97, 61, 68, 25, 58, 76, 67, 29, 63, 56, 17, 50, 7, 34, 12, 44, 27, 35, 77, 60, 18, 78, 68, 30, 14, 96, 14, 99, 53, 53, 88, 29, 76, 10, 75, 53, 54, 41, 70, 92, 50, 81, 38, 91, 72, 80, 55, 15, 8, 63, 33, 42, 56, 63, 68, 57, 40, 73, 80, 24, 33, 58, 17, 87, 44, 80, 7, 75, 71, 18, 93, 15, 41, 21, 91, 60, 77, 28, 90, 44, 99, 95, 68, 53, 17, 43, 58, 78, 93, 68, 82, 70, 61, 51, 16, 63, 10, 84, 23, 79, 65, 95, 79, 59, 2, 80, 91, 11, 80, 69, 75, 10, 74, 96, 39, 89, 14, 28, 38, 47, 24, 55, 28, 3, 86, 48, 50, 18, 61, 15, 45, 68, 17, 46, 94, 60, 26, 56, 92, 28, 27, 12, 30, 53, 10, 52, 10, 87, 88, 81, 73, 39, 35, 34, 9, 65, 59, 29, 83, 49, 98, 74, 68, 7, 7, 71, 16, 56, 24, 65, 75, 16, 58, 4, 52, 67, 15, 3, 57, 60, 86, 14, 53, 96, 60, 7, 72, 0, 2, 57, 84, 16, 84, 86, 82, 74, 20, 24, 32, 74, 56, 19, 42, 74, 22, 61, 90, 6, 34, 58, 43, 88, 80, 88, 40, 84, 51, 92, 5, 94, 59, 97, 95, 52, 16, 29, 3, 91, 83, 37, 12]
last_save: 704

Gen:16
TrainFitness:0.8333333333333334
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],-710946.7407).all():
      return True
    else:
      return True
  def adf1(index):
    if np.equal(x[index],+338132.5841).all():
      return False
    else:
      return True
  def adf2(index):
    if np.greater(x[index],-239861.7602).all():
      return False
    else:
      return True
  def adf3(index):
    if np.equal(sigmoid(x[index]),+667645.6301).all():
      if np.equal(x[index],-323414.9970).all():
        return False
      else:
        return False
      return False
    else:
      if np.equal(x[index],+497864.8855).all():
        return False
      else:
        return True
      return True
  def adf4(index):
    if np.equal(np.cos(x[index]),-708499.6717).all():
      if np.equal(rlog(x[index]),+429668.9454).all():
        return False
      else:
        return False
      return False
    else:
      if np.less(x[index],-474506.6560).all():
        return False
      else:
        return False
      return True
  def adf7(index):
    if np.less(x[index],+008418.0664).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+151.275, adf1(1)*+166.458, adf2(2)*-548.674, adf3(3)*-141.534, adf4(4)*-904.640, adf7(7)*-881.191], [1, 0, 1, 1, 0], 470.406)
result=p(); 0.8333333333333334
IndLenGenome:389
IndGenome:[38, 0, 5, 21, 89, 65, 59, 31, 4, 27, 51, 80, 79, 64, 6, 77, 64, 40, 97, 10, 26, 15, 91, 86, 67, 27, 94, 71, 83, 73, 28, 91, 43, 2, 95, 78, 74, 71, 89, 54, 48, 13, 30, 17, 62, 47, 78, 42, 63, 29, 28, 36, 11, 7, 36, 60, 12, 63, 50, 39, 2, 17, 92, 12, 69, 10, 60, 99, 96, 86, 17, 86, 84, 65, 66, 53, 50, 51, 79, 23, 7, 62, 71, 85, 73, 22, 43, 74, 31, 84, 9, 19, 87, 30, 61, 35, 91, 11, 47, 57, 87, 66, 42, 54, 19, 87, 98, 26, 24, 88, 98, 5, 5, 85, 40, 46, 84, 22, 38, 89, 46, 67, 74, 61, 77, 17, 40, 38, 94, 89, 39, 56, 17, 11, 27, 23, 92, 44, 64, 64, 48, 47, 34, 52, 49, 6, 56, 48, 99, 74, 65, 64, 93, 93, 35, 3, 82, 69, 79, 97, 70, 34, 97, 54, 85, 90, 6, 36, 75, 96, 80, 23, 83, 28, 70, 91, 97, 5, 48, 46, 42, 60, 90, 88, 34, 81, 68, 80, 96, 46, 84, 97, 62, 16, 76, 27, 94, 24, 61, 15, 11, 72, 37, 45, 40, 20, 37, 71, 56, 36, 54, 95, 78, 84, 73, 25, 45, 74, 88, 26, 47, 74, 72, 11, 49, 91, 94, 21, 85, 63, 34, 91, 91, 48, 39, 10, 44, 46, 14, 30, 98, 91, 23, 98, 88, 51, 71, 69, 21, 57, 71, 44, 31, 87, 62, 52, 34, 27, 50, 64, 10, 86, 59, 10, 77, 90, 34, 23, 42, 45, 35, 69, 27, 93, 77, 41, 41, 25, 73, 36, 88, 52, 74, 54, 59, 92, 28, 52, 49, 52, 54, 46, 57, 96, 85, 72, 58, 30, 47, 74, 47, 83, 15, 76, 45, 76, 20, 64, 85, 99, 48, 16, 66, 48, 38, 14, 67, 66, 2, 40, 68, 90, 38, 14, 31, 10, 50, 99, 12, 57, 26, 0, 15, 35, 27, 72, 14, 28, 52, 73, 11, 9, 94, 68, 71, 47, 37, 56, 61, 34, 53, 28, 32, 59, 35, 97, 93, 89, 46, 74, 38, 33, 21, 14, 14, 94, 51, 1, 6, 35, 16, 18, 41, 4, 42, 46, 39, 63, 27, 12, 11, 83, 92, 93, 2, 27, 0, 93, 12]
last_save: 704

Gen:39
TrainFitness:1.0
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],-676456.3019).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(x[index],+149970.1511).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(x[index],+488555.0642).all():
      if np.less(x[index],-709499.4717).all():
        if np.greater(rlog(x[index]),+429668.9454).all():
          return False
        else:
          return False
        return False
      else:
        if np.less(x[index],-474506.6560).all():
          return False
        else:
          return False
        return True
      return True
    else:
      if np.less(x[index],+008418.9674).all():
        return False
      else:
        return True
      return True
  def adf3(index):
    if np.greater(np.cos(x[index]),-750071.6640).all():
      return True
    else:
      return True
  def adf4(index):
    if np.equal(x[index],-417224.7040).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(psqrt(x[index]),-973133.0852).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-395.825, adf1(1)*-112.008, adf2(2)*-066.472, adf3(3)*+441.512, adf4(4)*-071.634, adf7(7)*+355.486], [0, 0, 1, 1, 1], 853.411)
result=p(); 1.0
IndLenGenome:489
IndGenome:[38, 0, 5, 21, 89, 65, 60, 99, 96, 86, 17, 86, 84, 65, 66, 53, 50, 51, 79, 23, 47, 62, 71, 85, 73, 22, 30, 74, 31, 84, 9, 19, 37, 30, 61, 35, 91, 11, 47, 57, 87, 66, 42, 54, 19, 87, 98, 26, 24, 88, 98, 5, 5, 85, 40, 46, 84, 22, 38, 89, 46, 67, 74, 61, 77, 17, 40, 9, 94, 89, 39, 94, 17, 11, 27, 23, 12, 44, 64, 64, 48, 47, 34, 52, 49, 6, 56, 48, 99, 74, 65, 64, 93, 77, 35, 3, 82, 69, 79, 97, 70, 34, 97, 54, 85, 90, 6, 36, 75, 96, 80, 23, 83, 28, 70, 91, 97, 5, 48, 46, 42, 60, 90, 88, 34, 81, 68, 59, 96, 77, 84, 97, 62, 16, 76, 27, 57, 24, 61, 15, 61, 72, 37, 45, 40, 20, 37, 71, 56, 36, 54, 20, 94, 56, 37, 35, 98, 69, 21, 57, 71, 44, 31, 87, 62, 52, 34, 27, 50, 64, 10, 86, 59, 10, 77, 90, 34, 23, 42, 45, 35, 69, 27, 93, 71, 53, 93, 20, 78, 35, 62, 36, 37, 71, 67, 48, 63, 45, 73, 59, 85, 48, 92, 25, 71, 73, 83, 51, 61, 42, 60, 90, 88, 34, 81, 68, 80, 96, 46, 84, 97, 62, 16, 76, 27, 94, 24, 61, 15, 11, 72, 37, 45, 40, 20, 37, 71, 56, 93, 54, 95, 78, 84, 73, 25, 45, 74, 88, 26, 47, 74, 72, 11, 49, 91, 94, 18, 25, 63, 34, 91, 91, 48, 39, 10, 44, 46, 14, 30, 98, 91, 23, 98, 88, 51, 71, 69, 21, 57, 71, 44, 31, 87, 62, 52, 34, 27, 50, 64, 89, 39, 46, 17, 11, 32, 23, 92, 44, 64, 64, 48, 47, 34, 52, 49, 6, 56, 48, 99, 74, 53, 64, 89, 93, 39, 23, 68, 50, 29, 46, 37, 48, 37, 53, 69, 14, 86, 46, 90, 85, 64, 99, 77, 83, 38, 19, 59, 67, 50, 52, 25, 99, 42, 17, 34, 5, 22, 61, 38, 7, 53, 40, 9, 95, 39, 50, 88, 5, 76, 60, 52, 5, 12, 69, 10, 60, 99, 96, 86, 17, 12, 11, 47, 77, 34, 43, 59, 49, 63, 34, 91, 91, 48, 39, 10, 44, 46, 14, 30, 98, 91, 23, 98, 88, 51, 71, 69, 21, 57, 71, 44, 31, 87, 62, 17, 76, 20, 64, 85, 99, 48, 16, 66, 48, 38, 14, 88, 66, 33, 40, 68, 90, 38, 14, 31, 10, 50, 99, 18, 57, 26, 0, 15, 35, 33, 72, 14, 28, 52, 73, 11, 9, 94, 68, 71, 47, 37, 56, 61, 34, 53, 28, 32, 59, 35, 97, 93, 89, 46, 74, 38, 33, 21, 14, 14, 94, 51, 1, 6, 35, 16, 18, 41, 4, 42, 46, 39, 63, 27, 12, 11, 83, 92, 93, 2, 27, 0, 93, 12]
last_save: 704

Gen:39
last_save: 704
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(sigmoid(x[index]),-881833.3399).all():
      return False
    else:
      return False
  def adf1(index):
    if np.greater(x[index],-619548.7844).all():
      return False
    else:
      return False
  def adf2(index):
    if np.equal(sigmoid(x[index]),+118301.7831).all():
      return True
    else:
      return True
  def adf3(index):
    if np.equal(x[index],+069882.0473).all():
      return True
    else:
      return False
  def adf4(index):
    if np.less(x[index],+019592.6248).all():
      return False
    else:
      return True
  def adf7(index):
    if np.greater(np.sin(x[index]),-125852.7541).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+533.384, adf1(1)*+704.281, adf2(2)*+103.396, adf3(3)*+525.698, adf4(4)*+858.434, adf7(7)*-591.802], [0, 1, 1, 1, 1], 326.453)
result=p(); 0.8333333333333334
IndLenGenome:283
IndGenome:[56, 91, 28, 81, 81, 69, 35, 65, 77, 32, 9, 16, 98, 6, 33, 57, 26, 99, 20, 74, 77, 7, 7, 16, 28, 90, 68, 82, 76, 46, 82, 98, 23, 5, 89, 56, 65, 18, 92, 100, 86, 12, 37, 45, 39, 8, 57, 56, 65, 68, 54, 30, 38, 73, 23, 63, 99, 67, 9, 89, 73, 87, 16, 63, 60, 83, 71, 5, 10, 44, 44, 64, 98, 60, 97, 33, 39, 55, 88, 35, 82, 45, 93, 88, 42, 95, 61, 93, 71, 36, 64, 79, 63, 30, 46, 56, 92, 58, 83, 83, 51, 17, 60, 82, 39, 61, 28, 77, 69, 19, 85, 30, 87, 44, 27, 59, 45, 33, 96, 20, 38, 72, 97, 18, 43, 11, 72, 38, 68, 80, 89, 28, 54, 13, 30, 83, 73, 74, 58, 34, 26, 10, 75, 55, 52, 42, 38, 54, 69, 22, 43, 37, 22, 23, 39, 40, 81, 76, 39, 33, 61, 49, 78, 58, 68, 90, 85, 85, 55, 95, 24, 81, 92, 41, 91, 82, 10, 11, 27, 19, 91, 98, 93, 44, 58, 29, 61, 86, 9, 62, 4, 74, 58, 87, 83, 51, 15, 72, 35, 0, 64, 48, 37, 75, 73, 95, 78, 61, 6, 21, 65, 46, 80, 50, 2, 71, 12, 13, 97, 59, 95, 90, 53, 42, 35, 77, 9, 17, 8, 66, 12, 16, 5, 45, 88, 42, 28, 5, 80, 73, 57, 8, 87, 12, 57, 55, 85, 33, 65, 79, 20, 42, 11, 69, 72, 26, 92, 34, 66, 44, 52, 86, 14, 1, 99, 17, 80, 41, 63, 58, 44, 75, 49, 28, 41, 95, 3, 57, 94, 90, 15, 92, 9]
last_save: 705

Gen:8
TrainFitness:1.0
TestFitness:0.3333333333333333
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],-793175.4148).all():
      return False
    else:
      return False
  def adf1(index):
    if np.equal(x[index],-980404.2576).all():
      if np.less(sigmoid(x[index]),+818297.0122).all():
        if np.greater(x[index],-589218.2377).all():
          return True
        else:
          return True
        return False
      else:
        if np.equal(rlog(x[index]),+996950.4378).all():
          return True
        else:
          return False
        return True
      return False
    else:
      if np.less(sigmoid(x[index]),+708316.3790).all():
        return False
      else:
        return False
      return True
  def adf2(index):
    if np.less(x[index],+755562.2529).all():
      if np.equal(psqrt(x[index]),+381227.3478).all():
        return False
      else:
        return True
      return True
    else:
      if np.equal(x[index],+109903.7853).all():
        return True
      else:
        return False
      return False
  def adf3(index):
    if np.equal(x[index],-863213.9857).all():
      return False
    else:
      return True
  def adf4(index):
    if np.greater(psqrt(x[index]),+572035.2362).all():
      return False
    else:
      return False
  def adf7(index):
    if np.greater(x[index],+004877.1736).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+100.747, adf1(1)*-489.044, adf2(2)*+261.943, adf3(3)*-495.275, adf4(4)*+651.220, adf7(7)*-773.956], [0, 0, 0, 0, 1], 052.600)
result=p(); 1.0
IndLenGenome:373
IndGenome:[88, 57, 95, 7, 83, 75, 45, 95, 17, 57, 89, 43, 21, 67, 85, 54, 81, 84, 98, 89, 81, 7, 62, 21, 23, 39, 30, 55, 73, 79, 68, 30, 44, 70, 74, 72, 55, 57, 46, 90, 46, 7, 6, 81, 66, 22, 24, 28, 81, 38, 32, 59, 97, 80, 61, 22, 12, 47, 99, 47, 12, 95, 30, 15, 88, 49, 92, 21, 18, 52, 93, 57, 77, 38, 40, 25, 77, 23, 94, 28, 13, 18, 16, 89, 29, 96, 79, 75, 80, 4, 53, 77, 38, 64, 57, 70, 35, 31, 73, 14, 33, 22, 92, 23, 87, 20, 38, 3, 81, 26, 93, 67, 79, 40, 41, 35, 88, 53, 80, 54, 10, 51, 14, 94, 2, 7, 5, 85, 45, 66, 42, 92, 35, 82, 29, 27, 86, 20, 35, 41, 18, 82, 43, 88, 61, 72, 92, 57, 13, 4, 27, 38, 45, 58, 86, 95, 83, 27, 96, 78, 55, 21, 60, 19, 49, 50, 43, 97, 88, 65, 3, 64, 59, 7, 67, 5, 14, 15, 52, 57, 36, 48, 56, 33, 62, 51, 83, 39, 68, 45, 77, 65, 78, 79, 15, 90, 30, 89, 23, 96, 81, 25, 67, 42, 60, 3, 15, 62, 33, 86, 52, 19, 9, 27, 87, 66, 95, 71, 56, 81, 50, 30, 54, 98, 17, 97, 61, 67, 73, 36, 41, 58, 30, 85, 30, 92, 49, 11, 70, 30, 47, 54, 67, 59, 53, 11, 74, 98, 89, 70, 64, 34, 79, 38, 53, 82, 66, 71, 29, 34, 33, 71, 55, 96, 44, 69, 45, 42, 47, 25, 46, 2, 44, 56, 35, 21, 32, 22, 10, 55, 5, 3, 17, 57, 3, 69, 15, 96, 41, 26, 60, 22, 84, 87, 61, 90, 35, 82, 86, 0, 30, 74, 65, 60, 15, 46, 79, 4, 30, 18, 75, 98, 15, 55, 68, 31, 76, 64, 27, 54, 37, 40, 97, 25, 62, 94, 59, 85, 70, 97, 22, 84, 58, 9, 76, 44, 47, 74, 3, 53, 83, 75, 28, 69, 73, 25, 92, 29, 53, 27, 43, 20, 89, 38, 91, 82, 49, 35, 48, 38, 21, 73, 73, 67, 95, 59, 53, 19, 5, 61, 90, 42, 59]
last_save: 705

Gen:8
last_save: 705
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(np.tanh(x[index]),+044527.4590).all():
      return True
    else:
      return True
  def adf1(index):
    if np.equal(rlog(x[index]),+441642.8800).all():
      return False
    else:
      return True
  def adf2(index):
    if np.equal(x[index],-221399.7269).all():
      return True
    else:
      return True
  def adf3(index):
    if np.equal(x[index],+436446.0240).all():
      return True
    else:
      return True
  def adf4(index):
    if np.greater(x[index],-110488.2948).all():
      return False
    else:
      return True
  def adf7(index):
    if np.less(x[index],-434839.1707).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*-682.587, adf1(1)*-335.687, adf2(2)*+668.921, adf3(3)*+586.932, adf4(4)*+455.672, adf7(7)*-769.895], [0, 1, 0, 1, 1], 906.284)
result=p(); 0.6666666666666666
IndLenGenome:282
IndGenome:[41, 69, 93, 9, 46, 72, 35, 59, 18, 11, 93, 81, 76, 81, 10, 56, 78, 4, 24, 65, 44, 53, 6, 49, 48, 45, 58, 83, 10, 18, 40, 69, 64, 14, 30, 67, 82, 40, 28, 71, 76, 78, 17, 95, 67, 72, 43, 60, 51, 51, 44, 34, 5, 14, 72, 29, 98, 58, 4, 66, 42, 60, 8, 62, 17, 32, 58, 52, 77, 62, 23, 38, 80, 87, 74, 62, 38, 16, 31, 50, 53, 89, 89, 94, 81, 58, 17, 19, 83, 34, 56, 13, 63, 43, 10, 67, 89, 67, 72, 31, 96, 63, 69, 37, 75, 96, 63, 92, 15, 95, 72, 35, 38, 88, 30, 31, 59, 46, 76, 87, 30, 91, 25, 16, 33, 92, 78, 44, 75, 19, 35, 78, 59, 82, 46, 89, 18, 31, 54, 40, 15, 44, 96, 37, 18, 72, 87, 19, 52, 78, 67, 84, 40, 19, 64, 96, 44, 58, 78, 32, 34, 89, 91, 57, 13, 95, 87, 30, 16, 74, 53, 91, 85, 13, 71, 98, 18, 64, 39, 60, 10, 64, 16, 28, 12, 26, 84, 17, 89, 62, 79, 45, 27, 1, 48, 90, 47, 47, 69, 27, 86, 70, 67, 78, 53, 89, 66, 69, 51, 93, 9, 8, 27, 51, 56, 80, 8, 76, 66, 58, 9, 71, 16, 4, 40, 84, 61, 44, 70, 99, 36, 37, 61, 38, 75, 60, 78, 97, 33, 56, 91, 74, 97, 86, 30, 12, 47, 80, 46, 23, 42, 59, 79, 59, 12, 76, 60, 68, 40, 10, 79, 71, 17, 92, 61, 6, 76, 65, 49, 84, 27, 78, 9, 62, 87, 91, 13, 27, 17, 30, 9, 45]
last_save: 706

Gen:4
TrainFitness:1.0
TestFitness:0.5
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],-902891.4953).all():
      return False
    else:
      return True
  def adf1(index):
    if np.greater(x[index],-676582.8312).all():
      return True
    else:
      return True
  def adf2(index):
    if np.greater(np.tanh(x[index]),-506652.9594).all():
      return False
    else:
      return True
  def adf3(index):
    if np.greater(psqrt(x[index]),+354098.8026).all():
      return True
    else:
      return False
  def adf4(index):
    if np.equal(sigmoid(x[index]),+394106.1199).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(x[index],+006452.4001).all():
      if np.less(np.tanh(x[index]),-959452.6178).all():
        return False
      else:
        return True
      return True
    else:
      if np.greater(np.sin(x[index]),+026813.3583).all():
        if np.equal(x[index],-106119.9253).all():
          return True
        else:
          return False
        return False
      else:
        if np.equal(np.cos(x[index]),+452096.1120).all():
          return True
        else:
          return False
        return False
      return False
  return multiple_operation([adf0(0)*-610.065, adf1(1)*+157.346, adf2(2)*-683.827, adf3(3)*-062.769, adf4(4)*+918.098, adf7(7)*+631.728], [1, 1, 1, 0, 1], 081.843)
result=p(); 1.0
IndLenGenome:356
IndGenome:[89, 97, 33, 51, 55, 99, 63, 47, 84, 89, 80, 42, 88, 99, 91, 4, 9, 85, 83, 39, 32, 14, 67, 99, 19, 21, 95, 24, 66, 67, 86, 95, 38, 2, 98, 93, 51, 32, 32, 50, 71, 51, 93, 4, 50, 90, 81, 79, 55, 90, 26, 46, 5, 42, 59, 35, 69, 84, 75, 32, 96, 51, 87, 88, 11, 60, 26, 16, 93, 45, 54, 90, 39, 58, 78, 50, 92, 16, 98, 91, 53, 43, 35, 78, 93, 13, 74, 53, 43, 39, 84, 21, 20, 86, 61, 11, 39, 79, 72, 55, 23, 10, 19, 27, 55, 74, 46, 85, 50, 10, 66, 24, 35, 12, 4, 50, 90, 81, 79, 55, 90, 26, 46, 5, 42, 59, 35, 69, 84, 75, 32, 96, 51, 87, 88, 11, 60, 26, 16, 93, 45, 54, 90, 39, 58, 78, 50, 92, 16, 98, 91, 53, 43, 35, 78, 93, 13, 74, 53, 43, 39, 84, 21, 20, 86, 61, 11, 39, 79, 72, 55, 23, 10, 19, 27, 55, 74, 46, 85, 50, 10, 66, 24, 35, 12, 70, 59, 56, 51, 21, 82, 90, 74, 63, 11, 55, 75, 80, 51, 81, 23, 96, 91, 30, 90, 86, 45, 54, 70, 89, 71, 85, 37, 93, 34, 26, 72, 23, 38, 86, 98, 63, 88, 92, 7, 93, 43, 80, 70, 26, 32, 97, 16, 49, 7, 80, 39, 19, 31, 98, 30, 79, 88, 27, 20, 92, 16, 83, 91, 47, 62, 38, 40, 61, 47, 75, 16, 97, 88, 60, 48, 91, 28, 74, 33, 12, 5, 57, 65, 58, 17, 43, 73, 83, 14, 50, 6, 77, 54, 18, 87, 60, 67, 75, 35, 37, 75, 39, 21, 52, 61, 89, 81, 40, 31, 87, 73, 16, 53, 17, 22, 57, 9, 65, 33, 90, 79, 46, 27, 22, 67, 0, 78, 35, 27, 56, 44, 100, 75, 33, 34, 47, 91, 69, 73, 82, 10, 22, 29, 79, 6, 61, 28, 7, 30, 53, 15, 96, 87, 86, 86, 97, 31, 39, 7, 68, 2, 6, 1, 26, 94, 94, 34, 3, 76, 88]
last_save: 706

Gen:4
last_save: 706
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.0
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(psqrt(x[index]),-797198.6140).all():
      return False
    else:
      return False
  def adf1(index):
    if np.greater(rlog(x[index]),+932673.4488).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(x[index],-210958.2305).all():
      return True
    else:
      return True
  def adf3(index):
    if np.equal(x[index],+396336.2064).all():
      return False
    else:
      return False
  def adf4(index):
    if np.less(rlog(x[index]),+433764.7666).all():
      return True
    else:
      return True
  def adf7(index):
    if np.equal(x[index],+456969.9311).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*-769.506, adf1(1)*+263.677, adf2(2)*+586.801, adf3(3)*-849.859, adf4(4)*-256.245, adf7(7)*+837.641], [0, 0, 0, 0, 1], 718.800)
result=p(); 0.6666666666666666
IndLenGenome:283
IndGenome:[79, 30, 80, 59, 13, 75, 45, 21, 51, 48, 48, 60, 49, 8, 44, 97, 51, 55, 66, 99, 20, 36, 4, 69, 9, 63, 70, 15, 70, 51, 52, 42, 56, 98, 85, 54, 66, 3, 67, 82, 25, 93, 97, 72, 87, 94, 38, 42, 43, 46, 96, 65, 41, 7, 35, 92, 61, 11, 86, 60, 67, 36, 34, 7, 69, 22, 25, 79, 91, 59, 95, 75, 2, 48, 11, 23, 63, 86, 19, 9, 34, 67, 72, 86, 90, 66, 53, 64, 46, 87, 50, 44, 30, 33, 36, 77, 88, 61, 93, 39, 16, 98, 63, 56, 52, 30, 27, 59, 10, 59, 58, 33, 19, 23, 36, 47, 88, 23, 32, 16, 24, 92, 78, 25, 89, 98, 86, 41, 47, 38, 46, 84, 49, 16, 94, 46, 59, 21, 81, 40, 83, 68, 45, 68, 51, 11, 23, 43, 27, 1, 82, 70, 95, 62, 28, 21, 40, 30, 40, 73, 74, 28, 65, 79, 16, 31, 74, 76, 19, 85, 69, 31, 39, 55, 69, 66, 41, 62, 36, 73, 89, 38, 78, 73, 67, 94, 24, 52, 33, 86, 76, 30, 91, 80, 75, 68, 38, 41, 86, 39, 38, 64, 98, 42, 2, 36, 77, 15, 92, 7, 63, 48, 79, 11, 53, 69, 14, 98, 85, 11, 2, 11, 54, 81, 19, 79, 77, 22, 23, 33, 96, 15, 29, 81, 51, 54, 24, 39, 47, 64, 60, 25, 82, 68, 59, 54, 88, 6, 88, 56, 71, 77, 43, 100, 68, 41, 90, 3, 19, 34, 93, 64, 70, 97, 78, 27, 61, 17, 90, 78, 36, 44, 1, 13, 95, 51, 62, 91, 67, 40, 57, 50, 57]
last_save: 707

Gen:3
TrainFitness:0.8333333333333334
TestFitness:0.16666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(rlog(x[index]),+856749.1569).all():
      return True
    else:
      return True
  def adf1(index):
    if np.less(np.tanh(x[index]),-016462.6236).all():
      return False
    else:
      return False
  def adf2(index):
    if np.equal(psqrt(x[index]),-122636.8503).all():
      return False
    else:
      return False
  def adf3(index):
    if np.greater(x[index],+013252.5612).all():
      return False
    else:
      return True
  def adf4(index):
    if np.less(x[index],-061184.6649).all():
      if np.greater(x[index],+503517.2825).all():
        return False
      else:
        return True
      return False
    else:
      if np.less(np.cos(x[index]),-237601.5097).all():
        return False
      else:
        return False
      return True
  def adf7(index):
    if np.equal(np.tanh(x[index]),+202764.9728).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+909.810, adf1(1)*+537.305, adf2(2)*-285.881, adf3(3)*-350.856, adf4(4)*-248.041, adf7(7)*-282.840], [0, 1, 1, 0, 0], 631.766)
result=p(); 0.8333333333333334
IndLenGenome:376
IndGenome:[46, 17, 99, 87, 66, 96, 82, 4, 48, 57, 88, 75, 16, 87, 34, 19, 71, 5, 96, 29, 94, 62, 47, 25, 64, 58, 68, 75, 95, 71, 10, 31, 86, 34, 36, 82, 56, 52, 93, 86, 79, 95, 16, 49, 80, 74, 65, 47, 71, 28, 41, 12, 92, 36, 53, 16, 28, 65, 60, 3, 31, 15, 75, 87, 66, 47, 40, 60, 4, 60, 81, 43, 72, 35, 32, 85, 66, 31, 2, 73, 88, 36, 76, 16, 7, 83, 97, 93, 3, 20, 36, 11, 91, 98, 34, 26, 16, 44, 59, 91, 84, 65, 51, 66, 36, 95, 70, 63, 25, 41, 27, 82, 18, 32, 15, 99, 6, 63, 29, 31, 44, 49, 91, 83, 66, 52, 13, 87, 86, 70, 61, 45, 70, 29, 47, 99, 43, 48, 43, 37, 80, 84, 92, 61, 40, 99, 82, 40, 72, 37, 6, 34, 69, 27, 92, 48, 35, 75, 93, 7, 3, 20, 30, 89, 70, 49, 88, 11, 40, 41, 12, 5, 15, 73, 57, 53, 20, 25, 54, 35, 31, 72, 88, 85, 58, 38, 41, 54, 59, 82, 83, 55, 60, 58, 15, 6, 58, 97, 63, 52, 44, 38, 60, 34, 31, 81, 87, 25, 22, 88, 82, 48, 24, 40, 90, 74, 15, 37, 46, 10, 71, 26, 53, 51, 27, 46, 36, 28, 48, 83, 77, 92, 71, 58, 50, 97, 81, 34, 33, 35, 78, 52, 63, 39, 15, 95, 19, 70, 98, 15, 34, 81, 22, 99, 57, 56, 79, 19, 26, 64, 36, 13, 21, 29, 1, 80, 31, 21, 29, 92, 15, 96, 17, 82, 11, 44, 53, 74, 42, 60, 59, 70, 8, 82, 1, 98, 79, 43, 5, 5, 42, 80, 89, 42, 57, 23, 13, 11, 9, 76, 30, 9, 55, 25, 26, 51, 12, 63, 65, 20, 31, 29, 75, 99, 6, 21, 26, 23, 94, 82, 43, 51, 26, 94, 9, 63, 92, 87, 99, 82, 31, 30, 2, 75, 87, 64, 0, 76, 66, 9, 63, 28, 74, 21, 50, 100, 76, 12, 26, 62, 54, 86, 89, 17, 6, 59, 8, 36, 72, 24, 71, 76, 81, 86, 43, 1, 35, 7, 19, 39, 88, 17, 100, 75, 65, 29]
last_save: 707

Gen:29
TrainFitness:1.0
TestFitness:0.5
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(rlog(x[index]),+856749.1569).all():
      return True
    else:
      return True
  def adf1(index):
    if np.greater(x[index],+004013.2525).all():
      return True
    else:
      return False
  def adf2(index):
    if np.less(rlog(x[index]),-733061.1846).all():
      return True
    else:
      return True
  def adf3(index):
    if np.greater(x[index],+503517.2825).all():
      return False
    else:
      return True
  def adf4(index):
    if np.less(np.cos(x[index]),-237601.5097).all():
      return False
    else:
      return False
  def adf7(index):
    if np.less(np.sin(x[index]),-920276.4972).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-090.981, adf1(1)*-553.730, adf2(2)*+128.588, adf3(3)*+235.085, adf4(4)*+324.804, adf7(7)*-528.284], [0, 0, 1, 1, 0], 163.176)
result=p(); 1.0
IndLenGenome:339
IndGenome:[46, 17, 10, 87, 66, 96, 82, 4, 48, 57, 88, 75, 16, 87, 34, 19, 71, 5, 96, 29, 94, 60, 3, 31, 15, 75, 87, 66, 47, 40, 60, 4, 60, 81, 43, 72, 35, 32, 85, 66, 31, 2, 73, 88, 36, 76, 16, 7, 83, 97, 93, 3, 20, 36, 11, 91, 98, 34, 26, 16, 44, 59, 91, 84, 65, 51, 66, 36, 95, 70, 63, 25, 41, 27, 82, 18, 32, 15, 99, 6, 63, 29, 31, 44, 49, 91, 83, 66, 52, 13, 87, 86, 70, 61, 45, 70, 29, 47, 99, 43, 48, 43, 37, 80, 84, 92, 61, 40, 99, 82, 40, 72, 37, 6, 34, 69, 27, 92, 48, 35, 75, 93, 7, 3, 20, 30, 89, 70, 49, 88, 11, 40, 41, 12, 5, 15, 73, 57, 53, 20, 25, 54, 35, 31, 72, 88, 85, 58, 38, 41, 54, 59, 82, 83, 55, 60, 58, 15, 6, 58, 97, 63, 52, 44, 38, 60, 34, 77, 81, 87, 25, 22, 88, 82, 48, 24, 35, 90, 74, 15, 37, 46, 10, 71, 26, 53, 51, 27, 46, 36, 28, 48, 83, 77, 92, 71, 58, 50, 97, 81, 34, 33, 35, 78, 52, 63, 39, 15, 95, 19, 70, 98, 15, 34, 81, 22, 99, 57, 56, 79, 19, 26, 64, 36, 13, 21, 29, 1, 80, 31, 21, 29, 92, 15, 96, 17, 82, 11, 44, 53, 74, 42, 60, 59, 70, 8, 82, 1, 98, 79, 43, 5, 5, 42, 80, 89, 42, 57, 23, 13, 11, 9, 76, 30, 9, 55, 25, 26, 51, 12, 63, 65, 20, 31, 29, 75, 99, 6, 21, 26, 23, 94, 82, 43, 51, 26, 94, 9, 63, 92, 87, 99, 82, 31, 30, 2, 75, 87, 64, 0, 76, 66, 9, 63, 28, 74, 21, 50, 100, 76, 12, 26, 62, 54, 86, 89, 17, 6, 59, 8, 36, 72, 24, 71, 76, 81, 86, 43, 1, 35, 7, 19, 39, 88, 17, 100, 75, 65, 29]
last_save: 707

Gen:29
last_save: 707
Exit:TrueFalseFalse