Dataset:Spiral/Full.csv
FS:True
Seed:1235
Size:7

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(psqrt(x[index]),-173979.9915).all():
      return True
    else:
      return False
  def adf1(index):
    if np.greater(np.tanh(x[index]),-593526.7700).all():
      return False
    else:
      return True
  def adf2(index):
    if np.less(x[index],-074374.7018).all():
      return False
    else:
      return False
  def adf3(index):
    if np.equal(np.cos(x[index]),-616728.1097).all():
      return False
    else:
      return True
  def adf4(index):
    if np.less(x[index],-812410.5705).all():
      return False
    else:
      return False
  def adf7(index):
    if np.equal(np.sin(x[index]),+966796.0969).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+421.495, adf1(1)*-222.652, adf2(2)*-126.388, adf3(3)*+178.923, adf4(4)*-409.358, adf7(7)*-755.130], [0, 1, 0, 1, 1], 747.552)
result=p(); 0.8333333333333334
IndLenGenome:285
IndGenome:[11, 23, 18, 10, 68, 80, 23, 14, 98, 41, 44, 89, 35, 42, 20, 64, 85, 67, 50, 35, 12, 93, 55, 53, 37, 40, 61, 73, 93, 14, 15, 50, 14, 91, 17, 1, 72, 15, 60, 44, 21, 81, 77, 29, 58, 83, 67, 58, 82, 35, 19, 32, 33, 69, 8, 57, 84, 51, 67, 8, 12, 5, 81, 95, 35, 99, 90, 24, 40, 89, 10, 28, 43, 53, 51, 86, 93, 65, 16, 22, 79, 13, 27, 67, 19, 27, 61, 62, 14, 18, 49, 14, 56, 13, 29, 39, 73, 55, 98, 42, 10, 77, 98, 72, 30, 85, 15, 82, 89, 94, 38, 77, 34, 13, 17, 31, 17, 91, 47, 70, 87, 48, 40, 47, 34, 75, 55, 90, 26, 80, 56, 14, 84, 39, 37, 27, 21, 14, 25, 47, 52, 20, 76, 56, 69, 59, 97, 8, 86, 39, 72, 31, 19, 59, 19, 81, 67, 71, 23, 50, 79, 63, 17, 85, 45, 30, 96, 79, 42, 60, 69, 57, 88, 13, 90, 68, 29, 46, 59, 86, 98, 82, 97, 73, 98, 58, 71, 52, 71, 36, 62, 23, 86, 22, 15, 77, 88, 100, 42, 39, 56, 28, 20, 35, 27, 39, 69, 45, 88, 24, 95, 66, 86, 8, 42, 90, 31, 44, 35, 86, 95, 7, 52, 57, 99, 76, 37, 26, 77, 27, 88, 52, 69, 85, 53, 33, 55, 80, 26, 74, 37, 100, 11, 83, 1, 74, 19, 98, 22, 25, 99, 4, 52, 21, 25, 37, 17, 39, 17, 26, 26, 32, 67, 47, 37, 67, 36, 72, 20, 47, 9, 0, 58, 21, 64, 31, 57, 85, 89, 57, 4, 24, 86, 36, 13]
last_save: 711

Gen:2001
last_save: 711
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(rlog(x[index]),+124103.7651).all():
      return True
    else:
      return False
  def adf1(index):
    if np.greater(rlog(x[index]),-278144.8590).all():
      return False
    else:
      return False
  def adf2(index):
    if np.less(rlog(x[index]),-299285.4804).all():
      return False
    else:
      return True
  def adf3(index):
    if np.greater(x[index],+908973.4529).all():
      return True
    else:
      return True
  def adf4(index):
    if np.less(psqrt(x[index]),-308682.2064).all():
      return True
    else:
      return True
  def adf7(index):
    if np.less(x[index],+682320.1873).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+100.259, adf1(1)*+794.835, adf2(2)*+937.009, adf3(3)*+338.491, adf4(4)*-835.575, adf7(7)*-389.960], [1, 0, 1, 0, 0], 481.515)
result=p(); 0.6666666666666666
IndLenGenome:285
IndGenome:[73, 68, 17, 92, 68, 78, 41, 53, 69, 75, 64, 68, 90, 33, 13, 42, 84, 91, 69, 65, 32, 47, 69, 51, 50, 46, 53, 65, 6, 21, 11, 10, 62, 87, 32, 47, 19, 13, 61, 94, 16, 12, 23, 38, 82, 56, 36, 11, 98, 46, 82, 98, 65, 96, 90, 49, 50, 75, 38, 23, 86, 56, 35, 44, 51, 69, 14, 25, 56, 34, 23, 67, 37, 37, 76, 93, 28, 17, 25, 43, 24, 6, 26, 90, 22, 31, 98, 1, 98, 48, 39, 83, 37, 81, 96, 56, 49, 86, 50, 13, 29, 18, 65, 99, 33, 95, 71, 62, 20, 14, 20, 43, 61, 37, 89, 89, 23, 81, 28, 95, 94, 73, 45, 23, 71, 16, 72, 57, 17, 91, 75, 52, 94, 18, 37, 61, 14, 90, 56, 24, 40, 86, 15, 17, 67, 78, 40, 75, 52, 42, 65, 48, 64, 18, 13, 89, 2, 33, 39, 80, 60, 28, 47, 95, 78, 65, 94, 44, 93, 42, 49, 79, 89, 79, 24, 49, 38, 70, 42, 30, 2, 78, 10, 78, 33, 84, 13, 31, 42, 59, 71, 50, 84, 69, 60, 84, 24, 44, 91, 21, 94, 67, 25, 58, 99, 73, 88, 82, 40, 66, 7, 71, 14, 100, 13, 19, 74, 56, 47, 81, 34, 67, 3, 62, 22, 20, 39, 21, 88, 20, 40, 22, 7, 10, 15, 35, 84, 60, 74, 15, 5, 56, 90, 79, 8, 62, 31, 66, 25, 32, 18, 8, 86, 35, 30, 51, 27, 12, 28, 23, 85, 39, 93, 42, 61, 5, 91, 5, 31, 96, 43, 59, 18, 8, 97, 63, 51, 5, 52, 31, 7, 68, 12, 0, 11]
last_save: 712

Gen:7
TrainFitness:0.8333333333333334
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(np.cos(x[index]),+183177.7746).all():
      return True
    else:
      return False
  def adf1(index):
    if np.equal(rlog(x[index]),-172781.0246).all():
      return False
    else:
      return False
  def adf2(index):
    if np.equal(np.sin(x[index]),-053220.8930).all():
      return True
    else:
      return True
  def adf3(index):
    if np.greater(x[index],+858462.2856).all():
      return True
    else:
      return False
  def adf4(index):
    if np.equal(x[index],+419456.4377).all():
      return False
    else:
      return True
  def adf7(index):
    if np.less(x[index],+021218.8937).all():
      if np.less(x[index],+555523.4572).all():
        return False
      else:
        return False
      return False
    else:
      if np.less(np.tanh(x[index]),+272698.1820).all():
        if np.greater(x[index],+124738.7176).all():
          if np.greater(x[index],+015996.0288).all():
            return True
          else:
            return True
          return False
        else:
          if np.greater(x[index],-679442.4601).all():
            return True
          else:
            return True
          return True
        return False
      else:
        if np.equal(x[index],-650232.3501).all():
          if np.less(rlog(x[index]),-323055.1008).all():
            return False
          else:
            return True
          return True
        else:
          if np.greater(np.sin(x[index]),-962123.5995).all():
            if np.equal(rlog(x[index]),-134648.4895).all():
              return False
            else:
              return False
            return False
          else:
            if np.greater(psqrt(x[index]),+032465.2237).all():
              return True
            else:
              return True
            return False
          return True
        return False
      return True
  return multiple_operation([adf0(0)*+121.683, adf1(1)*-724.606, adf2(2)*+889.126, adf3(3)*-245.291, adf4(4)*-950.115, adf7(7)*-932.930], [0, 0, 1, 0, 0], 539.399)
result=p(); 0.8333333333333334
IndLenGenome:477
IndGenome:[96, 6, 89, 25, 35, 22, 49, 71, 50, 50, 21, 58, 23, 71, 87, 47, 87, 87, 44, 16, 2, 99, 91, 69, 86, 52, 40, 70, 63, 55, 31, 37, 92, 77, 78, 81, 60, 92, 84, 96, 97, 89, 90, 11, 50, 42, 84, 76, 49, 62, 90, 65, 23, 2, 72, 10, 38, 69, 93, 10, 36, 30, 57, 19, 39, 81, 98, 94, 69, 88, 35, 18, 84, 56, 72, 82, 98, 65, 96, 90, 49, 50, 75, 38, 23, 86, 56, 35, 44, 51, 69, 14, 25, 56, 34, 23, 67, 37, 37, 76, 93, 28, 17, 25, 43, 24, 6, 26, 90, 22, 31, 12, 1, 98, 48, 39, 83, 37, 81, 88, 79, 30, 2, 67, 55, 5, 75, 25, 52, 23, 14, 95, 67, 22, 81, 27, 65, 84, 94, 43, 66, 50, 78, 68, 32, 92, 67, 82, 56, 59, 18, 51, 48, 42, 80, 62, 59, 99, 23, 34, 96, 77, 91, 52, 14, 27, 43, 88, 87, 61, 57, 86, 17, 60, 97, 92, 50, 14, 10, 51, 75, 59, 19, 76, 70, 62, 48, 58, 8, 82, 3, 79, 63, 77, 76, 95, 89, 76, 7, 19, 14, 34, 72, 44, 76, 80, 71, 86, 42, 76, 45, 36, 86, 38, 29, 23, 39, 62, 76, 15, 90, 72, 13, 82, 73, 55, 50, 41, 89, 37, 90, 82, 55, 59, 70, 83, 82, 33, 70, 35, 75, 31, 90, 50, 78, 91, 58, 90, 90, 19, 78, 98, 18, 26, 65, 41, 19, 66, 62, 1, 62, 3, 15, 59, 19, 85, 27, 50, 74, 64, 31, 21, 85, 51, 73, 44, 36, 24, 98, 34, 68, 99, 5, 3, 91, 99, 49, 9, 44, 65, 34, 14, 32, 40, 53, 52, 74, 56, 65, 32, 92, 43, 67, 48, 94, 47, 48, 45, 22, 9, 67, 85, 74, 64, 11, 12, 21, 46, 18, 23, 25, 37, 10, 67, 82, 94, 26, 30, 76, 42, 14, 21, 48, 98, 99, 81, 12, 36, 68, 63, 33, 32, 64, 15, 42, 49, 41, 69, 11, 79, 69, 45, 10, 81, 91, 45, 93, 33, 70, 79, 43, 52, 39, 43, 70, 22, 90, 60, 59, 52, 42, 52, 5, 43, 99, 23, 29, 89, 14, 51, 49, 36, 97, 85, 71, 44, 0, 51, 95, 22, 20, 78, 97, 54, 70, 51, 99, 61, 21, 49, 21, 47, 68, 75, 65, 50, 75, 2, 55, 33, 75, 95, 61, 4, 68, 72, 29, 89, 80, 62, 22, 87, 24, 46, 14, 17, 27, 6, 34, 76, 93, 13, 58, 50, 9, 56, 58, 11, 38, 36, 48, 95, 93, 99, 36, 80, 16, 19, 76, 39, 43, 18, 8, 33, 2, 83, 46, 62, 21, 32, 90, 0, 76, 16, 28, 76, 87, 81, 6, 96, 3, 72, 40, 78, 64, 15, 36]
last_save: 712

Gen:178
TrainFitness:1.0
TestFitness:0.3333333333333333
MaxGenLen:545
Individual: def p():
  def adf0(index):
    if np.equal(np.cos(x[index]),+183177.7746).all():
      return True
    else:
      return False
  def adf1(index):
    if np.equal(rlog(x[index]),-172781.0266).all():
      return False
    else:
      return False
  def adf2(index):
    if np.equal(np.sin(x[index]),-553220.8958).all():
      return True
    else:
      return True
  def adf3(index):
    if np.greater(x[index],+858462.2856).all():
      return True
    else:
      return False
  def adf4(index):
    if np.equal(x[index],+419456.4377).all():
      return False
    else:
      return True
  def adf7(index):
    if np.greater(x[index],+006469.4197).all():
      if np.equal(psqrt(x[index]),-638753.4680).all():
        return True
      else:
        return False
      return True
    else:
      if np.equal(psqrt(x[index]),-492061.2653).all():
        return False
      else:
        return True
      return True
  return multiple_operation([adf0(0)*+324.652, adf1(1)*-846.852, adf2(2)*-441.478, adf3(3)*+750.615, adf4(4)*+032.465, adf7(7)*+964.966], [1, 0, 0, 0, 0], 070.241)
result=p(); 1.0
IndLenGenome:372
IndGenome:[96, 6, 88, 25, 35, 22, 49, 71, 50, 50, 21, 58, 23, 71, 87, 47, 87, 87, 44, 16, 92, 99, 91, 69, 86, 52, 40, 70, 63, 55, 31, 37, 92, 77, 78, 81, 60, 92, 76, 96, 97, 89, 90, 11, 50, 40, 84, 76, 49, 62, 95, 65, 23, 2, 72, 10, 38, 69, 75, 78, 36, 60, 57, 19, 39, 81, 98, 94, 69, 88, 35, 18, 84, 56, 72, 82, 98, 65, 96, 90, 49, 50, 75, 38, 23, 86, 56, 35, 44, 51, 69, 14, 25, 56, 34, 23, 67, 37, 37, 76, 93, 28, 17, 75, 43, 79, 6, 26, 90, 30, 86, 84, 56, 29, 44, 51, 69, 57, 25, 56, 34, 23, 67, 11, 37, 76, 93, 28, 17, 25, 43, 24, 6, 78, 90, 64, 31, 12, 1, 98, 48, 71, 83, 57, 81, 14, 19, 42, 60, 76, 91, 62, 76, 65, 23, 49, 54, 44, 65, 34, 14, 32, 40, 53, 52, 74, 56, 65, 32, 92, 43, 67, 48, 94, 46, 48, 45, 22, 9, 95, 85, 74, 64, 11, 94, 47, 48, 45, 22, 9, 67, 85, 50, 96, 11, 5, 34, 14, 32, 40, 53, 52, 74, 56, 65, 32, 92, 43, 69, 6, 94, 99, 36, 86, 38, 29, 94, 80, 58, 76, 15, 10, 17, 80, 42, 14, 21, 48, 98, 99, 81, 12, 36, 68, 63, 33, 32, 64, 15, 97, 49, 41, 69, 11, 79, 69, 45, 10, 81, 91, 45, 93, 33, 70, 79, 43, 52, 39, 43, 70, 22, 90, 60, 59, 52, 42, 52, 5, 43, 99, 23, 29, 89, 14, 51, 49, 36, 97, 85, 71, 44, 0, 51, 95, 22, 20, 78, 97, 54, 70, 51, 99, 61, 21, 49, 21, 47, 68, 75, 65, 50, 75, 2, 55, 33, 75, 95, 61, 4, 68, 72, 29, 89, 80, 62, 22, 87, 24, 46, 14, 17, 27, 6, 34, 76, 93, 13, 58, 50, 9, 56, 58, 11, 38, 36, 48, 95, 93, 99, 36, 80, 16, 19, 76, 39, 43, 18, 8, 33, 2, 83, 46, 62, 21, 32, 90, 0, 76, 16, 28, 76, 87, 81, 6, 96, 3, 72, 40, 78, 64, 15, 36]
last_save: 712

Gen:178
last_save: 712
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(sigmoid(x[index]),+640414.6719).all():
      return False
    else:
      return True
  def adf1(index):
    if np.greater(sigmoid(x[index]),-800646.1342).all():
      return False
    else:
      return False
  def adf2(index):
    if np.equal(x[index],-094688.8002).all():
      return True
    else:
      return True
  def adf3(index):
    if np.greater(x[index],+322008.5803).all():
      return True
    else:
      return False
  def adf4(index):
    if np.greater(x[index],-976702.1577).all():
      return False
    else:
      return True
  def adf7(index):
    if np.less(rlog(x[index]),+617814.0720).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*-975.294, adf1(1)*+035.041, adf2(2)*+078.101, adf3(3)*-885.489, adf4(4)*-901.954, adf7(7)*-904.101], [0, 0, 0, 1, 1], 761.292)
result=p(); 0.6666666666666666
IndLenGenome:283
IndGenome:[53, 43, 60, 16, 97, 95, 93, 90, 91, 6, 5, 36, 94, 85, 49, 22, 6, 56, 64, 81, 64, 15, 69, 35, 21, 20, 33, 90, 71, 16, 82, 94, 77, 39, 93, 15, 46, 52, 12, 9, 63, 49, 29, 1, 7, 7, 9, 45, 87, 45, 9, 63, 97, 65, 67, 74, 66, 92, 79, 9, 64, 81, 54, 8, 20, 32, 70, 90, 44, 90, 4, 80, 7, 36, 41, 42, 28, 96, 38, 56, 91, 62, 57, 61, 92, 97, 41, 37, 11, 25, 30, 48, 91, 50, 59, 58, 91, 63, 84, 14, 39, 30, 81, 62, 24, 88, 2, 11, 98, 57, 15, 25, 77, 68, 76, 73, 67, 15, 24, 24, 14, 69, 42, 62, 39, 94, 60, 99, 36, 49, 28, 60, 91, 37, 99, 39, 10, 68, 40, 10, 18, 58, 66, 78, 26, 24, 63, 38, 13, 40, 38, 10, 30, 65, 63, 49, 55, 37, 10, 41, 80, 62, 73, 88, 92, 56, 99, 52, 74, 61, 81, 68, 94, 37, 89, 67, 46, 14, 66, 13, 42, 41, 10, 70, 30, 15, 47, 46, 45, 86, 53, 23, 90, 34, 45, 64, 20, 76, 16, 72, 62, 89, 24, 32, 78, 94, 73, 14, 84, 30, 51, 65, 54, 73, 22, 28, 29, 40, 58, 9, 54, 24, 44, 96, 92, 79, 59, 40, 29, 98, 22, 9, 38, 56, 4, 19, 87, 9, 7, 42, 57, 1, 11, 23, 14, 41, 69, 37, 65, 65, 45, 28, 68, 20, 58, 44, 55, 52, 67, 38, 45, 99, 29, 83, 56, 9, 70, 8, 69, 43, 83, 35, 91, 39, 31, 88, 56, 73, 27, 47, 83, 68, 12]
last_save: 713

Gen:3
TrainFitness:0.8333333333333334
TestFitness:0.3333333333333333
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(psqrt(x[index]),+755726.4498).all():
      if np.equal(x[index],+435918.1322).all():
        return True
      else:
        return False
      return False
    else:
      if np.greater(x[index],+007023.9967).all():
        if np.greater(sigmoid(x[index]),+998051.4420).all():
          return True
        else:
          return False
        return True
      else:
        if np.greater(np.tanh(x[index]),+783699.5681).all():
          return False
        else:
          return True
        return True
      return True
  def adf1(index):
    if np.less(np.sin(x[index]),+555522.2539).all():
      return True
    else:
      return False
  def adf2(index):
    if np.greater(np.tanh(x[index]),+946989.0382).all():
      return False
    else:
      return True
  def adf3(index):
    if np.greater(psqrt(x[index]),-481371.3819).all():
      return True
    else:
      return False
  def adf4(index):
    if np.greater(psqrt(x[index]),+088759.2032).all():
      return False
    else:
      return True
  def adf7(index):
    if np.equal(x[index],-776021.2765).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*-773.704, adf1(1)*-757.814, adf2(2)*-048.440, adf3(3)*+170.498, adf4(4)*+301.608, adf7(7)*-914.626], [0, 0, 1, 0, 0], 593.137)
result=p(); 0.8333333333333334
IndLenGenome:475
IndGenome:[68, 79, 52, 90, 55, 96, 80, 83, 98, 30, 22, 17, 35, 5, 87, 92, 16, 94, 4, 29, 78, 23, 23, 91, 58, 58, 82, 34, 43, 95, 59, 81, 38, 41, 53, 72, 82, 98, 33, 75, 38, 47, 96, 75, 66, 20, 6, 90, 10, 47, 80, 82, 23, 59, 79, 26, 7, 93, 12, 20, 69, 88, 56, 82, 19, 49, 18, 50, 95, 21, 44, 44, 42, 40, 18, 41, 20, 55, 15, 50, 44, 38, 70, 86, 17, 88, 33, 76, 69, 69, 95, 66, 58, 51, 29, 46, 10, 40, 45, 35, 76, 66, 78, 82, 52, 63, 35, 15, 35, 65, 12, 12, 12, 75, 33, 29, 20, 31, 37, 55, 21, 60, 68, 74, 12, 20, 9, 84, 16, 69, 98, 9, 70, 53, 68, 12, 29, 68, 43, 57, 33, 60, 11, 52, 63, 93, 44, 38, 51, 93, 27, 41, 13, 98, 51, 39, 46, 15, 84, 17, 30, 96, 5, 76, 42, 50, 80, 48, 78, 87, 25, 59, 22, 90, 73, 32, 33, 26, 68, 31, 86, 55, 29, 13, 23, 37, 17, 96, 30, 2, 71, 22, 7, 26, 45, 65, 13, 85, 71, 32, 29, 11, 37, 87, 33, 17, 80, 14, 53, 79, 30, 7, 95, 37, 38, 31, 94, 49, 11, 86, 10, 84, 88, 14, 84, 20, 92, 36, 12, 41, 57, 80, 84, 99, 78, 97, 46, 15, 63, 50, 61, 66, 50, 98, 41, 65, 52, 89, 41, 44, 6, 62, 96, 84, 64, 30, 33, 98, 80, 58, 55, 99, 33, 1, 13, 47, 16, 21, 85, 88, 48, 42, 80, 63, 68, 64, 20, 41, 18, 66, 92, 22, 54, 47, 45, 37, 92, 68, 54, 78, 25, 88, 98, 39, 58, 67, 13, 75, 34, 72, 68, 73, 95, 63, 94, 14, 10, 90, 37, 11, 66, 25, 77, 45, 23, 23, 78, 26, 95, 36, 93, 59, 81, 29, 79, 35, 54, 26, 9, 45, 3, 93, 90, 14, 61, 74, 55, 66, 67, 27, 34, 33, 24, 96, 23, 63, 17, 70, 42, 12, 55, 18, 13, 86, 87, 33, 38, 36, 82, 99, 42, 18, 88, 15, 91, 99, 39, 19, 29, 40, 85, 93, 50, 23, 60, 97, 20, 52, 79, 65, 75, 92, 13, 68, 7, 87, 41, 88, 51, 54, 14, 0, 42, 67, 46, 74, 81, 30, 53, 53, 26, 69, 72, 62, 49, 55, 7, 1, 68, 16, 34, 91, 97, 24, 5, 0, 59, 17, 86, 12, 14, 1, 73, 76, 62, 43, 33, 87, 86, 21, 60, 36, 55, 89, 19, 93, 83, 51, 31, 51, 37, 7, 74, 60, 88, 75, 26, 13, 93, 92, 87, 15, 23, 41, 97, 61, 45, 57, 45, 85, 43, 56, 55, 97, 23, 95, 4, 35, 29, 58, 81, 39, 75, 53, 62]
last_save: 713

Gen:14
TrainFitness:1.0
TestFitness:0.3333333333333333
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(psqrt(x[index]),+755726.4498).all():
      if np.equal(x[index],+435918.1322).all():
        return True
      else:
        return False
      return False
    else:
      if np.greater(x[index],+006223.9917).all():
        if np.greater(sigmoid(x[index]),+998551.4420).all():
          return True
        else:
          return False
        return True
      else:
        if np.greater(np.tanh(x[index]),+783699.5681).all():
          return False
        else:
          return True
        return True
      return True
  def adf1(index):
    if np.less(np.sin(x[index]),+555572.2539).all():
      return True
    else:
      return False
  def adf2(index):
    if np.greater(np.tanh(x[index]),+946989.0382).all():
      return False
    else:
      return True
  def adf3(index):
    if np.greater(psqrt(x[index]),-481371.3819).all():
      return True
    else:
      return False
  def adf4(index):
    if np.greater(psqrt(x[index]),+088759.2036).all():
      return False
    else:
      return True
  def adf7(index):
    if np.equal(x[index],+947535.8737).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*-831.721, adf1(1)*-460.169, adf2(2)*-927.582, adf3(3)*+582.885, adf4(4)*-621.666, adf7(7)*+296.780], [0, 0, 0, 0, 0], 439.501)
result=p(); 1.0
IndLenGenome:376
IndGenome:[91, 79, 52, 90, 55, 96, 80, 83, 98, 30, 22, 17, 35, 5, 87, 92, 16, 94, 4, 29, 78, 23, 23, 91, 58, 58, 82, 34, 43, 95, 59, 81, 38, 41, 53, 72, 82, 98, 33, 75, 38, 47, 96, 75, 66, 20, 6, 90, 10, 96, 72, 82, 23, 59, 79, 1, 7, 93, 12, 20, 69, 88, 56, 82, 19, 49, 18, 55, 95, 21, 44, 44, 42, 40, 18, 41, 20, 55, 15, 50, 44, 38, 70, 86, 17, 88, 33, 76, 69, 69, 95, 66, 58, 51, 29, 46, 10, 40, 45, 35, 76, 66, 78, 82, 52, 63, 35, 15, 35, 65, 97, 12, 12, 75, 33, 29, 20, 31, 37, 55, 21, 60, 68, 74, 12, 20, 9, 84, 16, 69, 98, 9, 70, 53, 68, 12, 29, 68, 43, 57, 33, 60, 11, 52, 63, 93, 44, 38, 51, 93, 27, 41, 13, 98, 51, 39, 46, 15, 84, 17, 30, 96, 5, 76, 42, 50, 80, 48, 78, 87, 25, 59, 22, 90, 73, 96, 21, 98, 87, 55, 80, 85, 86, 46, 98, 89, 74, 77, 55, 83, 15, 38, 87, 73, 27, 84, 98, 34, 99, 81, 21, 41, 78, 23, 41, 47, 32, 51, 10, 99, 16, 54, 26, 30, 31, 76, 89, 6, 59, 34, 29, 72, 77, 15, 18, 72, 28, 98, 55, 15, 18, 72, 28, 98, 55, 15, 13, 85, 56, 12, 11, 26, 56, 86, 91, 66, 36, 52, 49, 46, 27, 18, 30, 82, 24, 24, 20, 72, 52, 30, 14, 93, 29, 95, 30, 31, 18, 31, 35, 99, 88, 32, 54, 77, 48, 53, 96, 78, 50, 16, 60, 51, 26, 50, 48, 23, 16, 84, 35, 16, 44, 76, 25, 30, 63, 18, 66, 48, 24, 13, 16, 92, 36, 35, 88, 78, 39, 1, 0, 69, 15, 61, 8, 31, 46, 58, 66, 60, 76, 20, 75, 18, 19, 47, 19, 31, 15, 23, 27, 84, 55, 36, 28, 67, 86, 19, 16, 25, 76, 74, 10, 20, 73, 83, 39, 0, 72, 83, 90, 48, 89, 9, 38, 49, 66, 54, 92, 25, 71, 41, 97, 77, 4, 96, 62, 97, 35, 85, 91, 97, 46, 59, 61, 7, 2, 45]
last_save: 713

Gen:14
last_save: 713
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(sigmoid(x[index]),-266071.3069).all():
      return False
    else:
      return True
  def adf1(index):
    if np.greater(np.tanh(x[index]),-400455.9385).all():
      return True
    else:
      return True
  def adf2(index):
    if np.equal(x[index],-918660.4433).all():
      return False
    else:
      return False
  def adf3(index):
    if np.greater(x[index],+390577.2956).all():
      return True
    else:
      return True
  def adf4(index):
    if np.equal(x[index],-859302.0599).all():
      return False
    else:
      return False
  def adf7(index):
    if np.less(x[index],+417227.8044).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+214.947, adf1(1)*+084.835, adf2(2)*-929.010, adf3(3)*+139.436, adf4(4)*+701.666, adf7(7)*-009.649], [0, 1, 1, 1, 1], 784.158)
result=p(); 0.6666666666666666
IndLenGenome:282
IndGenome:[40, 35, 59, 18, 61, 7, 2, 39, 11, 71, 32, 44, 89, 85, 95, 75, 11, 61, 79, 41, 18, 32, 13, 48, 45, 24, 87, 68, 52, 43, 35, 40, 60, 29, 83, 14, 23, 33, 29, 48, 54, 39, 51, 48, 11, 85, 56, 58, 26, 25, 15, 19, 46, 14, 36, 89, 80, 60, 75, 46, 60, 95, 33, 89, 59, 93, 29, 79, 84, 60, 52, 90, 43, 18, 41, 42, 28, 96, 78, 5, 34, 10, 86, 65, 43, 76, 83, 47, 56, 83, 66, 49, 14, 36, 55, 54, 60, 87, 55, 81, 43, 92, 47, 94, 81, 42, 64, 86, 45, 99, 65, 88, 81, 61, 73, 29, 22, 39, 60, 50, 50, 99, 38, 50, 39, 88, 33, 89, 42, 94, 74, 24, 46, 30, 22, 65, 28, 92, 65, 33, 36, 97, 50, 49, 16, 22, 59, 17, 94, 19, 56, 11, 83, 15, 54, 73, 87, 54, 16, 43, 43, 90, 80, 56, 68, 50, 29, 41, 6, 19, 89, 99, 80, 14, 41, 40, 24, 73, 25, 80, 76, 77, 22, 62, 39, 79, 37, 95, 25, 76, 65, 33, 4, 54, 90, 98, 84, 91, 24, 18, 35, 19, 51, 86, 64, 84, 4, 0, 45, 62, 81, 48, 74, 26, 9, 18, 97, 72, 55, 54, 53, 65, 14, 44, 45, 72, 98, 95, 45, 100, 99, 68, 99, 0, 79, 15, 44, 50, 93, 86, 82, 9, 42, 53, 98, 72, 5, 20, 23, 55, 43, 34, 88, 9, 62, 25, 89, 80, 76, 96, 81, 12, 88, 66, 72, 9, 24, 91, 45, 92, 23, 97, 71, 67, 40, 99, 78, 34, 69, 85, 31, 55]
last_save: 714

Gen:17
TrainFitness:0.8333333333333334
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(np.tanh(x[index]),-175250.9756).all():
      return True
    else:
      return False
  def adf1(index):
    if np.less(np.cos(x[index]),-156630.5551).all():
      return False
    else:
      return True
  def adf2(index):
    if np.less(np.sin(x[index]),+433461.3432).all():
      if np.equal(x[index],+259893.3173).all():
        return True
      else:
        return True
      return True
    else:
      if np.greater(np.cos(x[index]),+856052.3878).all():
        return True
      else:
        return False
      return True
  def adf3(index):
    if np.less(x[index],+017666.9076).all():
      return True
    else:
      return False
  def adf4(index):
    if np.less(psqrt(x[index]),-030884.6138).all():
      if np.less(sigmoid(x[index]),+353577.5761).all():
        return True
      else:
        return True
      return True
    else:
      if np.less(np.tanh(x[index]),-053926.0028).all():
        if np.greater(np.cos(x[index]),-270059.1124).all():
          if np.greater(x[index],-957231.1301).all():
            return False
          else:
            return False
          return True
        else:
          if np.greater(sigmoid(x[index]),+282028.6715).all():
            if np.equal(x[index],+607782.3111).all():
              return False
            else:
              return True
            return True
          else:
            if np.less(np.tanh(x[index]),-389951.2823).all():
              return True
            else:
              return True
            return False
          return False
        return True
      else:
        if np.equal(x[index],-267699.3890).all():
          return False
        else:
          return True
        return False
      return False
  def adf7(index):
    if np.greater(rlog(x[index]),+329663.8190).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+909.209, adf1(1)*-307.508, adf2(2)*-497.673, adf3(3)*+902.550, adf4(4)*-062.658, adf7(7)*+588.508], [0, 0, 0, 1, 0], 968.798)
result=p(); 0.8333333333333334
IndLenGenome:434
IndGenome:[9, 97, 55, 61, 60, 62, 74, 59, 75, 30, 71, 87, 15, 82, 75, 30, 39, 87, 95, 26, 6, 41, 78, 81, 49, 84, 25, 93, 83, 74, 31, 85, 16, 36, 43, 30, 75, 75, 85, 61, 67, 66, 67, 26, 72, 70, 50, 54, 83, 48, 83, 34, 23, 73, 74, 66, 71, 63, 24, 23, 52, 55, 23, 23, 22, 0, 41, 2, 45, 9, 88, 19, 83, 93, 31, 57, 93, 18, 52, 36, 37, 63, 30, 61, 43, 54, 44, 88, 35, 56, 70, 35, 92, 63, 8, 57, 78, 72, 45, 56, 16, 41, 25, 95, 38, 64, 89, 90, 71, 37, 16, 16, 76, 59, 20, 67, 6, 50, 57, 40, 48, 22, 16, 70, 41, 21, 27, 8, 50, 73, 40, 78, 68, 24, 86, 91, 83, 68, 39, 49, 76, 81, 32, 94, 72, 3, 35, 13, 55, 67, 37, 25, 47, 36, 11, 40, 78, 60, 38, 95, 88, 56, 20, 22, 99, 40, 90, 25, 13, 49, 32, 6, 20, 80, 92, 18, 94, 49, 15, 22, 43, 31, 3, 84, 62, 37, 30, 80, 5, 19, 81, 11, 12, 64, 85, 84, 37, 67, 55, 61, 69, 85, 57, 12, 83, 11, 31, 33, 20, 91, 53, 3, 42, 22, 43, 66, 40, 69, 28, 98, 26, 42, 8, 32, 90, 72, 78, 86, 37, 81, 25, 63, 98, 83, 53, 20, 67, 6, 50, 57, 7, 48, 22, 53, 91, 41, 21, 27, 8, 50, 73, 40, 78, 68, 24, 3, 91, 83, 68, 39, 49, 75, 81, 32, 48, 72, 3, 78, 56, 31, 31, 72, 23, 35, 63, 10, 11, 99, 52, 66, 17, 16, 49, 19, 83, 38, 69, 20, 11, 56, 97, 25, 77, 17, 51, 32, 46, 20, 84, 17, 63, 52, 39, 66, 66, 13, 48, 21, 79, 40, 15, 35, 45, 17, 39, 4, 95, 89, 30, 39, 92, 80, 69, 31, 43, 91, 53, 70, 17, 25, 60, 18, 83, 81, 30, 84, 59, 17, 16, 7, 83, 13, 34, 76, 9, 50, 82, 95, 65, 50, 53, 83, 64, 100, 16, 32, 36, 55, 38, 12, 32, 18, 85, 78, 48, 85, 20, 88, 60, 26, 18, 4, 7, 40, 61, 79, 6, 28, 17, 99, 8, 25, 30, 29, 83, 56, 28, 54, 97, 74, 31, 22, 80, 66, 1, 91, 36, 39, 48, 6, 9, 55, 39, 35, 43, 94, 42, 66, 2, 21, 27, 75, 27, 64, 49, 71, 100, 87, 9, 91, 50, 13, 83, 45, 51, 88, 24, 98, 85, 19, 94, 55, 22, 70]
last_save: 714

Gen:83
TrainFitness:1.0
TestFitness:0.5
MaxGenLen:515
Individual: def p():
  def adf0(index):
    if np.greater(sigmoid(x[index]),+886282.0286).all():
      return False
    else:
      return False
  def adf1(index):
    if np.equal(x[index],+601938.5573).all():
      return False
    else:
      return False
  def adf2(index):
    if np.less(x[index],+914018.1221).all():
      return True
    else:
      return True
  def adf3(index):
    if np.greater(np.tanh(x[index]),-952999.6588).all():
      if np.greater(x[index],+006179.6104).all():
        return False
      else:
        return True
      return False
    else:
      if np.less(x[index],+480821.7403).all():
        return False
      else:
        return False
      return True
  def adf4(index):
    if np.equal(x[index],-355613.2028).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(np.sin(x[index]),+607702.3111).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+461.389, adf1(1)*-242.353, adf2(2)*-576.101, adf3(3)*+308.846, adf4(4)*-995.524, adf7(7)*-357.757], [1, 0, 0, 0, 0], 860.892)
result=p(); 1.0
IndLenGenome:467
IndGenome:[53, 75, 23, 3, 75, 22, 81, 66, 40, 15, 28, 98, 26, 42, 8, 32, 90, 72, 78, 86, 37, 81, 25, 63, 98, 89, 78, 0, 41, 6, 50, 71, 89, 93, 88, 95, 55, 37, 13, 33, 57, 52, 71, 67, 93, 61, 78, 16, 89, 71, 24, 80, 71, 88, 61, 72, 92, 81, 6, 90, 22, 10, 27, 63, 94, 98, 12, 63, 72, 29, 65, 22, 49, 19, 29, 66, 65, 78, 48, 89, 45, 17, 20, 20, 51, 20, 50, 56, 11, 87, 29, 76, 51, 40, 84, 95, 92, 91, 23, 67, 11, 13, 88, 47, 54, 48, 20, 88, 2, 11, 17, 44, 10, 13, 99, 17, 76, 21, 93, 20, 41, 17, 49, 73, 13, 15, 35, 46, 91, 43, 32, 90, 72, 78, 86, 37, 81, 25, 63, 98, 78, 53, 20, 67, 6, 50, 57, 7, 60, 22, 53, 91, 41, 21, 31, 8, 50, 73, 23, 78, 68, 24, 86, 91, 83, 68, 39, 49, 75, 81, 32, 94, 72, 3, 35, 13, 67, 67, 42, 25, 47, 36, 11, 40, 21, 27, 8, 50, 73, 40, 78, 68, 24, 86, 91, 83, 68, 39, 49, 75, 5, 32, 94, 72, 3, 35, 13, 55, 67, 37, 25, 47, 36, 11, 40, 78, 60, 38, 95, 88, 56, 20, 68, 99, 22, 37, 25, 13, 49, 32, 6, 20, 80, 92, 18, 94, 49, 22, 22, 43, 31, 3, 84, 62, 56, 68, 32, 44, 71, 65, 0, 59, 54, 52, 19, 52, 87, 43, 31, 3, 84, 11, 17, 5, 21, 13, 99, 17, 76, 21, 93, 7, 67, 17, 49, 73, 13, 15, 35, 46, 91, 16, 41, 25, 40, 78, 68, 24, 3, 91, 83, 68, 39, 49, 75, 81, 61, 48, 72, 3, 78, 56, 31, 31, 72, 23, 35, 63, 10, 11, 99, 52, 66, 17, 16, 49, 19, 83, 38, 69, 20, 11, 56, 14, 25, 77, 17, 51, 32, 46, 20, 84, 17, 63, 52, 39, 66, 66, 13, 48, 21, 79, 40, 14, 35, 45, 17, 39, 4, 95, 89, 30, 39, 92, 80, 69, 31, 43, 91, 53, 70, 17, 25, 60, 18, 83, 81, 30, 84, 59, 17, 16, 7, 83, 13, 34, 76, 9, 50, 82, 95, 65, 50, 53, 83, 64, 100, 90, 32, 36, 55, 38, 12, 32, 18, 85, 78, 48, 85, 20, 88, 60, 26, 18, 10, 7, 40, 61, 79, 6, 28, 17, 99, 8, 25, 30, 29, 83, 56, 28, 54, 97, 74, 31, 22, 80, 66, 1, 91, 36, 39, 48, 6, 9, 55, 39, 35, 43, 94, 42, 66, 2, 21, 27, 75, 27, 64, 49, 71, 100, 87, 9, 91, 50, 13, 83, 45, 51, 88, 24, 98, 85, 19, 94, 55, 22, 70]
last_save: 714

Gen:83
last_save: 714
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(rlog(x[index]),+642333.2193).all():
      return False
    else:
      return False
  def adf1(index):
    if np.equal(psqrt(x[index]),+923064.5066).all():
      return False
    else:
      return False
  def adf2(index):
    if np.less(np.sin(x[index]),+202165.5659).all():
      return True
    else:
      return True
  def adf3(index):
    if np.less(x[index],-498702.3271).all():
      return True
    else:
      return True
  def adf4(index):
    if np.greater(np.sin(x[index]),+616238.5657).all():
      return True
    else:
      return True
  def adf7(index):
    if np.greater(x[index],+036515.7896).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-812.313, adf1(1)*+188.499, adf2(2)*-531.969, adf3(3)*+125.802, adf4(4)*-859.363, adf7(7)*+452.925], [1, 0, 1, 1, 1], 162.582)
result=p(); 0.8333333333333334
IndLenGenome:285
IndGenome:[79, 50, 68, 55, 40, 3, 5, 55, 45, 74, 98, 79, 36, 25, 69, 75, 81, 96, 82, 37, 15, 27, 73, 52, 63, 7, 28, 7, 50, 84, 92, 15, 4, 30, 23, 87, 69, 19, 81, 67, 72, 21, 27, 85, 21, 52, 62, 8, 90, 98, 23, 9, 34, 93, 24, 43, 48, 32, 73, 41, 69, 43, 39, 16, 25, 2, 84, 95, 94, 8, 21, 13, 49, 33, 11, 88, 99, 37, 53, 73, 13, 85, 37, 61, 38, 45, 80, 65, 48, 1, 69, 42, 82, 12, 91, 19, 64, 61, 78, 64, 59, 62, 46, 12, 58, 78, 45, 29, 35, 39, 61, 82, 71, 29, 95, 30, 65, 68, 55, 31, 29, 37, 87, 57, 32, 70, 56, 71, 88, 93, 32, 66, 15, 93, 45, 12, 88, 99, 52, 16, 95, 36, 54, 65, 84, 53, 89, 76, 76, 48, 60, 26, 75, 71, 95, 86, 63, 28, 53, 89, 26, 23, 44, 76, 21, 63, 44, 12, 53, 14, 33, 63, 32, 56, 36, 88, 58, 19, 66, 21, 86, 65, 19, 43, 70, 30, 72, 44, 66, 83, 64, 14, 24, 26, 72, 64, 60, 97, 34, 65, 17, 49, 21, 75, 22, 29, 38, 32, 19, 47, 65, 43, 32, 41, 53, 18, 27, 66, 9, 11, 3, 87, 90, 20, 3, 8, 2, 70, 37, 35, 27, 19, 16, 5, 42, 8, 36, 65, 89, 73, 67, 67, 2, 77, 8, 87, 4, 61, 96, 35, 88, 81, 20, 71, 51, 9, 56, 9, 35, 93, 13, 57, 48, 49, 58, 64, 25, 89, 61, 84, 17, 57, 12, 79, 64, 48, 31, 85, 71, 83, 71, 96, 36, 74, 98]
last_save: 715

Gen:13
TrainFitness:1.0
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],-489659.5162).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(x[index],+042540.3797).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(x[index],+006807.3662).all():
      return True
    else:
      return False
  def adf3(index):
    if np.greater(rlog(x[index]),-944675.0459).all():
      return False
    else:
      return False
  def adf4(index):
    if np.less(np.sin(x[index]),+167827.8035).all():
      return False
    else:
      return False
  def adf7(index):
    if np.greater(x[index],+554679.4242).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+066.106, adf1(1)*-950.869, adf2(2)*-411.073, adf3(3)*-226.628, adf4(4)*-526.195, adf7(7)*-310.621], [1, 0, 1, 0, 1], 399.827)
result=p(); 1.0
IndLenGenome:344
IndGenome:[79, 50, 68, 55, 40, 3, 5, 55, 45, 74, 98, 79, 36, 25, 69, 75, 81, 96, 82, 37, 15, 27, 73, 52, 63, 7, 28, 7, 50, 84, 92, 15, 4, 30, 23, 87, 69, 87, 85, 67, 72, 21, 27, 85, 21, 52, 62, 10, 60, 66, 18, 10, 17, 3, 16, 16, 52, 84, 95, 56, 93, 36, 80, 88, 16, 63, 20, 9, 74, 24, 16, 57, 45, 90, 34, 55, 59, 31, 75, 63, 99, 28, 50, 54, 96, 48, 98, 91, 46, 97, 38, 92, 17, 18, 40, 63, 45, 53, 73, 13, 9, 99, 69, 38, 40, 65, 65, 85, 84, 36, 87, 19, 64, 92, 24, 22, 50, 63, 95, 36, 70, 2, 94, 90, 66, 86, 21, 20, 36, 25, 15, 37, 89, 75, 30, 28, 36, 29, 77, 37, 30, 34, 51, 41, 50, 97, 93, 21, 27, 43, 72, 42, 46, 6, 22, 38, 97, 97, 7, 25, 32, 26, 51, 59, 75, 43, 65, 49, 83, 31, 30, 26, 82, 71, 83, 21, 66, 3, 8, 5, 14, 83, 69, 79, 18, 32, 47, 23, 61, 26, 20, 83, 39, 22, 99, 34, 46, 67, 33, 19, 51, 83, 12, 34, 92, 78, 76, 44, 41, 15, 10, 57, 26, 50, 73, 23, 66, 11, 29, 85, 44, 39, 40, 41, 77, 93, 10, 56, 36, 41, 36, 88, 13, 60, 78, 62, 39, 29, 45, 49, 84, 43, 26, 54, 72, 34, 16, 43, 71, 20, 54, 29, 57, 79, 40, 50, 23, 44, 26, 64, 55, 21, 67, 37, 65, 94, 6, 30, 57, 10, 10, 10, 24, 83, 68, 72, 100, 48, 44, 72, 94, 12, 19, 75, 94, 30, 86, 11, 25, 12, 62, 27, 4, 35, 34, 41, 66, 4, 67, 40, 91, 51, 43, 47, 95, 32, 27, 33, 21, 42, 3, 92, 66, 71, 43, 72, 27, 84, 22, 16, 75, 80, 54, 72, 50, 63, 45, 21, 43, 0, 83, 57, 14, 25, 23, 83, 54, 4, 91, 22, 58, 62, 78, 32]
last_save: 715

Gen:13
last_save: 715
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],+903808.3943).all():
      return False
    else:
      return False
  def adf1(index):
    if np.equal(x[index],-567388.0868).all():
      return True
    else:
      return False
  def adf2(index):
    if np.equal(x[index],+626632.1015).all():
      return True
    else:
      return False
  def adf3(index):
    if np.greater(x[index],-141420.4951).all():
      return True
    else:
      return False
  def adf4(index):
    if np.equal(rlog(x[index]),+053855.3945).all():
      return False
    else:
      return True
  def adf7(index):
    if np.greater(x[index],-495849.9538).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*-210.541, adf1(1)*-354.481, adf2(2)*-054.325, adf3(3)*+954.628, adf4(4)*+852.028, adf7(7)*-202.448], [1, 1, 0, 1, 1], 393.741)
result=p(); 0.6666666666666666
IndLenGenome:280
IndGenome:[27, 23, 99, 86, 99, 65, 25, 11, 29, 2, 81, 49, 41, 15, 92, 71, 90, 77, 56, 93, 61, 39, 63, 27, 36, 44, 39, 37, 64, 46, 7, 50, 32, 88, 51, 11, 15, 11, 31, 59, 28, 55, 81, 40, 45, 31, 37, 81, 29, 62, 86, 94, 84, 72, 24, 12, 98, 32, 83, 42, 32, 92, 69, 60, 48, 5, 45, 2, 33, 60, 98, 20, 45, 11, 49, 46, 35, 10, 28, 45, 22, 99, 11, 88, 69, 64, 63, 77, 48, 74, 97, 79, 32, 39, 78, 64, 77, 30, 43, 54, 64, 89, 64, 28, 82, 41, 58, 98, 17, 41, 61, 94, 24, 84, 46, 70, 5, 14, 53, 71, 42, 77, 13, 11, 29, 38, 82, 25, 40, 20, 44, 73, 95, 79, 53, 73, 61, 56, 46, 35, 24, 35, 58, 50, 50, 16, 30, 28, 95, 10, 77, 38, 28, 15, 43, 91, 29, 82, 84, 94, 75, 33, 73, 35, 66, 98, 35, 93, 87, 27, 36, 39, 41, 15, 75, 36, 52, 70, 94, 26, 43, 11, 48, 11, 68, 12, 86, 44, 96, 88, 20, 51, 24, 86, 86, 62, 96, 42, 19, 87, 39, 14, 86, 49, 56, 91, 89, 88, 92, 18, 15, 17, 85, 46, 30, 34, 72, 12, 83, 5, 18, 22, 43, 43, 3, 13, 84, 15, 72, 72, 44, 18, 78, 68, 57, 6, 55, 46, 17, 64, 70, 71, 43, 59, 0, 66, 14, 62, 10, 50, 87, 42, 51, 39, 42, 23, 32, 75, 76, 74, 32, 9, 11, 18, 49, 30, 68, 40, 85, 18, 75, 36, 62, 36, 16, 79, 18, 78, 87, 78]
last_save: 716

Gen:8
TrainFitness:0.8333333333333334
TestFitness:0.5
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(sigmoid(x[index]),+170159.8145).all():
      if np.less(x[index],-180256.0948).all():
        return False
      else:
        return False
      return False
    else:
      if np.less(x[index],-126508.8489).all():
        return False
      else:
        return True
      return True
  def adf1(index):
    if np.equal(np.sin(x[index]),+927631.5591).all():
      return True
    else:
      return True
  def adf2(index):
    if np.less(x[index],-561978.6716).all():
      return False
    else:
      return False
  def adf3(index):
    if np.equal(np.cos(x[index]),+745201.9661).all():
      return True
    else:
      return True
  def adf4(index):
    if np.less(x[index],+008581.8275).all():
      if np.greater(x[index],+164793.5684).all():
        return True
      else:
        return True
      return False
    else:
      if np.less(sigmoid(x[index]),-767213.8017).all():
        return True
      else:
        return False
      return True
  def adf7(index):
    if np.greater(x[index],-711613.6065).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*-452.770, adf1(1)*-029.101, adf2(2)*-570.512, adf3(3)*-973.222, adf4(4)*+764.834, adf7(7)*-535.013], [0, 0, 0, 0, 0], 029.918)
result=p(); 0.8333333333333334
IndLenGenome:448
IndGenome:[89, 93, 36, 2, 40, 81, 88, 9, 24, 18, 48, 71, 57, 70, 81, 45, 69, 98, 31, 4, 55, 17, 7, 53, 86, 11, 24, 21, 78, 70, 32, 45, 6, 40, 59, 14, 48, 27, 75, 27, 1, 85, 73, 8, 79, 66, 41, 82, 56, 15, 90, 58, 98, 44, 28, 69, 77, 76, 82, 93, 97, 80, 72, 60, 82, 56, 49, 89, 62, 27, 76, 53, 41, 25, 35, 79, 1, 58, 84, 95, 65, 73, 87, 30, 85, 45, 55, 76, 61, 89, 77, 58, 66, 97, 21, 86, 47, 77, 39, 25, 86, 88, 97, 90, 74, 25, 77, 34, 25, 32, 10, 51, 89, 26, 16, 81, 80, 90, 74, 98, 42, 28, 87, 52, 88, 78, 60, 30, 58, 65, 88, 81, 98, 2, 17, 55, 17, 60, 81, 43, 54, 46, 91, 36, 44, 97, 59, 23, 75, 96, 88, 74, 30, 4, 27, 29, 64, 92, 75, 66, 15, 18, 87, 16, 57, 82, 91, 63, 88, 50, 1, 17, 20, 19, 64, 79, 85, 33, 75, 46, 59, 31, 47, 41, 41, 46, 31, 23, 56, 50, 56, 35, 29, 33, 60, 81, 35, 65, 45, 34, 15, 72, 77, 97, 80, 8, 55, 21, 70, 32, 59, 91, 10, 1, 71, 91, 61, 5, 37, 90, 35, 21, 2, 47, 21, 13, 39, 37, 33, 32, 2, 42, 91, 74, 32, 67, 86, 74, 48, 33, 14, 64, 59, 80, 25, 13, 25, 20, 51, 13, 53, 94, 88, 32, 42, 12, 13, 40, 62, 99, 19, 41, 68, 45, 24, 36, 14, 90, 66, 93, 81, 81, 23, 95, 48, 70, 58, 48, 89, 66, 36, 39, 36, 63, 52, 83, 37, 93, 27, 63, 38, 50, 86, 38, 94, 13, 35, 44, 86, 26, 46, 96, 61, 87, 15, 28, 100, 98, 70, 52, 59, 60, 22, 2, 80, 30, 91, 80, 98, 80, 74, 32, 60, 50, 48, 14, 21, 19, 97, 35, 65, 45, 34, 15, 72, 77, 97, 80, 43, 89, 89, 19, 29, 40, 90, 48, 25, 76, 63, 33, 57, 63, 10, 67, 91, 14, 37, 52, 13, 51, 16, 26, 98, 65, 19, 7, 16, 70, 61, 65, 36, 16, 55, 54, 31, 78, 30, 45, 36, 46, 97, 10, 55, 2, 70, 55, 8, 62, 11, 95, 76, 93, 53, 92, 98, 23, 25, 88, 76, 40, 57, 43, 43, 44, 60, 13, 57, 20, 42, 41, 2, 45, 33, 53, 95, 32, 83, 91, 5, 65, 15, 74, 96, 16, 44, 94, 67, 92, 50, 9, 15, 67, 23, 75, 54, 51, 100, 60, 27, 80, 59, 58, 68, 49, 34, 67, 27, 23]
last_save: 716

Gen:26
TrainFitness:1.0
TestFitness:0.5
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(sigmoid(x[index]),+170959.8145).all():
      if np.less(x[index],-180246.0948).all():
        return False
      else:
        return False
      return False
    else:
      if np.less(x[index],-126508.8489).all():
        return False
      else:
        return True
      return True
  def adf1(index):
    if np.equal(np.sin(x[index]),+927631.5591).all():
      return True
    else:
      return True
  def adf2(index):
    if np.less(x[index],-561978.6716).all():
      return False
    else:
      return False
  def adf3(index):
    if np.equal(np.cos(x[index]),+745201.9661).all():
      return False
    else:
      return True
  def adf4(index):
    if np.less(x[index],+009581.8275).all():
      if np.greater(x[index],+964793.5684).all():
        return True
      else:
        return True
      return True
    else:
      if np.less(sigmoid(x[index]),-797213.8017).all():
        return True
      else:
        return False
      return True
  def adf7(index):
    if np.greater(x[index],-711613.6065).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*-452.770, adf1(1)*-039.101, adf2(2)*-570.512, adf3(3)*-973.222, adf4(4)*+764.834, adf7(7)*-535.013], [0, 0, 0, 0, 0], 029.118)
result=p(); 1.0
IndLenGenome:348
IndGenome:[89, 93, 36, 2, 40, 81, 88, 9, 24, 18, 48, 71, 57, 70, 69, 45, 69, 98, 31, 4, 55, 17, 79, 53, 86, 11, 24, 21, 78, 70, 32, 64, 6, 40, 59, 14, 48, 27, 75, 27, 1, 85, 67, 8, 79, 66, 41, 82, 56, 15, 90, 58, 98, 44, 28, 69, 77, 76, 82, 93, 97, 80, 72, 60, 82, 56, 49, 89, 62, 27, 76, 53, 41, 25, 35, 79, 1, 58, 84, 95, 65, 73, 87, 30, 19, 45, 55, 76, 61, 89, 77, 58, 66, 97, 21, 86, 47, 77, 39, 25, 86, 88, 97, 90, 74, 25, 77, 34, 25, 32, 10, 51, 89, 26, 16, 81, 87, 90, 74, 98, 42, 28, 87, 52, 88, 78, 60, 30, 9, 65, 88, 81, 98, 2, 17, 55, 17, 60, 81, 97, 54, 46, 79, 36, 44, 97, 59, 23, 75, 96, 88, 74, 30, 4, 36, 29, 64, 92, 75, 66, 15, 18, 87, 99, 57, 82, 91, 63, 88, 50, 1, 17, 20, 19, 64, 79, 85, 33, 75, 46, 59, 31, 47, 41, 41, 46, 31, 23, 56, 50, 56, 35, 29, 33, 60, 81, 35, 37, 45, 34, 15, 72, 77, 97, 80, 8, 55, 21, 70, 93, 59, 91, 10, 1, 71, 91, 61, 5, 37, 90, 35, 21, 2, 47, 21, 13, 39, 37, 33, 32, 2, 42, 91, 74, 32, 67, 86, 74, 48, 33, 14, 64, 59, 80, 25, 13, 25, 20, 51, 13, 53, 94, 88, 44, 42, 12, 13, 40, 62, 99, 71, 41, 68, 55, 47, 49, 47, 63, 77, 69, 95, 58, 94, 64, 74, 23, 65, 92, 72, 0, 84, 3, 18, 100, 98, 17, 22, 52, 4, 31, 47, 58, 78, 54, 33, 64, 42, 2, 7, 68, 23, 12, 53, 70, 8, 71, 18, 89, 81, 93, 68, 99, 12, 14, 54, 57, 77, 88, 16, 62, 68, 87, 74, 76, 79, 3, 76, 36, 13, 60, 75, 98, 5, 18, 60, 8, 76, 21, 70, 24, 98, 38, 89, 42, 98, 99, 20, 67]
last_save: 716

Gen:26
last_save: 716
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.0
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(sigmoid(x[index]),+924637.9938).all():
      return True
    else:
      return True
  def adf1(index):
    if np.greater(sigmoid(x[index]),+083286.6548).all():
      return True
    else:
      return False
  def adf2(index):
    if np.equal(np.cos(x[index]),+189180.4988).all():
      return False
    else:
      return False
  def adf3(index):
    if np.less(x[index],-323623.0945).all():
      return False
    else:
      return False
  def adf4(index):
    if np.equal(np.sin(x[index]),-186311.4671).all():
      return True
    else:
      return True
  def adf7(index):
    if np.less(sigmoid(x[index]),+783558.1379).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+090.264, adf1(1)*+864.100, adf2(2)*+072.810, adf3(3)*+896.740, adf4(4)*-539.682, adf7(7)*-106.901], [0, 0, 1, 0, 1], 779.779)
result=p(); 0.6666666666666666
IndLenGenome:286
IndGenome:[54, 82, 97, 78, 82, 67, 1, 67, 30, 29, 57, 29, 75, 46, 25, 87, 69, 47, 17, 53, 56, 2, 60, 31, 59, 6, 67, 3, 78, 47, 49, 59, 16, 4, 11, 80, 55, 67, 19, 39, 53, 12, 31, 84, 10, 98, 79, 9, 81, 58, 79, 33, 18, 24, 88, 44, 69, 36, 71, 69, 20, 30, 61, 98, 45, 13, 82, 14, 12, 28, 50, 14, 66, 96, 46, 38, 29, 31, 16, 76, 54, 68, 35, 88, 42, 91, 67, 68, 61, 76, 46, 76, 9, 33, 71, 33, 89, 96, 53, 11, 34, 44, 64, 78, 93, 38, 81, 84, 70, 25, 54, 52, 86, 20, 53, 95, 61, 96, 17, 81, 70, 15, 75, 62, 30, 45, 93, 13, 19, 84, 92, 54, 97, 96, 97, 51, 46, 1, 83, 70, 13, 30, 24, 92, 59, 15, 92, 56, 46, 39, 1, 83, 10, 47, 95, 2, 99, 82, 28, 38, 30, 74, 83, 58, 4, 20, 97, 89, 50, 99, 21, 87, 38, 32, 32, 13, 39, 47, 85, 64, 24, 23, 99, 11, 41, 70, 44, 96, 70, 18, 63, 71, 22, 21, 76, 86, 1, 19, 55, 44, 47, 54, 20, 69, 11, 56, 97, 83, 64, 39, 27, 82, 40, 77, 36, 69, 0, 85, 98, 67, 19, 36, 58, 52, 8, 19, 24, 20, 89, 96, 52, 38, 23, 4, 99, 25, 51, 15, 42, 23, 1, 99, 92, 32, 37, 39, 23, 84, 81, 13, 12, 18, 38, 56, 73, 23, 97, 10, 81, 50, 76, 11, 33, 96, 86, 24, 33, 79, 38, 60, 3, 25, 90, 82, 61, 43, 36, 34, 96, 97, 15, 97, 91, 13, 95, 32]
last_save: 717

Gen:3
TrainFitness:0.8333333333333334
TestFitness:0.16666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],-202826.0602).all():
      return False
    else:
      return False
  def adf1(index):
    if np.equal(x[index],-049279.3037).all():
      return False
    else:
      return True
  def adf2(index):
    if np.greater(x[index],+950628.1600).all():
      return True
    else:
      return False
  def adf3(index):
    if np.less(np.cos(x[index]),-792908.1155).all():
      return False
    else:
      return True
  def adf4(index):
    if np.less(x[index],-377405.5556).all():
      if np.equal(x[index],+816006.9793).all():
        return True
      else:
        return False
      return False
    else:
      if np.less(x[index],+025730.4859).all():
        return True
      else:
        return False
      return False
  def adf7(index):
    if np.equal(rlog(x[index]),-637549.1538).all():
      if np.equal(psqrt(x[index]),+253512.3285).all():
        return True
      else:
        return True
      return False
    else:
      if np.greater(x[index],+815080.3708).all():
        return False
      else:
        return False
      return True
  return multiple_operation([adf0(0)*+629.802, adf1(1)*-698.453, adf2(2)*+245.165, adf3(3)*-806.522, adf4(4)*-660.303, adf7(7)*-650.279], [0, 0, 0, 1, 1], 991.748)
result=p(); 0.8333333333333334
IndLenGenome:391
IndGenome:[27, 9, 65, 5, 66, 91, 29, 99, 51, 12, 80, 32, 98, 62, 96, 60, 26, 90, 82, 49, 25, 38, 21, 71, 49, 25, 81, 18, 40, 4, 79, 82, 57, 69, 33, 30, 63, 67, 27, 44, 10, 75, 45, 75, 25, 36, 45, 89, 75, 60, 76, 42, 28, 91, 46, 80, 40, 26, 39, 97, 59, 73, 98, 91, 93, 41, 64, 17, 79, 52, 79, 30, 38, 21, 71, 75, 25, 81, 18, 40, 4, 79, 82, 57, 69, 33, 30, 63, 67, 27, 44, 10, 75, 45, 75, 25, 36, 45, 89, 75, 60, 76, 42, 28, 91, 46, 80, 40, 26, 39, 97, 59, 73, 98, 91, 93, 41, 64, 17, 79, 52, 79, 30, 52, 65, 87, 23, 10, 34, 98, 45, 29, 66, 93, 91, 73, 24, 93, 11, 66, 10, 41, 79, 59, 76, 43, 17, 25, 64, 39, 81, 85, 43, 28, 97, 83, 32, 41, 39, 84, 24, 12, 15, 53, 45, 51, 72, 13, 2, 98, 35, 50, 98, 99, 53, 93, 89, 98, 6, 54, 78, 21, 45, 40, 78, 80, 73, 17, 10, 48, 39, 91, 56, 12, 44, 73, 20, 53, 56, 82, 59, 68, 80, 52, 33, 97, 22, 56, 99, 88, 24, 95, 13, 64, 14, 71, 72, 64, 85, 41, 96, 55, 18, 59, 28, 68, 10, 36, 85, 42, 22, 52, 3, 99, 46, 86, 30, 83, 80, 13, 27, 51, 29, 76, 95, 20, 62, 87, 19, 13, 48, 20, 78, 93, 45, 93, 59, 89, 31, 47, 84, 68, 55, 29, 87, 36, 20, 22, 52, 28, 31, 56, 32, 50, 36, 16, 62, 17, 67, 68, 21, 61, 54, 41, 10, 59, 89, 14, 44, 101, 14, 45, 13, 86, 93, 93, 37, 73, 75, 8, 24, 36, 14, 3, 79, 3, 15, 79, 11, 86, 44, 83, 99, 0, 84, 47, 38, 9, 4, 3, 34, 85, 87, 22, 58, 43, 68, 91, 32, 47, 38, 32, 77, 10, 43, 49, 87, 52, 74, 61, 31, 95, 55, 4, 56, 61, 81, 13, 46, 50, 26, 51, 61, 59, 34, 95, 88, 64, 2, 31, 92, 3, 88, 45, 51, 17, 25, 92, 42, 40, 26, 28, 61, 23, 60, 50, 83, 54, 41, 28, 93, 85, 91, 11, 27, 59, 88, 0, 71, 58, 62]
last_save: 717

Gen:102
TrainFitness:1.0
TestFitness:0.3333333333333333
MaxGenLen:515
Individual: def p():
  def adf0(index):
    if np.equal(x[index],+502826.1406).all():
      return False
    else:
      return False
  def adf1(index):
    if np.greater(rlog(x[index]),+965377.4058).all():
      return False
    else:
      return False
  def adf2(index):
    if np.equal(np.cos(x[index]),-502826.1481).all():
      return False
    else:
      return False
  def adf3(index):
    if np.greater(np.cos(x[index]),+965377.4058).all():
      return False
    else:
      return False
  def adf4(index):
    if np.equal(x[index],+806016.9490).all():
      return True
    else:
      return False
  def adf7(index):
    if np.less(x[index],+005562.6946).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*-062.816, adf1(1)*+979.385, adf2(2)*-403.792, adf3(3)*+685.855, adf4(4)*-508.895, adf7(7)*-648.160], [0, 1, 1, 0, 0], 035.123)
result=p(); 1.0
IndLenGenome:345
IndGenome:[27, 9, 65, 5, 47, 49, 29, 40, 51, 25, 80, 32, 98, 62, 96, 41, 4, 90, 56, 49, 25, 38, 81, 18, 40, 4, 79, 82, 57, 69, 86, 95, 63, 67, 27, 44, 10, 75, 18, 95, 25, 36, 45, 5, 66, 49, 29, 99, 51, 25, 80, 32, 98, 62, 96, 41, 4, 48, 91, 49, 25, 38, 81, 18, 40, 43, 79, 82, 57, 69, 86, 95, 63, 67, 27, 44, 10, 75, 18, 75, 25, 36, 45, 89, 75, 60, 8, 33, 28, 30, 46, 80, 51, 26, 69, 94, 59, 80, 98, 63, 93, 41, 64, 41, 89, 52, 79, 30, 100, 55, 5, 26, 92, 26, 89, 14, 86, 101, 50, 45, 13, 86, 93, 34, 60, 76, 42, 28, 91, 76, 80, 40, 26, 39, 97, 59, 73, 38, 15, 85, 41, 96, 84, 50, 73, 27, 89, 12, 64, 20, 29, 66, 98, 75, 18, 75, 25, 36, 45, 89, 75, 60, 8, 98, 99, 15, 93, 89, 98, 6, 54, 78, 21, 66, 40, 78, 80, 73, 17, 84, 24, 12, 50, 53, 45, 51, 72, 13, 2, 98, 35, 50, 98, 74, 53, 93, 89, 98, 6, 54, 78, 21, 45, 40, 78, 80, 73, 17, 10, 48, 2, 91, 56, 12, 44, 72, 20, 53, 56, 82, 59, 68, 80, 52, 33, 97, 22, 56, 99, 88, 24, 14, 89, 87, 34, 18, 85, 97, 15, 81, 75, 36, 48, 39, 91, 56, 12, 44, 73, 20, 53, 56, 82, 59, 68, 80, 52, 33, 97, 22, 56, 99, 88, 24, 95, 13, 64, 14, 71, 72, 64, 85, 41, 96, 55, 18, 59, 28, 68, 10, 36, 85, 42, 22, 52, 3, 99, 46, 43, 49, 87, 52, 74, 61, 31, 95, 55, 4, 56, 61, 81, 13, 46, 50, 26, 51, 61, 59, 34, 95, 88, 64, 2, 76, 92, 3, 88, 45, 51, 17, 25, 92, 42, 40, 26, 28, 61, 23, 60, 50, 83, 54, 41, 28, 93, 85, 91, 11, 27, 59, 88, 0, 71, 58, 62]
last_save: 717

Gen:102
last_save: 717
Exit:TrueFalseFalse