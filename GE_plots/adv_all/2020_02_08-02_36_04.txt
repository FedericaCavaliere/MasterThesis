Dataset:Meander/Full.csv
FS:True
Seed:1235
Size:3

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(np.cos(x[index]),-136872.0454).all():
      return True
    else:
      return True
  def adf1(index):
    if np.greater(np.tanh(x[index]),+568859.3243).all():
      return False
    else:
      return False
  def adf2(index):
    if np.equal(x[index],-096972.3921).all():
      return True
    else:
      return False
  def adf3(index):
    if np.greater(x[index],-066257.1091).all():
      return True
    else:
      return True
  def adf4(index):
    if np.equal(psqrt(x[index]),+108173.4042).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(rlog(x[index]),+660908.6305).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+645.148, adf1(1)*+732.096, adf2(2)*+840.115, adf3(3)*+665.981, adf4(4)*+140.267, adf7(7)*-950.505], [0, 0, 0, 0, 0], 856.323)
result=p(); 0.8333333333333334
IndLenGenome:285
IndGenome:[30, 2, 44, 89, 12, 90, 77, 35, 90, 61, 32, 27, 33, 51, 92, 7, 56, 76, 83, 7, 31, 64, 66, 32, 44, 44, 90, 55, 67, 86, 23, 89, 83, 6, 36, 85, 66, 56, 44, 72, 12, 5, 55, 35, 46, 24, 74, 8, 41, 7, 69, 30, 60, 25, 41, 85, 40, 82, 81, 36, 87, 20, 88, 95, 34, 55, 86, 72, 96, 54, 17, 79, 31, 42, 56, 46, 19, 70, 97, 43, 22, 81, 6, 23, 11, 29, 76, 18, 36, 50, 51, 82, 70, 92, 98, 20, 33, 41, 64, 25, 92, 45, 95, 50, 12, 34, 26, 68, 43, 47, 17, 30, 25, 38, 50, 13, 10, 39, 58, 79, 33, 74, 98, 74, 44, 55, 73, 39, 41, 52, 97, 26, 60, 17, 17, 74, 98, 95, 85, 43, 76, 91, 80, 39, 31, 9, 42, 38, 57, 77, 20, 21, 57, 33, 6, 76, 61, 4, 46, 31, 84, 44, 33, 48, 52, 82, 90, 24, 20, 48, 56, 59, 26, 10, 15, 90, 53, 36, 23, 99, 51, 53, 60, 26, 99, 62, 82, 57, 71, 89, 92, 70, 49, 77, 10, 23, 86, 5, 81, 95, 77, 38, 6, 86, 19, 57, 78, 97, 55, 15, 14, 62, 86, 99, 3, 41, 19, 44, 34, 8, 38, 50, 14, 1, 11, 93, 97, 29, 86, 21, 32, 18, 87, 93, 92, 1, 11, 53, 5, 22, 80, 41, 6, 1, 57, 81, 36, 46, 4, 1, 25, 33, 30, 20, 27, 6, 76, 44, 63, 75, 59, 98, 71, 6, 31, 29, 2, 50, 62, 93, 62, 33, 0, 78, 52, 24, 53, 65, 42, 52, 11, 44, 23, 35, 50]
last_save: 311

Gen:2001
last_save: 311
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(rlog(x[index]),-054730.1971).all():
      return True
    else:
      return False
  def adf1(index):
    if np.less(rlog(x[index]),+489524.8025).all():
      return True
    else:
      return False
  def adf2(index):
    if np.equal(x[index],+283587.9773).all():
      return False
    else:
      return False
  def adf3(index):
    if np.equal(x[index],-003037.3004).all():
      return True
    else:
      return True
  def adf4(index):
    if np.less(x[index],+652925.0528).all():
      return False
    else:
      return False
  def adf7(index):
    if np.equal(x[index],+027455.4501).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*-056.349, adf1(1)*+217.325, adf2(2)*+170.822, adf3(3)*-949.965, adf4(4)*-395.325, adf7(7)*+285.480], [1, 1, 0, 1, 1], 365.767)
result=p(); 0.6666666666666666
IndLenGenome:282
IndGenome:[28, 95, 86, 92, 43, 90, 55, 48, 88, 15, 93, 71, 97, 9, 30, 35, 63, 25, 30, 17, 99, 56, 35, 18, 71, 30, 30, 2, 51, 24, 93, 24, 84, 65, 7, 34, 30, 86, 25, 15, 48, 30, 28, 92, 65, 55, 55, 70, 53, 95, 7, 92, 28, 47, 53, 88, 54, 11, 34, 8, 77, 87, 93, 99, 82, 82, 25, 54, 91, 10, 53, 68, 27, 79, 13, 31, 67, 25, 47, 83, 69, 60, 77, 89, 18, 35, 7, 99, 52, 65, 10, 87, 65, 68, 13, 14, 63, 36, 18, 72, 17, 85, 39, 52, 14, 86, 90, 29, 75, 80, 77, 35, 52, 14, 53, 15, 4, 77, 48, 23, 22, 33, 26, 89, 62, 93, 39, 13, 30, 63, 40, 39, 50, 25, 87, 29, 40, 10, 61, 29, 66, 49, 70, 65, 54, 65, 40, 35, 33, 25, 12, 71, 98, 58, 37, 67, 56, 92, 28, 86, 14, 64, 21, 22, 73, 78, 25, 70, 22, 62, 30, 21, 72, 74, 10, 82, 87, 66, 25, 93, 90, 95, 29, 37, 22, 69, 76, 34, 21, 21, 24, 1, 55, 6, 62, 15, 42, 32, 50, 30, 42, 95, 12, 55, 63, 67, 20, 80, 83, 51, 8, 11, 99, 92, 46, 20, 32, 38, 0, 17, 63, 60, 70, 96, 19, 95, 89, 62, 64, 84, 34, 15, 36, 32, 9, 9, 76, 3, 72, 29, 45, 40, 100, 6, 100, 61, 87, 73, 48, 1, 27, 35, 39, 93, 73, 14, 6, 25, 9, 55, 32, 78, 56, 82, 66, 96, 50, 48, 56, 5, 52, 6, 38, 94, 10, 52, 5, 75, 30, 69, 59, 82]
last_save: 312

Gen:21
TrainFitness:0.8333333333333334
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],+200374.7219).all():
      return True
    else:
      return False
  def adf1(index):
    if np.equal(sigmoid(x[index]),-396762.6304).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(x[index],+955855.4688).all():
      return False
    else:
      return True
  def adf3(index):
    if np.less(x[index],-146499.6127).all():
      return True
    else:
      return False
  def adf4(index):
    if np.greater(np.tanh(x[index]),-401519.1033).all():
      if np.less(x[index],+015104.1017).all():
        return True
      else:
        return False
      return False
    else:
      if np.greater(np.tanh(x[index]),-915060.7851).all():
        return False
      else:
        return False
      return True
  def adf7(index):
    if np.less(x[index],-756300.0692).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+481.250, adf1(1)*+109.259, adf2(2)*-382.551, adf3(3)*-416.538, adf4(4)*-378.612, adf7(7)*-923.452], [1, 1, 0, 0, 0], 170.296)
result=p(); 0.8333333333333334
IndLenGenome:415
IndGenome:[25, 9, 65, 71, 52, 75, 40, 20, 31, 32, 70, 40, 73, 27, 14, 57, 72, 61, 49, 62, 59, 41, 57, 11, 50, 81, 4, 7, 92, 83, 89, 66, 67, 46, 32, 46, 93, 50, 24, 37, 67, 69, 93, 87, 7, 49, 28, 94, 89, 25, 65, 98, 85, 45, 34, 26, 88, 58, 95, 86, 76, 81, 67, 41, 21, 87, 39, 51, 14, 46, 64, 79, 29, 56, 11, 92, 67, 32, 29, 21, 50, 45, 72, 32, 62, 88, 85, 9, 14, 30, 31, 25, 91, 49, 81, 40, 23, 33, 45, 13, 27, 54, 58, 30, 10, 11, 75, 91, 40, 54, 41, 100, 61, 77, 68, 95, 81, 55, 69, 50, 8, 7, 71, 29, 59, 21, 35, 30, 6, 60, 57, 98, 15, 51, 97, 15, 28, 93, 59, 10, 19, 41, 91, 79, 67, 85, 96, 13, 40, 30, 10, 76, 69, 52, 23, 11, 66, 27, 81, 66, 85, 44, 28, 11, 82, 65, 90, 55, 82, 10, 21, 60, 39, 52, 25, 89, 83, 67, 70, 73, 8, 72, 85, 5, 91, 18, 63, 31, 24, 11, 86, 25, 63, 98, 99, 17, 94, 73, 87, 28, 86, 61, 62, 11, 63, 51, 29, 82, 53, 24, 75, 32, 54, 57, 99, 42, 32, 82, 55, 21, 97, 20, 52, 19, 96, 38, 56, 28, 29, 54, 62, 98, 88, 25, 48, 62, 85, 58, 36, 21, 81, 22, 78, 47, 77, 94, 82, 76, 29, 59, 44, 2, 33, 24, 85, 34, 83, 55, 62, 93, 11, 12, 84, 91, 16, 38, 53, 70, 83, 15, 15, 16, 26, 31, 14, 38, 79, 35, 28, 94, 75, 2, 88, 46, 33, 73, 79, 93, 33, 49, 10, 36, 99, 33, 21, 64, 49, 29, 27, 11, 81, 36, 12, 27, 86, 99, 64, 55, 17, 69, 13, 41, 36, 39, 30, 47, 81, 72, 71, 51, 49, 70, 77, 14, 21, 93, 26, 74, 12, 97, 83, 21, 21, 43, 27, 99, 31, 69, 44, 38, 8, 37, 20, 89, 4, 26, 32, 81, 11, 29, 32, 15, 100, 13, 81, 81, 93, 90, 81, 38, 49, 11, 25, 44, 39, 24, 86, 90, 75, 21, 14, 15, 63, 73, 78, 42, 57, 31, 15, 57, 96, 71, 99, 72, 63, 49, 6, 29, 65, 21, 83, 52, 77, 55, 26, 54, 34, 21, 15, 14, 56, 14, 58, 33, 77, 63, 89, 25, 51, 60, 46, 35, 99, 12, 58]
last_save: 312

Gen:2021
last_save: 312
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(np.tanh(x[index]),+563242.8270).all():
      return True
    else:
      return False
  def adf1(index):
    if np.equal(np.cos(x[index]),+283332.2980).all():
      return False
    else:
      return True
  def adf2(index):
    if np.equal(psqrt(x[index]),+608413.5155).all():
      return True
    else:
      return False
  def adf3(index):
    if np.greater(x[index],+016601.1884).all():
      return True
    else:
      return False
  def adf4(index):
    if np.less(x[index],+050912.1198).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(sigmoid(x[index]),+013378.0792).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*-296.963, adf1(1)*-496.373, adf2(2)*+040.922, adf3(3)*+929.960, adf4(4)*-593.974, adf7(7)*+867.887], [0, 0, 0, 1, 1], 552.192)
result=p(); 0.8333333333333334
IndLenGenome:285
IndGenome:[88, 79, 26, 33, 2, 79, 35, 5, 64, 26, 15, 42, 37, 56, 6, 57, 11, 49, 96, 38, 89, 44, 46, 43, 51, 89, 94, 99, 28, 3, 47, 80, 28, 31, 55, 66, 32, 61, 78, 21, 26, 44, 12, 51, 77, 32, 50, 75, 62, 75, 47, 69, 78, 80, 55, 40, 61, 7, 78, 11, 43, 19, 48, 43, 40, 36, 20, 73, 68, 80, 59, 99, 58, 80, 65, 13, 50, 28, 82, 66, 31, 7, 83, 91, 32, 22, 51, 38, 83, 23, 42, 41, 50, 75, 50, 23, 78, 41, 42, 81, 69, 33, 11, 11, 38, 50, 94, 80, 33, 32, 65, 92, 29, 53, 70, 27, 25, 16, 6, 33, 60, 70, 74, 8, 74, 25, 66, 22, 43, 48, 76, 98, 59, 57, 66, 12, 30, 26, 57, 92, 10, 78, 19, 16, 40, 82, 38, 21, 11, 32, 52, 46, 41, 96, 40, 17, 42, 31, 54, 75, 22, 26, 93, 50, 90, 48, 20, 97, 59, 77, 54, 76, 65, 39, 96, 59, 93, 34, 69, 39, 59, 49, 37, 96, 68, 83, 19, 85, 63, 63, 93, 21, 13, 78, 27, 74, 40, 40, 10, 45, 91, 9, 48, 65, 37, 7, 69, 21, 48, 94, 5, 29, 88, 92, 25, 22, 96, 73, 88, 43, 95, 27, 5, 25, 12, 42, 78, 56, 99, 73, 74, 73, 65, 46, 55, 90, 43, 60, 29, 71, 12, 7, 75, 42, 40, 10, 5, 17, 63, 44, 33, 30, 79, 73, 64, 68, 79, 30, 94, 59, 20, 24, 12, 44, 60, 34, 78, 11, 44, 61, 99, 26, 13, 90, 41, 39, 95, 27, 95, 18, 94, 11, 34, 34, 54]
last_save: 313

Gen:2001
last_save: 313
Exit:FalseFalseTrue