Dataset:Spiral/Full.csv
FS:True
Seed:1236
Size:7

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],+168690.5682).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(x[index],+043903.9797).all():
      return True
    else:
      return False
  def adf2(index):
    if np.equal(x[index],-703844.0905).all():
      return True
    else:
      return True
  def adf3(index):
    if np.greater(x[index],-028941.1524).all():
      return False
    else:
      return False
  def adf4(index):
    if np.equal(x[index],-454311.6266).all():
      return False
    else:
      return False
  def adf7(index):
    if np.greater(psqrt(x[index]),-682753.9179).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-654.122, adf1(1)*+653.468, adf2(2)*-176.549, adf3(3)*+025.309, adf4(4)*+794.852, adf7(7)*+759.220], [0, 0, 0, 0, 0], 418.071)
result=p(); 0.8333333333333334
IndLenGenome:280
IndGenome:[65, 45, 13, 19, 48, 65, 75, 39, 96, 15, 27, 25, 87, 35, 58, 91, 6, 75, 13, 88, 7, 73, 78, 58, 19, 51, 36, 99, 13, 85, 61, 82, 14, 9, 41, 68, 15, 21, 95, 64, 72, 19, 79, 89, 40, 62, 41, 60, 63, 60, 90, 7, 53, 70, 86, 32, 98, 28, 78, 24, 98, 35, 97, 14, 70, 9, 11, 91, 8, 55, 29, 17, 50, 63, 19, 16, 12, 91, 86, 94, 29, 78, 65, 37, 36, 14, 87, 11, 68, 72, 7, 51, 91, 50, 97, 71, 54, 87, 60, 55, 73, 37, 78, 65, 60, 32, 49, 95, 63, 43, 52, 27, 89, 94, 82, 62, 32, 69, 39, 19, 7, 39, 71, 75, 5, 63, 60, 82, 94, 84, 79, 44, 18, 16, 18, 38, 91, 95, 55, 70, 59, 12, 31, 12, 50, 17, 82, 98, 40, 47, 61, 44, 84, 19, 17, 20, 76, 20, 67, 25, 35, 49, 49, 87, 62, 75, 65, 33, 51, 66, 41, 31, 47, 48, 68, 16, 46, 62, 11, 76, 75, 44, 26, 66, 89, 14, 23, 75, 89, 83, 41, 19, 3, 43, 99, 64, 68, 87, 19, 51, 0, 39, 23, 88, 79, 19, 89, 71, 33, 5, 75, 42, 70, 61, 5, 100, 29, 9, 49, 40, 55, 26, 70, 76, 29, 85, 84, 84, 100, 75, 48, 37, 31, 94, 61, 66, 93, 53, 74, 14, 40, 59, 38, 76, 36, 76, 40, 80, 38, 66, 79, 61, 0, 17, 79, 54, 73, 85, 55, 52, 95, 73, 15, 59, 97, 20, 11, 73, 76, 1, 60, 35, 43, 50, 7, 95, 61, 90, 60, 81]
last_save: 721

Gen:2001
last_save: 721
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.5
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],+907496.0322).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(x[index],+016235.8719).all():
      return True
    else:
      return True
  def adf2(index):
    if np.equal(np.tanh(x[index]),+085050.0649).all():
      return True
    else:
      return False
  def adf3(index):
    if np.less(sigmoid(x[index]),-321244.0127).all():
      return True
    else:
      return False
  def adf4(index):
    if np.less(rlog(x[index]),+260201.9023).all():
      return True
    else:
      return False
  def adf7(index):
    if np.less(x[index],+010132.2232).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+606.210, adf1(1)*+929.011, adf2(2)*-556.192, adf3(3)*+551.573, adf4(4)*+691.848, adf7(7)*-749.962], [1, 0, 1, 0, 0], 628.347)
result=p(); 0.8333333333333334
IndLenGenome:283
IndGenome:[76, 44, 38, 40, 21, 68, 47, 39, 11, 57, 19, 32, 51, 5, 94, 86, 45, 70, 23, 38, 76, 31, 47, 35, 85, 45, 54, 15, 96, 21, 88, 56, 24, 45, 45, 87, 39, 62, 78, 10, 92, 56, 26, 51, 95, 4, 26, 73, 87, 4, 53, 95, 21, 86, 57, 81, 70, 83, 6, 31, 51, 86, 40, 17, 59, 21, 39, 64, 14, 31, 62, 5, 55, 46, 23, 51, 8, 14, 92, 69, 1, 85, 13, 68, 32, 60, 50, 82, 86, 92, 66, 19, 73, 57, 38, 92, 73, 18, 39, 78, 74, 87, 59, 82, 16, 62, 92, 88, 80, 99, 71, 16, 51, 26, 89, 46, 52, 67, 72, 28, 13, 14, 50, 95, 83, 29, 90, 77, 23, 35, 5, 33, 66, 55, 50, 51, 41, 47, 48, 14, 46, 40, 70, 35, 11, 61, 48, 32, 69, 65, 86, 100, 32, 13, 90, 61, 70, 14, 98, 60, 60, 29, 42, 62, 46, 49, 35, 6, 60, 10, 57, 80, 45, 46, 22, 50, 95, 16, 20, 51, 93, 21, 22, 75, 22, 67, 64, 22, 94, 37, 6, 33, 75, 10, 8, 86, 13, 5, 47, 51, 44, 21, 28, 55, 37, 18, 75, 21, 81, 41, 16, 22, 44, 5, 5, 54, 96, 0, 60, 97, 28, 65, 14, 60, 67, 66, 100, 98, 67, 67, 13, 94, 10, 15, 98, 38, 74, 27, 30, 6, 41, 84, 2, 20, 26, 0, 23, 24, 61, 13, 35, 68, 9, 57, 7, 43, 31, 95, 23, 48, 49, 28, 70, 68, 40, 46, 67, 52, 36, 77, 85, 93, 21, 94, 79, 79, 84, 10, 71, 87, 47, 5, 19]
last_save: 722

Gen:3
TrainFitness:0.8333333333333334
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(psqrt(x[index]),-572763.3154).all():
      return False
    else:
      return True
  def adf1(index):
    if np.less(x[index],-462928.6445).all():
      return True
    else:
      return False
  def adf2(index):
    if np.less(x[index],+709580.2650).all():
      return False
    else:
      return True
  def adf3(index):
    if np.greater(x[index],-429281.2271).all():
      return True
    else:
      return True
  def adf4(index):
    if np.greater(x[index],+023411.6516).all():
      return True
    else:
      return False
  def adf7(index):
    if np.less(psqrt(x[index]),+825093.7311).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*-420.515, adf1(1)*-300.496, adf2(2)*-250.475, adf3(3)*+627.996, adf4(4)*+717.857, adf7(7)*+192.960], [0, 1, 0, 1, 1], 041.979)
result=p(); 0.8333333333333334
IndLenGenome:254
IndGenome:[51, 53, 86, 13, 33, 38, 11, 4, 11, 26, 25, 97, 22, 7, 76, 23, 33, 61, 25, 64, 69, 22, 17, 87, 43, 39, 27, 93, 37, 4, 16, 2, 49, 52, 48, 96, 14, 54, 25, 50, 87, 67, 51, 55, 11, 87, 28, 66, 47, 50, 59, 95, 28, 80, 92, 86, 15, 80, 53, 6, 9, 53, 39, 63, 42, 87, 33, 84, 92, 39, 82, 58, 31, 62, 72, 37, 21, 64, 46, 39, 7, 66, 81, 70, 78, 73, 30, 72, 63, 94, 91, 51, 66, 15, 91, 26, 80, 19, 24, 31, 88, 94, 17, 33, 82, 53, 8, 92, 15, 60, 99, 83, 37, 53, 91, 21, 39, 37, 79, 48, 35, 75, 17, 4, 92, 20, 45, 21, 5, 37, 41, 43, 93, 60, 30, 34, 69, 36, 77, 85, 56, 12, 95, 60, 84, 47, 65, 61, 46, 31, 16, 52, 77, 29, 69, 26, 27, 14, 91, 7, 71, 17, 78, 25, 17, 73, 14, 93, 11, 29, 42, 59, 36, 90, 86, 52, 79, 42, 95, 95, 42, 60, 44, 71, 69, 17, 49, 58, 4, 13, 46, 2, 65, 94, 31, 20, 97, 92, 90, 81, 31, 54, 55, 33, 76, 52, 4, 29, 47, 76, 33, 25, 50, 48, 70, 16, 94, 66, 56, 80, 11, 86, 68, 84, 4, 69, 74, 91, 34, 46, 60, 18, 71, 39, 19, 19, 37, 63, 21, 82, 50, 96, 64, 50, 88, 77, 93, 49, 69, 33, 1, 61, 83, 21]
last_save: 722

Gen:32
TrainFitness:1.0
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(np.cos(x[index]),-427135.4347).all():
      return False
    else:
      return False
  def adf1(index):
    if np.equal(sigmoid(x[index]),-331109.9855).all():
      if np.less(np.tanh(x[index]),-697276.3385).all():
        return True
      else:
        return False
      return True
    else:
      if np.greater(x[index],-746292.8644).all():
        return False
      else:
        return True
      return False
  def adf2(index):
    if np.less(x[index],+709580.2650).all():
      return False
    else:
      return True
  def adf3(index):
    if np.greater(x[index],-429281.2271).all():
      return True
    else:
      return False
  def adf4(index):
    if np.greater(x[index],+009418.4732).all():
      return False
    else:
      return True
  def adf7(index):
    if np.greater(x[index],-049675.6250).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-279.967, adf1(1)*-178.573, adf2(2)*-929.606, adf3(3)*-941.847, adf4(4)*+825.093, adf7(7)*-197.985], [1, 0, 0, 0, 1], 571.330)
result=p(); 1.0
IndLenGenome:345
IndGenome:[65, 12, 74, 23, 67, 28, 25, 93, 91, 73, 64, 62, 17, 1, 73, 5, 84, 83, 4, 7, 35, 17, 33, 82, 53, 8, 92, 15, 60, 99, 83, 93, 53, 91, 21, 40, 69, 79, 48, 35, 75, 17, 4, 92, 20, 45, 21, 11, 26, 89, 97, 22, 7, 76, 23, 33, 8, 25, 64, 69, 22, 17, 87, 43, 39, 27, 93, 37, 4, 16, 2, 49, 52, 48, 96, 14, 54, 25, 50, 87, 67, 51, 55, 11, 80, 28, 66, 47, 50, 59, 95, 28, 80, 92, 86, 15, 80, 53, 6, 9, 53, 39, 63, 42, 87, 33, 84, 92, 39, 82, 58, 31, 62, 72, 37, 21, 64, 57, 18, 41, 66, 81, 98, 78, 73, 30, 80, 19, 24, 31, 88, 94, 17, 33, 82, 53, 8, 92, 15, 60, 99, 83, 37, 53, 30, 34, 69, 36, 77, 85, 56, 12, 95, 60, 84, 47, 65, 61, 46, 31, 16, 52, 77, 29, 69, 26, 27, 14, 91, 7, 71, 17, 78, 25, 17, 73, 14, 93, 11, 29, 42, 59, 36, 90, 86, 52, 79, 80, 19, 24, 31, 88, 94, 17, 33, 82, 53, 8, 92, 15, 60, 99, 83, 37, 53, 91, 21, 39, 37, 79, 48, 35, 75, 17, 4, 92, 20, 45, 21, 5, 37, 41, 43, 93, 60, 30, 34, 69, 36, 77, 85, 56, 12, 95, 60, 84, 47, 65, 61, 46, 31, 16, 52, 68, 29, 69, 26, 27, 14, 91, 7, 71, 17, 78, 25, 17, 73, 14, 93, 11, 29, 42, 59, 36, 90, 86, 52, 79, 42, 95, 95, 42, 60, 44, 71, 69, 36, 49, 26, 4, 13, 46, 2, 65, 94, 31, 20, 97, 92, 90, 81, 31, 54, 55, 33, 76, 52, 4, 29, 47, 76, 33, 25, 50, 48, 70, 16, 94, 66, 56, 80, 11, 86, 68, 84, 4, 69, 74, 91, 34, 46, 60, 18, 71, 39, 19, 19, 37, 63, 21, 82, 50, 96, 64, 50, 88, 77, 93, 49, 69, 33, 1, 61, 83, 21]
last_save: 722

Gen:32
last_save: 722
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(sigmoid(x[index]),+260013.2993).all():
      return True
    else:
      return False
  def adf1(index):
    if np.equal(np.sin(x[index]),-913084.9946).all():
      return True
    else:
      return True
  def adf2(index):
    if np.equal(x[index],+794126.9871).all():
      return True
    else:
      return False
  def adf3(index):
    if np.greater(np.tanh(x[index]),-145247.2111).all():
      return False
    else:
      return False
  def adf4(index):
    if np.less(x[index],+839494.2801).all():
      return True
    else:
      return True
  def adf7(index):
    if np.greater(x[index],-203264.7131).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-941.382, adf1(1)*+634.750, adf2(2)*+300.471, adf3(3)*-190.982, adf4(4)*+223.439, adf7(7)*-422.606], [0, 0, 0, 1, 1], 873.859)
result=p(); 0.6666666666666666
IndLenGenome:283
IndGenome:[33, 22, 95, 30, 12, 98, 23, 76, 57, 42, 53, 48, 67, 16, 67, 65, 60, 14, 75, 75, 75, 47, 31, 17, 54, 58, 94, 49, 83, 5, 7, 80, 93, 68, 99, 68, 27, 45, 48, 33, 78, 38, 27, 43, 45, 62, 59, 30, 19, 61, 68, 16, 71, 98, 53, 66, 32, 48, 19, 12, 7, 43, 32, 54, 43, 29, 39, 7, 26, 22, 14, 22, 12, 89, 84, 34, 44, 87, 21, 87, 52, 77, 5, 82, 71, 91, 5, 40, 93, 46, 8, 63, 64, 67, 68, 90, 74, 79, 84, 36, 89, 25, 90, 82, 53, 21, 9, 51, 57, 18, 45, 67, 26, 22, 62, 76, 4, 23, 10, 10, 40, 81, 91, 51, 94, 71, 49, 32, 16, 45, 83, 53, 64, 62, 83, 34, 68, 91, 89, 58, 62, 40, 52, 78, 58, 34, 74, 44, 87, 62, 2, 90, 82, 39, 50, 46, 37, 83, 13, 22, 42, 97, 36, 33, 19, 41, 68, 33, 29, 66, 57, 80, 32, 31, 52, 87, 20, 63, 96, 84, 99, 99, 88, 61, 44, 83, 50, 19, 99, 50, 36, 23, 96, 10, 93, 27, 21, 16, 45, 20, 39, 80, 17, 38, 64, 82, 56, 5, 47, 34, 36, 36, 24, 5, 97, 36, 1, 98, 55, 9, 42, 76, 71, 97, 84, 81, 35, 78, 6, 50, 65, 67, 77, 16, 48, 58, 93, 85, 96, 6, 0, 32, 86, 17, 58, 51, 60, 64, 94, 77, 72, 13, 10, 59, 96, 48, 35, 0, 69, 73, 19, 22, 44, 40, 5, 73, 71, 66, 80, 82, 60, 5, 38, 36, 2, 56, 32, 6, 68, 67, 4, 24, 21]
last_save: 723

Gen:11
TrainFitness:0.8333333333333334
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],-310193.2126).all():
      return True
    else:
      return True
  def adf1(index):
    if np.greater(x[index],+777074.7829).all():
      return False
    else:
      return True
  def adf2(index):
    if np.less(x[index],+024217.0597).all():
      return True
    else:
      return False
  def adf3(index):
    if np.equal(x[index],-179513.4125).all():
      return False
    else:
      return True
  def adf4(index):
    if np.less(x[index],-123659.7557).all():
      return False
    else:
      return False
  def adf7(index):
    if np.greater(x[index],+900987.8838).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*-072.198, adf1(1)*+284.206, adf2(2)*+397.644, adf3(3)*-993.179, adf4(4)*-412.926, adf7(7)*-339.409], [0, 0, 0, 0, 1], 390.722)
result=p(); 0.8333333333333334
IndLenGenome:437
IndGenome:[44, 17, 74, 81, 73, 101, 78, 31, 87, 53, 81, 20, 101, 59, 23, 12, 61, 62, 6, 74, 38, 3, 11, 48, 87, 26, 38, 26, 77, 87, 7, 20, 67, 74, 77, 18, 42, 69, 43, 32, 35, 67, 37, 33, 49, 20, 97, 20, 82, 54, 2, 61, 67, 90, 25, 29, 47, 6, 49, 81, 99, 17, 99, 99, 99, 13, 51, 57, 79, 85, 91, 43, 74, 61, 42, 75, 97, 94, 95, 15, 22, 95, 60, 71, 23, 61, 72, 13, 76, 25, 79, 97, 75, 65, 67, 13, 53, 84, 37, 57, 47, 36, 6, 54, 29, 90, 10, 9, 98, 37, 8, 28, 53, 18, 95, 69, 5, 58, 11, 69, 71, 90, 47, 42, 31, 39, 18, 38, 16, 67, 92, 98, 14, 62, 70, 16, 95, 80, 51, 63, 29, 47, 6, 24, 14, 99, 17, 99, 99, 99, 13, 51, 57, 79, 85, 91, 43, 74, 61, 42, 69, 52, 36, 64, 79, 14, 43, 33, 39, 34, 10, 79, 84, 54, 92, 98, 28, 19, 79, 33, 49, 20, 97, 32, 82, 54, 2, 61, 67, 90, 25, 97, 47, 6, 49, 14, 99, 17, 99, 99, 99, 13, 51, 57, 79, 85, 67, 43, 74, 61, 42, 69, 52, 36, 64, 79, 14, 43, 33, 39, 49, 10, 79, 91, 54, 92, 98, 28, 19, 79, 86, 75, 25, 49, 90, 59, 18, 46, 41, 94, 91, 66, 61, 14, 76, 87, 51, 84, 1, 11, 14, 60, 69, 31, 53, 60, 96, 80, 43, 11, 30, 35, 23, 12, 75, 75, 45, 12, 18, 40, 47, 53, 43, 15, 47, 48, 31, 23, 91, 91, 63, 46, 73, 66, 19, 57, 71, 39, 63, 97, 36, 55, 88, 16, 24, 86, 36, 49, 10, 29, 90, 61, 90, 20, 93, 9, 83, 2, 73, 0, 72, 82, 98, 92, 90, 46, 37, 44, 22, 59, 70, 23, 12, 27, 44, 86, 89, 60, 27, 84, 65, 54, 57, 86, 30, 59, 34, 84, 20, 33, 24, 8, 24, 62, 38, 97, 15, 15, 85, 18, 44, 86, 2, 96, 9, 4, 71, 2, 79, 74, 52, 43, 74, 12, 30, 42, 7, 23, 69, 42, 76, 12, 97, 49, 41, 74, 35, 61, 92, 19, 50, 84, 30, 74, 70, 18, 50, 55, 30, 88, 64, 19, 32, 20, 7, 63, 39, 16, 8, 21, 8, 0, 33, 29, 38, 53, 87, 61, 48, 1, 8, 29, 5, 99, 89, 67, 99, 50, 1, 85, 80, 58, 2, 80, 61, 34, 62, 71, 90, 21, 54, 19, 65, 24, 48, 0, 5]
last_save: 723

Gen:206
TrainFitness:1.0
TestFitness:0.5
MaxGenLen:545
Individual: def p():
  def adf0(index):
    if np.less(x[index],-310193.7827).all():
      return True
    else:
      return False
  def adf1(index):
    if np.greater(x[index],+004217.7276).all():
      return True
    else:
      return False
  def adf2(index):
    if np.equal(x[index],+640312.7325).all():
      return False
    else:
      return False
  def adf3(index):
    if np.equal(x[index],+247759.7691).all():
      return False
    else:
      return False
  def adf4(index):
    if np.greater(x[index],-513412.5745).all():
      return False
    else:
      return True
  def adf7(index):
    if np.equal(x[index],-598979.5201).all():
      if np.greater(x[index],-257724.2170).all():
        if np.less(x[index],-379993.1795).all():
          return False
        else:
          return False
        return True
      else:
        if np.greater(x[index],+945399.0914).all():
          return True
        else:
          return True
        return True
      return False
    else:
      if np.equal(x[index],-986141.6146).all():
        return False
      else:
        return False
      return True
  return multiple_operation([adf0(0)*+130.103, adf1(1)*+325.552, adf2(2)*+335.781, adf3(3)*-363.697, adf4(4)*-765.864, adf7(7)*+090.100], [1, 1, 0, 1, 0], 282.067)
result=p(); 1.0
IndLenGenome:379
IndGenome:[44, 17, 74, 81, 73, 101, 78, 31, 87, 53, 81, 20, 101, 59, 23, 77, 18, 42, 17, 38, 51, 89, 67, 42, 33, 49, 66, 77, 20, 60, 54, 2, 61, 67, 37, 82, 27, 26, 6, 49, 8, 99, 17, 21, 15, 2, 30, 36, 54, 20, 33, 81, 82, 57, 43, 32, 35, 67, 37, 30, 49, 20, 97, 8, 82, 95, 2, 14, 67, 37, 25, 29, 47, 6, 49, 81, 99, 17, 18, 99, 99, 13, 51, 57, 79, 85, 91, 43, 74, 61, 42, 75, 97, 94, 95, 15, 22, 95, 60, 71, 2, 61, 72, 13, 76, 25, 49, 8, 99, 17, 99, 15, 2, 30, 71, 54, 20, 33, 81, 82, 57, 43, 32, 35, 67, 37, 82, 54, 2, 61, 67, 90, 25, 97, 47, 6, 49, 14, 63, 17, 99, 99, 99, 13, 51, 57, 79, 85, 67, 43, 74, 61, 42, 69, 52, 36, 64, 79, 14, 35, 33, 39, 49, 10, 79, 91, 54, 92, 98, 28, 19, 79, 86, 75, 25, 49, 90, 59, 18, 46, 41, 94, 91, 66, 61, 14, 76, 87, 51, 84, 1, 11, 14, 60, 69, 31, 53, 60, 81, 80, 43, 11, 30, 35, 23, 12, 75, 75, 45, 12, 18, 40, 47, 53, 43, 15, 47, 48, 31, 23, 91, 91, 63, 46, 73, 66, 19, 57, 71, 39, 63, 97, 36, 55, 88, 16, 24, 86, 36, 49, 10, 29, 90, 61, 90, 20, 93, 9, 83, 2, 73, 0, 72, 22, 98, 92, 90, 46, 37, 44, 22, 59, 70, 23, 12, 27, 44, 86, 89, 60, 27, 84, 65, 54, 57, 86, 30, 59, 34, 84, 20, 33, 24, 8, 24, 62, 38, 97, 15, 15, 85, 18, 44, 86, 2, 96, 9, 4, 71, 2, 79, 74, 52, 43, 74, 12, 30, 42, 7, 23, 69, 42, 76, 12, 97, 49, 41, 74, 35, 61, 92, 19, 50, 84, 30, 74, 70, 18, 50, 55, 30, 88, 64, 19, 32, 20, 7, 63, 39, 16, 8, 21, 8, 0, 33, 29, 38, 53, 87, 61, 48, 1, 8, 29, 5, 99, 89, 67, 99, 50, 1, 85, 80, 58, 2, 80, 61, 34, 62, 71, 90, 21, 54, 19, 65, 24, 48, 0, 5]
last_save: 723

Gen:206
last_save: 723
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(psqrt(x[index]),+144774.0012).all():
      return True
    else:
      return True
  def adf1(index):
    if np.equal(psqrt(x[index]),+043116.7376).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(x[index],-263264.6318).all():
      return True
    else:
      return True
  def adf3(index):
    if np.less(np.cos(x[index]),+454697.2804).all():
      return True
    else:
      return False
  def adf4(index):
    if np.less(x[index],+498927.2015).all():
      return True
    else:
      return False
  def adf7(index):
    if np.less(x[index],-866464.8652).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*-783.358, adf1(1)*-422.692, adf2(2)*+457.023, adf3(3)*+545.681, adf4(4)*+482.143, adf7(7)*+406.319], [1, 1, 1, 0, 0], 382.204)
result=p(); 0.6666666666666666
IndLenGenome:283
IndGenome:[95, 55, 31, 40, 40, 60, 87, 8, 57, 96, 37, 30, 10, 37, 18, 4, 87, 78, 93, 20, 33, 80, 98, 86, 83, 36, 33, 33, 89, 44, 90, 68, 31, 31, 52, 69, 75, 88, 14, 52, 38, 12, 79, 101, 40, 42, 84, 49, 79, 51, 32, 84, 88, 98, 17, 78, 64, 10, 27, 32, 45, 43, 3, 34, 43, 66, 14, 54, 51, 85, 48, 57, 97, 81, 23, 41, 84, 27, 75, 48, 31, 85, 41, 93, 47, 36, 17, 64, 92, 59, 99, 47, 86, 46, 83, 65, 96, 44, 32, 76, 26, 40, 24, 56, 56, 80, 60, 63, 65, 61, 93, 89, 24, 73, 97, 37, 97, 69, 95, 35, 95, 83, 43, 40, 14, 80, 23, 86, 47, 94, 64, 25, 74, 44, 56, 24, 95, 30, 54, 62, 94, 73, 46, 58, 38, 23, 70, 22, 28, 92, 31, 51, 36, 83, 82, 90, 29, 18, 83, 85, 32, 98, 80, 44, 42, 18, 56, 56, 85, 42, 12, 77, 59, 62, 18, 83, 96, 78, 59, 28, 46, 67, 94, 30, 89, 11, 83, 66, 64, 15, 51, 56, 96, 11, 92, 33, 10, 65, 29, 72, 66, 81, 82, 40, 43, 54, 7, 79, 55, 89, 3, 93, 16, 29, 11, 59, 63, 4, 39, 45, 66, 16, 49, 97, 17, 55, 2, 43, 89, 51, 23, 91, 41, 5, 66, 62, 60, 94, 58, 49, 20, 71, 33, 53, 23, 77, 9, 62, 55, 23, 61, 8, 88, 83, 45, 35, 73, 29, 77, 22, 69, 56, 9, 34, 68, 91, 80, 28, 35, 36, 64, 83, 44, 77, 11, 17, 30, 62, 68, 31, 56, 98, 77]
last_save: 724

Gen:2
TrainFitness:0.8333333333333334
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],-736864.8348).all():
      if np.greater(x[index],-467283.0422).all():
        return False
      else:
        return True
      return False
    else:
      if np.greater(x[index],+034480.8903).all():
        return True
      else:
        return False
      return False
  def adf1(index):
    if np.less(x[index],-178719.7138).all():
      return True
    else:
      return True
  def adf2(index):
    if np.equal(x[index],+328861.1175).all():
      return True
    else:
      return False
  def adf3(index):
    if np.equal(np.cos(x[index]),+814845.3343).all():
      if np.less(x[index],-732753.1239).all():
        if np.less(x[index],+460584.6204).all():
          return False
        else:
          return True
        return False
      else:
        if np.less(x[index],+173369.6368).all():
          return True
        else:
          return False
        return True
      return False
    else:
      if np.less(x[index],+264781.4484).all():
        return True
      else:
        return False
      return True
  def adf4(index):
    if np.less(np.tanh(x[index]),-738125.9884).all():
      return True
    else:
      return True
  def adf7(index):
    if np.greater(x[index],+596892.9665).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+951.667, adf1(1)*-118.218, adf2(2)*+965.830, adf3(3)*+014.160, adf4(4)*+933.643, adf7(7)*-528.611], [1, 1, 1, 1, 1], 579.573)
result=p(); 0.8333333333333334
IndLenGenome:409
IndGenome:[56, 82, 14, 90, 48, 94, 3, 26, 89, 27, 77, 53, 46, 18, 36, 24, 88, 3, 64, 38, 45, 30, 83, 69, 85, 67, 94, 56, 97, 42, 88, 93, 40, 84, 62, 82, 33, 42, 15, 17, 21, 93, 83, 16, 55, 80, 93, 54, 24, 68, 40, 48, 49, 50, 23, 64, 17, 89, 93, 45, 91, 21, 30, 43, 74, 71, 17, 38, 47, 91, 79, 47, 71, 63, 68, 70, 28, 41, 69, 71, 25, 13, 60, 79, 13, 82, 88, 98, 96, 11, 51, 31, 47, 5, 20, 9, 55, 66, 96, 62, 72, 61, 67, 36, 38, 18, 81, 94, 98, 44, 25, 73, 93, 4, 83, 32, 55, 76, 69, 51, 15, 94, 77, 83, 32, 37, 95, 13, 11, 52, 53, 19, 63, 85, 99, 45, 44, 96, 24, 36, 10, 25, 78, 14, 26, 72, 50, 44, 83, 68, 47, 81, 16, 31, 64, 76, 67, 11, 77, 83, 3, 6, 89, 66, 33, 86, 8, 98, 45, 68, 67, 91, 19, 37, 68, 14, 90, 32, 46, 44, 87, 8, 51, 4, 54, 38, 74, 48, 7, 84, 61, 61, 97, 66, 14, 53, 59, 81, 87, 13, 8, 91, 72, 35, 59, 38, 88, 34, 92, 40, 56, 19, 39, 29, 59, 76, 33, 55, 89, 16, 18, 79, 12, 99, 36, 16, 35, 18, 92, 37, 66, 66, 28, 56, 79, 65, 11, 46, 66, 27, 31, 59, 58, 61, 81, 68, 52, 91, 58, 5, 66, 88, 59, 46, 65, 8, 13, 20, 90, 14, 56, 60, 11, 74, 11, 86, 20, 51, 40, 53, 19, 23, 13, 36, 84, 33, 67, 93, 28, 45, 2, 28, 76, 61, 81, 99, 27, 13, 47, 31, 53, 65, 15, 57, 29, 95, 37, 23, 74, 16, 57, 26, 71, 26, 74, 90, 23, 59, 13, 89, 45, 66, 35, 10, 30, 70, 27, 2, 91, 93, 64, 5, 97, 24, 86, 63, 36, 84, 44, 15, 20, 71, 34, 12, 72, 68, 46, 13, 82, 98, 92, 43, 27, 12, 33, 73, 71, 93, 4, 57, 22, 15, 91, 42, 46, 17, 58, 45, 2, 8, 18, 56, 21, 84, 5, 8, 2, 66, 83, 48, 70, 24, 85, 1, 18, 47, 28, 35, 56, 54, 62, 32, 46, 56, 76, 33, 22, 78, 85, 32, 64, 63, 95, 44, 47, 42, 62, 92, 18, 31, 100, 23, 51, 94, 35, 36, 81, 75, 58]
last_save: 724

Gen:247
TrainFitness:1.0
TestFitness:0.5
MaxGenLen:560
Individual: def p():
  def adf0(index):
    if np.less(x[index],-242214.8549).all():
      if np.less(x[index],-487254.0427).all():
        return False
      else:
        return True
      return False
    else:
      if np.greater(x[index],+005580.8703).all():
        return True
      else:
        return False
      return True
  def adf1(index):
    if np.less(x[index],-178242.7371).all():
      return True
    else:
      return False
  def adf2(index):
    if np.greater(x[index],+460424.4026).all():
      return False
    else:
      return False
  def adf3(index):
    if np.greater(x[index],+195172.2753).all():
      return True
    else:
      return False
  def adf4(index):
    if np.greater(x[index],-745261.4686).all():
      return False
    else:
      return False
  def adf7(index):
    if np.greater(rlog(x[index]),-403903.4793).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+787.197, adf1(1)*-081.910, adf2(2)*+144.848, adf3(3)*+176.439, adf4(4)*-812.598, adf7(7)*+069.999], [1, 1, 1, 0, 0], 296.658)
result=p(); 1.0
IndLenGenome:404
IndGenome:[56, 16, 14, 90, 97, 94, 3, 10, 3, 95, 12, 54, 72, 42, 81, 24, 88, 75, 64, 9, 45, 97, 83, 22, 9, 63, 64, 8, 97, 42, 45, 14, 40, 84, 12, 67, 47, 44, 89, 17, 21, 93, 83, 4, 55, 80, 100, 85, 45, 68, 40, 48, 7, 50, 23, 64, 17, 88, 19, 45, 91, 21, 30, 43, 95, 71, 97, 38, 72, 54, 32, 37, 43, 17, 11, 52, 53, 19, 97, 36, 99, 30, 44, 32, 24, 36, 10, 4, 22, 14, 14, 50, 32, 76, 73, 93, 8, 97, 51, 55, 28, 70, 76, 31, 99, 15, 11, 77, 82, 32, 37, 95, 13, 58, 79, 29, 19, 63, 85, 99, 17, 44, 97, 24, 15, 82, 36, 1, 14, 26, 8, 56, 17, 83, 50, 47, 81, 16, 82, 26, 13, 20, 4, 80, 83, 49, 50, 23, 64, 17, 89, 93, 45, 91, 21, 30, 43, 74, 71, 17, 38, 47, 91, 79, 47, 71, 63, 68, 70, 28, 41, 69, 71, 100, 13, 60, 8, 51, 4, 54, 38, 74, 48, 7, 84, 61, 61, 97, 66, 14, 53, 59, 81, 87, 13, 8, 91, 72, 35, 59, 38, 88, 34, 92, 40, 56, 19, 39, 29, 59, 76, 33, 55, 89, 16, 18, 79, 12, 99, 36, 16, 35, 18, 92, 37, 66, 66, 28, 56, 79, 65, 11, 46, 66, 27, 31, 59, 58, 61, 81, 68, 52, 91, 58, 5, 66, 88, 59, 46, 65, 8, 13, 20, 90, 14, 56, 60, 11, 74, 11, 86, 20, 51, 40, 53, 19, 23, 13, 36, 84, 33, 67, 93, 28, 45, 2, 28, 76, 61, 81, 99, 27, 13, 47, 31, 53, 65, 15, 57, 29, 95, 37, 23, 74, 16, 57, 26, 71, 26, 74, 90, 23, 59, 13, 89, 45, 66, 35, 10, 30, 70, 27, 2, 91, 93, 64, 5, 97, 24, 86, 63, 36, 84, 44, 15, 20, 71, 34, 12, 72, 68, 46, 13, 82, 98, 92, 43, 27, 12, 33, 73, 71, 93, 4, 57, 22, 15, 91, 42, 46, 17, 58, 45, 2, 8, 18, 56, 21, 84, 5, 8, 2, 66, 83, 48, 70, 24, 85, 1, 18, 47, 28, 35, 56, 54, 62, 32, 46, 56, 76, 33, 22, 78, 85, 32, 64, 63, 95, 44, 47, 42, 62, 92, 18, 31, 100, 23, 51, 94, 35, 36, 81, 75, 58]
last_save: 724

Gen:247
last_save: 724
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],+008624.3378).all():
      return False
    else:
      return True
  def adf1(index):
    if np.less(np.sin(x[index]),+565125.5911).all():
      return True
    else:
      return False
  def adf2(index):
    if np.less(np.sin(x[index]),+412783.1948).all():
      return True
    else:
      return False
  def adf3(index):
    if np.equal(sigmoid(x[index]),+373719.4310).all():
      return True
    else:
      return True
  def adf4(index):
    if np.equal(np.sin(x[index]),+534296.1893).all():
      return True
    else:
      return True
  def adf7(index):
    if np.greater(x[index],+654236.7494).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*-887.667, adf1(1)*-351.996, adf2(2)*-326.972, adf3(3)*+145.656, adf4(4)*-373.977, adf7(7)*+501.456], [0, 0, 1, 1, 1], 800.092)
result=p(); 0.8333333333333334
IndLenGenome:285
IndGenome:[91, 25, 49, 43, 12, 23, 64, 94, 58, 95, 99, 30, 80, 18, 19, 90, 41, 23, 71, 55, 66, 46, 75, 33, 35, 73, 40, 46, 25, 91, 88, 47, 62, 49, 54, 77, 29, 56, 80, 93, 74, 29, 89, 29, 82, 66, 36, 85, 42, 27, 4, 29, 10, 23, 2, 85, 18, 69, 35, 50, 48, 15, 59, 67, 32, 39, 7, 31, 26, 31, 71, 35, 34, 58, 73, 82, 15, 64, 83, 54, 46, 86, 8, 23, 81, 78, 60, 74, 15, 95, 52, 86, 49, 72, 89, 37, 48, 74, 52, 93, 76, 49, 75, 87, 44, 96, 37, 79, 72, 5, 37, 46, 47, 57, 29, 66, 20, 78, 24, 53, 67, 71, 85, 36, 34, 16, 19, 29, 21, 54, 36, 86, 31, 65, 96, 90, 60, 52, 32, 7, 75, 56, 85, 73, 22, 22, 93, 92, 18, 97, 85, 53, 50, 12, 74, 14, 63, 29, 50, 18, 61, 45, 31, 87, 87, 34, 94, 28, 60, 31, 43, 42, 70, 17, 93, 70, 97, 54, 36, 89, 26, 55, 33, 14, 99, 52, 51, 13, 48, 76, 87, 93, 88, 85, 47, 99, 25, 68, 32, 77, 52, 83, 78, 61, 76, 95, 15, 95, 12, 2, 46, 35, 85, 42, 78, 12, 100, 88, 89, 74, 20, 62, 53, 68, 12, 2, 91, 99, 49, 90, 19, 80, 49, 62, 18, 89, 89, 36, 96, 92, 43, 87, 16, 33, 70, 79, 9, 77, 98, 86, 24, 15, 17, 99, 31, 25, 75, 21, 43, 33, 45, 6, 89, 29, 99, 43, 46, 21, 52, 1, 3, 80, 77, 36, 44, 36, 25, 93, 21, 30, 6, 94, 35, 14, 12]
last_save: 725

Gen:15
TrainFitness:1.0
TestFitness:0.3333333333333333
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],-196590.3330).all():
      return False
    else:
      return True
  def adf1(index):
    if np.less(x[index],+363812.2150).all():
      return True
    else:
      return True
  def adf2(index):
    if np.equal(x[index],-886755.8989).all():
      return False
    else:
      return False
  def adf3(index):
    if np.equal(x[index],-320343.6064).all():
      return False
    else:
      return False
  def adf4(index):
    if np.equal(rlog(x[index]),+989725.7467).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(x[index],+004715.6902).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+122.311, adf1(1)*+952.888, adf2(2)*+393.405, adf3(3)*+413.716, adf4(4)*+411.833, adf7(7)*+747.852], [1, 1, 0, 0, 0], 515.503)
result=p(); 1.0
IndLenGenome:480
IndGenome:[86, 40, 96, 67, 35, 85, 9, 7, 76, 31, 9, 56, 65, 49, 50, 53, 73, 13, 70, 91, 98, 29, 19, 10, 59, 41, 22, 47, 53, 16, 93, 58, 71, 12, 12, 41, 55, 70, 100, 82, 63, 93, 80, 53, 55, 89, 91, 38, 58, 26, 17, 75, 25, 78, 89, 78, 79, 51, 97, 49, 27, 53, 19, 10, 29, 34, 23, 42, 10, 13, 64, 83, 16, 70, 16, 44, 75, 87, 30, 69, 35, 64, 40, 17, 58, 97, 69, 88, 19, 77, 22, 85, 77, 44, 36, 77, 86, 13, 25, 83, 75, 23, 47, 68, 31, 10, 40, 74, 57, 51, 25, 66, 9, 20, 12, 71, 28, 21, 99, 65, 52, 33, 21, 62, 42, 43, 41, 51, 19, 38, 94, 19, 85, 42, 78, 78, 68, 78, 4, 55, 73, 69, 53, 54, 40, 25, 38, 78, 73, 94, 61, 43, 47, 11, 66, 70, 2, 13, 84, 61, 11, 28, 43, 33, 74, 44, 63, 37, 74, 37, 98, 85, 22, 77, 97, 77, 12, 50, 88, 37, 85, 81, 75, 5, 80, 73, 34, 71, 55, 98, 78, 76, 67, 13, 57, 73, 50, 64, 24, 64, 98, 13, 45, 10, 1, 53, 91, 40, 4, 11, 81, 51, 81, 35, 94, 7, 92, 27, 58, 3, 8, 89, 39, 29, 39, 38, 69, 38, 40, 98, 70, 14, 12, 16, 100, 49, 59, 54, 6, 92, 66, 60, 70, 19, 95, 13, 51, 9, 63, 0, 73, 28, 21, 49, 92, 92, 92, 39, 38, 83, 86, 70, 23, 62, 89, 59, 50, 17, 56, 30, 90, 89, 49, 30, 46, 75, 51, 55, 12, 12, 17, 81, 47, 12, 28, 35, 74, 94, 16, 81, 61, 92, 62, 39, 8, 72, 84, 20, 87, 94, 54, 22, 89, 94, 42, 35, 87, 17, 42, 54, 20, 94, 31, 59, 86, 25, 86, 47, 99, 42, 52, 72, 97, 88, 77, 73, 78, 69, 15, 73, 35, 14, 55, 44, 75, 87, 30, 69, 35, 64, 40, 17, 58, 97, 69, 88, 92, 68, 21, 52, 90, 42, 99, 14, 65, 95, 95, 78, 22, 27, 94, 91, 79, 47, 51, 88, 54, 12, 23, 71, 53, 83, 19, 93, 0, 47, 71, 18, 9, 5, 88, 92, 8, 32, 45, 17, 86, 22, 38, 58, 0, 89, 8, 66, 98, 41, 18, 94, 10, 100, 1, 59, 95, 0, 71, 93, 100, 83, 28, 85, 41, 77, 64, 36, 71, 73, 98, 12, 53, 90, 78, 58, 71, 28, 59, 57, 7, 99, 98, 98, 90, 1, 57, 72, 92, 81, 1, 68, 77, 77, 52, 69, 40, 36, 64, 55, 99, 45, 33, 98, 16, 34, 28, 23, 9, 51, 47, 91, 78, 9, 56, 97, 82, 97, 18, 66, 36, 6, 37, 89, 84, 79, 99, 67, 8, 87, 39, 50, 28, 26]
last_save: 725

Gen:15
last_save: 725
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(np.sin(x[index]),-811999.5265).all():
      return False
    else:
      return True
  def adf1(index):
    if np.greater(np.cos(x[index]),+048574.2912).all():
      return True
    else:
      return False
  def adf2(index):
    if np.greater(np.cos(x[index]),+794358.6348).all():
      return True
    else:
      return True
  def adf3(index):
    if np.less(x[index],-627075.2382).all():
      return True
    else:
      return True
  def adf4(index):
    if np.less(x[index],+354972.4331).all():
      return False
    else:
      return False
  def adf7(index):
    if np.less(sigmoid(x[index]),+014012.1857).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+396.240, adf1(1)*-249.844, adf2(2)*+004.052, adf3(3)*+669.092, adf4(4)*-618.226, adf7(7)*+033.198], [0, 0, 0, 1, 1], 771.586)
result=p(); 0.6666666666666666
IndLenGenome:285
IndGenome:[16, 66, 50, 57, 73, 81, 33, 40, 61, 54, 51, 91, 39, 77, 42, 82, 19, 3, 53, 73, 93, 58, 86, 3, 17, 67, 60, 98, 79, 48, 94, 94, 73, 95, 90, 75, 52, 92, 54, 65, 12, 22, 17, 34, 45, 63, 33, 39, 25, 29, 48, 78, 88, 91, 94, 25, 18, 8, 10, 93, 53, 64, 32, 28, 16, 22, 87, 75, 70, 97, 15, 16, 27, 42, 66, 88, 64, 21, 28, 98, 77, 64, 59, 84, 71, 46, 38, 94, 77, 94, 26, 20, 58, 92, 35, 17, 52, 53, 3, 60, 66, 22, 37, 93, 98, 49, 57, 65, 30, 21, 83, 93, 88, 42, 13, 83, 92, 23, 21, 80, 16, 64, 44, 54, 27, 21, 95, 32, 71, 20, 84, 40, 86, 85, 45, 75, 61, 79, 34, 54, 65, 42, 24, 38, 79, 69, 18, 4, 22, 49, 76, 42, 92, 47, 66, 6, 47, 82, 47, 23, 10, 66, 58, 59, 11, 40, 18, 19, 74, 90, 62, 29, 98, 95, 31, 76, 69, 72, 13, 36, 83, 26, 29, 46, 29, 81, 89, 91, 25, 20, 91, 34, 21, 84, 91, 79, 50, 50, 59, 77, 49, 67, 87, 58, 93, 76, 8, 9, 2, 95, 99, 94, 78, 64, 43, 20, 24, 63, 22, 91, 48, 74, 68, 82, 34, 20, 45, 78, 44, 76, 95, 88, 9, 13, 81, 42, 0, 1, 100, 6, 39, 1, 35, 76, 45, 54, 4, 80, 77, 72, 93, 41, 83, 79, 52, 14, 85, 35, 26, 20, 39, 57, 70, 88, 10, 24, 4, 89, 30, 8, 27, 38, 1, 8, 76, 97, 66, 21, 21, 17, 5, 41, 32, 3, 74]
last_save: 726

Gen:18
TrainFitness:0.8333333333333334
TestFitness:0.5
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(np.tanh(x[index]),-865314.1692).all():
      return True
    else:
      return True
  def adf1(index):
    if np.greater(sigmoid(x[index]),+940294.0567).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(np.sin(x[index]),-699235.4841).all():
      return True
    else:
      return False
  def adf3(index):
    if np.less(x[index],-346513.7444).all():
      return True
    else:
      return True
  def adf4(index):
    if np.less(np.tanh(x[index]),-128677.8750).all():
      return False
    else:
      return False
  def adf7(index):
    if np.greater(x[index],+030976.4963).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+115.398, adf1(1)*+341.014, adf2(2)*+225.297, adf3(3)*-186.104, adf4(4)*-928.753, adf7(7)*+529.302], [1, 1, 1, 1, 1], 161.950)
result=p(); 0.8333333333333334
IndLenGenome:433
IndGenome:[37, 90, 49, 9, 75, 50, 44, 86, 55, 59, 18, 26, 25, 43, 41, 4, 31, 66, 39, 52, 64, 78, 48, 69, 66, 96, 93, 23, 78, 61, 99, 74, 90, 12, 79, 54, 90, 95, 96, 27, 73, 95, 12, 51, 66, 74, 24, 69, 15, 70, 16, 19, 89, 92, 73, 45, 74, 68, 34, 1, 38, 55, 1, 81, 79, 71, 16, 27, 28, 53, 74, 36, 95, 61, 93, 47, 64, 84, 94, 58, 44, 41, 35, 43, 46, 20, 63, 63, 14, 71, 52, 38, 86, 67, 27, 18, 67, 25, 70, 17, 13, 45, 7, 90, 71, 92, 62, 7, 40, 3, 90, 19, 77, 36, 24, 99, 26, 13, 46, 95, 43, 72, 35, 90, 75, 41, 21, 95, 53, 59, 28, 42, 84, 6, 13, 24, 21, 30, 81, 24, 90, 22, 49, 22, 22, 5, 32, 9, 27, 87, 19, 12, 51, 78, 16, 11, 70, 64, 11, 25, 72, 89, 62, 58, 97, 15, 43, 47, 84, 83, 95, 22, 69, 93, 90, 72, 57, 79, 39, 51, 7, 3, 74, 61, 26, 51, 89, 85, 90, 33, 54, 27, 91, 9, 85, 59, 97, 66, 14, 11, 45, 78, 48, 69, 19, 96, 8, 23, 78, 61, 47, 74, 90, 12, 5, 54, 90, 56, 96, 27, 73, 95, 12, 51, 66, 74, 24, 42, 59, 52, 43, 79, 22, 57, 79, 34, 31, 37, 16, 77, 63, 29, 33, 56, 94, 80, 71, 27, 83, 3, 45, 64, 58, 48, 39, 80, 44, 68, 93, 45, 67, 10, 73, 49, 23, 41, 37, 97, 76, 85, 34, 59, 90, 55, 94, 64, 39, 89, 17, 47, 41, 44, 28, 46, 43, 32, 40, 88, 68, 97, 85, 34, 10, 95, 81, 71, 42, 14, 54, 98, 69, 23, 84, 33, 46, 63, 33, 69, 29, 44, 29, 36, 59, 16, 83, 11, 10, 83, 87, 52, 13, 1, 87, 41, 36, 77, 73, 72, 83, 29, 32, 97, 44, 12, 41, 71, 85, 36, 82, 80, 28, 32, 59, 100, 97, 59, 97, 86, 68, 11, 85, 23, 31, 91, 55, 26, 83, 65, 10, 89, 69, 25, 61, 72, 66, 46, 96, 80, 41, 89, 32, 27, 38, 20, 93, 97, 64, 10, 33, 25, 84, 44, 17, 100, 94, 58, 4, 0, 74, 11, 15, 16, 39, 61, 81, 21, 46, 25, 5, 13, 12, 30, 49, 45, 0, 70, 71, 66, 80, 30, 79, 11, 65, 58, 55, 91, 19, 47, 93, 76, 67, 70, 93, 40, 83, 56, 77, 38, 99, 85, 80, 45, 19]
last_save: 726

Gen:38
TrainFitness:1.0
TestFitness:0.5
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],+837779.3551).all():
      return False
    else:
      return True
  def adf1(index):
    if np.equal(np.cos(x[index]),-118976.6675).all():
      if np.equal(np.cos(x[index]),-869101.4572).all():
        return True
      else:
        return True
      return False
    else:
      if np.less(np.sin(x[index]),+147075.6965).all():
        return False
      else:
        return False
      return False
  def adf2(index):
    if np.greater(x[index],-754064.0328).all():
      if np.less(x[index],+007357.0122).all():
        return False
      else:
        return True
      return False
    else:
      if np.less(x[index],+976712.8151).all():
        return False
      else:
        return False
      return True
  def adf3(index):
    if np.less(x[index],-146793.8058).all():
      return True
    else:
      return False
  def adf4(index):
    if np.less(x[index],+656185.6823).all():
      return True
    else:
      return False
  def adf7(index):
    if np.equal(psqrt(x[index]),-872785.3896).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+096.560, adf1(1)*-824.942, adf2(2)*-879.306, adf3(3)*+680.103, adf4(4)*-286.807, adf7(7)*-311.189], [0, 0, 1, 1, 1], 393.177)
result=p(); 1.0
IndLenGenome:428
IndGenome:[1, 61, 24, 63, 27, 41, 69, 84, 87, 78, 33, 87, 47, 67, 79, 33, 55, 45, 91, 51, 74, 30, 46, 38, 50, 24, 31, 86, 93, 94, 21, 51, 8, 49, 37, 56, 66, 86, 47, 45, 27, 20, 68, 13, 47, 49, 21, 88, 26, 39, 31, 30, 41, 74, 45, 67, 92, 78, 66, 17, 19, 13, 8, 90, 45, 38, 22, 21, 44, 47, 70, 87, 75, 66, 29, 66, 65, 53, 65, 37, 83, 98, 33, 12, 57, 4, 73, 76, 47, 55, 54, 70, 76, 24, 80, 3, 32, 78, 63, 58, 73, 90, 0, 1, 40, 70, 17, 13, 45, 7, 90, 71, 92, 62, 7, 40, 3, 69, 19, 77, 36, 24, 99, 69, 27, 26, 17, 71, 12, 38, 21, 85, 71, 27, 65, 16, 84, 33, 46, 53, 15, 15, 32, 51, 14, 66, 17, 19, 13, 8, 90, 45, 38, 22, 21, 44, 47, 70, 87, 75, 66, 29, 66, 65, 26, 81, 58, 65, 96, 68, 62, 63, 92, 63, 19, 19, 71, 78, 41, 1, 17, 37, 78, 87, 72, 77, 48, 5, 33, 48, 29, 6, 68, 63, 11, 31, 50, 58, 27, 10, 59, 96, 35, 96, 20, 44, 71, 72, 8, 12, 34, 99, 24, 62, 17, 93, 90, 58, 27, 89, 83, 20, 26, 87, 90, 20, 76, 78, 30, 11, 40, 3, 49, 87, 89, 22, 98, 46, 28, 60, 87, 83, 45, 92, 33, 31, 51, 11, 48, 39, 80, 44, 68, 93, 45, 67, 10, 73, 49, 23, 41, 37, 97, 76, 85, 34, 59, 90, 55, 94, 64, 39, 89, 17, 47, 41, 44, 28, 46, 43, 32, 88, 88, 68, 97, 85, 48, 10, 95, 81, 71, 42, 49, 54, 98, 69, 23, 84, 33, 46, 63, 33, 69, 25, 44, 29, 36, 59, 64, 83, 11, 10, 94, 87, 52, 13, 1, 99, 41, 36, 77, 73, 72, 83, 29, 32, 97, 44, 12, 41, 71, 85, 36, 82, 27, 28, 32, 59, 100, 97, 59, 97, 86, 68, 11, 85, 23, 31, 91, 55, 26, 83, 65, 10, 89, 69, 25, 61, 72, 66, 46, 96, 80, 41, 89, 32, 27, 38, 20, 93, 97, 64, 10, 33, 25, 84, 44, 17, 100, 94, 58, 4, 0, 74, 11, 15, 16, 39, 61, 81, 21, 46, 25, 5, 13, 12, 30, 49, 45, 0, 70, 71, 66, 80, 30, 79, 11, 65, 58, 55, 91, 19, 47, 93, 76, 67, 70, 93, 40, 83, 56, 77, 38, 99, 85, 80, 45, 19]
last_save: 726

Gen:38
last_save: 726
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.0
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],-073533.8637).all():
      return False
    else:
      return True
  def adf1(index):
    if np.greater(x[index],-110860.9384).all():
      return True
    else:
      return True
  def adf2(index):
    if np.less(x[index],-568054.5713).all():
      return True
    else:
      return True
  def adf3(index):
    if np.greater(x[index],-483228.0659).all():
      return False
    else:
      return False
  def adf4(index):
    if np.greater(x[index],-003777.5654).all():
      return False
    else:
      return False
  def adf7(index):
    if np.equal(np.tanh(x[index]),+877540.8593).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*-046.116, adf1(1)*+589.580, adf2(2)*-638.753, adf3(3)*-798.385, adf4(4)*-252.509, adf7(7)*-006.198], [1, 1, 1, 1, 0], 261.130)
result=p(); 0.6666666666666666
IndLenGenome:280
IndGenome:[71, 31, 96, 1, 62, 47, 80, 83, 4, 49, 87, 61, 93, 53, 29, 98, 56, 99, 35, 71, 43, 9, 90, 50, 3, 27, 19, 36, 10, 26, 88, 71, 95, 53, 93, 10, 11, 63, 86, 65, 26, 83, 48, 31, 78, 79, 12, 50, 90, 32, 43, 39, 63, 27, 37, 71, 49, 89, 63, 87, 90, 19, 85, 33, 93, 18, 75, 51, 96, 98, 68, 75, 10, 54, 33, 56, 35, 88, 40, 25, 60, 50, 79, 79, 20, 67, 89, 14, 56, 22, 34, 58, 78, 39, 25, 71, 28, 73, 63, 91, 97, 40, 98, 96, 16, 15, 35, 33, 91, 82, 13, 31, 46, 11, 27, 10, 10, 89, 31, 24, 52, 35, 44, 54, 24, 85, 57, 15, 20, 30, 69, 94, 89, 71, 27, 72, 66, 75, 9, 99, 53, 25, 23, 48, 95, 68, 34, 23, 46, 91, 32, 53, 48, 60, 75, 54, 97, 20, 41, 68, 81, 98, 16, 75, 77, 63, 50, 15, 97, 27, 83, 27, 93, 63, 96, 36, 61, 45, 46, 47, 88, 29, 63, 77, 55, 10, 88, 86, 4, 47, 85, 91, 66, 86, 41, 18, 36, 96, 0, 69, 26, 98, 2, 3, 38, 48, 42, 64, 83, 23, 12, 90, 55, 34, 5, 46, 86, 55, 87, 18, 64, 22, 20, 50, 6, 35, 37, 19, 82, 6, 57, 75, 88, 58, 4, 25, 62, 86, 46, 49, 95, 13, 2, 32, 89, 47, 72, 8, 5, 66, 97, 39, 13, 85, 33, 29, 81, 26, 44, 31, 43, 56, 64, 29, 64, 18, 71, 53, 89, 20, 30, 32, 12, 41, 14, 70, 60, 52, 36, 23]
last_save: 727

Gen:3
TrainFitness:0.8333333333333334
TestFitness:0.16666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(np.sin(x[index]),+373487.5608).all():
      if np.less(sigmoid(x[index]),+214914.7057).all():
        if np.less(x[index],-029222.6036).all():
          return True
        else:
          return False
        return True
      else:
        if np.greater(np.cos(x[index]),-496743.6293).all():
          return False
        else:
          return True
        return False
      return True
    else:
      if np.greater(x[index],+967359.7165).all():
        return False
      else:
        return False
      return True
  def adf1(index):
    if np.equal(x[index],-554545.0715).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(x[index],-764448.7824).all():
      return False
    else:
      return False
  def adf3(index):
    if np.greater(x[index],-367275.4098).all():
      return True
    else:
      return True
  def adf4(index):
    if np.equal(x[index],-975080.3529).all():
      if np.less(x[index],-938801.3257).all():
        return False
      else:
        return False
      return False
    else:
      if np.less(x[index],-259078.4789).all():
        return False
      else:
        return True
      return True
  def adf7(index):
    if np.greater(x[index],+012228.5523).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-411.659, adf1(1)*+885.474, adf2(2)*-241.907, adf3(3)*+191.891, adf4(4)*-648.423, adf7(7)*-758.865], [1, 1, 0, 0, 0], 604.126)
result=p(); 0.8333333333333334
IndLenGenome:473
IndGenome:[49, 3, 23, 68, 55, 37, 38, 84, 28, 62, 50, 3, 77, 43, 44, 78, 17, 85, 66, 60, 38, 46, 29, 61, 36, 9, 97, 80, 32, 12, 31, 24, 69, 11, 34, 87, 70, 5, 7, 55, 64, 77, 41, 95, 92, 50, 12, 29, 62, 92, 82, 96, 60, 23, 6, 30, 17, 84, 53, 81, 56, 97, 87, 45, 12, 84, 69, 96, 37, 34, 83, 86, 72, 79, 13, 57, 78, 81, 30, 51, 96, 73, 35, 96, 90, 89, 16, 67, 83, 75, 29, 7, 21, 76, 5, 33, 73, 76, 75, 75, 68, 51, 76, 63, 34, 25, 85, 84, 25, 24, 65, 30, 77, 31, 25, 19, 91, 76, 61, 12, 25, 97, 69, 60, 67, 36, 74, 24, 14, 38, 37, 58, 22, 24, 51, 77, 63, 51, 69, 97, 70, 95, 85, 93, 46, 37, 12, 57, 35, 34, 50, 69, 98, 42, 58, 61, 84, 28, 32, 45, 46, 95, 37, 69, 27, 5, 30, 48, 10, 63, 45, 42, 39, 35, 73, 5, 73, 71, 42, 69, 33, 88, 48, 30, 91, 73, 52, 35, 67, 85, 99, 95, 47, 25, 87, 41, 41, 49, 62, 5, 79, 80, 87, 28, 64, 97, 38, 19, 83, 54, 22, 40, 81, 90, 87, 21, 66, 19, 50, 21, 32, 32, 82, 28, 95, 15, 22, 3, 10, 51, 4, 13, 58, 97, 81, 24, 71, 71, 36, 55, 39, 18, 36, 40, 88, 28, 5, 94, 67, 54, 75, 41, 81, 42, 64, 71, 19, 60, 97, 20, 54, 74, 11, 69, 71, 58, 19, 21, 32, 13, 47, 66, 54, 68, 44, 2, 83, 24, 47, 30, 7, 45, 48, 68, 56, 85, 60, 31, 25, 56, 4, 14, 10, 26, 20, 64, 31, 62, 86, 2, 48, 65, 62, 60, 60, 99, 7, 80, 83, 71, 40, 70, 14, 23, 29, 34, 79, 75, 34, 74, 19, 81, 38, 47, 49, 59, 34, 34, 68, 90, 27, 25, 17, 67, 81, 58, 31, 85, 21, 10, 54, 82, 28, 40, 28, 62, 11, 33, 55, 85, 56, 16, 17, 33, 70, 70, 69, 81, 78, 25, 33, 62, 55, 24, 52, 45, 97, 72, 84, 92, 96, 33, 94, 13, 15, 62, 33, 76, 27, 59, 100, 70, 42, 11, 21, 50, 59, 54, 18, 1, 39, 4, 25, 53, 93, 86, 0, 43, 25, 54, 15, 19, 82, 91, 20, 56, 51, 15, 58, 25, 50, 22, 71, 35, 85, 22, 37, 84, 36, 86, 79, 20, 38, 54, 11, 91, 31, 76, 7, 19, 91, 62, 73, 58, 19, 13, 68, 9, 50, 16, 72, 37, 85, 51, 26, 44, 40, 59, 18, 29, 75, 47, 50, 4, 61, 22, 81, 74, 98, 68, 58, 4, 36, 73, 24, 96, 78, 99, 46, 3, 13, 5, 95]
last_save: 727

Gen:48
TrainFitness:1.0
TestFitness:0.3333333333333333
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(sigmoid(x[index]),-382909.2250).all():
      return False
    else:
      return False
  def adf1(index):
    if np.greater(x[index],+733192.3384).all():
      return True
    else:
      return False
  def adf2(index):
    if np.equal(x[index],-301034.1503).all():
      return True
    else:
      return False
  def adf3(index):
    if np.less(sigmoid(x[index]),+373490.2541).all():
      return True
    else:
      return False
  def adf4(index):
    if np.greater(psqrt(x[index]),+402603.3439).all():
      return False
    else:
      return True
  def adf7(index):
    if np.less(x[index],+005061.6400).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+327.186, adf1(1)*+688.383, adf2(2)*+421.757, adf3(3)*-259.078, adf4(4)*-934.201, adf7(7)*-690.122], [0, 1, 1, 0, 1], 143.871)
result=p(); 1.0
IndLenGenome:426
IndGenome:[46, 19, 55, 19, 33, 58, 15, 52, 27, 83, 63, 78, 72, 19, 90, 59, 82, 52, 55, 50, 39, 3, 38, 77, 12, 47, 47, 2, 2, 17, 93, 33, 91, 19, 92, 83, 53, 18, 34, 44, 45, 61, 89, 26, 55, 66, 41, 45, 83, 40, 21, 10, 63, 84, 81, 85, 20, 83, 86, 37, 72, 57, 79, 60, 27, 73, 94, 22, 63, 47, 83, 44, 69, 50, 92, 25, 44, 71, 72, 11, 58, 49, 21, 68, 23, 55, 88, 76, 24, 40, 72, 86, 70, 13, 93, 94, 93, 99, 19, 78, 23, 35, 70, 43, 45, 6, 53, 40, 70, 85, 80, 6, 51, 96, 64, 20, 60, 52, 87, 19, 61, 78, 42, 56, 73, 12, 27, 11, 88, 26, 62, 94, 97, 56, 68, 68, 73, 88, 43, 98, 64, 62, 94, 32, 21, 47, 75, 87, 41, 41, 49, 62, 5, 79, 80, 87, 28, 64, 97, 38, 19, 83, 54, 22, 40, 81, 90, 87, 21, 66, 19, 50, 21, 32, 32, 82, 28, 95, 15, 22, 3, 10, 51, 4, 13, 58, 97, 81, 24, 71, 71, 36, 18, 39, 18, 36, 40, 88, 28, 5, 94, 67, 54, 75, 41, 81, 42, 64, 71, 19, 60, 97, 20, 54, 74, 11, 69, 71, 58, 19, 21, 32, 13, 47, 66, 54, 68, 44, 2, 83, 24, 47, 30, 7, 45, 48, 68, 56, 85, 60, 31, 25, 56, 4, 14, 10, 26, 20, 64, 31, 62, 86, 21, 48, 65, 62, 60, 60, 99, 7, 80, 83, 71, 40, 70, 14, 23, 29, 34, 79, 75, 34, 74, 19, 81, 38, 47, 49, 59, 34, 34, 68, 90, 27, 25, 17, 67, 81, 58, 31, 85, 21, 10, 54, 82, 28, 40, 28, 62, 11, 33, 55, 85, 56, 16, 17, 33, 70, 70, 69, 81, 78, 25, 33, 62, 55, 24, 52, 45, 97, 72, 84, 92, 96, 33, 94, 13, 15, 62, 33, 76, 27, 59, 100, 70, 42, 11, 21, 50, 59, 54, 18, 1, 39, 4, 25, 53, 93, 86, 0, 43, 25, 54, 15, 19, 82, 91, 20, 56, 51, 15, 58, 25, 50, 22, 71, 35, 85, 22, 37, 84, 36, 86, 79, 20, 38, 54, 11, 91, 31, 76, 7, 19, 91, 62, 73, 58, 19, 13, 68, 9, 50, 16, 72, 37, 85, 51, 26, 44, 40, 59, 18, 29, 75, 47, 50, 4, 61, 22, 81, 74, 98, 68, 58, 4, 36, 73, 24, 96, 78, 99, 46, 3, 13, 5, 95]
last_save: 727

Gen:48
last_save: 727
Exit:TrueFalseFalse