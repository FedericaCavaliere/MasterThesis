Dataset:Meander/Full.csv
FS:False
Seed:1235
Size:3

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],-711206.5206).all():
      return True
    else:
      return True
  def adf1(index):
    if np.less(rlog(x[index]),+335633.6858).all():
      return False
    else:
      return False
  def adf2(index):
    if np.equal(x[index],+591684.5378).all():
      return False
    else:
      return True
  def adf3(index):
    if np.less(np.tanh(x[index]),+904267.6787).all():
      return False
    else:
      return False
  def adf4(index):
    if np.greater(x[index],+775058.2238).all():
      return True
    else:
      return True
  def adf5(index):
    if np.equal(np.cos(x[index]),-264567.6299).all():
      return False
    else:
      return True
  def adf6(index):
    if np.equal(np.tanh(x[index]),-569271.5607).all():
      return False
    else:
      return True
  def adf7(index):
    if np.greater(np.tanh(x[index]),-821944.3068).all():
      return True
    else:
      return False
  def adf8(index):
    if np.less(x[index],-220329.1849).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*-307.118, adf1(1)*+282.329, adf2(2)*-728.357, adf3(3)*+478.872, adf4(4)*+455.799, adf5(5)*+933.743, adf6(6)*-459.093, adf7(7)*+567.441, adf8(8)*-110.161], [1, 1, 0, 0, 1, 0, 1, 0], 165.658)
result=p(); 0.6666666666666666
IndLenGenome:417
IndGenome:[12, 79, 1, 17, 69, 78, 4, 45, 77, 19, 39, 100, 41, 94, 40, 22, 18, 15, 51, 67, 9, 4, 57, 33, 12, 2, 62, 55, 2, 92, 76, 79, 22, 25, 63, 13, 29, 86, 4, 55, 58, 55, 98, 31, 58, 73, 97, 57, 63, 70, 72, 50, 31, 99, 96, 37, 67, 64, 47, 26, 66, 75, 53, 34, 3, 78, 75, 24, 90, 11, 26, 74, 57, 27, 34, 53, 87, 28, 98, 48, 70, 14, 96, 62, 63, 100, 32, 56, 79, 18, 49, 83, 36, 37, 36, 75, 59, 83, 62, 92, 97, 40, 93, 57, 58, 41, 80, 67, 12, 90, 66, 3, 22, 14, 12, 14, 49, 39, 91, 98, 82, 74, 35, 70, 43, 85, 80, 34, 16, 81, 93, 3, 87, 48, 20, 63, 83, 58, 47, 85, 97, 76, 70, 58, 58, 30, 95, 3, 71, 82, 72, 99, 77, 38, 14, 34, 15, 41, 41, 13, 18, 88, 28, 8, 88, 66, 57, 72, 21, 23, 62, 70, 45, 6, 51, 25, 69, 12, 95, 84, 10, 17, 67, 88, 43, 27, 74, 53, 72, 53, 57, 41, 32, 83, 3, 13, 32, 12, 7, 97, 57, 79, 70, 80, 54, 77, 37, 46, 19, 64, 16, 83, 74, 65, 59, 10, 71, 12, 48, 26, 43, 51, 94, 30, 59, 22, 57, 36, 82, 57, 47, 96, 96, 73, 31, 70, 74, 11, 54, 29, 67, 72, 85, 91, 12, 19, 65, 85, 46, 27, 15, 55, 79, 53, 84, 89, 77, 58, 12, 24, 69, 55, 88, 13, 21, 66, 95, 95, 26, 65, 69, 18, 98, 23, 17, 77, 54, 41, 70, 47, 2, 53, 36, 87, 29, 96, 70, 43, 63, 99, 80, 73, 64, 14, 35, 54, 58, 59, 90, 50, 13, 17, 73, 44, 23, 52, 59, 6, 62, 14, 39, 58, 86, 40, 85, 85, 55, 65, 13, 83, 48, 83, 67, 24, 70, 75, 23, 18, 92, 28, 95, 75, 60, 72, 19, 93, 47, 20, 6, 1, 34, 84, 56, 96, 48, 81, 65, 28, 87, 94, 22, 33, 45, 32, 49, 63, 78, 26, 73, 18, 18, 19, 82, 24, 96, 81, 82, 64, 78, 25, 79, 53, 86, 86, 70, 69, 3, 57, 38, 33, 7, 1, 49, 45, 17, 64, 11, 63, 32, 30, 100, 91, 94, 52, 52, 4, 5, 63, 85, 21, 97, 75, 23, 36, 42, 48, 26, 65, 91, 38, 82, 40, 51, 34, 38, 80, 3]
last_save: 311

Gen:2001
last_save: 311
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.7777777777777778
TestFitness:0.5555555555555556
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(np.cos(x[index]),-033329.4959).all():
      return True
    else:
      return True
  def adf1(index):
    if np.greater(psqrt(x[index]),-835540.8948).all():
      return False
    else:
      return True
  def adf2(index):
    if np.greater(np.sin(x[index]),-428037.8237).all():
      return True
    else:
      return True
  def adf3(index):
    if np.less(np.tanh(x[index]),-271461.0711).all():
      return False
    else:
      return True
  def adf4(index):
    if np.greater(x[index],+013707.9707).all():
      return True
    else:
      return False
  def adf5(index):
    if np.less(x[index],-335337.6145).all():
      return True
    else:
      return False
  def adf6(index):
    if np.greater(x[index],+984575.4593).all():
      return True
    else:
      return False
  def adf7(index):
    if np.equal(x[index],+711605.1446).all():
      return False
    else:
      return False
  def adf8(index):
    if np.less(x[index],+140809.5359).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*-663.497, adf1(1)*+347.731, adf2(2)*+274.685, adf3(3)*+266.763, adf4(4)*-692.378, adf5(5)*-550.124, adf6(6)*+847.877, adf7(7)*-563.189, adf8(8)*+332.230], [1, 1, 1, 1, 1, 1, 1, 1], 016.807)
result=p(); 0.7777777777777778
IndLenGenome:415
IndGenome:[20, 62, 34, 68, 2, 42, 29, 85, 60, 65, 9, 71, 64, 1, 12, 14, 50, 27, 7, 42, 94, 42, 73, 59, 21, 57, 36, 93, 89, 95, 13, 91, 34, 28, 39, 32, 57, 52, 53, 18, 88, 90, 51, 79, 2, 89, 59, 39, 57, 50, 45, 69, 67, 5, 79, 30, 68, 34, 60, 77, 19, 97, 24, 18, 33, 15, 66, 50, 76, 40, 33, 77, 42, 22, 80, 69, 98, 50, 79, 53, 46, 91, 88, 5, 89, 34, 70, 74, 20, 49, 42, 86, 47, 25, 40, 41, 95, 79, 41, 16, 64, 26, 50, 38, 54, 76, 26, 65, 52, 67, 92, 76, 13, 24, 22, 48, 67, 32, 37, 17, 23, 39, 35, 14, 47, 84, 55, 21, 72, 98, 40, 85, 50, 28, 34, 19, 98, 29, 76, 47, 46, 85, 97, 67, 74, 66, 35, 63, 15, 64, 80, 81, 19, 51, 79, 99, 42, 43, 82, 53, 82, 26, 98, 21, 27, 23, 64, 18, 17, 49, 41, 87, 54, 65, 85, 77, 40, 17, 73, 90, 42, 47, 44, 78, 66, 94, 87, 60, 43, 71, 23, 71, 21, 73, 55, 100, 53, 11, 21, 87, 98, 76, 54, 46, 56, 73, 71, 23, 82, 57, 23, 52, 13, 15, 28, 13, 10, 63, 79, 16, 27, 65, 87, 84, 41, 96, 43, 34, 3, 60, 97, 53, 76, 47, 47, 14, 24, 37, 90, 31, 42, 62, 67, 89, 14, 85, 83, 35, 27, 60, 11, 44, 83, 86, 20, 21, 41, 11, 43, 12, 24, 18, 74, 38, 57, 90, 55, 38, 11, 36, 70, 92, 39, 23, 36, 52, 95, 9, 36, 70, 0, 9, 20, 31, 72, 45, 67, 10, 63, 93, 91, 24, 58, 11, 5, 29, 65, 44, 52, 72, 11, 44, 28, 82, 36, 75, 5, 4, 75, 55, 2, 88, 62, 71, 22, 90, 17, 81, 93, 67, 94, 49, 0, 89, 94, 36, 43, 68, 41, 56, 12, 68, 1, 9, 7, 99, 28, 19, 4, 81, 46, 71, 36, 72, 55, 33, 36, 65, 25, 85, 2, 85, 88, 87, 62, 14, 2, 65, 50, 22, 27, 61, 47, 1, 23, 67, 15, 83, 63, 18, 84, 9, 87, 33, 44, 72, 78, 22, 78, 60, 68, 15, 13, 81, 49, 49, 38, 81, 93, 1, 74, 11, 1, 100, 25, 1, 98, 35, 69, 72, 54, 59, 69, 32, 19, 13, 2, 66, 5, 15, 40, 24, 35, 57, 50]
last_save: 312

Gen:2001
last_save: 312
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:1.0
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],+474442.3594).all():
      return True
    else:
      return False
  def adf1(index):
    if np.greater(rlog(x[index]),-677787.6603).all():
      return True
    else:
      return False
  def adf2(index):
    if np.greater(x[index],+901762.5561).all():
      return True
    else:
      return True
  def adf3(index):
    if np.greater(x[index],-709273.0292).all():
      return False
    else:
      return True
  def adf4(index):
    if np.greater(psqrt(x[index]),+107371.8184).all():
      return False
    else:
      return False
  def adf5(index):
    if np.equal(x[index],+801401.1872).all():
      return True
    else:
      return True
  def adf6(index):
    if np.less(x[index],-987457.6640).all():
      return True
    else:
      return True
  def adf7(index):
    if np.greater(np.cos(x[index]),+721294.1092).all():
      return True
    else:
      return False
  def adf8(index):
    if np.equal(x[index],+645147.4915).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+333.574, adf1(1)*+978.297, adf2(2)*-540.542, adf3(3)*+846.485, adf4(4)*+217.195, adf5(5)*+899.119, adf6(6)*+042.107, adf7(7)*-239.160, adf8(8)*-048.942], [1, 1, 1, 0, 1, 0, 1, 0], 501.558)
result=p(); 0.6666666666666666
IndLenGenome:414
IndGenome:[28, 26, 94, 55, 69, 72, 90, 71, 39, 47, 65, 32, 39, 29, 74, 2, 97, 86, 67, 3, 8, 55, 83, 71, 93, 49, 30, 15, 75, 71, 72, 15, 40, 62, 9, 75, 24, 79, 62, 84, 15, 95, 58, 87, 25, 25, 9, 10, 79, 17, 68, 15, 49, 90, 92, 8, 82, 87, 53, 23, 28, 55, 81, 16, 34, 20, 10, 16, 21, 94, 89, 77, 98, 47, 91, 87, 66, 42, 20, 47, 54, 43, 58, 38, 47, 31, 37, 83, 72, 23, 92, 56, 39, 85, 49, 78, 89, 12, 87, 25, 60, 68, 32, 51, 68, 79, 76, 98, 39, 40, 50, 97, 85, 40, 39, 59, 16, 27, 38, 70, 46, 97, 3, 81, 43, 36, 59, 74, 3, 49, 57, 46, 43, 95, 87, 67, 82, 95, 42, 76, 68, 54, 16, 10, 24, 25, 47, 48, 74, 32, 32, 64, 90, 22, 42, 42, 28, 82, 37, 25, 19, 60, 97, 76, 54, 36, 63, 88, 56, 69, 16, 98, 34, 68, 21, 52, 41, 87, 84, 79, 41, 60, 72, 14, 83, 15, 67, 46, 28, 24, 16, 78, 57, 79, 27, 31, 65, 42, 15, 46, 19, 54, 19, 70, 22, 6, 45, 18, 14, 22, 11, 64, 48, 39, 85, 37, 84, 49, 54, 61, 20, 27, 61, 90, 15, 83, 47, 71, 16, 37, 58, 72, 75, 86, 23, 85, 39, 90, 29, 41, 17, 49, 85, 71, 29, 92, 71, 11, 65, 89, 84, 83, 34, 74, 92, 63, 71, 17, 82, 75, 71, 85, 94, 53, 14, 50, 54, 74, 13, 20, 91, 94, 57, 40, 92, 69, 84, 7, 72, 34, 54, 44, 16, 45, 96, 76, 97, 59, 25, 79, 91, 22, 96, 49, 12, 66, 86, 42, 36, 1, 93, 34, 31, 44, 5, 79, 16, 21, 72, 11, 38, 25, 52, 58, 2, 24, 29, 21, 44, 26, 40, 89, 33, 61, 23, 96, 89, 91, 8, 71, 1, 46, 80, 52, 2, 43, 63, 7, 77, 93, 69, 34, 74, 66, 83, 88, 72, 20, 35, 97, 45, 45, 12, 19, 78, 2, 85, 10, 66, 28, 71, 31, 36, 55, 19, 46, 89, 41, 60, 42, 38, 88, 12, 93, 94, 99, 62, 75, 70, 77, 55, 65, 0, 23, 97, 34, 91, 59, 77, 8, 56, 99, 70, 31, 6, 82, 12, 100, 12, 15, 74, 70, 92, 49, 26, 51, 2, 53, 99, 20, 16, 32, 48, 2]
last_save: 313

Gen:52
TrainFitness:0.7777777777777778
TestFitness:0.8888888888888888
MaxGenLen:515
Individual: def p():
  def adf0(index):
    if np.greater(np.tanh(x[index]),+543376.4189).all():
      return True
    else:
      return False
  def adf1(index):
    if np.equal(x[index],+363069.3062).all():
      return False
    else:
      return False
  def adf2(index):
    if np.equal(rlog(x[index]),+953680.9743).all():
      return True
    else:
      return True
  def adf3(index):
    if np.greater(x[index],+156519.3702).all():
      if np.less(rlog(x[index]),+118691.5976).all():
        return True
      else:
        return False
      return True
    else:
      if np.greater(psqrt(x[index]),-624545.0232).all():
        return True
      else:
        return True
      return False
  def adf4(index):
    if np.greater(psqrt(x[index]),-138517.4294).all():
      if np.less(x[index],-433941.5811).all():
        return False
      else:
        return False
      return True
    else:
      if np.less(np.sin(x[index]),-654983.8102).all():
        return False
      else:
        return True
      return True
  def adf5(index):
    if np.less(np.cos(x[index]),-794994.4110).all():
      return True
    else:
      return False
  def adf6(index):
    if np.greater(x[index],+745255.3827).all():
      return False
    else:
      return False
  def adf7(index):
    if np.greater(x[index],+025702.6328).all():
      return True
    else:
      return False
  def adf8(index):
    if np.greater(x[index],+655356.7123).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*-315.267, adf1(1)*+396.837, adf2(2)*+660.428, adf3(3)*-587.317, adf4(4)*-517.146, adf5(5)*+975.471, adf6(6)*-693.650, adf7(7)*+813.315, adf8(8)*-904.341], [0, 1, 1, 0, 0, 1, 0, 0], 648.518)
result=p(); 0.7777777777777778
IndLenGenome:428
IndGenome:[21, 87, 48, 99, 57, 6, 32, 51, 42, 46, 5, 44, 43, 13, 27, 56, 64, 81, 18, 29, 68, 41, 99, 55, 74, 91, 42, 70, 91, 3, 56, 73, 30, 66, 99, 83, 40, 46, 12, 27, 13, 35, 63, 98, 38, 28, 3, 8, 95, 29, 5, 13, 46, 28, 20, 29, 87, 24, 43, 62, 100, 60, 76, 57, 36, 27, 40, 68, 81, 81, 65, 36, 55, 91, 59, 93, 7, 70, 42, 85, 43, 2, 10, 85, 90, 17, 51, 41, 78, 76, 79, 31, 15, 59, 57, 66, 16, 33, 24, 49, 30, 78, 53, 50, 65, 22, 46, 32, 74, 65, 24, 15, 20, 22, 93, 62, 18, 64, 21, 43, 80, 43, 51, 24, 17, 95, 67, 72, 71, 83, 88, 15, 51, 7, 74, 52, 99, 34, 93, 79, 43, 99, 73, 46, 74, 23, 13, 49, 64, 81, 25, 68, 61, 11, 27, 19, 14, 25, 61, 50, 18, 99, 93, 77, 86, 25, 34, 79, 68, 83, 68, 91, 20, 82, 29, 96, 34, 38, 77, 82, 70, 43, 46, 47, 97, 37, 39, 84, 59, 29, 74, 44, 21, 1, 90, 8, 53, 16, 99, 39, 91, 24, 12, 28, 67, 74, 85, 62, 5, 55, 83, 38, 52, 17, 51, 11, 69, 53, 12, 89, 63, 34, 94, 90, 52, 45, 97, 40, 72, 76, 23, 62, 48, 94, 87, 24, 77, 96, 15, 62, 34, 67, 76, 65, 25, 53, 45, 56, 47, 71, 72, 93, 76, 82, 54, 75, 66, 83, 70, 33, 81, 65, 82, 6, 87, 33, 32, 58, 43, 19, 66, 58, 33, 37, 92, 16, 70, 36, 46, 60, 24, 92, 18, 65, 51, 38, 55, 28, 77, 63, 41, 67, 70, 95, 52, 65, 71, 87, 31, 44, 96, 80, 8, 9, 29, 27, 85, 14, 47, 91, 60, 23, 16, 96, 39, 73, 86, 35, 70, 54, 86, 75, 78, 71, 83, 83, 61, 95, 67, 53, 65, 69, 90, 24, 73, 64, 81, 16, 50, 79, 55, 54, 98, 97, 74, 52, 74, 36, 64, 68, 55, 91, 28, 46, 6, 89, 25, 47, 44, 9, 13, 95, 69, 97, 74, 14, 40, 16, 72, 69, 28, 99, 99, 77, 4, 38, 46, 13, 16, 18, 10, 41, 51, 51, 18, 88, 100, 10, 23, 41, 46, 98, 63, 9, 80, 40, 50, 51, 57, 97, 97, 31, 90, 40, 31, 60, 27, 72, 70, 14, 0, 36, 24, 100, 78, 38, 4, 2, 50, 65, 96, 61, 50, 18, 45, 5, 78, 33]
last_save: 313

Gen:2052
last_save: 313
Exit:FalseFalseTrue