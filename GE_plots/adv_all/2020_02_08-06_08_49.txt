Dataset:Spiral/Full.csv
FS:True
Seed:1237
Size:7

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(sigmoid(x[index]),+649497.8826).all():
      return False
    else:
      return False
  def adf1(index):
    if np.equal(sigmoid(x[index]),+611834.9088).all():
      return False
    else:
      return False
  def adf2(index):
    if np.less(psqrt(x[index]),+978027.3094).all():
      return True
    else:
      return False
  def adf3(index):
    if np.equal(x[index],-068437.3467).all():
      return True
    else:
      return True
  def adf4(index):
    if np.greater(rlog(x[index]),-669612.7634).all():
      return False
    else:
      return True
  def adf7(index):
    if np.equal(rlog(x[index]),+246453.6139).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+309.440, adf1(1)*-752.610, adf2(2)*+466.194, adf3(3)*+060.292, adf4(4)*-824.590, adf7(7)*+067.502], [0, 0, 0, 1, 0], 226.674)
result=p(); 0.8333333333333334
IndLenGenome:286
IndGenome:[32, 80, 53, 20, 90, 35, 44, 14, 64, 42, 54, 25, 97, 37, 63, 64, 64, 56, 10, 62, 59, 33, 21, 76, 88, 65, 37, 9, 74, 52, 73, 67, 1, 96, 7, 29, 49, 41, 97, 35, 2, 95, 32, 35, 74, 65, 70, 50, 51, 38, 65, 50, 44, 71, 39, 80, 13, 77, 39, 23, 67, 84, 65, 30, 72, 34, 81, 64, 47, 83, 42, 57, 57, 39, 66, 36, 53, 10, 47, 50, 40, 99, 40, 71, 40, 20, 16, 34, 99, 84, 63, 14, 72, 51, 32, 76, 94, 47, 70, 13, 29, 78, 9, 2, 91, 56, 92, 80, 10, 32, 94, 31, 32, 40, 27, 76, 80, 22, 29, 11, 50, 61, 3, 94, 96, 7, 51, 2, 88, 99, 97, 52, 88, 26, 43, 28, 10, 72, 65, 85, 11, 83, 83, 75, 24, 26, 62, 86, 41, 26, 39, 52, 86, 39, 88, 62, 79, 12, 39, 76, 34, 73, 18, 39, 64, 74, 84, 19, 80, 89, 77, 28, 76, 83, 85, 34, 36, 36, 98, 67, 14, 73, 16, 52, 28, 94, 16, 97, 28, 93, 17, 95, 56, 27, 90, 28, 13, 12, 43, 80, 86, 2, 95, 100, 29, 23, 33, 46, 3, 58, 7, 3, 29, 60, 12, 45, 29, 25, 75, 43, 14, 1, 58, 75, 77, 51, 6, 17, 83, 62, 94, 88, 30, 35, 85, 49, 98, 98, 47, 19, 9, 49, 36, 26, 29, 26, 24, 67, 45, 12, 13, 45, 92, 97, 41, 77, 81, 49, 61, 98, 62, 27, 8, 12, 31, 65, 45, 76, 18, 49, 17, 5, 54, 87, 35, 38, 32, 68, 66, 82, 23, 6, 7, 82, 94, 19]
last_save: 731

Gen:2001
last_save: 731
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],-046453.6387).all():
      return False
    else:
      return False
  def adf1(index):
    if np.greater(np.cos(x[index]),-349484.4324).all():
      return False
    else:
      return True
  def adf2(index):
    if np.less(np.tanh(x[index]),+592629.1505).all():
      return True
    else:
      return False
  def adf3(index):
    if np.equal(sigmoid(x[index]),-795121.5490).all():
      return True
    else:
      return False
  def adf4(index):
    if np.greater(x[index],-355718.3441).all():
      return True
    else:
      return True
  def adf7(index):
    if np.greater(rlog(x[index]),-723647.6261).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+444.683, adf1(1)*-613.323, adf2(2)*-462.012, adf3(3)*-575.866, adf4(4)*+698.486, adf7(7)*+202.847], [0, 1, 1, 1, 1], 733.202)
result=p(); 0.6666666666666666
IndLenGenome:285
IndGenome:[79, 35, 60, 12, 73, 35, 8, 67, 90, 53, 66, 84, 73, 23, 10, 40, 74, 73, 66, 4, 80, 37, 53, 48, 86, 97, 20, 41, 9, 78, 51, 53, 85, 98, 54, 78, 16, 21, 89, 15, 84, 80, 30, 38, 23, 44, 92, 31, 56, 46, 62, 13, 38, 89, 44, 82, 94, 35, 55, 41, 19, 17, 50, 86, 10, 83, 98, 42, 32, 15, 62, 50, 15, 38, 43, 41, 45, 11, 17, 45, 82, 70, 33, 23, 96, 40, 93, 60, 85, 86, 92, 44, 14, 43, 70, 67, 76, 35, 43, 35, 26, 81, 37, 23, 52, 53, 54, 91, 3, 5, 28, 19, 51, 25, 39, 3, 15, 66, 34, 92, 25, 78, 35, 45, 26, 48, 44, 19, 61, 91, 10, 43, 64, 82, 20, 67, 58, 20, 66, 44, 82, 22, 47, 52, 77, 63, 99, 46, 64, 67, 66, 12, 44, 22, 46, 97, 99, 81, 35, 28, 19, 89, 56, 28, 26, 51, 79, 53, 57, 4, 37, 24, 60, 14, 57, 77, 25, 32, 93, 48, 89, 14, 83, 91, 94, 63, 24, 64, 74, 52, 84, 5, 88, 1, 98, 42, 85, 67, 59, 36, 36, 46, 50, 18, 39, 84, 57, 4, 76, 93, 75, 39, 48, 63, 20, 21, 1, 79, 61, 22, 51, 19, 40, 21, 26, 61, 88, 49, 13, 63, 36, 4, 51, 33, 77, 61, 43, 96, 28, 99, 24, 97, 79, 73, 60, 75, 16, 35, 52, 74, 52, 90, 5, 0, 98, 1, 98, 37, 52, 8, 31, 49, 81, 72, 3, 24, 85, 69, 27, 12, 73, 8, 26, 10, 27, 75, 96, 40, 27, 34, 57, 25, 19, 44, 17]
last_save: 732

Gen:25
TrainFitness:0.8333333333333334
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],+728991.6913).all():
      return False
    else:
      return True
  def adf1(index):
    if np.equal(np.cos(x[index]),-411574.4392).all():
      return False
    else:
      return False
  def adf2(index):
    if np.equal(sigmoid(x[index]),-026806.0382).all():
      return True
    else:
      return True
  def adf3(index):
    if np.less(x[index],-809039.3789).all():
      return True
    else:
      return False
  def adf4(index):
    if np.less(np.sin(x[index]),-280792.0169).all():
      return True
    else:
      return False
  def adf7(index):
    if np.less(x[index],+011940.7546).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*-478.108, adf1(1)*+373.606, adf2(2)*+677.323, adf3(3)*-589.159, adf4(4)*-425.855, adf7(7)*-711.034], [0, 1, 0, 0, 0], 227.273)
result=p(); 0.8333333333333334
IndLenGenome:357
IndGenome:[50, 58, 57, 61, 6, 39, 7, 8, 35, 27, 42, 68, 39, 99, 91, 86, 19, 51, 93, 31, 34, 32, 23, 68, 18, 37, 56, 43, 28, 64, 21, 21, 75, 67, 34, 74, 33, 59, 82, 83, 11, 75, 31, 53, 38, 75, 72, 97, 22, 80, 72, 16, 18, 50, 86, 10, 83, 98, 42, 32, 46, 28, 59, 31, 11, 93, 83, 39, 98, 50, 29, 80, 63, 39, 73, 17, 78, 69, 6, 43, 36, 39, 46, 18, 66, 38, 59, 73, 12, 98, 90, 47, 39, 92, 70, 21, 86, 39, 86, 55, 24, 57, 22, 7, 29, 58, 61, 30, 51, 21, 49, 64, 50, 27, 95, 4, 36, 17, 16, 12, 9, 97, 31, 66, 44, 37, 58, 71, 20, 28, 78, 96, 67, 3, 7, 93, 96, 50, 76, 35, 58, 35, 26, 57, 37, 23, 52, 53, 54, 91, 3, 5, 28, 19, 51, 25, 39, 3, 15, 66, 34, 92, 25, 78, 35, 45, 26, 83, 44, 17, 61, 91, 10, 43, 64, 82, 20, 67, 58, 20, 66, 27, 82, 22, 47, 52, 77, 63, 99, 46, 64, 67, 86, 23, 61, 58, 70, 71, 47, 15, 27, 23, 61, 10, 21, 61, 11, 21, 68, 39, 49, 39, 55, 40, 93, 14, 70, 92, 86, 43, 11, 99, 13, 85, 23, 13, 66, 84, 49, 30, 91, 85, 56, 97, 23, 64, 15, 10, 48, 70, 87, 46, 80, 35, 95, 13, 51, 86, 23, 61, 58, 70, 71, 47, 15, 27, 23, 89, 10, 21, 61, 68, 96, 24, 31, 19, 35, 91, 57, 15, 21, 61, 68, 96, 24, 31, 19, 35, 91, 57, 15, 76, 88, 86, 62, 59, 28, 52, 98, 48, 30, 60, 46, 87, 2, 50, 84, 26, 77, 99, 22, 75, 90, 17, 95, 18, 96, 70, 83, 37, 4, 93, 4, 50, 46, 59, 47, 35, 74, 88, 82, 28, 52, 94, 77, 84, 74, 2, 45, 36, 19, 19, 6, 22, 43, 24, 68, 76, 46, 25, 29, 95, 90, 38, 17, 70, 84, 80, 12, 7, 5, 37, 4, 47, 20, 91, 89]
last_save: 732

Gen:141
TrainFitness:1.0
TestFitness:0.6666666666666666
MaxGenLen:530
Individual: def p():
  def adf0(index):
    if np.greater(x[index],+728981.6913).all():
      return False
    else:
      return True
  def adf1(index):
    if np.equal(x[index],-016006.0332).all():
      return True
    else:
      return False
  def adf2(index):
    if np.less(x[index],-809238.3789).all():
      return True
    else:
      return False
  def adf3(index):
    if np.less(np.sin(x[index]),-280862.0160).all():
      return True
    else:
      return False
  def adf4(index):
    if np.less(x[index],+009654.7279).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(x[index],+546762.9716).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+673.736, adf1(1)*+856.773, adf2(2)*-135.881, adf3(3)*+564.258, adf4(4)*-347.115, adf7(7)*+078.267], [0, 1, 0, 1, 1], 551.473)
result=p(); 1.0
IndLenGenome:357
IndGenome:[50, 76, 57, 61, 6, 39, 34, 8, 35, 27, 42, 68, 39, 78, 91, 86, 19, 51, 93, 31, 34, 32, 23, 68, 75, 72, 97, 22, 80, 61, 16, 30, 50, 86, 10, 83, 93, 42, 90, 15, 28, 59, 31, 11, 93, 83, 39, 98, 50, 29, 22, 63, 28, 73, 17, 78, 69, 6, 43, 36, 39, 46, 18, 66, 38, 59, 73, 12, 98, 90, 78, 36, 92, 70, 21, 86, 60, 86, 55, 68, 57, 22, 7, 29, 58, 56, 30, 30, 39, 86, 55, 24, 57, 22, 7, 29, 58, 61, 30, 51, 21, 49, 64, 50, 27, 95, 4, 36, 17, 16, 12, 9, 97, 31, 66, 44, 37, 58, 71, 20, 28, 78, 96, 67, 3, 7, 93, 96, 50, 76, 50, 58, 35, 26, 57, 37, 23, 52, 53, 54, 91, 3, 5, 28, 58, 51, 25, 54, 3, 15, 66, 34, 92, 25, 78, 35, 45, 26, 83, 44, 17, 61, 91, 95, 43, 52, 13, 20, 67, 58, 62, 66, 27, 82, 22, 47, 52, 77, 63, 99, 95, 15, 21, 24, 87, 73, 66, 87, 54, 77, 52, 59, 61, 68, 96, 69, 57, 17, 36, 40, 63, 29, 7, 89, 56, 1, 99, 12, 5, 31, 24, 87, 31, 34, 92, 88, 32, 11, 21, 68, 39, 49, 39, 55, 40, 50, 14, 70, 92, 86, 43, 11, 99, 13, 85, 23, 13, 66, 84, 49, 30, 91, 85, 56, 97, 23, 64, 15, 10, 48, 70, 87, 46, 80, 35, 95, 13, 51, 86, 23, 61, 58, 70, 71, 47, 15, 32, 23, 61, 10, 21, 61, 68, 96, 24, 31, 19, 35, 91, 57, 15, 25, 88, 86, 62, 59, 28, 52, 98, 48, 30, 60, 46, 87, 2, 50, 84, 26, 77, 99, 22, 75, 90, 17, 95, 18, 96, 70, 83, 37, 4, 93, 4, 50, 46, 59, 47, 35, 74, 88, 82, 28, 52, 94, 77, 84, 74, 2, 45, 36, 19, 19, 6, 22, 43, 24, 68, 76, 46, 25, 29, 95, 90, 38, 17, 70, 84, 80, 12, 7, 5, 37, 4, 47, 20, 91, 89]
last_save: 732

Gen:141
last_save: 732
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],+338332.9556).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(x[index],-602830.7895).all():
      return False
    else:
      return True
  def adf2(index):
    if np.equal(x[index],-753306.5068).all():
      return True
    else:
      return False
  def adf3(index):
    if np.equal(psqrt(x[index]),+466094.4554).all():
      return False
    else:
      return True
  def adf4(index):
    if np.greater(x[index],+114513.5609).all():
      return True
    else:
      return True
  def adf7(index):
    if np.greater(x[index],+019077.4942).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-497.486, adf1(1)*-410.857, adf2(2)*+465.292, adf3(3)*-905.536, adf4(4)*+313.846, adf7(7)*-844.650], [0, 0, 1, 1, 0], 017.995)
result=p(); 0.8333333333333334
IndLenGenome:280
IndGenome:[21, 87, 57, 72, 78, 80, 70, 25, 61, 50, 27, 39, 5, 83, 6, 50, 11, 25, 65, 85, 13, 99, 85, 70, 4, 58, 58, 65, 39, 26, 18, 43, 28, 29, 6, 15, 65, 77, 99, 17, 74, 74, 44, 94, 33, 4, 47, 13, 89, 95, 84, 85, 44, 33, 89, 6, 99, 91, 60, 84, 15, 83, 11, 8, 26, 31, 47, 90, 94, 71, 59, 18, 11, 67, 35, 61, 47, 86, 24, 50, 14, 84, 71, 6, 24, 47, 78, 94, 82, 69, 70, 59, 39, 49, 79, 63, 27, 14, 71, 30, 64, 23, 38, 96, 59, 56, 13, 19, 15, 39, 43, 95, 54, 64, 85, 90, 30, 55, 75, 34, 16, 18, 24, 55, 89, 20, 76, 47, 10, 28, 32, 87, 61, 38, 20, 40, 22, 71, 47, 54, 24, 95, 19, 67, 61, 83, 90, 54, 15, 77, 42, 92, 66, 15, 47, 91, 86, 23, 76, 45, 10, 41, 65, 86, 36, 76, 99, 80, 2, 83, 73, 69, 83, 60, 33, 66, 43, 90, 70, 88, 98, 25, 32, 25, 68, 99, 83, 86, 54, 91, 72, 87, 48, 54, 14, 97, 54, 71, 7, 70, 67, 0, 82, 58, 8, 55, 29, 9, 82, 53, 6, 76, 11, 57, 69, 89, 0, 19, 91, 21, 51, 3, 44, 54, 64, 34, 3, 71, 77, 66, 99, 72, 88, 74, 17, 71, 81, 60, 69, 6, 51, 86, 52, 5, 55, 14, 40, 93, 39, 79, 96, 40, 46, 88, 40, 98, 76, 68, 91, 20, 31, 13, 40, 33, 100, 81, 84, 66, 51, 80, 75, 82, 68, 95, 16, 82, 100, 38, 45, 34]
last_save: 733

Gen:13
TrainFitness:0.8333333333333334
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],+550193.3935).all():
      return False
    else:
      return True
  def adf1(index):
    if np.equal(np.cos(x[index]),+842032.8312).all():
      return True
    else:
      return False
  def adf2(index):
    if np.greater(x[index],+039992.5513).all():
      return True
    else:
      return False
  def adf3(index):
    if np.less(np.sin(x[index]),+584453.5821).all():
      if np.greater(sigmoid(x[index]),+562214.7122).all():
        return False
      else:
        return True
      return True
    else:
      if np.equal(x[index],+001521.3377).all():
        return False
      else:
        return False
      return False
  def adf4(index):
    if np.equal(rlog(x[index]),-971941.4810).all():
      return False
    else:
      return False
  def adf7(index):
    if np.greater(np.sin(x[index]),+527402.8374).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-230.677, adf1(1)*-275.897, adf2(2)*-903.769, adf3(3)*+606.011, adf4(4)*-336.779, adf7(7)*-836.552], [1, 0, 1, 0, 1], 984.588)
result=p(); 0.8333333333333334
IndLenGenome:428
IndGenome:[10, 79, 17, 9, 27, 75, 64, 2, 79, 15, 45, 10, 41, 79, 73, 43, 59, 83, 45, 53, 62, 69, 41, 89, 60, 25, 79, 38, 54, 78, 34, 62, 60, 33, 42, 28, 23, 61, 52, 22, 31, 19, 59, 72, 71, 47, 32, 82, 30, 63, 99, 99, 39, 92, 95, 55, 31, 83, 16, 75, 13, 68, 81, 49, 12, 90, 82, 44, 54, 95, 78, 64, 64, 35, 13, 35, 28, 32, 61, 39, 27, 86, 93, 15, 94, 84, 25, 26, 2, 52, 21, 54, 7, 61, 22, 92, 13, 10, 42, 21, 56, 57, 41, 66, 48, 60, 70, 61, 75, 92, 31, 13, 13, 97, 27, 47, 97, 9, 20, 9, 83, 10, 22, 66, 79, 57, 89, 47, 31, 19, 64, 81, 24, 28, 41, 80, 61, 93, 82, 39, 93, 10, 90, 90, 88, 92, 65, 22, 27, 94, 50, 22, 48, 13, 57, 14, 28, 87, 90, 89, 25, 45, 44, 62, 93, 10, 86, 7, 67, 78, 81, 80, 82, 7, 5, 58, 69, 57, 44, 97, 8, 69, 10, 83, 17, 76, 39, 85, 32, 24, 16, 10, 46, 10, 51, 51, 29, 5, 99, 93, 43, 26, 57, 67, 59, 87, 53, 71, 38, 73, 96, 55, 45, 62, 28, 65, 58, 33, 90, 91, 94, 69, 28, 84, 85, 88, 28, 67, 80, 86, 33, 51, 78, 55, 37, 19, 95, 27, 35, 38, 58, 69, 12, 40, 40, 76, 20, 87, 16, 35, 33, 14, 38, 84, 30, 75, 91, 67, 39, 41, 70, 30, 31, 53, 83, 42, 10, 24, 17, 62, 55, 65, 66, 13, 15, 79, 40, 27, 81, 23, 90, 90, 62, 76, 29, 33, 47, 29, 94, 29, 89, 57, 38, 93, 99, 28, 94, 5, 38, 71, 77, 45, 67, 96, 9, 78, 36, 82, 83, 96, 22, 13, 32, 83, 16, 47, 12, 90, 71, 31, 77, 99, 16, 94, 14, 19, 24, 54, 67, 62, 2, 89, 41, 61, 97, 50, 16, 49, 68, 0, 39, 52, 53, 94, 30, 93, 25, 52, 10, 87, 39, 5, 76, 49, 65, 66, 85, 8, 8, 42, 0, 7, 66, 79, 63, 66, 46, 10, 23, 95, 61, 34, 13, 86, 43, 84, 73, 87, 30, 9, 66, 26, 63, 37, 95, 85, 65, 64, 95, 10, 18, 44, 40, 0, 93, 53, 74, 83, 50, 61, 67, 81, 69, 34, 5, 63, 59, 28, 55, 13, 94, 83, 34, 97, 10, 54, 40, 85, 20, 1, 37, 79, 21, 6, 95, 1, 70, 32]
last_save: 733

Gen:32
TrainFitness:1.0
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],+399129.7886).all():
      return False
    else:
      return False
  def adf1(index):
    if np.equal(x[index],-379793.3273).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(x[index],+417410.4944).all():
      return True
    else:
      return False
  def adf3(index):
    if np.greater(x[index],-468585.7382).all():
      return True
    else:
      return True
  def adf4(index):
    if np.greater(x[index],+009311.9414).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(sigmoid(x[index]),+062742.1677).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+253.337, adf1(1)*-074.493, adf2(2)*-936.889, adf3(3)*+518.651, adf4(4)*+937.541, adf7(7)*-447.818], [0, 0, 0, 1, 0], 120.160)
result=p(); 1.0
IndLenGenome:357
IndGenome:[47, 65, 80, 21, 92, 35, 85, 18, 67, 63, 49, 39, 41, 2, 19, 27, 58, 38, 46, 41, 75, 64, 11, 26, 27, 54, 43, 99, 93, 97, 29, 7, 99, 43, 43, 2, 67, 93, 25, 57, 60, 83, 96, 75, 54, 60, 18, 24, 61, 17, 74, 1, 10, 44, 99, 24, 74, 96, 27, 11, 3, 15, 83, 7, 57, 94, 44, 26, 28, 45, 88, 95, 17, 53, 78, 82, 36, 70, 23, 35, 48, 27, 71, 16, 8, 20, 80, 19, 53, 41, 91, 19, 64, 81, 24, 28, 41, 80, 61, 93, 82, 39, 93, 10, 90, 90, 56, 22, 47, 34, 62, 61, 76, 27, 87, 92, 43, 10, 37, 11, 28, 98, 52, 45, 13, 53, 83, 17, 31, 91, 16, 50, 47, 84, 84, 9, 53, 56, 45, 89, 99, 53, 86, 98, 98, 39, 73, 56, 69, 25, 31, 68, 36, 95, 21, 94, 42, 61, 9, 53, 67, 65, 44, 81, 5, 29, 63, 84, 14, 17, 88, 91, 68, 59, 96, 14, 84, 33, 46, 67, 51, 52, 30, 51, 86, 90, 91, 56, 48, 75, 65, 86, 62, 81, 31, 59, 37, 46, 87, 62, 37, 63, 4, 28, 67, 5, 85, 84, 61, 80, 30, 5, 53, 45, 33, 11, 96, 18, 72, 50, 89, 96, 97, 87, 80, 61, 62, 18, 18, 35, 98, 99, 53, 39, 54, 53, 71, 79, 86, 67, 12, 25, 87, 49, 48, 55, 39, 80, 65, 48, 47, 79, 32, 37, 52, 89, 80, 75, 71, 50, 59, 30, 86, 24, 96, 19, 11, 76, 67, 18, 86, 37, 21, 63, 96, 83, 75, 41, 60, 56, 33, 86, 96, 64, 22, 17, 71, 100, 83, 47, 30, 47, 74, 46, 74, 31, 36, 50, 43, 29, 13, 70, 25, 56, 34, 63, 53, 74, 97, 21, 10, 96, 85, 73, 69, 55, 52, 53, 23, 80, 99, 17, 30, 62, 0, 96, 56, 48, 49, 33, 64, 1, 56, 72, 18, 37, 69, 51, 42, 78, 57, 46, 44, 91, 10, 14, 6, 98, 97, 57, 24, 92, 13, 10, 59, 74, 12]
last_save: 733

Gen:32
last_save: 733
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],-366135.4626).all():
      return False
    else:
      return True
  def adf1(index):
    if np.less(np.sin(x[index]),+071744.1987).all():
      return False
    else:
      return False
  def adf2(index):
    if np.less(x[index],+034437.8582).all():
      return False
    else:
      return True
  def adf3(index):
    if np.equal(x[index],-393490.7706).all():
      return True
    else:
      return True
  def adf4(index):
    if np.equal(x[index],-885382.0640).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(rlog(x[index]),+717144.6451).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+722.359, adf1(1)*-397.048, adf2(2)*-721.945, adf3(3)*+782.516, adf4(4)*-556.370, adf7(7)*-560.224], [0, 0, 0, 0, 1], 087.415)
result=p(); 0.8333333333333334
IndLenGenome:282
IndGenome:[16, 85, 77, 44, 49, 23, 70, 19, 59, 42, 39, 25, 30, 94, 60, 82, 54, 83, 46, 34, 93, 52, 43, 96, 69, 35, 42, 28, 76, 60, 32, 46, 66, 7, 59, 25, 27, 19, 25, 7, 27, 11, 67, 75, 64, 25, 11, 99, 79, 13, 50, 30, 12, 78, 95, 60, 55, 67, 84, 30, 72, 45, 42, 99, 4, 94, 92, 22, 13, 76, 11, 22, 67, 18, 86, 10, 67, 101, 47, 95, 76, 27, 64, 74, 89, 15, 12, 31, 88, 42, 98, 59, 1, 44, 55, 25, 43, 16, 14, 38, 56, 52, 47, 10, 95, 91, 31, 68, 7, 14, 49, 18, 63, 29, 60, 81, 48, 43, 68, 12, 72, 86, 28, 33, 62, 11, 84, 87, 77, 70, 16, 19, 19, 26, 54, 40, 77, 87, 37, 53, 74, 93, 40, 51, 87, 44, 64, 89, 15, 23, 58, 42, 13, 73, 97, 81, 84, 90, 95, 26, 51, 49, 68, 27, 19, 20, 38, 96, 23, 67, 53, 94, 66, 61, 74, 84, 59, 85, 16, 33, 41, 62, 95, 96, 26, 41, 57, 91, 61, 31, 8, 31, 74, 74, 68, 18, 18, 60, 70, 54, 73, 70, 17, 9, 75, 90, 90, 21, 9, 64, 82, 76, 16, 98, 61, 69, 43, 23, 78, 69, 71, 60, 52, 79, 49, 91, 67, 72, 79, 65, 10, 2, 68, 48, 85, 7, 63, 13, 60, 98, 93, 57, 16, 35, 99, 69, 65, 51, 26, 73, 57, 41, 87, 92, 23, 86, 70, 34, 54, 44, 52, 62, 83, 9, 10, 43, 60, 86, 53, 67, 1, 8, 2, 15, 64, 76, 26, 19, 97, 96, 69, 24]
last_save: 734

Gen:104
TrainFitness:1.0
TestFitness:0.3333333333333333
MaxGenLen:530
Individual: def p():
  def adf0(index):
    if np.less(x[index],+795013.4691).all():
      return False
    else:
      return True
  def adf1(index):
    if np.less(x[index],-317448.7757).all():
      return False
    else:
      return False
  def adf2(index):
    if np.equal(np.cos(x[index]),-317307.7273).all():
      return False
    else:
      return True
  def adf3(index):
    if np.greater(x[index],-743877.7277).all():
      if np.less(x[index],-861551.7476).all():
        return True
      else:
        return False
      return True
    else:
      if np.greater(x[index],+238260.2130).all():
        return False
      else:
        return False
      return True
  def adf4(index):
    if np.greater(x[index],+371405.6191).all():
      return False
    else:
      return False
  def adf7(index):
    if np.greater(x[index],+005185.7173).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-242.874, adf1(1)*+877.999, adf2(2)*-341.805, adf3(3)*-261.115, adf4(4)*-260.213, adf7(7)*-449.538], [1, 0, 1, 1, 0], 561.915)
result=p(); 1.0
IndLenGenome:396
IndGenome:[56, 14, 60, 93, 25, 57, 29, 98, 81, 7, 59, 5, 30, 81, 13, 34, 86, 79, 11, 55, 38, 53, 21, 67, 13, 10, 37, 43, 93, 21, 87, 94, 74, 48, 37, 67, 45, 27, 71, 53, 26, 77, 80, 86, 79, 11, 55, 38, 53, 21, 67, 13, 10, 87, 67, 22, 47, 73, 67, 30, 25, 68, 47, 87, 59, 89, 49, 25, 17, 14, 83, 38, 17, 87, 67, 22, 67, 27, 77, 97, 79, 91, 73, 61, 48, 96, 21, 45, 55, 21, 87, 94, 87, 36, 44, 45, 32, 37, 9, 25, 98, 88, 11, 12, 73, 28, 22, 36, 30, 32, 61, 83, 40, 51, 87, 44, 64, 89, 15, 23, 58, 42, 13, 73, 97, 81, 84, 90, 95, 26, 51, 49, 21, 73, 71, 70, 57, 69, 53, 29, 46, 93, 40, 30, 65, 71, 68, 35, 47, 1, 17, 13, 34, 53, 14, 31, 90, 9, 29, 72, 74, 42, 68, 47, 94, 71, 68, 42, 68, 47, 87, 59, 89, 99, 25, 17, 14, 83, 94, 71, 68, 10, 95, 2, 67, 20, 92, 56, 71, 51, 41, 35, 72, 75, 63, 22, 86, 30, 32, 61, 83, 40, 51, 87, 44, 64, 79, 15, 23, 58, 42, 13, 30, 97, 81, 84, 90, 95, 26, 51, 49, 21, 65, 71, 70, 57, 69, 5, 72, 34, 83, 9, 10, 21, 51, 43, 7, 65, 17, 89, 54, 86, 77, 74, 84, 93, 20, 78, 54, 73, 45, 32, 37, 9, 83, 94, 71, 68, 0, 95, 51, 67, 20, 92, 56, 71, 51, 41, 35, 72, 2, 87, 25, 96, 90, 83, 29, 37, 52, 79, 79, 18, 26, 93, 21, 63, 78, 37, 56, 80, 101, 97, 73, 18, 64, 53, 15, 47, 32, 85, 95, 77, 74, 13, 4, 18, 35, 76, 13, 84, 96, 55, 91, 10, 74, 79, 13, 8, 57, 49, 45, 19, 38, 49, 20, 28, 83, 21, 88, 9, 28, 61, 56, 71, 25, 99, 35, 94, 96, 82, 92, 87, 50, 73, 53, 19, 5, 44, 72, 40, 62, 85, 33, 32, 14, 100, 60, 48, 10, 28, 100, 75, 58, 41, 72, 36, 55, 24, 72, 14, 83, 66, 66, 83, 16, 32, 3, 5, 42, 82, 8, 62, 14, 76, 100, 84, 58, 84, 75, 47, 89, 53, 30, 50, 69, 1]
last_save: 734

Gen:104
last_save: 734
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(np.cos(x[index]),-219692.8758).all():
      return True
    else:
      return False
  def adf1(index):
    if np.greater(psqrt(x[index]),+841000.5676).all():
      return True
    else:
      return False
  def adf2(index):
    if np.greater(x[index],+020476.6199).all():
      return True
    else:
      return False
  def adf3(index):
    if np.equal(np.tanh(x[index]),-315020.8971).all():
      return False
    else:
      return True
  def adf4(index):
    if np.equal(np.cos(x[index]),+465086.6893).all():
      return True
    else:
      return True
  def adf7(index):
    if np.equal(x[index],-191485.9604).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*-357.600, adf1(1)*+277.298, adf2(2)*+889.630, adf3(3)*+098.118, adf4(4)*-549.357, adf7(7)*-363.775], [1, 1, 1, 0, 0], 587.272)
result=p(); 0.8333333333333334
IndLenGenome:285
IndGenome:[83, 41, 42, 50, 86, 90, 31, 29, 34, 7, 15, 6, 32, 8, 62, 63, 7, 11, 64, 77, 12, 58, 81, 11, 67, 49, 65, 59, 36, 62, 52, 57, 24, 58, 43, 69, 36, 75, 45, 62, 79, 85, 9, 38, 31, 27, 82, 98, 46, 80, 10, 77, 11, 80, 63, 55, 92, 69, 32, 78, 37, 87, 54, 69, 91, 19, 62, 48, 42, 59, 52, 32, 21, 39, 32, 48, 90, 17, 58, 86, 67, 81, 74, 55, 27, 36, 88, 30, 15, 41, 28, 42, 70, 25, 46, 34, 6, 46, 31, 47, 82, 69, 65, 72, 29, 56, 34, 10, 18, 60, 37, 20, 60, 66, 29, 96, 15, 32, 82, 26, 36, 27, 39, 28, 12, 96, 10, 38, 90, 58, 39, 92, 47, 36, 39, 17, 83, 43, 97, 63, 55, 57, 29, 68, 88, 53, 40, 71, 98, 50, 54, 75, 49, 53, 87, 68, 36, 62, 33, 85, 60, 81, 93, 39, 44, 27, 71, 90, 36, 27, 34, 32, 41, 17, 70, 94, 93, 53, 99, 50, 84, 75, 48, 55, 95, 29, 26, 26, 51, 59, 96, 63, 74, 95, 68, 39, 97, 87, 26, 29, 68, 26, 19, 99, 61, 86, 51, 9, 70, 68, 97, 51, 68, 81, 14, 73, 44, 97, 22, 97, 15, 91, 81, 53, 41, 79, 79, 42, 9, 56, 63, 18, 38, 17, 20, 62, 15, 29, 43, 10, 28, 4, 13, 41, 87, 84, 89, 32, 1, 17, 20, 60, 15, 13, 98, 36, 88, 92, 53, 92, 80, 37, 77, 98, 12, 66, 80, 71, 35, 37, 45, 0, 33, 66, 22, 51, 31, 76, 79, 74, 100, 66, 95, 18, 31]
last_save: 735

Gen:19
TrainFitness:1.0
TestFitness:0.5
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(sigmoid(x[index]),-890340.1793).all():
      return True
    else:
      return True
  def adf1(index):
    if np.equal(np.sin(x[index]),+014091.2099).all():
      return True
    else:
      return False
  def adf2(index):
    if np.equal(x[index],-483462.8367).all():
      return False
    else:
      return False
  def adf3(index):
    if np.greater(x[index],+005480.1441).all():
      return True
    else:
      return False
  def adf4(index):
    if np.greater(x[index],+936091.5375).all():
      if np.less(x[index],-156201.5303).all():
        return False
      else:
        return False
      return False
    else:
      if np.less(x[index],-539020.3542).all():
        return True
      else:
        return False
      return False
  def adf7(index):
    if np.equal(x[index],-733078.1697).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*-154.160, adf1(1)*+782.477, adf2(2)*-296.557, adf3(3)*+940.125, adf4(4)*+439.097, adf7(7)*-356.692], [0, 0, 1, 1, 1], 296.134)
result=p(); 1.0
IndLenGenome:434
IndGenome:[7, 18, 25, 75, 33, 2, 51, 91, 27, 52, 98, 69, 70, 43, 34, 50, 51, 97, 39, 43, 40, 58, 7, 43, 44, 30, 72, 46, 98, 25, 70, 21, 14, 90, 99, 81, 32, 60, 59, 89, 62, 97, 81, 9, 98, 33, 87, 65, 88, 84, 78, 23, 4, 46, 72, 38, 43, 96, 77, 65, 63, 30, 97, 96, 75, 4, 86, 65, 50, 30, 95, 34, 48, 40, 51, 34, 14, 61, 92, 61, 60, 72, 42, 78, 5, 88, 20, 92, 59, 13, 6, 50, 89, 61, 65, 53, 17, 15, 23, 70, 53, 62, 11, 97, 41, 85, 36, 32, 60, 81, 45, 63, 60, 13, 61, 91, 23, 93, 43, 27, 25, 91, 77, 85, 83, 79, 30, 52, 10, 83, 55, 84, 62, 38, 37, 11, 64, 35, 56, 27, 84, 63, 86, 67, 43, 53, 20, 47, 28, 71, 36, 69, 17, 41, 31, 46, 75, 90, 73, 16, 11, 95, 74, 31, 46, 20, 96, 88, 95, 57, 68, 22, 14, 97, 37, 14, 97, 75, 82, 49, 86, 25, 55, 17, 99, 8, 84, 69, 24, 80, 81, 62, 85, 75, 46, 48, 44, 23, 69, 20, 99, 17, 16, 23, 53, 23, 85, 16, 36, 89, 72, 18, 52, 92, 31, 53, 59, 39, 62, 59, 26, 51, 3, 54, 31, 89, 91, 11, 47, 29, 11, 97, 85, 60, 70, 13, 60, 70, 13, 58, 45, 41, 42, 58, 52, 20, 39, 63, 22, 14, 92, 17, 87, 18, 26, 61, 94, 14, 49, 21, 64, 24, 52, 44, 39, 91, 89, 28, 35, 82, 15, 97, 87, 12, 43, 28, 86, 36, 55, 35, 94, 79, 100, 4, 49, 3, 14, 15, 12, 52, 90, 77, 59, 87, 50, 98, 12, 74, 11, 50, 40, 65, 2, 81, 93, 87, 48, 12, 29, 80, 79, 54, 46, 32, 64, 58, 6, 51, 38, 66, 2, 22, 60, 34, 96, 28, 36, 39, 11, 63, 82, 38, 98, 33, 78, 39, 45, 64, 87, 23, 77, 23, 60, 70, 15, 31, 38, 65, 80, 75, 22, 14, 20, 32, 15, 74, 59, 66, 53, 11, 62, 48, 18, 7, 13, 51, 58, 58, 48, 33, 32, 93, 57, 66, 5, 15, 42, 76, 93, 88, 5, 86, 57, 9, 89, 37, 72, 75, 77, 51, 3, 9, 79, 13, 100, 5, 61, 5, 50, 98, 73, 82, 91, 34, 98, 49, 81, 70, 80, 2, 73, 2, 90, 91, 28, 63, 27, 12, 86, 50, 83, 27, 90, 39, 2, 41, 90, 13, 38, 41, 39, 25, 9, 54]
last_save: 735

Gen:19
last_save: 735
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],+313772.0963).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(np.cos(x[index]),+749179.3329).all():
      return True
    else:
      return False
  def adf2(index):
    if np.greater(np.sin(x[index]),-035381.8846).all():
      return True
    else:
      return True
  def adf3(index):
    if np.greater(rlog(x[index]),+034707.6188).all():
      return True
    else:
      return True
  def adf4(index):
    if np.equal(x[index],-790653.9410).all():
      return True
    else:
      return True
  def adf7(index):
    if np.equal(x[index],+586890.7149).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+889.884, adf1(1)*-552.245, adf2(2)*+033.399, adf3(3)*+541.021, adf4(4)*-013.297, adf7(7)*+137.725], [0, 0, 0, 0, 1], 897.136)
result=p(); 0.6666666666666666
IndLenGenome:283
IndGenome:[16, 12, 99, 7, 5, 22, 99, 71, 11, 94, 59, 85, 97, 85, 15, 41, 96, 39, 95, 30, 93, 6, 33, 33, 30, 91, 33, 16, 23, 97, 62, 79, 18, 27, 74, 92, 96, 11, 63, 21, 10, 62, 55, 82, 41, 71, 81, 34, 37, 28, 38, 43, 57, 36, 88, 39, 72, 57, 74, 87, 90, 67, 79, 69, 21, 82, 82, 40, 87, 92, 80, 95, 65, 99, 45, 8, 13, 68, 98, 66, 7, 11, 32, 36, 21, 2, 36, 64, 78, 80, 71, 71, 21, 48, 88, 70, 58, 27, 63, 19, 68, 63, 38, 70, 86, 95, 93, 24, 66, 61, 40, 28, 94, 87, 46, 68, 92, 57, 43, 13, 50, 16, 48, 96, 99, 21, 34, 58, 98, 50, 49, 20, 93, 14, 69, 29, 50, 77, 51, 69, 24, 56, 10, 68, 91, 13, 64, 71, 79, 87, 97, 79, 27, 85, 73, 85, 30, 15, 64, 39, 92, 96, 53, 20, 11, 30, 32, 33, 29, 48, 32, 32, 50, 67, 94, 56, 97, 81, 93, 58, 36, 49, 17, 77, 71, 35, 89, 43, 90, 11, 24, 13, 39, 22, 44, 74, 63, 48, 75, 5, 29, 33, 14, 27, 14, 12, 92, 39, 47, 18, 37, 83, 58, 28, 15, 7, 86, 99, 51, 36, 63, 30, 21, 1, 34, 85, 45, 56, 27, 77, 81, 7, 83, 96, 36, 9, 93, 81, 61, 62, 84, 32, 77, 38, 13, 73, 26, 32, 16, 4, 53, 5, 64, 17, 60, 38, 33, 36, 77, 70, 18, 16, 32, 49, 2, 95, 70, 83, 78, 19, 99, 43, 12, 34, 0, 86, 66, 26, 96, 72, 96, 77, 71]
last_save: 736

Gen:14
TrainFitness:0.8333333333333334
TestFitness:0.5
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(sigmoid(x[index]),-957551.0316).all():
      return False
    else:
      return False
  def adf1(index):
    if np.greater(x[index],+918591.5762).all():
      return True
    else:
      return False
  def adf2(index):
    if np.greater(x[index],+815771.9277).all():
      return False
    else:
      return False
  def adf3(index):
    if np.greater(psqrt(x[index]),+336754.0247).all():
      return False
    else:
      return True
  def adf4(index):
    if np.greater(x[index],-057403.7650).all():
      return False
    else:
      return True
  def adf7(index):
    if np.less(x[index],-508171.2083).all():
      if np.equal(x[index],+934890.1282).all():
        return False
      else:
        return False
      return False
    else:
      if np.less(x[index],+021396.1417).all():
        return False
      else:
        return True
      return True
  return multiple_operation([adf0(0)*-222.137, adf1(1)*-964.519, adf2(2)*-714.758, adf3(3)*-043.071, adf4(4)*+007.008, adf7(7)*-926.387], [1, 0, 1, 1, 0], 346.725)
result=p(); 0.8333333333333334
IndLenGenome:426
IndGenome:[16, 12, 99, 7, 5, 22, 99, 71, 11, 94, 39, 85, 97, 85, 15, 41, 50, 53, 11, 56, 97, 5, 55, 39, 24, 35, 95, 60, 48, 79, 81, 48, 75, 9, 81, 15, 17, 16, 2, 40, 17, 79, 61, 51, 55, 21, 26, 10, 28, 31, 55, 47, 57, 11, 39, 32, 37, 97, 65, 89, 21, 63, 69, 58, 71, 84, 24, 37, 33, 53, 16, 7, 35, 34, 40, 32, 34, 47, 31, 80, 14, 27, 39, 9, 88, 75, 41, 90, 25, 17, 74, 80, 13, 47, 86, 75, 40, 73, 60, 85, 62, 88, 88, 37, 93, 61, 60, 25, 50, 98, 61, 37, 91, 12, 80, 18, 33, 55, 98, 51, 76, 88, 83, 69, 83, 74, 78, 39, 90, 91, 92, 48, 72, 73, 25, 79, 95, 16, 39, 24, 90, 69, 90, 42, 21, 23, 79, 36, 41, 54, 41, 37, 73, 10, 10, 95, 98, 91, 25, 71, 92, 52, 42, 71, 43, 37, 16, 95, 68, 9, 16, 24, 65, 71, 89, 84, 77, 60, 17, 91, 24, 7, 55, 28, 28, 59, 15, 80, 64, 53, 30, 17, 41, 50, 58, 43, 70, 60, 7, 20, 70, 68, 66, 29, 77, 99, 52, 46, 83, 48, 27, 46, 85, 4, 13, 41, 82, 68, 13, 14, 46, 97, 92, 75, 85, 53, 22, 90, 71, 19, 88, 89, 57, 55, 15, 40, 89, 98, 62, 74, 77, 11, 36, 93, 21, 56, 75, 17, 15, 79, 26, 61, 49, 85, 93, 36, 50, 23, 67, 65, 74, 18, 40, 37, 88, 60, 6, 10, 22, 39, 48, 33, 31, 37, 19, 88, 91, 78, 39, 10, 86, 26, 11, 70, 63, 93, 64, 37, 81, 15, 49, 65, 16, 71, 20, 86, 95, 95, 55, 88, 32, 71, 78, 56, 63, 50, 19, 52, 46, 69, 9, 91, 36, 64, 35, 36, 17, 95, 26, 51, 57, 65, 54, 25, 59, 26, 24, 32, 88, 64, 43, 4, 90, 48, 49, 86, 8, 86, 95, 92, 38, 62, 92, 37, 5, 46, 99, 97, 25, 78, 35, 68, 45, 71, 90, 25, 27, 89, 54, 40, 59, 11, 16, 33, 90, 42, 12, 18, 66, 36, 30, 68, 33, 74, 33, 76, 88, 0, 4, 61, 60, 19, 11, 58, 29, 60, 99, 40, 77, 28, 46, 83, 19, 91, 96, 55, 15, 64, 63, 48, 89, 76, 45, 24, 28, 39, 7, 73, 14, 11, 44, 72, 95, 73, 53, 53, 2, 59, 65, 86, 60, 25, 23, 15, 42, 64]
last_save: 736

Gen:100
TrainFitness:1.0
TestFitness:0.5
MaxGenLen:515
Individual: def p():
  def adf0(index):
    if np.equal(sigmoid(x[index]),-957551.0316).all():
      return False
    else:
      return False
  def adf1(index):
    if np.greater(x[index],+518591.5762).all():
      return True
    else:
      return False
  def adf2(index):
    if np.greater(x[index],+815771.9277).all():
      return True
    else:
      return False
  def adf3(index):
    if np.less(x[index],+815122.2137).all():
      return True
    else:
      return False
  def adf4(index):
    if np.less(psqrt(x[index]),-707147.5889).all():
      return False
    else:
      return True
  def adf7(index):
    if np.greater(x[index],+005882.5176).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+295.617, adf1(1)*-048.525, adf2(2)*-350.549, adf3(3)*+010.239, adf4(4)*+074.671, adf7(7)*+977.159], [0, 1, 0, 1, 1], 652.500)
result=p(); 1.0
IndLenGenome:463
IndGenome:[16, 12, 99, 7, 5, 22, 99, 71, 11, 94, 39, 85, 97, 85, 15, 41, 50, 53, 11, 56, 97, 5, 55, 39, 24, 35, 95, 60, 48, 35, 81, 48, 75, 9, 81, 15, 17, 16, 2, 40, 17, 79, 61, 51, 55, 21, 26, 10, 28, 31, 55, 47, 57, 11, 39, 32, 37, 97, 36, 41, 54, 41, 37, 73, 10, 10, 95, 98, 91, 25, 71, 92, 52, 42, 71, 43, 37, 16, 95, 68, 9, 16, 24, 65, 71, 89, 84, 77, 60, 17, 91, 24, 7, 55, 28, 28, 59, 15, 80, 64, 53, 30, 17, 41, 50, 73, 10, 10, 95, 98, 98, 32, 95, 61, 87, 66, 96, 25, 36, 75, 6, 12, 81, 82, 29, 5, 86, 61, 77, 47, 67, 50, 60, 14, 88, 65, 22, 95, 79, 27, 85, 73, 85, 30, 15, 64, 79, 92, 96, 53, 20, 11, 30, 32, 33, 29, 48, 32, 32, 50, 67, 94, 56, 97, 81, 93, 58, 36, 49, 17, 77, 71, 35, 89, 43, 90, 11, 24, 13, 45, 87, 66, 25, 82, 35, 90, 80, 89, 61, 97, 29, 43, 57, 54, 98, 22, 84, 47, 68, 84, 36, 32, 38, 33, 43, 33, 23, 83, 91, 35, 21, 3, 98, 67, 35, 22, 98, 27, 17, 54, 23, 75, 94, 94, 63, 38, 75, 34, 95, 45, 12, 12, 28, 10, 35, 4, 46, 65, 53, 81, 9, 78, 52, 39, 47, 30, 56, 29, 28, 43, 60, 90, 89, 62, 3, 43, 70, 16, 89, 17, 49, 43, 25, 57, 34, 85, 59, 25, 15, 38, 52, 63, 24, 4, 59, 37, 44, 67, 58, 43, 70, 60, 7, 20, 70, 68, 66, 29, 77, 99, 52, 46, 2, 48, 33, 46, 85, 4, 13, 41, 82, 68, 13, 14, 46, 97, 92, 75, 85, 53, 22, 90, 36, 19, 88, 89, 57, 55, 15, 40, 89, 98, 62, 74, 77, 11, 36, 93, 21, 56, 75, 43, 15, 79, 26, 61, 49, 85, 93, 36, 50, 23, 67, 65, 74, 18, 40, 37, 88, 60, 6, 10, 22, 39, 48, 33, 31, 56, 72, 96, 83, 80, 55, 32, 46, 50, 83, 29, 96, 47, 98, 2, 69, 33, 52, 81, 70, 32, 76, 35, 72, 36, 55, 29, 58, 66, 59, 71, 34, 34, 52, 99, 32, 38, 3, 20, 43, 85, 10, 23, 17, 57, 20, 40, 64, 37, 49, 43, 12, 52, 41, 7, 88, 93, 32, 11, 37, 73, 20, 25, 46, 10, 20, 55, 43, 40, 18, 78, 64, 58, 98, 94, 36, 28, 4, 63, 34, 3, 33, 88, 35, 29, 16, 22, 31, 7, 30, 57, 83, 66, 37, 45, 7, 19, 69, 67, 16, 63, 35, 51, 64, 13, 65]
last_save: 736

Gen:100
last_save: 736
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.5
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(rlog(x[index]),+599152.9754).all():
      return False
    else:
      return True
  def adf1(index):
    if np.equal(x[index],+591170.5249).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(rlog(x[index]),-354598.0750).all():
      return False
    else:
      return False
  def adf3(index):
    if np.equal(x[index],-731572.6387).all():
      return True
    else:
      return True
  def adf4(index):
    if np.greater(x[index],+006078.5860).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(np.sin(x[index]),-270425.2499).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+348.126, adf1(1)*-906.983, adf2(2)*+173.521, adf3(3)*-357.959, adf4(4)*-997.430, adf7(7)*-171.699], [0, 0, 1, 0, 0], 516.717)
result=p(); 0.8333333333333334
IndLenGenome:283
IndGenome:[11, 77, 97, 61, 63, 53, 85, 98, 43, 34, 23, 74, 33, 93, 60, 93, 36, 37, 85, 56, 21, 33, 27, 82, 60, 89, 40, 21, 89, 81, 83, 58, 80, 10, 58, 12, 9, 22, 71, 5, 25, 37, 92, 25, 51, 69, 56, 13, 24, 42, 66, 41, 25, 40, 77, 38, 38, 47, 84, 63, 27, 92, 84, 35, 88, 27, 56, 27, 80, 41, 18, 19, 96, 13, 31, 89, 74, 47, 67, 46, 67, 61, 53, 39, 28, 73, 28, 85, 41, 3, 17, 17, 39, 23, 65, 86, 30, 59, 6, 25, 28, 74, 16, 97, 10, 22, 70, 87, 90, 48, 44, 42, 17, 84, 97, 37, 85, 40, 45, 19, 10, 7, 18, 96, 61, 83, 65, 61, 50, 96, 17, 23, 50, 64, 16, 15, 81, 81, 63, 59, 99, 23, 40, 35, 70, 88, 53, 26, 66, 15, 39, 60, 85, 20, 45, 46, 69, 55, 45, 59, 32, 44, 12, 15, 62, 10, 67, 16, 37, 45, 69, 97, 44, 51, 24, 52, 19, 29, 68, 69, 32, 79, 21, 82, 42, 62, 94, 40, 69, 71, 25, 14, 47, 90, 75, 85, 1, 6, 90, 1, 5, 45, 10, 35, 46, 15, 64, 93, 72, 29, 42, 67, 17, 83, 67, 39, 9, 40, 31, 2, 62, 44, 63, 77, 29, 41, 20, 97, 9, 64, 40, 19, 12, 33, 16, 3, 80, 2, 29, 100, 58, 91, 99, 55, 13, 9, 78, 18, 22, 68, 18, 73, 37, 34, 95, 5, 47, 93, 30, 93, 44, 86, 20, 80, 35, 46, 37, 50, 43, 12, 34, 82, 61, 77, 14, 38, 59, 7, 69, 72, 85, 24, 23]
last_save: 737

Gen:192
TrainFitness:1.0
TestFitness:0.16666666666666666
MaxGenLen:545
Individual: def p():
  def adf0(index):
    if np.less(x[index],+029603.5877).all():
      return True
    else:
      return False
  def adf1(index):
    if np.greater(x[index],-914792.4722).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(x[index],-736202.4445).all():
      if np.less(x[index],+008490.9584).all():
        return False
      else:
        return True
      return False
    else:
      if np.equal(x[index],-230914.5924).all():
        return False
      else:
        return True
      return True
  def adf3(index):
    if np.equal(np.cos(x[index]),-717260.2900).all():
      if np.equal(np.cos(x[index]),-355957.9722).all():
        if np.greater(np.tanh(x[index]),+445142.5926).all():
          return False
        else:
          return False
        return True
      else:
        if np.less(sigmoid(x[index]),-873617.3123).all():
          if np.less(sigmoid(x[index]),+079783.0811).all():
            if np.equal(psqrt(x[index]),-334427.4571).all():
              return False
            else:
              return True
            return False
          else:
            if np.less(x[index],-865365.1295).all():
              return True
            else:
              return True
            return True
          return False
        else:
          if np.greater(x[index],+832507.0869).all():
            if np.less(x[index],-607277.1037).all():
              return False
            else:
              return True
            return True
          else:
            if np.greater(x[index],+848595.2984).all():
              return True
            else:
              return True
            return True
          return True
        return True
      return False
    else:
      if np.greater(x[index],-814710.4137).all():
        if np.less(x[index],+130542.6687).all():
          return False
        else:
          return True
        return True
      else:
        if np.less(np.tanh(x[index]),+272285.8189).all():
          return True
        else:
          return True
        return True
      return True
  def adf4(index):
    if np.less(x[index],+444705.7915).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(np.tanh(x[index]),-731258.8391).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*-016.957, adf1(1)*+703.299, adf2(2)*+317.312, adf3(3)*-538.187, adf4(4)*-706.136, adf7(7)*-851.438], [1, 1, 0, 1, 0], 283.139)
result=p(); 1.0
IndLenGenome:495
IndGenome:[49, 67, 54, 93, 97, 51, 30, 82, 66, 50, 82, 9, 46, 50, 43, 15, 8, 97, 37, 22, 77, 20, 73, 27, 5, 52, 33, 25, 79, 1, 44, 47, 29, 12, 4, 67, 72, 62, 19, 63, 26, 62, 60, 42, 55, 67, 45, 62, 77, 63, 26, 62, 60, 42, 34, 64, 14, 15, 81, 52, 27, 13, 98, 59, 50, 30, 78, 94, 9, 100, 89, 65, 78, 94, 73, 8, 61, 21, 86, 45, 37, 13, 31, 52, 33, 20, 79, 1, 44, 15, 29, 12, 4, 67, 72, 62, 98, 28, 50, 23, 96, 97, 86, 9, 87, 97, 51, 27, 82, 66, 50, 82, 9, 70, 50, 32, 27, 8, 82, 37, 22, 77, 20, 73, 45, 5, 49, 75, 97, 69, 67, 72, 62, 77, 63, 26, 62, 60, 42, 34, 64, 4, 15, 81, 14, 52, 85, 99, 82, 26, 91, 65, 16, 54, 3, 85, 34, 45, 63, 7, 21, 58, 57, 23, 86, 61, 17, 13, 31, 52, 33, 20, 17, 1, 44, 39, 41, 12, 93, 20, 77, 89, 17, 38, 93, 20, 58, 31, 11, 89, 11, 100, 71, 16, 69, 11, 63, 23, 34, 44, 32, 57, 64, 75, 57, 61, 79, 78, 27, 41, 49, 43, 54, 87, 23, 78, 26, 65, 53, 16, 25, 61, 92, 79, 75, 24, 48, 30, 19, 78, 23, 9, 77, 93, 10, 92, 58, 83, 2, 85, 80, 67, 10, 28, 46, 49, 91, 52, 29, 35, 87, 63, 36, 30, 87, 22, 47, 57, 61, 20, 23, 57, 59, 4, 28, 33, 90, 85, 60, 74, 38, 8, 74, 48, 45, 19, 85, 82, 89, 38, 54, 78, 32, 58, 80, 22, 39, 26, 13, 18, 75, 58, 81, 26, 38, 21, 14, 27, 11, 40, 84, 61, 43, 47, 83, 46, 79, 51, 68, 17, 21, 73, 70, 15, 64, 82, 16, 56, 18, 87, 95, 44, 26, 23, 70, 72, 50, 18, 86, 91, 52, 47, 22, 12, 48, 95, 88, 71, 8, 29, 54, 76, 94, 26, 17, 59, 94, 45, 17, 84, 50, 24, 4, 64, 77, 40, 25, 27, 89, 71, 15, 34, 89, 99, 99, 75, 100, 74, 45, 73, 25, 87, 93, 11, 22, 65, 8, 78, 33, 99, 11, 18, 98, 59, 56, 79, 97, 3, 90, 61, 86, 59, 5, 97, 4, 58, 22, 57, 70, 33, 92, 9, 89, 92, 44, 19, 73, 11, 77, 53, 91, 32, 67, 33, 78, 45, 63, 68, 21, 58, 57, 21, 59, 49, 47, 30, 76, 51, 53, 56, 56, 35, 60, 18, 35, 91, 74, 13, 38, 36, 31, 87, 76, 99, 50, 41, 62, 18, 3, 11, 83, 89, 36, 95, 96, 32, 7, 26, 41, 58, 29, 69, 8, 15, 59, 26, 22, 15, 100, 63, 14, 30, 32, 24, 5, 72, 24, 24, 100, 16, 89, 18, 30, 21, 12, 92, 33, 84, 67, 4, 1, 3, 15, 10, 20]
last_save: 737

Gen:192
last_save: 737
Exit:TrueFalseFalse