Dataset:Meander/Full.csv
FS:True
Seed:1236
Size:3

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],+920783.6876).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(sigmoid(x[index]),-795628.7250).all():
      return False
    else:
      return True
  def adf2(index):
    if np.less(psqrt(x[index]),+085706.3641).all():
      return True
    else:
      return True
  def adf3(index):
    if np.equal(x[index],-514060.2792).all():
      return True
    else:
      return False
  def adf4(index):
    if np.less(x[index],-267529.5719).all():
      return False
    else:
      return True
  def adf7(index):
    if np.equal(np.tanh(x[index]),+254838.5634).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+573.380, adf1(1)*+349.673, adf2(2)*+547.649, adf3(3)*-954.464, adf4(4)*-723.460, adf7(7)*+278.351], [0, 1, 0, 0, 0], 819.781)
result=p(); 0.8333333333333334
IndLenGenome:283
IndGenome:[87, 13, 66, 16, 30, 39, 17, 91, 2, 57, 46, 26, 39, 55, 74, 30, 99, 44, 79, 22, 22, 30, 39, 65, 28, 75, 66, 19, 10, 95, 35, 89, 97, 33, 62, 15, 17, 23, 81, 45, 38, 34, 4, 23, 44, 61, 22, 41, 48, 81, 67, 16, 60, 40, 53, 87, 35, 56, 55, 32, 81, 43, 58, 65, 99, 38, 40, 75, 60, 54, 51, 14, 84, 5, 98, 77, 7, 34, 32, 71, 73, 86, 85, 68, 51, 85, 71, 79, 40, 27, 16, 36, 53, 49, 39, 24, 62, 45, 19, 55, 13, 96, 68, 75, 14, 46, 5, 6, 86, 13, 34, 65, 35, 87, 42, 21, 63, 78, 28, 94, 89, 98, 57, 46, 43, 37, 46, 86, 94, 82, 69, 3, 40, 50, 67, 70, 42, 72, 33, 5, 90, 40, 48, 90, 56, 83, 46, 15, 19, 34, 35, 22, 17, 63, 33, 76, 17, 37, 84, 17, 67, 35, 41, 16, 46, 38, 62, 79, 52, 45, 18, 28, 77, 65, 24, 50, 90, 90, 26, 14, 37, 61, 45, 70, 33, 16, 74, 78, 70, 10, 9, 80, 57, 46, 100, 97, 82, 11, 71, 26, 57, 40, 35, 6, 44, 50, 81, 63, 93, 76, 83, 19, 87, 95, 4, 90, 81, 16, 28, 64, 38, 22, 22, 67, 0, 71, 24, 58, 56, 52, 50, 75, 57, 55, 30, 47, 60, 24, 86, 39, 28, 40, 52, 24, 47, 42, 74, 19, 24, 96, 40, 81, 4, 29, 38, 22, 54, 12, 57, 60, 41, 90, 92, 96, 35, 55, 61, 31, 21, 8, 70, 55, 50, 59, 23, 68, 8, 80, 32, 33, 26, 33, 59]
last_save: 321

Gen:2001
last_save: 321
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(np.tanh(x[index]),-371972.1969).all():
      return True
    else:
      return False
  def adf1(index):
    if np.equal(psqrt(x[index]),+605999.7538).all():
      return False
    else:
      return True
  def adf2(index):
    if np.greater(rlog(x[index]),+496701.8285).all():
      return True
    else:
      return False
  def adf3(index):
    if np.equal(psqrt(x[index]),+756814.8264).all():
      return False
    else:
      return False
  def adf4(index):
    if np.greater(np.tanh(x[index]),-191266.7028).all():
      return False
    else:
      return False
  def adf7(index):
    if np.equal(np.tanh(x[index]),+164763.6609).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*-845.423, adf1(1)*+497.472, adf2(2)*-225.350, adf3(3)*+037.669, adf4(4)*-266.476, adf7(7)*-435.777], [1, 1, 0, 0, 1], 451.170)
result=p(); 0.6666666666666666
IndLenGenome:288
IndGenome:[3, 16, 89, 62, 99, 26, 92, 38, 95, 87, 69, 61, 7, 25, 10, 68, 65, 47, 27, 94, 33, 41, 28, 3, 70, 60, 69, 66, 91, 21, 41, 81, 76, 84, 51, 51, 90, 10, 5, 35, 95, 85, 27, 38, 75, 36, 77, 58, 70, 66, 46, 39, 36, 26, 80, 30, 65, 89, 87, 65, 72, 78, 67, 98, 17, 18, 21, 43, 12, 12, 75, 12, 14, 94, 73, 90, 57, 84, 13, 11, 11, 88, 67, 58, 92, 77, 94, 57, 55, 12, 44, 79, 12, 84, 59, 20, 34, 50, 9, 58, 27, 35, 36, 26, 46, 80, 82, 26, 83, 22, 55, 37, 99, 35, 27, 50, 64, 61, 84, 19, 20, 82, 86, 99, 15, 55, 51, 10, 96, 95, 87, 63, 66, 44, 98, 39, 43, 98, 23, 93, 98, 30, 85, 68, 42, 26, 48, 38, 47, 95, 40, 69, 47, 39, 84, 30, 37, 52, 44, 49, 82, 39, 45, 79, 77, 73, 73, 17, 12, 29, 36, 46, 11, 46, 61, 39, 42, 94, 50, 61, 90, 47, 66, 17, 82, 53, 59, 26, 29, 11, 36, 47, 35, 0, 43, 99, 17, 72, 44, 2, 36, 75, 86, 92, 52, 92, 92, 64, 74, 91, 2, 13, 30, 20, 72, 76, 87, 7, 99, 63, 74, 35, 15, 0, 78, 73, 91, 54, 48, 40, 65, 100, 59, 13, 42, 11, 45, 62, 90, 46, 39, 13, 71, 94, 74, 77, 56, 5, 55, 55, 86, 42, 69, 4, 24, 33, 88, 3, 69, 85, 6, 57, 72, 9, 68, 94, 80, 32, 15, 60, 48, 3, 0, 41, 50, 44, 88, 96, 46, 64, 74, 28, 87, 71, 59, 6, 100, 72]
last_save: 322

Gen:5
TrainFitness:0.8333333333333334
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],+014683.5511).all():
      return True
    else:
      return False
  def adf1(index):
    if np.greater(x[index],+219372.3594).all():
      return False
    else:
      return True
  def adf2(index):
    if np.greater(x[index],+417920.6136).all():
      return False
    else:
      return True
  def adf3(index):
    if np.less(psqrt(x[index]),-461636.2390).all():
      return True
    else:
      return False
  def adf4(index):
    if np.equal(x[index],-945054.6391).all():
      if np.greater(x[index],-791255.9272).all():
        return False
      else:
        return True
      return False
    else:
      if np.less(x[index],+539351.2362).all():
        return False
      else:
        return False
      return False
  def adf7(index):
    if np.greater(x[index],+515941.1136).all():
      if np.less(x[index],+096658.6944).all():
        return False
      else:
        return False
      return False
    else:
      if np.equal(sigmoid(x[index]),+136942.5687).all():
        return True
      else:
        return False
      return True
  return multiple_operation([adf0(0)*+623.904, adf1(1)*+263.257, adf2(2)*+054.639, adf3(3)*-749.779, adf4(4)*+592.727, adf7(7)*-177.065], [1, 1, 1, 1, 0], 829.372)
result=p(); 0.8333333333333334
IndLenGenome:377
IndGenome:[68, 75, 77, 15, 88, 99, 49, 12, 32, 90, 81, 24, 86, 8, 13, 25, 75, 91, 41, 52, 25, 75, 53, 54, 83, 73, 54, 32, 72, 81, 59, 83, 37, 12, 63, 75, 99, 24, 49, 48, 44, 89, 24, 23, 57, 30, 8, 24, 21, 27, 69, 72, 20, 76, 31, 33, 56, 59, 74, 82, 55, 46, 88, 17, 16, 85, 60, 74, 36, 41, 16, 33, 76, 52, 83, 39, 20, 74, 17, 44, 70, 92, 26, 83, 52, 75, 37, 29, 64, 35, 40, 85, 84, 56, 13, 59, 41, 11, 21, 17, 94, 29, 57, 57, 39, 91, 12, 35, 85, 59, 32, 57, 42, 97, 20, 15, 39, 31, 87, 17, 90, 26, 35, 43, 39, 33, 15, 71, 82, 83, 96, 22, 69, 13, 27, 22, 88, 56, 87, 59, 84, 12, 42, 25, 81, 25, 39, 44, 71, 31, 11, 3, 86, 37, 91, 97, 11, 26, 39, 70, 39, 46, 26, 25, 88, 46, 99, 54, 84, 87, 27, 53, 29, 35, 54, 87, 72, 20, 76, 31, 33, 56, 59, 74, 82, 55, 46, 88, 17, 16, 85, 60, 74, 36, 41, 16, 33, 76, 52, 83, 39, 20, 74, 17, 44, 70, 92, 26, 83, 52, 75, 37, 29, 64, 35, 40, 85, 84, 56, 13, 59, 41, 11, 21, 17, 94, 29, 57, 57, 39, 16, 12, 35, 85, 59, 32, 57, 42, 97, 20, 15, 39, 31, 87, 17, 90, 26, 35, 43, 39, 33, 15, 71, 82, 83, 98, 22, 69, 13, 27, 22, 88, 56, 87, 59, 84, 23, 42, 25, 81, 25, 39, 88, 68, 56, 59, 88, 38, 31, 70, 70, 84, 74, 24, 69, 68, 11, 61, 69, 88, 43, 23, 67, 35, 46, 15, 90, 67, 47, 38, 15, 84, 82, 2, 40, 19, 72, 4, 52, 34, 16, 13, 11, 16, 8, 0, 48, 72, 78, 86, 36, 98, 8, 0, 77, 41, 48, 20, 53, 90, 18, 57, 95, 60, 73, 23, 77, 42, 10, 62, 28, 47, 49, 75, 63, 44, 69, 73, 95, 83, 93, 97, 80, 3, 85, 55, 69, 50, 0, 85, 17, 74, 20, 49, 36, 18, 54, 9, 52, 18, 77, 68, 33, 94, 40, 17, 75]
last_save: 322

Gen:2005
last_save: 322
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:1.0
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],-766422.7720).all():
      return False
    else:
      return True
  def adf1(index):
    if np.equal(x[index],+783295.2216).all():
      return False
    else:
      return True
  def adf2(index):
    if np.less(x[index],-195460.0346).all():
      return False
    else:
      return False
  def adf3(index):
    if np.greater(np.tanh(x[index]),+819972.1171).all():
      return True
    else:
      return False
  def adf4(index):
    if np.less(np.sin(x[index]),-967752.9703).all():
      return True
    else:
      return False
  def adf7(index):
    if np.equal(x[index],-856733.3265).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+673.966, adf1(1)*-548.638, adf2(2)*-442.937, adf3(3)*-735.891, adf4(4)*+157.423, adf7(7)*+276.897], [0, 1, 1, 1, 0], 906.141)
result=p(); 0.6666666666666666
IndLenGenome:282
IndGenome:[26, 80, 9, 43, 15, 16, 27, 31, 90, 46, 80, 89, 99, 68, 44, 45, 55, 39, 76, 44, 44, 30, 49, 48, 8, 30, 46, 85, 41, 62, 97, 41, 99, 92, 66, 83, 78, 37, 66, 30, 38, 83, 86, 67, 24, 97, 54, 89, 91, 29, 42, 94, 33, 69, 31, 11, 71, 98, 49, 96, 20, 27, 81, 80, 24, 74, 67, 81, 77, 39, 47, 52, 87, 16, 95, 17, 43, 2, 67, 63, 57, 42, 7, 19, 71, 38, 73, 78, 51, 34, 94, 66, 95, 87, 31, 41, 69, 13, 17, 63, 11, 6, 57, 11, 49, 90, 53, 63, 89, 87, 14, 41, 62, 58, 60, 48, 4, 97, 86, 87, 51, 89, 92, 22, 66, 70, 66, 41, 65, 76, 23, 44, 26, 32, 87, 92, 84, 68, 45, 87, 96, 45, 54, 75, 12, 78, 59, 16, 56, 59, 10, 69, 78, 49, 27, 97, 96, 93, 57, 47, 15, 86, 40, 10, 31, 44, 55, 50, 62, 53, 98, 33, 74, 71, 80, 53, 37, 33, 27, 66, 67, 18, 52, 36, 83, 93, 55, 15, 93, 70, 54, 65, 74, 88, 72, 59, 45, 94, 82, 87, 23, 66, 87, 56, 9, 66, 90, 65, 38, 90, 33, 51, 15, 41, 47, 92, 66, 36, 55, 23, 21, 82, 78, 42, 53, 71, 16, 25, 8, 43, 97, 50, 64, 24, 97, 22, 57, 72, 0, 100, 63, 60, 66, 61, 17, 53, 40, 45, 19, 15, 29, 45, 42, 75, 96, 62, 35, 46, 76, 50, 78, 91, 39, 97, 12, 61, 80, 38, 57, 26, 74, 36, 3, 8, 43, 33, 9, 6, 17, 55, 53, 70]
last_save: 323

Gen:14
TrainFitness:0.8333333333333334
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],-086754.7236).all():
      return False
    else:
      return True
  def adf1(index):
    if np.equal(x[index],-521579.6045).all():
      return False
    else:
      return True
  def adf2(index):
    if np.equal(x[index],-875803.3269).all():
      return False
    else:
      return False
  def adf3(index):
    if np.equal(psqrt(x[index]),-765689.9474).all():
      return False
    else:
      return True
  def adf4(index):
    if np.greater(sigmoid(x[index]),-187410.1807).all():
      return True
    else:
      return True
  def adf7(index):
    if np.equal(x[index],+482381.1381).all():
      if np.greater(np.sin(x[index]),-629916.6504).all():
        if np.equal(np.cos(x[index]),-044055.0490).all():
          return True
        else:
          return True
        return False
      else:
        if np.greater(psqrt(x[index]),-113938.5877).all():
          return True
        else:
          return True
        return False
      return False
    else:
      if np.less(x[index],+023827.7637).all():
        return True
      else:
        return False
      return False
  return multiple_operation([adf0(0)*+852.667, adf1(1)*+677.380, adf2(2)*+970.490, adf3(3)*+973.341, adf4(4)*-922.086, adf7(7)*+409.987], [0, 1, 0, 0, 1], 394.034)
result=p(); 0.8333333333333334
IndLenGenome:379
IndGenome:[68, 74, 15, 9, 38, 3, 75, 59, 8, 30, 8, 26, 77, 35, 54, 77, 62, 53, 16, 55, 74, 47, 81, 17, 47, 29, 25, 87, 15, 82, 41, 75, 97, 79, 36, 100, 14, 35, 79, 70, 18, 93, 83, 51, 81, 13, 84, 38, 67, 85, 8, 30, 53, 73, 22, 66, 29, 7, 83, 51, 81, 20, 78, 41, 22, 75, 84, 37, 16, 45, 76, 68, 19, 99, 24, 67, 64, 23, 96, 61, 75, 81, 92, 51, 91, 89, 51, 81, 18, 67, 44, 61, 90, 41, 68, 10, 37, 50, 20, 30, 62, 68, 62, 59, 70, 42, 59, 94, 78, 92, 43, 28, 11, 51, 83, 18, 21, 58, 72, 30, 74, 42, 20, 49, 76, 16, 22, 69, 69, 11, 16, 36, 75, 30, 64, 41, 95, 16, 55, 13, 95, 72, 10, 84, 24, 50, 15, 15, 70, 44, 19, 90, 14, 36, 33, 11, 66, 2, 89, 93, 65, 27, 51, 11, 33, 99, 83, 58, 45, 88, 27, 97, 50, 60, 41, 77, 33, 34, 41, 93, 84, 28, 60, 12, 23, 8, 92, 97, 27, 86, 23, 27, 42, 53, 1, 32, 15, 40, 22, 21, 38, 95, 42, 56, 66, 7, 31, 24, 15, 96, 97, 77, 53, 88, 60, 74, 68, 97, 29, 57, 20, 34, 59, 40, 88, 36, 11, 39, 67, 93, 13, 14, 81, 53, 35, 91, 79, 12, 52, 60, 58, 86, 91, 44, 12, 64, 40, 69, 59, 28, 27, 78, 34, 39, 54, 20, 61, 24, 23, 39, 14, 90, 13, 14, 6, 23, 99, 62, 35, 95, 59, 47, 25, 6, 41, 80, 45, 89, 68, 65, 87, 70, 69, 55, 61, 44, 70, 77, 57, 54, 73, 18, 97, 48, 59, 62, 45, 62, 80, 56, 7, 44, 56, 83, 41, 90, 43, 98, 76, 41, 10, 21, 31, 8, 21, 55, 22, 3, 73, 9, 7, 95, 9, 28, 22, 71, 47, 39, 86, 96, 83, 70, 13, 98, 11, 2, 44, 68, 93, 52, 17, 53, 66, 76, 30, 23, 23, 64, 82, 75, 59, 15, 89, 0, 78, 39, 3, 14, 29, 81, 21, 75, 7, 73, 67, 96, 23, 34, 21, 26, 64, 10, 93, 77, 2, 23, 14, 21, 56]
last_save: 323

Gen:2014
last_save: 323
Exit:FalseFalseTrue