Dataset:Spiral/Full.csv
FS:True
Seed:1238
Size:7

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(np.tanh(x[index]),+341410.9937).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(x[index],-461908.5456).all():
      return False
    else:
      return True
  def adf2(index):
    if np.equal(sigmoid(x[index]),-952424.6771).all():
      return False
    else:
      return False
  def adf3(index):
    if np.greater(x[index],+436747.7352).all():
      return False
    else:
      return True
  def adf4(index):
    if np.less(x[index],+045076.9525).all():
      return True
    else:
      return True
  def adf7(index):
    if np.equal(rlog(x[index]),+258505.3827).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*-486.313, adf1(1)*+325.665, adf2(2)*-854.389, adf3(3)*-449.261, adf4(4)*+413.088, adf7(7)*+872.714], [1, 0, 1, 0, 1], 861.941)
result=p(); 0.8333333333333334
IndLenGenome:283
IndGenome:[81, 98, 59, 72, 26, 31, 33, 26, 63, 15, 2, 75, 4, 59, 29, 88, 79, 21, 45, 70, 85, 90, 47, 89, 38, 20, 45, 89, 58, 74, 75, 64, 29, 19, 29, 26, 55, 75, 94, 26, 16, 45, 73, 50, 19, 8, 15, 84, 20, 30, 75, 29, 72, 81, 82, 28, 54, 39, 57, 98, 44, 57, 33, 16, 21, 76, 7, 63, 54, 15, 82, 81, 48, 61, 76, 32, 25, 78, 98, 5, 79, 52, 13, 57, 86, 4, 75, 86, 11, 84, 86, 91, 92, 34, 47, 93, 16, 33, 24, 83, 83, 38, 40, 97, 38, 63, 48, 45, 10, 38, 8, 17, 87, 37, 83, 64, 65, 41, 96, 68, 24, 93, 51, 21, 32, 89, 74, 49, 38, 52, 11, 76, 80, 24, 17, 61, 91, 59, 78, 70, 45, 72, 66, 10, 18, 68, 75, 54, 49, 70, 63, 54, 23, 9, 99, 75, 34, 27, 33, 53, 11, 64, 24, 14, 65, 58, 44, 87, 82, 30, 97, 18, 45, 13, 12, 82, 25, 82, 50, 75, 61, 91, 56, 38, 77, 64, 33, 85, 87, 63, 1, 3, 99, 55, 87, 56, 45, 28, 3, 100, 64, 92, 71, 10, 54, 31, 27, 84, 62, 96, 57, 28, 22, 83, 24, 2, 6, 26, 38, 50, 64, 66, 56, 15, 1, 98, 68, 13, 42, 91, 1, 63, 4, 93, 13, 99, 48, 89, 0, 38, 88, 26, 55, 62, 21, 48, 30, 39, 66, 50, 4, 37, 29, 44, 42, 13, 8, 2, 89, 64, 55, 45, 28, 81, 71, 25, 54, 62, 71, 9, 34, 72, 20, 77, 12, 78, 68, 5, 87, 54, 54, 57, 75]
last_save: 741

Gen:2001
last_save: 741
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],-351051.1648).all():
      return True
    else:
      return True
  def adf1(index):
    if np.equal(np.tanh(x[index]),-142255.8355).all():
      return True
    else:
      return True
  def adf2(index):
    if np.less(x[index],-374909.2342).all():
      return False
    else:
      return False
  def adf3(index):
    if np.greater(x[index],+273356.6318).all():
      return False
    else:
      return False
  def adf4(index):
    if np.equal(x[index],-772880.9780).all():
      return True
    else:
      return True
  def adf7(index):
    if np.greater(x[index],-474395.5392).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*-437.544, adf1(1)*-326.556, adf2(2)*+523.954, adf3(3)*-868.334, adf4(4)*+318.855, adf7(7)*+770.191], [0, 1, 0, 0, 1], 722.916)
result=p(); 0.6666666666666666
IndLenGenome:280
IndGenome:[52, 60, 48, 40, 38, 87, 15, 70, 95, 93, 74, 57, 32, 33, 2, 90, 92, 44, 32, 71, 72, 14, 12, 15, 31, 19, 82, 42, 75, 26, 26, 74, 42, 31, 92, 57, 31, 84, 99, 51, 95, 33, 75, 75, 30, 18, 91, 23, 43, 83, 54, 57, 78, 22, 72, 97, 44, 38, 23, 19, 59, 24, 5, 17, 57, 48, 34, 23, 13, 43, 55, 9, 34, 28, 75, 5, 65, 83, 99, 12, 37, 62, 54, 28, 67, 25, 68, 65, 91, 14, 85, 95, 24, 54, 51, 27, 95, 46, 67, 73, 14, 93, 73, 42, 88, 43, 14, 35, 16, 26, 69, 29, 22, 51, 43, 25, 63, 89, 42, 33, 93, 25, 90, 42, 85, 61, 11, 43, 53, 24, 20, 96, 98, 38, 10, 60, 19, 19, 81, 47, 50, 52, 39, 72, 37, 17, 15, 59, 75, 70, 45, 70, 57, 22, 81, 30, 14, 94, 39, 38, 58, 92, 54, 75, 67, 63, 83, 73, 88, 25, 21, 59, 80, 37, 12, 29, 32, 61, 15, 13, 26, 18, 27, 76, 13, 13, 71, 47, 53, 1, 81, 94, 95, 83, 57, 35, 56, 27, 89, 71, 17, 60, 87, 77, 50, 61, 44, 59, 26, 47, 24, 44, 87, 88, 39, 0, 78, 80, 84, 54, 89, 51, 72, 68, 33, 56, 11, 77, 89, 5, 54, 91, 10, 38, 27, 5, 19, 54, 94, 31, 10, 4, 35, 25, 99, 62, 98, 45, 72, 12, 18, 61, 69, 44, 69, 96, 30, 100, 11, 97, 38, 27, 13, 55, 76, 28, 79, 80, 50, 29, 37, 44, 83, 69, 45, 86, 40, 21, 83, 26]
last_save: 742

Gen:2
TrainFitness:1.0
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],+376702.6839).all():
      return True
    else:
      return False
  def adf1(index):
    if np.less(np.tanh(x[index]),+213437.8578).all():
      if np.equal(sigmoid(x[index]),+981690.2117).all():
        return True
      else:
        return False
      return False
    else:
      if np.greater(sigmoid(x[index]),+325528.7842).all():
        return False
      else:
        return False
      return True
  def adf2(index):
    if np.less(x[index],+008360.8326).all():
      return True
    else:
      return False
  def adf3(index):
    if np.greater(np.sin(x[index]),+577810.5960).all():
      return False
    else:
      return False
  def adf4(index):
    if np.less(x[index],-646786.5876).all():
      return False
    else:
      return True
  def adf7(index):
    if np.equal(sigmoid(x[index]),+262377.1808).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+078.858, adf1(1)*+892.646, adf2(2)*-470.591, adf3(3)*+201.160, adf4(4)*-526.524, adf7(7)*+783.610], [1, 1, 0, 0, 0], 460.538)
result=p(); 1.0
IndLenGenome:285
IndGenome:[40, 81, 95, 53, 4, 41, 43, 36, 19, 63, 87, 86, 67, 70, 52, 76, 8, 73, 59, 16, 61, 50, 96, 46, 46, 94, 74, 21, 22, 32, 32, 11, 53, 34, 23, 87, 38, 65, 7, 58, 55, 29, 90, 75, 11, 64, 12, 19, 18, 21, 46, 39, 60, 92, 61, 51, 27, 86, 63, 11, 37, 39, 44, 51, 52, 50, 11, 53, 82, 25, 5, 12, 88, 87, 18, 54, 92, 87, 49, 80, 44, 63, 94, 65, 40, 96, 39, 60, 70, 48, 13, 66, 20, 18, 83, 92, 96, 10, 75, 22, 75, 48, 56, 24, 97, 38, 41, 35, 17, 27, 48, 41, 40, 55, 59, 26, 10, 45, 27, 80, 75, 25, 9, 94, 31, 67, 96, 84, 76, 57, 78, 76, 55, 48, 77, 16, 77, 32, 13, 25, 89, 50, 45, 37, 74, 66, 52, 26, 82, 13, 27, 57, 71, 48, 90, 28, 33, 27, 77, 35, 25, 38, 31, 40, 17, 68, 68, 75, 38, 55, 30, 99, 58, 69, 52, 56, 94, 76, 93, 85, 85, 84, 37, 90, 25, 29, 21, 78, 58, 23, 72, 30, 81, 1, 6, 40, 3, 19, 38, 85, 52, 26, 65, 82, 44, 10, 24, 21, 87, 8, 13, 6, 31, 90, 16, 15, 91, 68, 62, 52, 67, 14, 56, 10, 55, 13, 58, 69, 98, 12, 98, 12, 61, 53, 75, 94, 76, 34, 92, 4, 50, 56, 17, 52, 38, 45, 6, 3, 59, 95, 79, 1, 83, 3, 53, 81, 22, 47, 17, 85, 100, 91, 92, 60, 77, 60, 41, 8, 22, 50, 11, 47, 45, 98, 56, 22, 17, 32, 36, 66, 74, 20, 34, 65, 50]
last_save: 742

Gen:2
last_save: 742
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(np.cos(x[index]),-011635.0674).all():
      return True
    else:
      return True
  def adf1(index):
    if np.greater(np.cos(x[index]),-342654.7144).all():
      return False
    else:
      return False
  def adf2(index):
    if np.equal(sigmoid(x[index]),-130874.6381).all():
      return False
    else:
      return False
  def adf3(index):
    if np.greater(x[index],-684046.5414).all():
      return True
    else:
      return False
  def adf4(index):
    if np.greater(x[index],+023685.0883).all():
      return True
    else:
      return False
  def adf7(index):
    if np.less(x[index],+505713.9305).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*-335.588, adf1(1)*+806.269, adf2(2)*+046.448, adf3(3)*+519.624, adf4(4)*+277.124, adf7(7)*+187.072], [0, 1, 1, 1, 0], 347.641)
result=p(); 0.8333333333333334
IndLenGenome:283
IndGenome:[86, 98, 67, 23, 30, 38, 64, 27, 66, 72, 21, 24, 31, 38, 79, 56, 43, 17, 74, 47, 3, 49, 97, 61, 93, 77, 97, 53, 65, 53, 32, 20, 81, 13, 18, 83, 30, 52, 37, 88, 6, 68, 71, 88, 68, 43, 89, 96, 73, 87, 88, 4, 92, 42, 18, 3, 39, 21, 66, 80, 68, 31, 76, 74, 87, 56, 70, 21, 72, 3, 73, 54, 54, 48, 67, 6, 52, 77, 35, 46, 13, 64, 81, 44, 82, 25, 39, 24, 42, 48, 83, 90, 64, 35, 44, 51, 32, 54, 89, 15, 11, 3, 94, 93, 41, 88, 51, 80, 87, 60, 99, 30, 12, 64, 98, 53, 49, 76, 92, 20, 78, 64, 83, 85, 53, 65, 11, 25, 29, 35, 29, 71, 85, 90, 22, 28, 50, 75, 19, 15, 61, 70, 25, 84, 86, 96, 20, 90, 17, 64, 35, 78, 86, 74, 82, 41, 96, 83, 37, 57, 84, 82, 76, 17, 93, 81, 43, 83, 48, 14, 91, 80, 72, 56, 56, 58, 83, 48, 35, 84, 87, 51, 51, 55, 30, 70, 56, 53, 36, 15, 49, 97, 64, 70, 87, 57, 61, 55, 57, 74, 13, 4, 25, 14, 97, 6, 46, 50, 49, 79, 24, 94, 32, 68, 61, 64, 80, 43, 37, 17, 3, 56, 91, 11, 46, 15, 88, 10, 61, 66, 49, 9, 26, 66, 55, 55, 0, 75, 27, 82, 7, 10, 80, 100, 22, 78, 85, 18, 0, 41, 22, 36, 86, 69, 70, 48, 89, 61, 98, 11, 28, 65, 86, 71, 5, 63, 83, 50, 77, 64, 30, 86, 31, 18, 44, 73, 7, 57, 54, 77, 29, 63, 37]
last_save: 743

Gen:7
TrainFitness:0.8333333333333334
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(rlog(x[index]),+141896.3747).all():
      return False
    else:
      return False
  def adf1(index):
    if np.greater(x[index],-320138.3027).all():
      return True
    else:
      return True
  def adf2(index):
    if np.less(np.cos(x[index]),-317191.0952).all():
      return False
    else:
      return True
  def adf3(index):
    if np.equal(np.sin(x[index]),+954544.7199).all():
      if np.less(x[index],-402333.8991).all():
        if np.greater(x[index],-120815.4160).all():
          if np.greater(x[index],+445051.0285).all():
            return False
          else:
            return False
          return False
        else:
          if np.greater(np.cos(x[index]),+262426.0409).all():
            return True
          else:
            return False
          return True
        return True
      else:
        if np.greater(x[index],-027038.3791).all():
          return False
        else:
          return True
        return False
      return True
    else:
      if np.greater(x[index],+784252.4121).all():
        return False
      else:
        return False
      return True
  def adf4(index):
    if np.greater(x[index],+034428.2363).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(np.tanh(x[index]),+118859.5341).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+650.523, adf1(1)*-529.710, adf2(2)*-470.307, adf3(3)*-794.389, adf4(4)*+686.636, adf7(7)*+733.129], [1, 0, 1, 1, 1], 902.466)
result=p(); 0.8333333333333334
IndLenGenome:323
IndGenome:[86, 98, 67, 23, 30, 38, 64, 27, 66, 72, 21, 24, 31, 38, 79, 56, 43, 17, 74, 47, 3, 49, 97, 61, 93, 77, 97, 53, 65, 53, 32, 20, 81, 13, 18, 83, 30, 52, 37, 88, 6, 68, 71, 88, 68, 43, 8, 5, 41, 23, 41, 37, 91, 59, 71, 70, 9, 25, 22, 33, 10, 54, 38, 50, 26, 22, 18, 46, 18, 94, 29, 15, 4, 95, 14, 14, 97, 51, 49, 49, 78, 4, 94, 89, 36, 53, 56, 44, 50, 92, 43, 83, 73, 8, 39, 69, 11, 20, 95, 27, 61, 52, 43, 58, 31, 62, 70, 68, 31, 45, 34, 51, 36, 40, 59, 33, 63, 49, 40, 54, 4, 54, 45, 40, 85, 91, 30, 42, 18, 15, 31, 93, 29, 67, 84, 72, 55, 19, 56, 12, 92, 56, 52, 14, 22, 76, 10, 24, 50, 19, 54, 41, 44, 90, 91, 15, 81, 10, 43, 23, 90, 72, 97, 10, 23, 18, 43, 47, 49, 91, 23, 76, 69, 56, 99, 24, 91, 50, 60, 97, 67, 98, 54, 12, 55, 92, 44, 41, 42, 61, 67, 19, 86, 93, 99, 24, 93, 51, 64, 10, 50, 73, 74, 14, 92, 48, 42, 23, 26, 13, 72, 43, 6, 91, 93, 68, 68, 37, 62, 21, 11, 81, 28, 58, 85, 99, 45, 63, 44, 61, 59, 96, 99, 58, 64, 82, 56, 76, 15, 100, 45, 72, 53, 36, 29, 14, 65, 82, 39, 17, 91, 60, 60, 7, 30, 54, 7, 30, 53, 50, 37, 65, 49, 43, 7, 29, 34, 23, 8, 19, 82, 22, 25, 26, 48, 26, 6, 13, 26, 29, 26, 57, 17, 83, 43, 81, 42, 39, 16, 5, 38, 35, 61, 37, 51, 9, 10, 22, 24, 86, 56, 8, 54, 2, 38, 68, 98, 88, 79, 70, 7, 27, 12, 10, 88, 90, 68, 40, 33, 94, 56, 19, 65]
last_save: 743

Gen:51
TrainFitness:1.0
TestFitness:0.3333333333333333
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(rlog(x[index]),+141896.3747).all():
      return False
    else:
      return False
  def adf1(index):
    if np.greater(x[index],-585177.0383).all():
      return False
    else:
      return False
  def adf2(index):
    if np.less(x[index],-230480.6286).all():
      return True
    else:
      return True
  def adf3(index):
    if np.less(x[index],+399844.9619).all():
      return False
    else:
      return True
  def adf4(index):
    if np.greater(x[index],+062864.3957).all():
      return False
    else:
      return True
  def adf7(index):
    if np.greater(x[index],+004807.3189).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+968.700, adf1(1)*+676.399, adf2(2)*+447.195, adf3(3)*-627.855, adf4(4)*-191.018, adf7(7)*+388.910], [1, 1, 0, 0, 1], 860.338)
result=p(); 1.0
IndLenGenome:411
IndGenome:[86, 98, 67, 23, 30, 38, 94, 27, 66, 72, 21, 24, 31, 38, 79, 56, 43, 27, 74, 47, 3, 49, 97, 61, 93, 77, 97, 39, 16, 5, 38, 35, 61, 77, 97, 10, 23, 18, 43, 47, 49, 91, 23, 76, 69, 56, 99, 24, 22, 33, 10, 54, 38, 50, 26, 22, 18, 46, 18, 94, 29, 15, 4, 95, 85, 14, 97, 83, 49, 49, 78, 4, 94, 89, 36, 91, 59, 71, 70, 9, 25, 6, 33, 10, 54, 38, 50, 26, 22, 18, 46, 64, 13, 29, 15, 47, 95, 14, 14, 97, 51, 49, 49, 78, 22, 40, 10, 54, 38, 50, 37, 3, 31, 38, 79, 56, 43, 17, 74, 47, 34, 49, 19, 56, 98, 27, 90, 80, 86, 54, 87, 6, 47, 56, 53, 99, 19, 69, 86, 53, 64, 64, 47, 51, 49, 85, 33, 13, 64, 66, 22, 47, 8, 5, 75, 23, 41, 37, 91, 59, 71, 70, 31, 78, 26, 20, 62, 33, 48, 38, 59, 71, 70, 9, 25, 73, 90, 68, 79, 31, 78, 26, 20, 43, 33, 48, 38, 69, 61, 65, 55, 95, 43, 9, 75, 82, 61, 67, 74, 33, 49, 70, 9, 25, 86, 93, 99, 24, 93, 51, 64, 10, 50, 73, 74, 14, 92, 48, 42, 23, 26, 13, 72, 43, 6, 91, 93, 68, 68, 37, 62, 21, 11, 81, 28, 58, 85, 99, 45, 63, 65, 68, 15, 100, 45, 72, 53, 36, 29, 14, 65, 82, 39, 97, 91, 60, 60, 7, 57, 0, 88, 85, 99, 83, 63, 56, 61, 59, 96, 99, 58, 64, 82, 56, 76, 15, 100, 45, 72, 53, 36, 29, 14, 65, 82, 8, 34, 91, 60, 60, 7, 48, 65, 56, 98, 21, 90, 80, 86, 54, 87, 6, 47, 56, 53, 4, 19, 69, 53, 43, 7, 99, 73, 35, 30, 14, 73, 61, 59, 96, 99, 58, 64, 82, 56, 76, 15, 100, 45, 72, 53, 36, 29, 14, 65, 82, 39, 17, 91, 60, 60, 7, 30, 54, 7, 30, 53, 50, 37, 65, 49, 43, 7, 29, 34, 23, 8, 19, 82, 22, 25, 26, 48, 26, 6, 13, 26, 29, 26, 57, 17, 83, 43, 81, 42, 39, 16, 5, 38, 35, 61, 37, 51, 9, 10, 22, 24, 86, 56, 47, 54, 2, 38, 68, 98, 88, 79, 70, 7, 27, 12, 10, 88, 90, 68, 40, 33, 94, 56, 19, 65]
last_save: 743

Gen:51
last_save: 743
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],-354812.5046).all():
      return True
    else:
      return True
  def adf1(index):
    if np.greater(np.cos(x[index]),+946409.1306).all():
      return False
    else:
      return True
  def adf2(index):
    if np.equal(np.cos(x[index]),-576281.3311).all():
      return True
    else:
      return False
  def adf3(index):
    if np.equal(np.sin(x[index]),-685144.9967).all():
      return True
    else:
      return False
  def adf4(index):
    if np.greater(x[index],-329071.3669).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(x[index],+033443.8922).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+579.635, adf1(1)*-823.357, adf2(2)*+040.172, adf3(3)*-234.259, adf4(4)*+320.390, adf7(7)*+800.269], [1, 0, 0, 1, 1], 608.886)
result=p(); 0.8333333333333334
IndLenGenome:283
IndGenome:[37, 27, 34, 87, 17, 50, 51, 84, 78, 22, 45, 16, 78, 88, 30, 77, 80, 99, 94, 39, 67, 36, 24, 98, 20, 23, 75, 98, 72, 49, 51, 62, 19, 10, 37, 87, 85, 37, 62, 32, 33, 47, 98, 41, 67, 68, 60, 30, 42, 36, 14, 55, 68, 50, 42, 87, 16, 22, 42, 38, 48, 43, 35, 13, 85, 11, 14, 53, 64, 76, 86, 84, 52, 63, 99, 34, 63, 67, 71, 90, 94, 60, 79, 17, 73, 52, 12, 29, 74, 94, 83, 68, 29, 71, 47, 85, 24, 90, 30, 30, 34, 60, 9, 5, 84, 73, 72, 40, 82, 67, 67, 82, 73, 43, 29, 13, 95, 73, 64, 13, 32, 62, 56, 88, 42, 83, 88, 69, 63, 61, 86, 78, 81, 96, 14, 71, 10, 56, 41, 23, 41, 64, 73, 24, 69, 61, 82, 65, 30, 55, 91, 59, 57, 74, 36, 90, 39, 48, 20, 77, 83, 19, 39, 26, 66, 35, 93, 36, 81, 80, 11, 97, 19, 84, 76, 31, 18, 94, 32, 15, 29, 76, 56, 69, 44, 32, 31, 19, 93, 41, 50, 53, 18, 60, 42, 44, 95, 82, 66, 80, 70, 85, 13, 7, 74, 57, 9, 82, 85, 60, 7, 19, 41, 20, 22, 99, 21, 55, 61, 91, 81, 32, 62, 99, 5, 28, 5, 63, 78, 94, 31, 3, 29, 29, 67, 14, 55, 83, 24, 77, 74, 36, 4, 59, 10, 43, 98, 10, 73, 72, 62, 85, 75, 33, 78, 70, 60, 75, 98, 94, 17, 51, 93, 58, 68, 88, 76, 95, 82, 80, 100, 48, 61, 15, 73, 75, 62, 58, 79, 97, 62, 39, 14]
last_save: 744

Gen:42
TrainFitness:1.0
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],-785885.2619).all():
      return True
    else:
      return True
  def adf1(index):
    if np.less(np.sin(x[index]),+654025.1923).all():
      return False
    else:
      return True
  def adf2(index):
    if np.greater(x[index],+008729.2947).all():
      return True
    else:
      return False
  def adf3(index):
    if np.equal(rlog(x[index]),+251003.8891).all():
      if np.equal(x[index],-031235.7487).all():
        return False
      else:
        return True
      return True
    else:
      if np.less(x[index],-356224.8930).all():
        return True
      else:
        return True
      return False
  def adf4(index):
    if np.equal(x[index],+121596.2985).all():
      return True
    else:
      return True
  def adf7(index):
    if np.equal(x[index],+763338.7927).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+925.139, adf1(1)*+408.386, adf2(2)*+794.781, adf3(3)*+154.818, adf4(4)*+397.164, adf7(7)*+288.351], [0, 1, 1, 0, 0], 802.588)
result=p(); 1.0
IndLenGenome:263
IndGenome:[83, 36, 28, 59, 84, 71, 13, 67, 7, 27, 28, 95, 98, 78, 75, 82, 6, 1, 69, 14, 96, 70, 9, 82, 72, 90, 88, 96, 84, 46, 85, 74, 70, 52, 25, 11, 39, 12, 3, 77, 62, 66, 29, 72, 85, 55, 10, 16, 30, 10, 68, 27, 52, 89, 12, 99, 64, 17, 24, 25, 70, 12, 27, 65, 88, 76, 4, 88, 33, 62, 45, 61, 80, 80, 73, 88, 28, 69, 31, 47, 5, 97, 31, 25, 95, 50, 13, 21, 82, 13, 85, 87, 94, 48, 67, 45, 76, 64, 91, 7, 53, 94, 57, 71, 73, 75, 76, 32, 32, 84, 38, 19, 3, 20, 86, 30, 87, 10, 75, 95, 43, 46, 20, 24, 71, 72, 71, 35, 89, 86, 12, 59, 78, 75, 42, 66, 72, 39, 92, 23, 93, 32, 60, 37, 66, 63, 53, 63, 48, 97, 59, 92, 97, 75, 71, 10, 47, 59, 38, 45, 39, 72, 45, 21, 83, 29, 28, 86, 70, 34, 70, 58, 53, 68, 6, 95, 34, 75, 77, 29, 54, 17, 68, 21, 97, 40, 69, 61, 95, 54, 78, 61, 18, 56, 72, 99, 53, 49, 77, 21, 56, 14, 54, 16, 37, 2, 18, 28, 63, 35, 41, 56, 16, 53, 95, 68, 10, 97, 98, 50, 82, 55, 78, 38, 93, 1, 17, 44, 80, 32, 72, 24, 61, 17, 18, 79, 16, 79, 62, 95, 23, 93, 78, 45, 83, 9, 37, 47, 42, 8, 10, 44, 85, 29, 6, 24, 2, 66, 54, 67, 58, 21, 84]
last_save: 744

Gen:42
last_save: 744
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(rlog(x[index]),+155200.3468).all():
      return False
    else:
      return False
  def adf1(index):
    if np.greater(np.cos(x[index]),+117916.7145).all():
      return True
    else:
      return False
  def adf2(index):
    if np.less(x[index],-169481.9256).all():
      return True
    else:
      return False
  def adf3(index):
    if np.greater(np.cos(x[index]),+264781.7652).all():
      return False
    else:
      return False
  def adf4(index):
    if np.equal(x[index],+852991.6550).all():
      return False
    else:
      return True
  def adf7(index):
    if np.greater(x[index],+681168.0823).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+840.012, adf1(1)*+903.695, adf2(2)*-318.040, adf3(3)*-536.893, adf4(4)*-142.665, adf7(7)*+385.839], [0, 0, 0, 1, 0], 865.190)
result=p(); 0.6666666666666666
IndLenGenome:283
IndGenome:[77, 41, 85, 17, 22, 50, 89, 77, 52, 88, 36, 62, 28, 43, 28, 74, 93, 34, 44, 26, 38, 7, 36, 75, 25, 42, 55, 12, 35, 49, 64, 88, 23, 85, 74, 49, 39, 52, 35, 90, 78, 31, 16, 58, 48, 81, 63, 91, 29, 63, 41, 44, 78, 60, 41, 39, 67, 98, 24, 56, 36, 48, 8, 88, 71, 85, 41, 99, 53, 58, 83, 50, 72, 19, 62, 30, 88, 54, 70, 36, 39, 27, 29, 33, 71, 87, 76, 79, 25, 69, 79, 33, 87, 21, 88, 20, 71, 17, 58, 92, 46, 53, 1, 73, 15, 74, 51, 10, 38, 97, 31, 86, 23, 59, 11, 43, 49, 31, 50, 33, 41, 55, 61, 16, 75, 28, 44, 64, 70, 44, 61, 19, 59, 16, 96, 43, 62, 50, 32, 9, 80, 92, 29, 38, 91, 48, 36, 58, 37, 73, 21, 76, 55, 97, 56, 75, 77, 98, 65, 37, 55, 60, 92, 30, 70, 39, 18, 66, 40, 34, 47, 35, 23, 65, 84, 51, 15, 70, 50, 42, 28, 45, 89, 8, 94, 71, 50, 46, 82, 98, 54, 51, 41, 18, 17, 51, 78, 21, 11, 4, 86, 4, 43, 82, 52, 1, 40, 78, 36, 19, 7, 77, 2, 26, 60, 16, 77, 94, 11, 37, 54, 33, 12, 74, 2, 36, 80, 34, 0, 26, 54, 67, 98, 91, 27, 24, 9, 75, 72, 9, 68, 9, 59, 12, 72, 84, 18, 80, 93, 51, 46, 80, 83, 88, 23, 0, 30, 3, 11, 74, 50, 75, 100, 49, 86, 22, 39, 96, 59, 31, 74, 92, 53, 36, 80, 42, 51, 28, 97, 28, 30, 55, 65]
last_save: 745

Gen:15
TrainFitness:0.8333333333333334
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],-735714.8735).all():
      return True
    else:
      return True
  def adf1(index):
    if np.greater(x[index],-907406.4819).all():
      if np.greater(x[index],-898329.1992).all():
        if np.equal(x[index],+527170.9312).all():
          return True
        else:
          return False
        return True
      else:
        if np.less(x[index],-485658.8197).all():
          return True
        else:
          return False
        return True
      return False
    else:
      if np.less(rlog(x[index]),+375015.7903).all():
        return False
      else:
        return True
      return False
  def adf2(index):
    if np.greater(x[index],+014707.7628).all():
      return True
    else:
      return False
  def adf3(index):
    if np.greater(np.sin(x[index]),-717590.8034).all():
      return True
    else:
      return False
  def adf4(index):
    if np.less(x[index],+540877.8992).all():
      return False
    else:
      return False
  def adf7(index):
    if np.equal(sigmoid(x[index]),+518938.0769).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*-643.447, adf1(1)*-982.244, adf2(2)*-795.844, adf3(3)*+700.083, adf4(4)*-934.055, adf7(7)*+144.305], [1, 0, 1, 1, 1], 215.270)
result=p(); 0.8333333333333334
IndLenGenome:336
IndGenome:[73, 92, 1, 81, 4, 71, 28, 11, 9, 7, 43, 35, 87, 61, 94, 38, 97, 23, 95, 26, 16, 30, 90, 45, 99, 71, 47, 27, 96, 79, 10, 27, 74, 70, 76, 24, 68, 21, 19, 2, 14, 27, 83, 48, 87, 85, 88, 49, 18, 13, 82, 69, 41, 59, 9, 52, 41, 68, 97, 75, 42, 38, 25, 32, 7, 41, 37, 20, 99, 63, 71, 2, 34, 47, 10, 77, 19, 11, 17, 51, 93, 64, 18, 65, 16, 45, 48, 58, 61, 79, 57, 84, 21, 82, 97, 1, 28, 52, 88, 39, 64, 96, 3, 27, 75, 50, 21, 45, 47, 69, 80, 13, 71, 42, 45, 55, 67, 36, 33, 92, 48, 47, 20, 41, 4, 47, 90, 37, 57, 26, 72, 18, 42, 21, 76, 77, 48, 92, 78, 38, 25, 32, 7, 41, 37, 75, 99, 60, 78, 80, 13, 54, 88, 61, 11, 13, 13, 11, 29, 56, 95, 45, 4, 20, 18, 27, 77, 58, 49, 89, 2, 45, 21, 5, 75, 41, 12, 51, 19, 48, 82, 45, 21, 78, 69, 93, 88, 60, 37, 36, 79, 36, 86, 27, 53, 66, 93, 22, 26, 74, 13, 94, 44, 7, 79, 91, 16, 9, 98, 32, 72, 64, 44, 52, 57, 41, 57, 29, 15, 88, 44, 84, 70, 92, 76, 57, 10, 70, 80, 38, 43, 65, 61, 77, 59, 83, 34, 30, 15, 45, 24, 44, 77, 61, 64, 34, 3, 70, 65, 5, 5, 2, 21, 61, 27, 61, 32, 91, 55, 92, 37, 10, 38, 45, 21, 7, 58, 47, 19, 95, 18, 71, 20, 34, 46, 67, 53, 62, 71, 43, 78, 58, 5, 46, 23, 85, 40, 15, 0, 84, 33, 75, 20, 67, 13, 96, 71, 21, 98, 72, 5, 42, 96, 42, 10, 23, 77, 22, 39, 40, 50, 76, 45, 15, 79, 3, 66, 68, 68, 86, 9, 14, 18, 1, 88, 30, 14, 89, 84, 93, 49, 53, 9, 10, 96, 81]
last_save: 745

Gen:242
TrainFitness:1.0
TestFitness:0.5
MaxGenLen:560
Individual: def p():
  def adf0(index):
    if np.less(rlog(x[index]),-357348.0956).all():
      return True
    else:
      return False
  def adf1(index):
    if np.greater(x[index],+004707.7628).all():
      return True
    else:
      return False
  def adf2(index):
    if np.equal(np.cos(x[index]),+128946.3750).all():
      return True
    else:
      return False
  def adf3(index):
    if np.less(x[index],-688216.5820).all():
      return True
    else:
      return False
  def adf4(index):
    if np.equal(x[index],+470791.7134).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(np.tanh(x[index]),+214707.2628).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+852.717, adf1(1)*-803.481, adf2(2)*-199.554, adf3(3)*+783.925, adf4(4)*-121.982, adf7(7)*-938.076], [0, 0, 1, 1, 0], 079.171)
result=p(); 1.0
IndLenGenome:465
IndGenome:[73, 92, 1, 81, 4, 36, 28, 11, 9, 7, 43, 35, 87, 23, 94, 38, 70, 89, 95, 26, 42, 45, 55, 67, 36, 33, 29, 48, 47, 20, 60, 4, 47, 90, 37, 57, 26, 72, 18, 42, 21, 82, 69, 41, 80, 13, 54, 8, 61, 11, 52, 88, 39, 64, 96, 3, 27, 75, 50, 48, 47, 20, 41, 4, 47, 90, 37, 57, 26, 48, 18, 42, 21, 76, 35, 48, 92, 60, 32, 7, 41, 37, 20, 99, 63, 84, 2, 34, 47, 10, 77, 19, 1, 17, 51, 93, 64, 18, 65, 54, 45, 48, 58, 32, 92, 48, 47, 22, 41, 4, 47, 90, 37, 82, 26, 12, 18, 42, 21, 76, 77, 48, 92, 77, 38, 25, 32, 7, 41, 37, 75, 99, 60, 78, 80, 13, 54, 88, 61, 11, 13, 13, 11, 29, 59, 95, 45, 4, 20, 18, 27, 77, 58, 63, 89, 2, 45, 21, 5, 75, 41, 12, 51, 19, 48, 82, 45, 21, 78, 69, 93, 88, 60, 37, 36, 79, 36, 86, 27, 21, 34, 47, 10, 77, 19, 11, 17, 51, 93, 64, 18, 65, 16, 45, 48, 58, 78, 80, 13, 54, 88, 61, 2, 34, 47, 10, 77, 32, 7, 41, 37, 75, 99, 100, 78, 80, 49, 54, 63, 67, 11, 13, 13, 11, 29, 56, 95, 45, 4, 20, 18, 27, 77, 58, 49, 89, 2, 45, 21, 5, 75, 41, 86, 51, 19, 48, 82, 45, 21, 78, 69, 93, 88, 60, 37, 36, 79, 36, 86, 27, 53, 66, 93, 47, 90, 64, 18, 65, 16, 45, 24, 58, 61, 79, 57, 84, 21, 82, 97, 1, 54, 52, 88, 39, 64, 96, 3, 27, 75, 11, 21, 45, 47, 69, 80, 13, 71, 42, 45, 55, 67, 36, 33, 92, 48, 47, 20, 41, 4, 47, 57, 43, 2, 71, 47, 10, 77, 19, 3, 17, 51, 93, 64, 18, 53, 66, 93, 22, 26, 74, 13, 94, 44, 7, 79, 91, 16, 9, 98, 32, 72, 64, 44, 52, 57, 41, 57, 29, 15, 88, 44, 84, 70, 92, 76, 57, 10, 70, 80, 38, 43, 65, 61, 77, 59, 83, 34, 30, 15, 45, 24, 44, 77, 61, 64, 34, 3, 70, 65, 5, 5, 2, 21, 61, 27, 61, 89, 59, 45, 21, 70, 75, 41, 12, 51, 92, 48, 82, 95, 18, 71, 20, 34, 66, 67, 53, 62, 71, 43, 78, 58, 5, 46, 23, 85, 40, 15, 0, 84, 33, 75, 20, 67, 13, 96, 71, 21, 98, 72, 5, 42, 96, 42, 10, 23, 77, 22, 39, 40, 50, 76, 45, 15, 79, 3, 66, 68, 68, 86, 9, 14, 18, 1, 88, 30, 14, 89, 84, 93, 49, 53, 9, 10, 96, 81]
last_save: 745

Gen:242
last_save: 745
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(rlog(x[index]),-248320.8005).all():
      return True
    else:
      return True
  def adf1(index):
    if np.greater(x[index],+391858.1914).all():
      return True
    else:
      return False
  def adf2(index):
    if np.equal(x[index],+765741.4212).all():
      return False
    else:
      return False
  def adf3(index):
    if np.greater(x[index],-513903.4414).all():
      return False
    else:
      return False
  def adf4(index):
    if np.greater(x[index],-254602.1893).all():
      return True
    else:
      return False
  def adf7(index):
    if np.equal(x[index],-839523.9105).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-985.630, adf1(1)*-121.933, adf2(2)*+181.480, adf3(3)*+789.885, adf4(4)*-534.626, adf7(7)*+370.518], [1, 1, 0, 0, 0], 301.461)
result=p(); 0.6666666666666666
IndLenGenome:280
IndGenome:[66, 29, 89, 46, 67, 65, 19, 74, 25, 28, 98, 41, 89, 6, 12, 29, 41, 91, 83, 54, 17, 23, 73, 23, 54, 12, 23, 42, 71, 15, 70, 81, 62, 25, 25, 65, 62, 51, 98, 28, 88, 72, 90, 32, 24, 66, 87, 16, 91, 61, 44, 61, 17, 21, 64, 23, 73, 86, 64, 90, 10, 99, 12, 15, 65, 15, 58, 93, 33, 41, 50, 74, 37, 69, 55, 73, 76, 42, 42, 12, 42, 23, 33, 73, 4, 52, 24, 40, 71, 31, 98, 40, 57, 99, 73, 48, 56, 12, 41, 96, 62, 83, 36, 69, 45, 78, 11, 81, 93, 67, 38, 14, 39, 55, 51, 97, 20, 63, 31, 21, 46, 45, 36, 5, 49, 88, 43, 12, 58, 74, 29, 36, 67, 7, 20, 36, 74, 57, 57, 23, 43, 54, 56, 46, 30, 36, 99, 38, 21, 85, 84, 40, 83, 21, 64, 98, 71, 33, 29, 91, 92, 57, 59, 58, 51, 61, 29, 33, 71, 45, 95, 5, 48, 85, 16, 49, 31, 73, 64, 58, 53, 85, 38, 78, 30, 77, 21, 69, 37, 91, 92, 79, 59, 64, 57, 41, 0, 46, 41, 25, 8, 15, 8, 84, 71, 46, 64, 38, 53, 19, 99, 19, 90, 48, 73, 87, 21, 24, 55, 68, 7, 56, 95, 91, 52, 91, 79, 63, 35, 62, 76, 18, 37, 38, 23, 60, 36, 67, 9, 54, 74, 58, 78, 95, 11, 35, 40, 49, 27, 5, 81, 98, 67, 40, 51, 72, 19, 7, 28, 46, 6, 90, 73, 54, 32, 37, 85, 97, 81, 62, 14, 32, 47, 63, 26, 75, 42, 43, 8, 7]
last_save: 746

Gen:10
TrainFitness:0.8333333333333334
TestFitness:0.5
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(np.cos(x[index]),+113191.0684).all():
      return True
    else:
      return True
  def adf1(index):
    if np.equal(sigmoid(x[index]),+550858.7108).all():
      return True
    else:
      return False
  def adf2(index):
    if np.greater(np.tanh(x[index]),+128854.3348).all():
      return True
    else:
      return True
  def adf3(index):
    if np.equal(x[index],-647558.5906).all():
      return False
    else:
      return True
  def adf4(index):
    if np.greater(x[index],+018302.0132).all():
      return False
    else:
      return True
  def adf7(index):
    if np.equal(x[index],+691337.0813).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*-204.234, adf1(1)*+633.114, adf2(2)*-887.222, adf3(3)*-439.574, adf4(4)*-997.630, adf7(7)*+562.834], [1, 0, 0, 1, 0], 245.721)
result=p(); 0.8333333333333334
IndLenGenome:221
IndGenome:[18, 24, 56, 95, 54, 40, 25, 90, 26, 94, 101, 81, 13, 51, 49, 21, 90, 56, 18, 84, 78, 52, 69, 45, 62, 34, 69, 30, 4, 95, 85, 35, 30, 98, 35, 28, 57, 91, 70, 28, 96, 93, 99, 59, 36, 86, 20, 83, 32, 57, 71, 72, 18, 58, 25, 94, 43, 63, 94, 48, 54, 94, 92, 5, 26, 29, 11, 83, 81, 86, 44, 47, 75, 15, 58, 5, 39, 20, 46, 21, 88, 41, 83, 57, 99, 44, 68, 17, 70, 71, 48, 23, 10, 12, 90, 61, 43, 62, 65, 76, 15, 85, 35, 75, 11, 4, 12, 96, 19, 41, 93, 13, 57, 10, 98, 81, 43, 92, 90, 42, 54, 90, 61, 12, 62, 10, 24, 52, 83, 54, 48, 10, 89, 36, 53, 43, 71, 71, 34, 44, 53, 59, 38, 98, 57, 82, 12, 72, 53, 99, 96, 14, 33, 59, 85, 37, 4, 14, 35, 1, 79, 69, 87, 36, 73, 40, 3, 18, 28, 65, 66, 42, 18, 43, 84, 95, 61, 100, 84, 53, 36, 41, 92, 94, 95, 87, 72, 51, 39, 18, 30, 4, 7, 64, 55, 83, 29, 64, 13, 70, 87, 12, 1, 29, 56, 59, 40, 1, 53, 42, 81, 51, 61, 73, 69, 33, 42, 72, 52, 73, 64]
last_save: 746

Gen:889
TrainFitness:1.0
TestFitness:0.5
MaxGenLen:755
Individual: def p():
  def adf0(index):
    if np.greater(np.cos(x[index]),+117191.0684).all():
      return True
    else:
      return True
  def adf1(index):
    if np.equal(sigmoid(x[index]),+550858.6108).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(x[index],+008302.0132).all():
      return False
    else:
      return True
  def adf3(index):
    if np.equal(x[index],+691337.0813).all():
      return True
    else:
      return True
  def adf4(index):
    if np.less(np.tanh(x[index]),+348096.3086).all():
      if np.greater(x[index],+327328.8842).all():
        return False
      else:
        return True
      return True
    else:
      if np.less(psqrt(x[index]),+395748.4425).all():
        return True
      else:
        return False
      return False
  def adf7(index):
    if np.equal(sigmoid(x[index]),-590618.1379).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+020.032, adf1(1)*+302.013, adf2(2)*-555.514, adf3(3)*-256.555, adf4(4)*-655.591, adf7(7)*+913.370], [1, 1, 0, 0, 0], 012.204)
result=p(); 1.0
IndLenGenome:422
IndGenome:[18, 24, 56, 95, 54, 40, 25, 90, 26, 94, 101, 81, 77, 51, 49, 21, 90, 56, 18, 84, 78, 52, 69, 45, 62, 34, 69, 30, 4, 95, 85, 35, 30, 98, 35, 28, 96, 91, 70, 28, 95, 93, 99, 59, 57, 99, 44, 68, 17, 70, 100, 48, 23, 10, 12, 90, 61, 43, 62, 65, 76, 15, 65, 35, 75, 11, 4, 12, 96, 19, 41, 93, 13, 57, 10, 98, 81, 43, 92, 90, 45, 54, 90, 61, 12, 62, 10, 24, 52, 83, 54, 48, 10, 89, 36, 53, 70, 58, 96, 93, 99, 25, 21, 86, 20, 83, 32, 57, 3, 72, 18, 58, 38, 94, 62, 63, 94, 48, 5, 94, 92, 5, 99, 96, 74, 33, 59, 85, 37, 4, 48, 54, 94, 92, 5, 26, 29, 11, 83, 81, 86, 44, 33, 75, 15, 58, 5, 39, 20, 46, 21, 88, 41, 83, 57, 99, 44, 68, 17, 70, 71, 48, 23, 10, 12, 90, 60, 53, 2, 59, 36, 86, 23, 10, 12, 90, 61, 43, 62, 65, 77, 15, 85, 35, 75, 11, 4, 12, 61, 43, 62, 65, 76, 15, 85, 35, 75, 11, 76, 76, 15, 85, 35, 19, 11, 4, 12, 96, 39, 41, 93, 13, 57, 10, 98, 81, 43, 92, 90, 42, 54, 90, 61, 12, 62, 10, 24, 52, 83, 54, 48, 10, 89, 36, 53, 43, 71, 71, 34, 44, 53, 59, 38, 98, 57, 82, 12, 72, 53, 99, 96, 14, 33, 59, 85, 37, 4, 14, 35, 1, 79, 69, 87, 36, 73, 40, 3, 18, 28, 65, 66, 89, 18, 43, 84, 95, 5, 78, 20, 46, 21, 88, 41, 83, 57, 99, 44, 68, 17, 70, 71, 48, 23, 10, 12, 90, 61, 43, 62, 65, 76, 15, 85, 35, 75, 11, 4, 12, 96, 19, 41, 93, 13, 57, 10, 98, 81, 43, 92, 90, 42, 54, 90, 61, 12, 62, 10, 24, 52, 83, 54, 48, 10, 89, 36, 53, 43, 71, 71, 34, 44, 53, 59, 38, 98, 57, 82, 12, 72, 53, 99, 96, 14, 33, 59, 85, 37, 4, 14, 35, 1, 79, 69, 87, 36, 73, 40, 3, 18, 28, 65, 66, 42, 18, 43, 84, 95, 61, 100, 84, 53, 36, 41, 92, 94, 95, 87, 72, 51, 39, 18, 30, 4, 7, 64, 55, 83, 29, 64, 13, 70, 87, 12, 1, 29, 56, 59, 40, 1, 53, 42, 81, 51, 61, 73, 69, 33, 42, 72, 52, 73, 64]
last_save: 746

Gen:889
last_save: 746
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.16666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(sigmoid(x[index]),-074547.9306).all():
      return True
    else:
      return True
  def adf1(index):
    if np.greater(x[index],+016461.0158).all():
      return False
    else:
      return True
  def adf2(index):
    if np.greater(np.sin(x[index]),-029232.5436).all():
      return True
    else:
      return True
  def adf3(index):
    if np.less(x[index],-131023.1486).all():
      return False
    else:
      return True
  def adf4(index):
    if np.less(np.cos(x[index]),+036811.3963).all():
      return False
    else:
      return True
  def adf7(index):
    if np.equal(x[index],+241834.3964).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*-610.469, adf1(1)*+982.885, adf2(2)*+091.677, adf3(3)*-808.296, adf4(4)*+512.791, adf7(7)*+701.599], [0, 1, 0, 0, 0], 017.218)
result=p(); 0.8333333333333334
IndLenGenome:283
IndGenome:[98, 33, 61, 52, 3, 46, 20, 61, 85, 23, 35, 80, 41, 47, 2, 60, 84, 37, 43, 94, 15, 80, 55, 92, 87, 51, 77, 50, 52, 24, 98, 62, 74, 95, 86, 75, 28, 80, 38, 89, 24, 91, 89, 31, 18, 68, 91, 48, 63, 11, 65, 30, 90, 30, 66, 27, 97, 39, 87, 51, 85, 72, 60, 89, 41, 70, 22, 41, 27, 79, 66, 13, 49, 22, 12, 37, 83, 14, 91, 20, 14, 81, 41, 70, 61, 79, 93, 36, 83, 75, 86, 19, 85, 40, 15, 41, 14, 54, 61, 17, 86, 23, 24, 38, 36, 99, 83, 12, 12, 45, 60, 48, 78, 37, 11, 28, 30, 59, 72, 87, 48, 19, 55, 32, 36, 45, 49, 70, 38, 37, 40, 60, 33, 35, 14, 82, 54, 96, 98, 72, 26, 34, 16, 12, 60, 97, 41, 69, 23, 60, 39, 22, 64, 12, 34, 11, 88, 46, 87, 19, 87, 58, 69, 60, 29, 21, 79, 50, 10, 49, 29, 15, 17, 56, 46, 30, 25, 37, 63, 40, 36, 48, 91, 94, 11, 83, 11, 72, 73, 64, 48, 93, 3, 0, 68, 52, 69, 74, 64, 99, 27, 13, 23, 64, 46, 66, 11, 55, 47, 41, 18, 47, 46, 90, 43, 29, 34, 58, 0, 83, 61, 62, 73, 20, 36, 70, 100, 54, 8, 48, 15, 92, 83, 8, 28, 4, 89, 62, 45, 94, 3, 25, 5, 79, 98, 90, 26, 28, 85, 42, 12, 59, 56, 51, 27, 41, 82, 4, 40, 39, 96, 59, 13, 24, 91, 17, 72, 40, 8, 12, 57, 77, 81, 36, 97, 100, 94, 30, 29, 22, 19, 98, 30]
last_save: 747

Gen:96
TrainFitness:1.0
TestFitness:0.3333333333333333
MaxGenLen:515
Individual: def p():
  def adf0(index):
    if np.equal(x[index],+437520.3567).all():
      if np.equal(np.cos(x[index]),+194858.9626).all():
        return False
      else:
        return True
      return True
    else:
      if np.equal(np.sin(x[index]),+945095.8833).all():
        return False
      else:
        return False
      return False
  def adf1(index):
    if np.less(sigmoid(x[index]),+176889.0871).all():
      return False
    else:
      return True
  def adf2(index):
    if np.greater(x[index],-908901.5872).all():
      return False
    else:
      return True
  def adf3(index):
    if np.greater(x[index],+006648.4088).all():
      return True
    else:
      return False
  def adf4(index):
    if np.less(sigmoid(x[index]),-911503.9622).all():
      return False
    else:
      return False
  def adf7(index):
    if np.less(np.cos(x[index]),+395895.8358).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*-456.205, adf1(1)*-459.956, adf2(2)*-950.514, adf3(3)*-634.869, adf4(4)*+508.871, adf7(7)*+278.952], [1, 1, 0, 0, 1], 035.424)
result=p(); 1.0
IndLenGenome:373
IndGenome:[28, 14, 22, 32, 73, 68, 15, 91, 76, 92, 54, 3, 87, 95, 92, 20, 23, 55, 26, 57, 35, 80, 62, 25, 18, 24, 64, 71, 29, 14, 38, 5, 48, 59, 46, 92, 36, 49, 26, 80, 17, 29, 76, 48, 54, 36, 84, 99, 4, 25, 30, 9, 15, 78, 38, 93, 53, 35, 91, 3, 25, 63, 67, 16, 93, 11, 24, 66, 1, 27, 6, 48, 28, 59, 30, 48, 17, 41, 97, 86, 95, 75, 30, 85, 52, 61, 58, 49, 0, 58, 19, 20, 31, 75, 78, 57, 72, 51, 40, 74, 3, 30, 55, 76, 20, 85, 10, 50, 86, 16, 14, 58, 94, 60, 38, 68, 36, 49, 30, 67, 25, 72, 93, 37, 53, 33, 29, 21, 71, 5, 90, 33, 79, 36, 62, 92, 65, 57, 72, 51, 40, 86, 49, 35, 80, 39, 93, 69, 35, 68, 29, 65, 98, 23, 35, 68, 41, 47, 2, 83, 84, 37, 43, 94, 15, 86, 32, 70, 55, 12, 95, 45, 84, 25, 39, 79, 85, 36, 83, 75, 86, 19, 85, 40, 15, 41, 14, 54, 61, 17, 86, 23, 24, 38, 36, 99, 83, 12, 12, 45, 60, 48, 78, 37, 11, 28, 30, 59, 72, 87, 48, 19, 55, 32, 36, 45, 49, 70, 38, 37, 40, 60, 33, 35, 14, 82, 54, 96, 98, 72, 26, 34, 16, 12, 60, 97, 41, 69, 23, 60, 39, 22, 64, 12, 34, 11, 88, 46, 87, 19, 87, 58, 69, 60, 29, 21, 79, 50, 10, 49, 29, 15, 17, 56, 46, 30, 25, 37, 63, 40, 36, 48, 91, 94, 11, 83, 11, 72, 73, 64, 48, 93, 3, 0, 68, 52, 69, 74, 64, 99, 27, 13, 23, 64, 46, 66, 11, 55, 47, 41, 18, 47, 46, 90, 43, 29, 34, 58, 0, 83, 61, 62, 73, 20, 36, 70, 100, 54, 8, 48, 15, 92, 83, 8, 28, 4, 89, 62, 45, 94, 3, 25, 5, 79, 98, 90, 26, 28, 85, 42, 12, 59, 56, 51, 27, 41, 82, 4, 40, 39, 96, 59, 13, 24, 91, 17, 72, 40, 8, 12, 57, 77, 81, 36, 97, 100, 94, 30, 29, 22, 19, 98, 30]
last_save: 747

Gen:96
last_save: 747
Exit:TrueFalseFalse