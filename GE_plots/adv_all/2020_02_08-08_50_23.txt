Dataset:Spiral/Full.csv
FS:False
Seed:1236
Size:3

Gen:1
TrainFitness:1.0
TestFitness:0.5555555555555556
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(psqrt(x[index]),-751638.3315).all():
      return False
    else:
      return True
  def adf1(index):
    if np.less(x[index],+426492.1553).all():
      return False
    else:
      return False
  def adf2(index):
    if np.less(x[index],-240898.2442).all():
      return False
    else:
      return True
  def adf3(index):
    if np.greater(x[index],+865035.1440).all():
      return True
    else:
      return True
  def adf4(index):
    if np.less(x[index],-512715.8853).all():
      return True
    else:
      return False
  def adf5(index):
    if np.greater(x[index],-713989.5003).all():
      return False
    else:
      return True
  def adf6(index):
    if np.greater(x[index],-999427.5409).all():
      return True
    else:
      return True
  def adf7(index):
    if np.less(x[index],-077811.4714).all():
      return False
    else:
      return False
  def adf8(index):
    if np.equal(x[index],-129162.3513).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+633.815, adf1(1)*-138.037, adf2(2)*-812.313, adf3(3)*-577.535, adf4(4)*-868.489, adf5(5)*+498.113, adf6(6)*-180.429, adf7(7)*+353.202, adf8(8)*+056.837], [0, 1, 0, 1, 1, 1, 0, 0], 299.694)
result=p(); 1.0
IndLenGenome:411
IndGenome:[8, 95, 20, 92, 63, 41, 81, 98, 75, 43, 5, 91, 56, 7, 92, 72, 92, 82, 17, 72, 75, 67, 22, 93, 95, 59, 21, 23, 95, 10, 2, 97, 98, 50, 23, 65, 41, 7, 16, 94, 38, 87, 83, 17, 35, 55, 79, 90, 74, 9, 60, 3, 75, 35, 66, 68, 73, 81, 52, 9, 47, 59, 86, 84, 14, 91, 73, 18, 35, 53, 97, 21, 90, 99, 47, 76, 27, 97, 93, 12, 95, 92, 90, 71, 69, 65, 97, 24, 27, 18, 79, 75, 46, 79, 62, 65, 19, 71, 53, 28, 30, 25, 87, 81, 88, 78, 50, 42, 11, 34, 56, 31, 13, 49, 41, 11, 91, 83, 87, 85, 74, 94, 59, 55, 73, 49, 17, 78, 51, 26, 49, 49, 64, 39, 84, 23, 49, 97, 31, 58, 69, 93, 69, 46, 81, 87, 93, 83, 21, 22, 27, 72, 32, 87, 59, 70, 97, 21, 10, 54, 18, 9, 98, 84, 84, 33, 42, 42, 45, 25, 83, 62, 39, 88, 54, 29, 21, 37, 57, 1, 64, 75, 5, 83, 77, 93, 28, 31, 31, 48, 70, 48, 85, 57, 43, 47, 25, 38, 63, 33, 81, 51, 23, 9, 9, 4, 13, 21, 42, 12, 70, 44, 58, 48, 1, 88, 60, 30, 92, 45, 15, 58, 41, 40, 83, 92, 97, 23, 79, 62, 46, 60, 71, 58, 47, 73, 19, 39, 62, 72, 76, 76, 43, 48, 70, 63, 11, 76, 27, 75, 43, 88, 17, 93, 44, 35, 72, 69, 33, 66, 11, 19, 25, 44, 44, 88, 92, 51, 71, 14, 49, 98, 21, 43, 18, 63, 51, 37, 16, 36, 7, 80, 29, 82, 20, 99, 50, 57, 4, 100, 90, 63, 62, 53, 65, 91, 31, 3, 61, 22, 6, 36, 4, 4, 86, 95, 32, 31, 28, 90, 82, 5, 7, 23, 42, 0, 97, 57, 66, 80, 69, 26, 23, 25, 95, 13, 21, 3, 75, 67, 70, 28, 21, 37, 40, 37, 30, 81, 26, 93, 62, 80, 13, 45, 2, 54, 11, 61, 26, 22, 3, 85, 43, 19, 39, 24, 69, 69, 48, 57, 24, 1, 9, 23, 20, 53, 44, 86, 85, 6, 90, 35, 94, 78, 71, 38, 46, 8, 17, 66, 38, 7, 79, 56, 22, 19, 82, 39, 44, 44, 84, 37, 74, 34, 26, 21, 19, 14, 91, 33, 98, 11, 46, 65, 98, 98, 38, 14, 99, 40, 47]
last_save: 321

Gen:1
last_save: 321
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.8888888888888888
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(psqrt(x[index]),-631933.5935).all():
      return False
    else:
      return False
  def adf1(index):
    if np.equal(x[index],+086578.8365).all():
      return False
    else:
      return False
  def adf2(index):
    if np.equal(x[index],-135623.8723).all():
      return True
    else:
      return True
  def adf3(index):
    if np.less(x[index],-481008.3975).all():
      return False
    else:
      return True
  def adf4(index):
    if np.greater(psqrt(x[index]),+215345.8756).all():
      return False
    else:
      return True
  def adf5(index):
    if np.equal(x[index],+695503.2321).all():
      return False
    else:
      return True
  def adf6(index):
    if np.greater(np.sin(x[index]),-220034.3754).all():
      return False
    else:
      return False
  def adf7(index):
    if np.less(psqrt(x[index]),+920840.5366).all():
      return False
    else:
      return False
  def adf8(index):
    if np.greater(x[index],+010871.1674).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+018.537, adf1(1)*+746.767, adf2(2)*-039.803, adf3(3)*-529.685, adf4(4)*-254.657, adf5(5)*-494.228, adf6(6)*+695.289, adf7(7)*+875.819, adf8(8)*+705.385], [0, 0, 0, 0, 1, 1, 1, 0], 266.777)
result=p(); 0.6666666666666666
IndLenGenome:415
IndGenome:[53, 77, 50, 85, 87, 79, 79, 68, 18, 83, 90, 4, 69, 35, 77, 15, 33, 47, 47, 90, 85, 9, 22, 84, 51, 90, 36, 60, 36, 47, 87, 70, 57, 37, 84, 98, 42, 35, 28, 78, 36, 15, 76, 62, 52, 51, 47, 92, 77, 97, 50, 44, 4, 19, 47, 47, 83, 71, 31, 7, 47, 14, 87, 93, 33, 55, 37, 47, 17, 52, 91, 12, 25, 72, 56, 82, 32, 34, 99, 99, 66, 41, 65, 21, 33, 36, 28, 32, 92, 18, 38, 24, 63, 13, 16, 70, 2, 22, 23, 67, 76, 43, 96, 28, 58, 57, 61, 55, 15, 37, 71, 55, 82, 10, 35, 62, 91, 58, 13, 69, 46, 83, 60, 66, 15, 75, 40, 54, 56, 85, 69, 73, 65, 22, 44, 13, 81, 52, 73, 86, 43, 39, 97, 49, 34, 60, 54, 23, 50, 79, 29, 57, 37, 15, 99, 55, 31, 11, 8, 34, 58, 84, 75, 88, 27, 50, 86, 57, 99, 55, 88, 61, 89, 16, 16, 13, 90, 91, 58, 54, 48, 20, 40, 14, 35, 17, 63, 27, 86, 32, 20, 28, 98, 54, 27, 90, 86, 33, 97, 48, 14, 13, 11, 70, 54, 33, 8, 77, 19, 71, 38, 73, 7, 71, 92, 36, 45, 62, 88, 55, 45, 88, 2, 63, 11, 30, 46, 94, 25, 36, 18, 72, 27, 95, 95, 89, 57, 12, 95, 53, 70, 97, 64, 66, 55, 51, 34, 26, 43, 75, 53, 52, 43, 78, 83, 45, 17, 53, 83, 78, 16, 63, 78, 21, 10, 69, 32, 63, 95, 74, 37, 12, 55, 32, 12, 76, 61, 14, 79, 3, 28, 0, 17, 50, 36, 55, 34, 45, 91, 30, 10, 42, 69, 93, 12, 75, 90, 14, 3, 49, 31, 91, 15, 62, 71, 13, 95, 3, 3, 25, 71, 95, 25, 23, 5, 89, 14, 37, 53, 26, 16, 7, 80, 36, 100, 74, 74, 66, 25, 17, 64, 79, 93, 51, 35, 16, 23, 55, 30, 54, 10, 57, 61, 26, 54, 9, 78, 0, 93, 45, 97, 46, 23, 75, 70, 19, 81, 30, 50, 16, 12, 82, 13, 2, 89, 79, 97, 24, 40, 2, 60, 39, 83, 27, 2, 46, 73, 80, 63, 43, 40, 81, 70, 49, 82, 3, 50, 35, 1, 76, 53, 39, 36, 42, 43, 0, 13, 57, 52, 5, 33, 42, 44, 60, 68, 49, 0, 50, 18, 16, 71, 25, 77, 46, 43]
last_save: 322

Gen:57
TrainFitness:0.7777777777777778
TestFitness:0.7777777777777778
MaxGenLen:515
Individual: def p():
  def adf0(index):
    if np.equal(x[index],-421703.3148).all():
      return True
    else:
      return False
  def adf1(index):
    if np.greater(x[index],-590807.5375).all():
      return False
    else:
      return False
  def adf2(index):
    if np.equal(np.tanh(x[index]),-135105.9817).all():
      return False
    else:
      return False
  def adf3(index):
    if np.less(x[index],-292062.5641).all():
      return True
    else:
      return False
  def adf4(index):
    if np.greater(x[index],+270027.2825).all():
      return True
    else:
      return False
  def adf5(index):
    if np.equal(np.cos(x[index]),-898823.8842).all():
      return False
    else:
      return False
  def adf6(index):
    if np.greater(x[index],+005184.0095).all():
      return True
    else:
      return False
  def adf7(index):
    if np.equal(x[index],-850056.8871).all():
      return False
    else:
      return False
  def adf8(index):
    if np.less(np.cos(x[index]),-841605.1488).all():
      if np.greater(x[index],-242541.8830).all():
        return True
      else:
        return True
      return True
    else:
      if np.less(np.sin(x[index]),+892224.2494).all():
        return False
      else:
        return True
      return True
  return multiple_operation([adf0(0)*+645.563, adf1(1)*-555.110, adf2(2)*-864.850, adf3(3)*-291.221, adf4(4)*-803.381, adf5(5)*+259.488, adf6(6)*-730.253, adf7(7)*-315.035, adf8(8)*-025.330], [1, 0, 1, 1, 1, 0, 1, 0], 424.953)
result=p(); 0.7777777777777778
IndLenGenome:479
IndGenome:[64, 78, 93, 51, 77, 11, 95, 39, 22, 14, 12, 31, 7, 90, 63, 23, 21, 44, 18, 60, 35, 89, 45, 93, 39, 51, 75, 63, 35, 9, 30, 8, 50, 27, 95, 73, 67, 45, 37, 93, 62, 15, 32, 56, 92, 28, 77, 98, 21, 63, 25, 81, 90, 55, 79, 18, 41, 27, 11, 29, 69, 83, 40, 7, 39, 17, 71, 62, 19, 62, 70, 86, 72, 25, 46, 4, 11, 28, 43, 64, 39, 36, 55, 45, 10, 63, 92, 47, 70, 40, 22, 87, 32, 48, 52, 45, 16, 23, 75, 9, 11, 56, 49, 23, 87, 80, 68, 19, 88, 28, 62, 63, 28, 28, 84, 52, 57, 81, 67, 63, 66, 73, 12, 88, 24, 60, 70, 65, 31, 48, 24, 40, 20, 19, 85, 68, 77, 58, 67, 68, 31, 18, 21, 94, 88, 75, 70, 60, 5, 26, 98, 58, 47, 31, 55, 91, 61, 54, 52, 64, 52, 55, 6, 51, 68, 88, 74, 21, 46, 30, 85, 51, 74, 68, 18, 11, 48, 55, 91, 61, 54, 52, 64, 52, 55, 34, 51, 68, 88, 33, 90, 46, 30, 20, 51, 16, 68, 18, 11, 48, 94, 18, 9, 12, 2, 32, 54, 12, 84, 39, 24, 13, 30, 30, 20, 92, 70, 36, 28, 26, 84, 35, 75, 66, 73, 12, 7, 24, 75, 85, 75, 1, 81, 60, 83, 93, 65, 58, 76, 64, 48, 75, 60, 69, 31, 27, 52, 19, 31, 12, 52, 21, 79, 87, 48, 78, 90, 73, 53, 58, 11, 39, 28, 68, 32, 15, 99, 14, 58, 38, 82, 89, 35, 37, 53, 30, 22, 15, 63, 92, 59, 3, 33, 91, 45, 20, 53, 25, 32, 87, 70, 100, 2, 45, 73, 3, 60, 61, 65, 62, 93, 21, 61, 28, 37, 98, 32, 54, 12, 84, 39, 65, 13, 30, 30, 20, 92, 70, 23, 28, 26, 84, 35, 75, 85, 75, 87, 81, 60, 83, 93, 65, 67, 76, 64, 48, 75, 60, 69, 31, 27, 52, 19, 31, 12, 52, 21, 79, 87, 48, 78, 13, 73, 53, 58, 11, 2, 28, 68, 32, 15, 99, 14, 58, 38, 82, 89, 35, 37, 53, 30, 22, 15, 63, 92, 59, 3, 33, 91, 93, 20, 53, 25, 32, 87, 70, 100, 2, 45, 73, 3, 60, 61, 65, 62, 93, 21, 61, 28, 37, 98, 55, 96, 25, 70, 37, 60, 75, 1, 94, 29, 27, 32, 19, 56, 22, 29, 90, 50, 68, 31, 58, 58, 92, 98, 75, 45, 71, 88, 55, 1, 96, 36, 40, 69, 83, 0, 28, 76, 84, 51, 95, 3, 70, 23, 14, 5, 38, 31, 39, 94, 46, 1, 43, 24, 2, 6, 63, 93, 42, 28, 94, 88, 42, 54, 47, 52, 96, 78, 54, 24, 65, 73, 44, 58, 86, 42, 34, 80]
last_save: 322

Gen:2057
last_save: 322
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.5555555555555556
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],+472006.4221).all():
      return False
    else:
      return False
  def adf1(index):
    if np.greater(x[index],-787461.0808).all():
      return True
    else:
      return False
  def adf2(index):
    if np.equal(x[index],-297963.5505).all():
      return True
    else:
      return False
  def adf3(index):
    if np.less(rlog(x[index]),-128774.1194).all():
      return True
    else:
      return False
  def adf4(index):
    if np.equal(x[index],-601530.8526).all():
      return False
    else:
      return True
  def adf5(index):
    if np.less(x[index],+427470.3932).all():
      return True
    else:
      return True
  def adf6(index):
    if np.greater(np.cos(x[index]),+471324.5143).all():
      return False
    else:
      return False
  def adf7(index):
    if np.less(np.cos(x[index]),-819140.0152).all():
      return False
    else:
      return True
  def adf8(index):
    if np.equal(sigmoid(x[index]),-799699.8327).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*-227.552, adf1(1)*+487.083, adf2(2)*+118.263, adf3(3)*-455.816, adf4(4)*-474.222, adf5(5)*+219.974, adf6(6)*-118.191, adf7(7)*+843.621, adf8(8)*-284.814], [0, 1, 0, 0, 1, 0, 0, 0], 751.442)
result=p(); 0.5555555555555556
IndLenGenome:415
IndGenome:[77, 71, 76, 99, 75, 63, 72, 77, 53, 56, 19, 41, 63, 17, 92, 77, 95, 73, 79, 36, 74, 76, 73, 21, 94, 99, 39, 12, 63, 48, 53, 78, 64, 87, 34, 4, 93, 71, 12, 21, 20, 84, 54, 29, 91, 73, 55, 67, 31, 91, 41, 23, 2, 19, 92, 19, 29, 46, 27, 39, 56, 49, 57, 37, 46, 37, 59, 80, 34, 29, 84, 73, 66, 54, 82, 64, 69, 74, 17, 77, 50, 69, 34, 21, 64, 65, 44, 49, 95, 92, 45, 61, 26, 38, 72, 43, 84, 89, 21, 55, 12, 41, 80, 88, 61, 51, 25, 22, 91, 32, 22, 21, 71, 75, 67, 42, 45, 82, 49, 42, 17, 12, 15, 35, 39, 87, 39, 88, 55, 7, 79, 39, 26, 74, 74, 47, 85, 42, 93, 28, 28, 95, 26, 58, 33, 60, 58, 32, 89, 91, 28, 66, 90, 75, 94, 95, 67, 12, 60, 36, 68, 54, 29, 42, 53, 44, 37, 66, 28, 31, 32, 61, 60, 61, 50, 91, 21, 59, 36, 90, 96, 27, 39, 58, 78, 42, 51, 87, 15, 63, 41, 61, 71, 69, 27, 22, 87, 98, 41, 27, 91, 79, 15, 39, 62, 21, 38, 14, 90, 93, 36, 71, 20, 64, 76, 44, 85, 33, 72, 59, 38, 35, 62, 30, 96, 43, 54, 17, 24, 28, 95, 97, 17, 49, 53, 55, 28, 93, 48, 10, 62, 71, 73, 47, 34, 75, 32, 84, 22, 48, 36, 70, 23, 51, 11, 5, 14, 91, 74, 91, 27, 49, 22, 66, 10, 42, 45, 22, 24, 64, 27, 88, 53, 10, 20, 64, 31, 44, 85, 92, 72, 42, 99, 81, 100, 17, 8, 76, 18, 10, 8, 80, 6, 40, 57, 10, 36, 14, 89, 59, 36, 45, 49, 22, 74, 21, 85, 28, 5, 70, 60, 24, 46, 43, 91, 35, 98, 18, 19, 55, 1, 10, 97, 74, 89, 99, 79, 98, 56, 90, 30, 70, 100, 58, 0, 53, 75, 36, 70, 83, 62, 6, 13, 62, 88, 79, 18, 89, 4, 29, 15, 77, 29, 68, 1, 96, 38, 33, 91, 100, 15, 74, 95, 29, 52, 84, 68, 49, 10, 15, 86, 28, 70, 41, 69, 80, 74, 92, 82, 27, 83, 74, 70, 50, 64, 79, 69, 49, 21, 8, 27, 19, 27, 61, 42, 55, 18, 46, 13, 87, 78, 29, 72, 6, 15, 62, 36, 17, 45, 7, 48, 79, 26, 53, 95]
last_save: 323

Gen:22
TrainFitness:0.6666666666666666
TestFitness:0.5555555555555556
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],+334053.3252).all():
      return False
    else:
      return True
  def adf1(index):
    if np.greater(x[index],-922310.6875).all():
      return False
    else:
      return False
  def adf2(index):
    if np.equal(x[index],-656858.8137).all():
      return False
    else:
      return True
  def adf3(index):
    if np.equal(x[index],+742337.7463).all():
      return True
    else:
      return False
  def adf4(index):
    if np.equal(x[index],+627636.3982).all():
      return False
    else:
      return False
  def adf5(index):
    if np.greater(np.sin(x[index]),-258989.6956).all():
      return True
    else:
      return True
  def adf6(index):
    if np.less(np.cos(x[index]),-332902.8020).all():
      return False
    else:
      return True
  def adf7(index):
    if np.equal(x[index],-161991.0729).all():
      return True
    else:
      return False
  def adf8(index):
    if np.greater(x[index],+024226.9726).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+672.718, adf1(1)*+427.881, adf2(2)*+701.571, adf3(3)*+210.505, adf4(4)*-149.934, adf5(5)*-556.556, adf6(6)*+266.787, adf7(7)*+562.335, adf8(8)*+435.726], [0, 1, 1, 1, 1, 0, 0, 1], 856.933)
result=p(); 0.6666666666666666
IndLenGenome:339
IndGenome:[83, 50, 61, 51, 71, 63, 25, 94, 14, 33, 93, 24, 30, 45, 63, 33, 62, 45, 22, 75, 32, 5, 89, 90, 95, 61, 1, 69, 89, 32, 62, 13, 31, 70, 26, 28, 37, 5, 51, 77, 13, 15, 29, 93, 45, 97, 36, 86, 35, 16, 18, 25, 98, 98, 41, 73, 7, 1, 16, 98, 17, 26, 87, 85, 40, 31, 37, 94, 72, 33, 23, 57, 67, 24, 16, 73, 40, 49, 20, 13, 5, 83, 46, 52, 29, 96, 32, 67, 56, 73, 6, 53, 39, 28, 92, 53, 35, 40, 85, 51, 76, 6, 11, 9, 23, 52, 55, 78, 39, 58, 29, 6, 39, 25, 26, 26, 48, 45, 7, 61, 22, 43, 5, 43, 73, 53, 53, 92, 49, 70, 22, 88, 50, 92, 20, 17, 86, 98, 43, 95, 25, 57, 85, 7, 61, 66, 91, 29, 99, 31, 40, 57, 92, 89, 80, 95, 92, 89, 21, 45, 78, 50, 49, 70, 92, 44, 12, 72, 66, 99, 47, 12, 26, 52, 13, 44, 26, 74, 54, 54, 46, 97, 62, 47, 11, 78, 41, 78, 99, 74, 12, 77, 18, 28, 1, 88, 62, 25, 97, 20, 61, 15, 57, 81, 25, 88, 52, 52, 91, 40, 85, 40, 75, 82, 11, 63, 21, 44, 49, 89, 3, 94, 59, 1, 97, 95, 95, 86, 15, 55, 66, 71, 74, 50, 52, 16, 66, 57, 68, 77, 7, 8, 14, 25, 86, 82, 63, 3, 45, 67, 52, 89, 84, 63, 15, 37, 72, 76, 55, 94, 21, 7, 31, 65, 96, 62, 23, 87, 38, 65, 76, 49, 73, 13, 41, 97, 63, 32, 78, 67, 58, 6, 52, 87, 38, 59, 85, 39, 10, 14, 28, 52, 23, 91, 87, 22, 99, 89, 5, 34, 94, 17, 20, 61, 2, 38, 55, 45, 96, 42, 22, 80, 52, 19, 48, 0, 1, 66, 15, 15, 73, 94, 35, 23, 24, 8, 80, 72, 92, 52, 16, 2, 33, 90, 73, 75, 41, 94, 31]
last_save: 323

Gen:309
TrainFitness:0.7777777777777778
TestFitness:0.5555555555555556
MaxGenLen:575
Individual: def p():
  def adf0(index):
    if np.equal(x[index],+334053.3852).all():
      return False
    else:
      return True
  def adf1(index):
    if np.greater(x[index],-922310.6875).all():
      return False
    else:
      return False
  def adf2(index):
    if np.equal(x[index],-823505.2661).all():
      return False
    else:
      return False
  def adf3(index):
    if np.greater(x[index],-956685.7123).all():
      return False
    else:
      return False
  def adf4(index):
    if np.equal(np.cos(x[index]),+020768.3557).all():
      return False
    else:
      return False
  def adf5(index):
    if np.equal(x[index],+290529.1580).all():
      if np.less(np.tanh(x[index]),+972623.4644).all():
        return True
      else:
        return True
      return False
    else:
      if np.equal(psqrt(x[index]),-278818.2570).all():
        if np.greater(x[index],-221050.5013).all():
          return False
        else:
          return True
        return False
      else:
        if np.greater(np.sin(x[index]),-565561.4063).all():
          return False
        else:
          return True
        return True
      return False
  def adf6(index):
    if np.less(np.cos(x[index]),-874956.6857).all():
      if np.less(x[index],+863010.3536).all():
        return True
      else:
        return False
      return True
    else:
      if np.equal(x[index],-823505.1661).all():
        if np.equal(np.cos(x[index]),-969566.8571).all():
          return True
        else:
          return False
        return False
      else:
        if np.less(x[index],+008020.7683).all():
          return False
        else:
          return True
        return False
      return False
  def adf7(index):
    if np.greater(x[index],-072905.2916).all():
      return True
    else:
      return True
  def adf8(index):
    if np.equal(np.sin(x[index]),-262396.4446).all():
      if np.equal(x[index],+894278.8182).all():
        return False
      else:
        return False
      return True
    else:
      if np.greater(x[index],-211050.5213).all():
        return False
      else:
        return True
      return False
  return multiple_operation([adf0(0)*-755.655, adf1(1)*-026.678, adf2(2)*-456.233, adf3(3)*-943.572, adf4(4)*-171.562, adf5(5)*-569.334, adf6(6)*-878.627, adf7(7)*-904.823, adf8(8)*-995.447], [1, 0, 0, 1, 1, 0, 0, 0], 298.016)
result=p(); 0.7777777777777778
IndLenGenome:485
IndGenome:[83, 50, 61, 51, 71, 63, 25, 94, 14, 33, 93, 24, 30, 45, 63, 33, 8, 45, 22, 75, 32, 5, 89, 90, 95, 61, 1, 69, 89, 32, 62, 13, 31, 70, 26, 28, 37, 5, 51, 77, 13, 15, 29, 93, 45, 97, 36, 28, 92, 53, 35, 40, 85, 92, 76, 6, 11, 9, 23, 52, 55, 78, 39, 58, 29, 6, 39, 25, 26, 26, 48, 45, 7, 61, 22, 43, 5, 99, 73, 53, 53, 92, 49, 70, 22, 88, 50, 92, 20, 17, 86, 98, 43, 95, 25, 57, 85, 7, 61, 66, 91, 8, 99, 31, 40, 57, 92, 89, 80, 95, 92, 89, 21, 45, 78, 50, 49, 70, 92, 44, 12, 72, 66, 99, 47, 12, 26, 52, 13, 44, 26, 74, 54, 54, 46, 97, 62, 47, 11, 78, 41, 78, 99, 74, 12, 77, 18, 28, 1, 88, 62, 25, 97, 20, 61, 15, 57, 81, 25, 88, 52, 52, 91, 40, 85, 40, 75, 30, 11, 63, 21, 44, 49, 89, 3, 70, 66, 1, 97, 95, 95, 86, 15, 55, 66, 71, 74, 50, 6, 53, 39, 28, 92, 53, 96, 28, 1, 88, 62, 25, 97, 89, 61, 58, 77, 44, 39, 25, 26, 26, 48, 45, 7, 61, 22, 43, 5, 14, 73, 88, 16, 73, 40, 61, 20, 13, 5, 83, 46, 52, 29, 96, 32, 67, 56, 73, 6, 53, 39, 28, 92, 53, 35, 40, 85, 51, 76, 6, 11, 9, 23, 52, 55, 78, 39, 58, 29, 6, 39, 25, 26, 26, 48, 45, 7, 61, 22, 43, 5, 43, 73, 53, 53, 92, 49, 70, 60, 88, 50, 92, 20, 17, 86, 98, 43, 95, 86, 57, 85, 7, 61, 66, 91, 29, 99, 31, 40, 57, 92, 89, 80, 95, 92, 89, 21, 46, 78, 50, 49, 70, 92, 44, 12, 72, 66, 99, 47, 12, 26, 52, 13, 69, 26, 74, 54, 54, 46, 97, 62, 47, 11, 78, 41, 78, 99, 74, 12, 77, 18, 28, 1, 88, 62, 25, 97, 20, 61, 15, 57, 81, 25, 88, 52, 31, 91, 40, 85, 40, 75, 82, 11, 63, 21, 44, 49, 89, 3, 94, 59, 1, 97, 95, 95, 86, 15, 55, 66, 71, 74, 50, 52, 16, 66, 57, 68, 77, 7, 8, 14, 25, 86, 82, 63, 3, 45, 67, 52, 89, 84, 63, 15, 37, 72, 13, 55, 94, 21, 7, 31, 65, 96, 62, 23, 87, 38, 65, 76, 49, 73, 13, 44, 97, 63, 32, 78, 67, 58, 6, 52, 87, 38, 59, 85, 39, 10, 14, 28, 52, 23, 91, 87, 22, 99, 89, 5, 34, 94, 17, 20, 61, 2, 38, 55, 45, 96, 42, 22, 80, 52, 19, 48, 0, 1, 66, 15, 15, 73, 94, 35, 23, 24, 8, 80, 72, 92, 52, 16, 2, 33, 90, 73, 75, 41, 94, 31]
last_save: 323

Gen:2309
last_save: 323
Exit:FalseFalseTrue