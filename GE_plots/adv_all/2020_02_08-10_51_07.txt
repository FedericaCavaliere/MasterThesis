Dataset:Spiral/Full.csv
FS:True
Seed:1234
Size:10

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(np.tanh(x[index]),-696314.4841).all():
      return True
    else:
      return False
  def adf1(index):
    if np.greater(x[index],+068098.6287).all():
      return True
    else:
      return True
  def adf2(index):
    if np.equal(x[index],+052243.6181).all():
      return False
    else:
      return False
  def adf3(index):
    if np.equal(psqrt(x[index]),+807875.8816).all():
      return True
    else:
      return False
  def adf4(index):
    if np.equal(x[index],-943835.5745).all():
      return True
    else:
      return True
  def adf7(index):
    if np.less(rlog(x[index]),-738495.6242).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+210.105, adf1(1)*-558.247, adf2(2)*+478.051, adf3(3)*+405.403, adf4(4)*+669.283, adf7(7)*-707.447], [0, 1, 0, 0, 0], 840.384)
result=p(); 0.6666666666666666
IndLenGenome:283
IndGenome:[88, 7, 16, 58, 7, 92, 35, 97, 33, 4, 15, 50, 87, 91, 42, 57, 63, 8, 11, 21, 76, 78, 54, 7, 42, 66, 83, 14, 82, 75, 30, 70, 76, 49, 73, 52, 76, 56, 99, 51, 81, 91, 88, 52, 5, 66, 41, 92, 94, 12, 17, 67, 28, 88, 39, 19, 29, 23, 28, 74, 38, 8, 21, 81, 92, 64, 74, 48, 16, 93, 19, 18, 16, 91, 45, 88, 44, 62, 35, 97, 47, 76, 44, 26, 73, 64, 64, 26, 45, 53, 66, 40, 51, 78, 24, 15, 57, 10, 10, 98, 24, 63, 44, 49, 50, 44, 30, 13, 79, 32, 15, 58, 28, 32, 83, 11, 85, 63, 34, 34, 38, 53, 85, 87, 35, 67, 80, 94, 77, 10, 15, 75, 35, 72, 44, 16, 74, 66, 15, 18, 67, 50, 14, 24, 10, 74, 87, 48, 64, 15, 97, 44, 77, 48, 70, 82, 20, 68, 94, 27, 23, 55, 17, 68, 13, 30, 22, 59, 48, 13, 23, 46, 51, 40, 68, 16, 91, 46, 89, 40, 82, 77, 18, 65, 88, 71, 65, 62, 20, 43, 50, 16, 89, 66, 75, 2, 7, 86, 21, 72, 83, 10, 80, 26, 2, 58, 24, 98, 96, 86, 18, 31, 60, 71, 66, 72, 20, 26, 98, 63, 94, 4, 74, 97, 82, 80, 57, 19, 24, 93, 22, 42, 51, 36, 85, 57, 35, 66, 41, 33, 64, 44, 68, 34, 15, 67, 0, 99, 70, 72, 61, 21, 22, 46, 4, 47, 34, 58, 6, 94, 95, 59, 10, 18, 13, 87, 81, 79, 17, 56, 71, 15, 70, 36, 87, 34, 53, 49, 49, 31, 63, 3, 0]
last_save: 1001

Gen:2001
last_save: 1001
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(sigmoid(x[index]),+047848.8700).all():
      return True
    else:
      return True
  def adf1(index):
    if np.less(x[index],+168909.6388).all():
      return False
    else:
      return True
  def adf2(index):
    if np.less(x[index],-847530.6117).all():
      return True
    else:
      return True
  def adf3(index):
    if np.equal(x[index],-357267.8501).all():
      return False
    else:
      return False
  def adf4(index):
    if np.less(x[index],+537663.9411).all():
      return True
    else:
      return True
  def adf7(index):
    if np.less(np.tanh(x[index]),-238146.6775).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*-563.871, adf1(1)*+630.746, adf2(2)*-842.192, adf3(3)*-129.964, adf4(4)*+839.228, adf7(7)*-942.187], [0, 1, 1, 1, 1], 117.532)
result=p(); 0.6666666666666666
IndLenGenome:282
IndGenome:[5, 2, 8, 29, 64, 89, 9, 14, 84, 41, 33, 67, 37, 44, 23, 83, 43, 47, 10, 9, 21, 56, 23, 76, 57, 9, 63, 65, 87, 12, 94, 35, 26, 40, 58, 84, 84, 48, 44, 38, 81, 81, 66, 65, 47, 23, 91, 86, 81, 55, 22, 63, 46, 90, 55, 92, 95, 90, 47, 60, 94, 20, 74, 79, 82, 7, 51, 9, 21, 81, 45, 76, 97, 68, 60, 7, 55, 21, 67, 24, 11, 9, 95, 33, 50, 3, 74, 37, 44, 66, 27, 47, 1, 25, 18, 79, 80, 11, 16, 51, 64, 1, 38, 13, 13, 10, 57, 73, 32, 57, 29, 61, 36, 21, 8, 11, 2, 22, 19, 42, 77, 24, 57, 26, 99, 18, 28, 83, 51, 78, 99, 49, 45, 59, 15, 56, 84, 56, 36, 11, 28, 98, 42, 76, 47, 42, 64, 68, 43, 28, 60, 56, 97, 17, 69, 61, 92, 46, 24, 56, 15, 92, 23, 99, 67, 76, 31, 26, 31, 32, 78, 37, 28, 61, 97, 29, 58, 61, 84, 39, 14, 52, 23, 57, 69, 28, 71, 42, 58, 63, 11, 4, 11, 96, 9, 13, 82, 64, 56, 70, 34, 98, 10, 76, 55, 85, 31, 30, 67, 38, 73, 28, 55, 33, 18, 41, 5, 55, 12, 45, 52, 93, 22, 53, 32, 74, 28, 16, 91, 12, 90, 54, 37, 61, 78, 17, 6, 80, 30, 66, 93, 94, 70, 55, 25, 98, 66, 40, 9, 89, 13, 61, 15, 50, 25, 51, 50, 21, 22, 67, 69, 68, 71, 60, 80, 72, 49, 88, 63, 30, 29, 65, 75, 47, 81, 7, 62, 93, 26, 1, 53, 57]
last_save: 1002

Gen:9
TrainFitness:0.8333333333333334
TestFitness:0.5
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],-133599.4226).all():
      return False
    else:
      return True
  def adf1(index):
    if np.greater(x[index],-020018.5034).all():
      return True
    else:
      return True
  def adf2(index):
    if np.greater(sigmoid(x[index]),+509383.8321).all():
      return False
    else:
      return False
  def adf3(index):
    if np.equal(x[index],+038443.2635).all():
      return True
    else:
      return True
  def adf4(index):
    if np.greater(x[index],+026135.3749).all():
      return False
    else:
      return True
  def adf7(index):
    if np.greater(x[index],-131921.9866).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*-312.658, adf1(1)*+341.250, adf2(2)*-396.895, adf3(3)*-197.487, adf4(4)*+493.661, adf7(7)*+222.215], [1, 0, 0, 0, 1], 419.618)
result=p(); 0.8333333333333334
IndLenGenome:289
IndGenome:[25, 39, 66, 35, 90, 49, 15, 13, 23, 31, 43, 83, 45, 59, 39, 34, 52, 52, 76, 81, 86, 58, 75, 66, 99, 41, 15, 68, 10, 52, 90, 60, 61, 68, 15, 80, 23, 34, 52, 96, 35, 47, 21, 32, 57, 19, 98, 45, 15, 70, 49, 93, 38, 53, 88, 23, 32, 11, 89, 13, 21, 85, 47, 85, 38, 42, 98, 90, 73, 98, 14, 84, 3, 62, 66, 13, 35, 44, 22, 47, 63, 72, 77, 49, 62, 65, 50, 42, 46, 91, 63, 55, 83, 57, 74, 39, 55, 14, 64, 15, 75, 93, 97, 49, 10, 51, 83, 81, 99, 62, 51, 49, 8, 76, 76, 47, 81, 27, 47, 24, 39, 88, 43, 91, 12, 56, 65, 78, 5, 38, 54, 33, 94, 61, 22, 95, 50, 53, 59, 95, 13, 99, 96, 88, 89, 35, 98, 87, 40, 61, 39, 67, 44, 18, 67, 71, 34, 86, 74, 59, 83, 26, 96, 61, 77, 70, 44, 42, 52, 52, 62, 91, 95, 86, 29, 28, 34, 12, 17, 65, 44, 61, 39, 26, 91, 88, 76, 21, 64, 28, 52, 68, 78, 77, 68, 89, 0, 7, 42, 12, 35, 34, 61, 28, 91, 24, 55, 46, 38, 80, 6, 48, 8, 59, 52, 73, 44, 5, 78, 81, 1, 39, 81, 76, 43, 74, 66, 31, 94, 77, 17, 28, 82, 2, 61, 48, 16, 57, 10, 66, 29, 66, 35, 82, 12, 80, 73, 24, 98, 15, 9, 2, 25, 96, 63, 57, 79, 65, 12, 68, 46, 76, 37, 51, 46, 61, 53, 82, 28, 69, 2, 60, 74, 11, 13, 4, 88, 75, 71, 65, 50, 61, 68, 22, 10, 93, 77, 38, 35]
last_save: 1002

Gen:167
TrainFitness:1.0
TestFitness:0.5
MaxGenLen:545
Individual: def p():
  def adf0(index):
    if np.greater(x[index],-133599.4238).all():
      return False
    else:
      return True
  def adf1(index):
    if np.greater(x[index],+006135.3751).all():
      return True
    else:
      return False
  def adf2(index):
    if np.less(x[index],+593631.0212).all():
      return False
    else:
      return False
  def adf3(index):
    if np.less(psqrt(x[index]),+133426.5712).all():
      return False
    else:
      return False
  def adf4(index):
    if np.greater(np.cos(x[index]),+832193.7575).all():
      return True
    else:
      return True
  def adf7(index):
    if np.equal(np.sin(x[index]),+354673.2792).all():
      if np.equal(np.sin(x[index]),-774954.4553).all():
        return False
      else:
        return False
      return True
    else:
      if np.equal(x[index],+932133.5894).all():
        return True
      else:
        return True
      return True
  return multiple_operation([adf0(0)*-915.802, adf1(1)*+450.342, adf2(2)*-127.985, adf3(3)*+383.832, adf4(4)*-157.582, adf7(7)*+844.326], [1, 0, 0, 1, 1], 792.502)
result=p(); 1.0
IndLenGenome:466
IndGenome:[25, 7, 66, 35, 90, 49, 15, 13, 23, 31, 43, 83, 45, 59, 89, 34, 52, 73, 98, 81, 86, 89, 75, 66, 99, 92, 62, 38, 50, 80, 46, 91, 63, 55, 83, 57, 55, 11, 12, 13, 21, 11, 97, 85, 81, 42, 11, 5, 49, 93, 56, 53, 21, 20, 32, 11, 92, 13, 31, 2, 77, 49, 62, 65, 50, 42, 23, 91, 63, 3, 34, 52, 96, 35, 47, 21, 32, 57, 19, 98, 45, 15, 70, 49, 93, 38, 53, 88, 23, 32, 11, 89, 13, 47, 85, 47, 85, 38, 42, 98, 90, 73, 98, 14, 84, 3, 62, 66, 13, 35, 44, 66, 47, 63, 72, 77, 49, 62, 65, 50, 42, 36, 91, 63, 55, 27, 57, 74, 39, 55, 14, 64, 15, 75, 93, 97, 49, 10, 51, 83, 81, 99, 62, 51, 49, 3, 62, 31, 43, 83, 45, 8, 39, 34, 52, 52, 76, 81, 86, 58, 75, 66, 99, 41, 15, 68, 10, 52, 90, 60, 61, 94, 15, 80, 23, 34, 52, 96, 35, 83, 21, 32, 57, 19, 98, 45, 15, 70, 49, 93, 38, 53, 88, 23, 32, 11, 89, 13, 21, 85, 47, 85, 38, 42, 98, 90, 73, 98, 14, 84, 3, 62, 66, 13, 35, 44, 22, 47, 63, 72, 77, 49, 62, 65, 50, 42, 46, 91, 63, 41, 83, 57, 74, 39, 55, 14, 30, 15, 75, 31, 97, 49, 10, 51, 83, 81, 99, 62, 51, 49, 8, 76, 76, 11, 89, 13, 21, 85, 47, 85, 57, 42, 98, 35, 44, 22, 47, 63, 72, 60, 49, 62, 66, 31, 42, 46, 91, 63, 52, 52, 76, 61, 22, 95, 50, 53, 59, 95, 13, 99, 96, 69, 64, 55, 98, 87, 40, 61, 84, 5, 38, 12, 56, 65, 64, 5, 38, 54, 33, 94, 61, 22, 95, 50, 53, 59, 95, 13, 99, 96, 88, 89, 35, 98, 87, 40, 61, 39, 67, 44, 18, 67, 71, 34, 86, 74, 59, 83, 26, 96, 61, 77, 70, 44, 42, 52, 52, 62, 91, 95, 86, 29, 28, 34, 12, 17, 65, 44, 61, 39, 26, 91, 88, 76, 21, 64, 28, 52, 68, 78, 77, 68, 89, 0, 7, 42, 12, 35, 34, 61, 28, 91, 24, 55, 46, 38, 80, 6, 48, 8, 59, 52, 73, 44, 5, 78, 81, 1, 39, 81, 76, 43, 74, 66, 31, 94, 77, 17, 28, 82, 2, 61, 48, 16, 57, 10, 66, 29, 66, 35, 82, 12, 80, 73, 24, 98, 15, 9, 2, 25, 96, 63, 57, 79, 65, 12, 68, 46, 76, 37, 51, 46, 61, 53, 82, 28, 69, 2, 60, 74, 11, 13, 4, 88, 75, 71, 65, 50, 61, 68, 22, 10, 93, 77, 38, 35]
last_save: 1002

Gen:167
last_save: 1002
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(rlog(x[index]),+134478.7045).all():
      return False
    else:
      return True
  def adf1(index):
    if np.less(np.cos(x[index]),-618134.3724).all():
      return True
    else:
      return False
  def adf2(index):
    if np.less(x[index],-520136.8213).all():
      return True
    else:
      return True
  def adf3(index):
    if np.less(np.tanh(x[index]),-438689.1495).all():
      return False
    else:
      return True
  def adf4(index):
    if np.less(sigmoid(x[index]),-547118.4727).all():
      return False
    else:
      return True
  def adf7(index):
    if np.greater(x[index],-002667.7632).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+200.013, adf1(1)*+125.185, adf2(2)*+698.454, adf3(3)*+973.021, adf4(4)*+262.000, adf7(7)*-615.842], [0, 0, 0, 0, 1], 420.555)
result=p(); 0.6666666666666666
IndLenGenome:285
IndGenome:[32, 60, 44, 17, 28, 5, 16, 83, 13, 67, 65, 89, 34, 65, 88, 51, 46, 74, 96, 71, 11, 25, 55, 64, 29, 35, 78, 77, 48, 2, 7, 64, 69, 68, 6, 82, 13, 62, 5, 50, 48, 24, 85, 57, 94, 30, 17, 83, 99, 28, 24, 18, 83, 73, 58, 65, 74, 51, 73, 69, 44, 61, 44, 15, 51, 22, 59, 24, 28, 90, 52, 69, 32, 61, 15, 9, 60, 39, 68, 46, 51, 91, 84, 88, 55, 68, 92, 41, 34, 76, 82, 62, 30, 36, 86, 86, 14, 27, 56, 42, 21, 97, 52, 11, 2, 81, 66, 53, 82, 50, 68, 22, 22, 68, 94, 68, 84, 50, 23, 42, 86, 30, 39, 77, 40, 84, 20, 10, 56, 79, 71, 64, 37, 46, 51, 77, 30, 87, 32, 83, 87, 86, 24, 97, 10, 31, 37, 90, 54, 47, 75, 28, 32, 78, 43, 79, 64, 51, 88, 71, 66, 41, 51, 62, 95, 70, 63, 11, 63, 95, 70, 14, 73, 25, 22, 70, 28, 21, 14, 26, 75, 13, 81, 10, 38, 67, 24, 16, 72, 91, 5, 37, 2, 26, 50, 23, 30, 59, 75, 52, 94, 12, 78, 28, 55, 4, 68, 9, 22, 24, 81, 61, 52, 9, 82, 2, 68, 85, 50, 82, 54, 56, 9, 29, 19, 32, 84, 91, 34, 36, 75, 35, 6, 10, 31, 5, 36, 72, 79, 38, 11, 88, 74, 17, 31, 26, 37, 70, 93, 92, 35, 35, 32, 58, 76, 30, 39, 68, 22, 63, 56, 69, 53, 79, 55, 17, 57, 46, 14, 75, 30, 41, 62, 66, 40, 43, 39, 94, 77, 2, 54, 19, 44, 84, 52]
last_save: 1003

Gen:7
TrainFitness:0.8333333333333334
TestFitness:0.5
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],-655343.1374).all():
      return False
    else:
      return False
  def adf1(index):
    if np.equal(x[index],-973741.5127).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(np.cos(x[index]),-315798.8033).all():
      return True
    else:
      return True
  def adf3(index):
    if np.greater(x[index],+874525.7559).all():
      return False
    else:
      return False
  def adf4(index):
    if np.less(np.cos(x[index]),-002115.0928).all():
      if np.equal(x[index],+896958.9214).all():
        return True
      else:
        return False
      return False
    else:
      if np.greater(np.tanh(x[index]),+181608.5048).all():
        if np.less(x[index],-598477.8375).all():
          return False
        else:
          return False
        return False
      else:
        if np.equal(x[index],+639555.0330).all():
          return False
        else:
          return True
        return True
      return False
  def adf7(index):
    if np.greater(x[index],+012244.2652).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-017.706, adf1(1)*-079.008, adf2(2)*-582.853, adf3(3)*-731.860, adf4(4)*+605.543, adf7(7)*-243.175], [0, 1, 1, 1, 0], 132.932)
result=p(); 0.8333333333333334
IndLenGenome:272
IndGenome:[65, 88, 49, 41, 59, 63, 11, 33, 7, 36, 5, 55, 13, 64, 23, 41, 63, 27, 34, 51, 97, 78, 65, 11, 63, 33, 3, 65, 99, 57, 73, 17, 14, 11, 75, 21, 52, 47, 81, 95, 81, 21, 48, 10, 25, 93, 33, 61, 13, 91, 65, 27, 89, 38, 58, 80, 73, 13, 88, 76, 16, 57, 81, 45, 67, 60, 19, 28, 37, 94, 5, 82, 95, 77, 5, 85, 29, 49, 97, 61, 2, 97, 13, 12, 25, 98, 25, 9, 70, 40, 12, 71, 11, 15, 20, 79, 72, 98, 43, 83, 39, 73, 48, 63, 68, 79, 36, 39, 15, 98, 69, 72, 41, 94, 64, 95, 21, 38, 24, 96, 12, 98, 10, 30, 30, 31, 28, 31, 36, 70, 68, 85, 90, 24, 38, 37, 94, 35, 91, 83, 97, 55, 89, 58, 24, 57, 97, 28, 63, 97, 65, 31, 97, 5, 95, 65, 61, 98, 18, 54, 66, 63, 99, 95, 45, 35, 20, 83, 53, 50, 79, 84, 60, 53, 62, 85, 90, 85, 58, 60, 5, 90, 21, 92, 32, 34, 84, 92, 66, 15, 62, 94, 53, 88, 52, 51, 21, 27, 90, 41, 97, 7, 90, 26, 55, 5, 57, 30, 97, 39, 60, 90, 48, 42, 13, 0, 55, 28, 42, 98, 45, 73, 5, 39, 52, 7, 33, 81, 88, 16, 100, 63, 92, 73, 56, 20, 15, 55, 24, 83, 36, 55, 93, 22, 34, 53, 81, 97, 25, 61, 50, 19, 31, 87, 4, 34, 51, 33, 82, 89, 43, 82, 26, 92, 23, 89, 59, 31, 68, 26, 21, 100]
last_save: 1003

Gen:326
TrainFitness:1.0
TestFitness:0.16666666666666666
MaxGenLen:590
Individual: def p():
  def adf0(index):
    if np.equal(x[index],-655343.1374).all():
      return False
    else:
      return False
  def adf1(index):
    if np.equal(x[index],-973741.5127).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(np.cos(x[index]),-503341.1271).all():
      return False
    else:
      return False
  def adf3(index):
    if np.greater(x[index],+005992.9313).all():
      if np.equal(x[index],-033595.5717).all():
        if np.greater(x[index],-437372.1127).all():
          if np.greater(x[index],-533165.1333).all():
            return False
          else:
            return False
          return False
        else:
          if np.equal(x[index],-197513.7417).all():
            if np.equal(sigmoid(x[index]),-737411.8318).all():
              if np.greater(x[index],-357947.1328).all():
                if np.greater(x[index],-315798.8033).all():
                  if np.less(x[index],-551884.7395).all():
                    return False
                  else:
                    return False
                  return False
                else:
                  if np.equal(x[index],-127323.1995).all():
                    return False
                  else:
                    return False
                  return False
                return False
              else:
                if np.equal(sigmoid(x[index]),+230834.1315).all():
                  return False
                else:
                  return True
                return False
              return False
            else:
              if np.greater(x[index],-503230.8369).all():
                return False
              else:
                return False
              return False
            return True
          else:
            if np.greater(x[index],-817555.1891).all():
              return False
            else:
              return True
            return False
          return False
        return False
      else:
        if np.greater(psqrt(x[index]),+500758.5798).all():
          return True
        else:
          return True
        return False
      return False
    else:
      if np.equal(x[index],-985585.4176).all():
        return False
      else:
        return False
      return True
  def adf4(index):
    if np.equal(psqrt(x[index]),-533151.5798).all():
      if np.less(x[index],-027173.5148).all():
        if np.greater(x[index],-525755.9971).all():
          return True
        else:
          return False
        return False
      else:
        if np.equal(x[index],+554831.1705).all():
          return False
        else:
          return True
        return True
      return False
    else:
      if np.equal(sigmoid(x[index]),-178610.7355).all():
        if np.greater(x[index],+582795.1180).all():
          return False
        else:
          return False
        return False
      else:
        if np.less(x[index],-835963.7412).all():
          return False
        else:
          return True
        return True
      return True
  def adf7(index):
    if np.greater(rlog(x[index]),-360654.7065).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*-300.942, adf1(1)*-711.701, adf2(2)*-655.707, adf3(3)*+823.050, adf4(4)*+359.273, adf7(7)*+032.360], [1, 0, 1, 0, 1], 243.175)
result=p(); 1.0
IndLenGenome:585
IndGenome:[65, 88, 49, 41, 59, 63, 11, 33, 7, 36, 5, 55, 13, 64, 23, 41, 63, 27, 34, 21, 97, 78, 65, 11, 63, 33, 3, 65, 19, 57, 73, 17, 14, 11, 75, 21, 52, 47, 81, 95, 81, 21, 48, 10, 25, 17, 13, 64, 5, 40, 63, 3, 34, 51, 21, 52, 47, 81, 95, 81, 57, 30, 97, 39, 63, 25, 48, 42, 0, 0, 85, 29, 49, 2, 59, 63, 11, 33, 36, 36, 98, 55, 39, 65, 59, 50, 33, 3, 65, 99, 35, 45, 17, 51, 37, 78, 13, 75, 81, 95, 81, 76, 74, 93, 57, 73, 17, 62, 11, 21, 52, 47, 77, 96, 81, 21, 61, 10, 25, 93, 33, 61, 56, 65, 11, 63, 33, 3, 65, 5, 55, 52, 64, 23, 41, 63, 27, 97, 51, 59, 77, 65, 11, 63, 27, 34, 51, 97, 78, 65, 11, 50, 33, 3, 65, 99, 57, 73, 17, 14, 31, 81, 48, 23, 21, 48, 10, 25, 93, 33, 81, 95, 42, 23, 65, 27, 89, 64, 57, 81, 73, 12, 88, 54, 11, 51, 97, 79, 65, 61, 13, 91, 65, 27, 89, 38, 58, 80, 73, 13, 63, 97, 65, 55, 97, 46, 95, 65, 61, 98, 18, 54, 87, 63, 99, 95, 45, 95, 97, 75, 65, 63, 92, 97, 63, 61, 2, 97, 13, 22, 13, 91, 19, 99, 65, 11, 45, 89, 55, 37, 71, 18, 15, 15, 90, 81, 52, 73, 10, 18, 93, 24, 61, 13, 91, 65, 27, 34, 51, 37, 49, 63, 27, 34, 51, 97, 15, 90, 3, 52, 73, 10, 18, 93, 76, 89, 55, 37, 71, 96, 15, 90, 3, 52, 73, 10, 18, 31, 97, 5, 95, 65, 61, 88, 49, 41, 93, 60, 61, 63, 11, 33, 57, 56, 5, 97, 70, 65, 45, 0, 60, 87, 65, 38, 65, 27, 89, 38, 58, 32, 73, 13, 47, 92, 63, 27, 97, 51, 59, 78, 65, 95, 28, 5, 34, 51, 97, 36, 65, 11, 50, 7, 40, 65, 95, 42, 23, 65, 31, 97, 25, 93, 33, 61, 5, 91, 65, 77, 89, 38, 34, 50, 73, 13, 8, 11, 75, 30, 52, 47, 81, 67, 73, 95, 11, 44, 78, 33, 60, 19, 28, 37, 94, 5, 82, 95, 77, 5, 85, 29, 49, 97, 61, 2, 97, 51, 97, 89, 11, 33, 90, 36, 5, 55, 44, 28, 33, 61, 51, 97, 70, 65, 45, 50, 40, 37, 2, 99, 35, 12, 81, 95, 27, 65, 51, 97, 78, 36, 11, 50, 7, 3, 65, 95, 99, 57, 73, 17, 14, 5, 75, 8, 62, 47, 9, 95, 81, 21, 48, 10, 25, 93, 33, 61, 13, 77, 29, 63, 41, 88, 3, 65, 19, 6, 73, 17, 14, 11, 52, 21, 52, 52, 24, 49, 81, 81, 88, 16, 100, 63, 92, 73, 56, 20, 46, 55, 24, 97, 20, 46, 55, 3, 25, 63, 84, 45, 35, 20, 83, 90, 50, 79, 84, 62, 94, 53, 88, 17, 51, 21, 27, 90, 41, 66, 7, 90, 26, 55, 5, 57, 30, 97, 39, 60, 90, 48, 42, 13, 0, 55, 40, 42, 98, 45, 73, 5, 39, 52, 17, 33, 81, 88, 16, 100, 63, 92, 73, 56, 20, 15, 55, 24, 83, 36, 55, 93, 22, 34, 53, 81, 97, 25, 87, 50, 19, 31, 5, 4, 34, 51, 33, 82, 89, 43, 82, 26, 92, 23, 89, 59, 31, 68, 26, 21, 100]
last_save: 1003

Gen:326
last_save: 1003
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(np.cos(x[index]),+294773.3956).all():
      return True
    else:
      return True
  def adf1(index):
    if np.less(x[index],-193115.7294).all():
      return True
    else:
      return True
  def adf2(index):
    if np.greater(x[index],+936908.0298).all():
      return False
    else:
      return True
  def adf3(index):
    if np.equal(np.cos(x[index]),-339024.4034).all():
      return False
    else:
      return True
  def adf4(index):
    if np.greater(np.cos(x[index]),-113756.0095).all():
      return True
    else:
      return True
  def adf7(index):
    if np.less(x[index],+321268.4275).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*-640.339, adf1(1)*+139.667, adf2(2)*-374.972, adf3(3)*-052.828, adf4(4)*-905.562, adf7(7)*+796.252], [1, 0, 1, 1, 1], 574.429)
result=p(); 0.6666666666666666
IndLenGenome:283
IndGenome:[78, 15, 24, 35, 54, 21, 83, 93, 38, 79, 20, 9, 69, 93, 23, 58, 14, 45, 84, 22, 6, 25, 75, 79, 48, 51, 82, 15, 34, 63, 59, 47, 90, 86, 56, 31, 56, 60, 35, 10, 87, 54, 72, 25, 67, 88, 91, 99, 25, 25, 19, 29, 29, 98, 58, 34, 25, 21, 52, 9, 58, 75, 82, 68, 37, 12, 13, 75, 99, 23, 82, 53, 16, 18, 19, 79, 84, 10, 89, 59, 26, 18, 6, 51, 82, 74, 70, 93, 59, 48, 12, 52, 83, 26, 19, 84, 99, 89, 70, 10, 31, 65, 84, 98, 97, 10, 99, 59, 22, 63, 49, 97, 48, 79, 47, 57, 61, 60, 62, 20, 85, 24, 38, 41, 40, 15, 53, 21, 10, 41, 36, 91, 51, 53, 80, 31, 44, 92, 53, 64, 36, 29, 81, 77, 21, 77, 55, 95, 92, 89, 59, 28, 90, 50, 84, 90, 45, 37, 22, 58, 51, 27, 86, 22, 42, 32, 48, 67, 19, 2, 24, 7, 50, 45, 23, 22, 71, 28, 12, 97, 75, 53, 53, 49, 44, 66, 83, 42, 83, 17, 41, 77, 31, 49, 99, 70, 58, 33, 93, 62, 76, 72, 10, 90, 4, 79, 24, 72, 99, 22, 17, 15, 7, 68, 54, 58, 97, 47, 13, 22, 66, 75, 62, 96, 57, 46, 96, 31, 96, 91, 44, 46, 41, 2, 23, 80, 98, 51, 81, 43, 66, 51, 40, 21, 97, 11, 61, 83, 78, 70, 67, 3, 25, 47, 22, 82, 50, 96, 30, 53, 33, 70, 14, 33, 46, 76, 36, 51, 65, 70, 85, 0, 81, 97, 48, 28, 55, 8, 97, 16, 66, 30, 100]
last_save: 1004

Gen:4
TrainFitness:0.8333333333333334
TestFitness:0.5
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],+151537.5629).all():
      return True
    else:
      return False
  def adf1(index):
    if np.equal(x[index],+449956.1624).all():
      return True
    else:
      return True
  def adf2(index):
    if np.less(sigmoid(x[index]),-459891.8876).all():
      return True
    else:
      return False
  def adf3(index):
    if np.less(x[index],+339734.7876).all():
      return True
    else:
      return False
  def adf4(index):
    if np.less(np.cos(x[index]),-555971.2644).all():
      if np.less(x[index],-336007.6228).all():
        return True
      else:
        return False
      return True
    else:
      if np.equal(x[index],-528433.4340).all():
        if np.less(sigmoid(x[index]),+778140.4741).all():
          return False
        else:
          return False
        return False
      else:
        if np.greater(x[index],+004920.1845).all():
          return True
        else:
          return False
        return True
      return False
  def adf7(index):
    if np.greater(x[index],-530195.6223).all():
      if np.greater(sigmoid(x[index]),-612088.8330).all():
        return False
      else:
        return False
      return True
    else:
      if np.less(x[index],-188937.7047).all():
        return True
      else:
        return True
      return False
  return multiple_operation([adf0(0)*+094.363, adf1(1)*-215.252, adf2(2)*-944.805, adf3(3)*+035.083, adf4(4)*+966.806, adf7(7)*+178.104], [1, 1, 1, 1, 0], 425.384)
result=p(); 0.8333333333333334
IndLenGenome:426
IndGenome:[98, 43, 59, 25, 49, 37, 12, 82, 94, 11, 85, 91, 35, 3, 97, 35, 26, 72, 69, 62, 11, 65, 83, 59, 57, 17, 86, 73, 74, 74, 39, 39, 95, 86, 81, 96, 12, 54, 86, 12, 81, 57, 46, 64, 57, 44, 49, 30, 44, 35, 49, 88, 89, 61, 68, 58, 57, 96, 10, 63, 92, 79, 70, 69, 14, 52, 75, 53, 23, 79, 47, 43, 34, 57, 48, 37, 86, 54, 63, 94, 82, 23, 40, 70, 49, 13, 23, 15, 15, 85, 5, 59, 7, 41, 42, 16, 74, 94, 7, 13, 65, 92, 73, 86, 83, 93, 56, 70, 80, 97, 16, 92, 82, 88, 74, 29, 22, 38, 44, 44, 29, 59, 27, 99, 75, 52, 68, 94, 53, 73, 54, 73, 54, 70, 29, 55, 88, 39, 66, 22, 67, 57, 47, 48, 21, 34, 10, 44, 7, 54, 61, 11, 59, 89, 27, 81, 63, 51, 56, 48, 10, 70, 34, 9, 72, 90, 1, 48, 64, 85, 32, 13, 22, 97, 65, 76, 56, 27, 45, 85, 39, 32, 65, 23, 50, 41, 19, 75, 56, 72, 72, 83, 69, 57, 80, 87, 76, 29, 61, 76, 71, 72, 50, 48, 88, 28, 83, 73, 60, 29, 37, 64, 73, 94, 79, 17, 83, 88, 71, 88, 88, 29, 53, 27, 57, 70, 44, 37, 64, 94, 61, 44, 78, 39, 22, 87, 10, 79, 74, 53, 16, 43, 65, 41, 96, 92, 71, 55, 22, 75, 22, 80, 69, 51, 59, 54, 94, 38, 20, 85, 73, 86, 78, 90, 73, 65, 10, 38, 63, 19, 54, 78, 19, 76, 96, 58, 80, 66, 55, 18, 67, 51, 57, 58, 21, 90, 24, 24, 15, 77, 75, 87, 62, 6, 84, 82, 75, 13, 88, 74, 15, 42, 29, 13, 55, 99, 20, 71, 33, 65, 88, 62, 17, 73, 17, 82, 34, 74, 46, 89, 76, 20, 22, 67, 78, 74, 99, 36, 16, 65, 76, 32, 58, 88, 51, 44, 4, 30, 75, 72, 47, 8, 86, 74, 63, 100, 55, 62, 5, 70, 73, 72, 66, 59, 47, 38, 58, 9, 79, 54, 5, 76, 13, 56, 55, 47, 34, 2, 72, 96, 89, 76, 2, 100, 87, 18, 86, 80, 41, 23, 55, 73, 42, 5, 28, 57, 79, 26, 98, 36, 77, 46, 0, 17, 88, 42, 60, 33, 100, 26, 48, 86, 44, 39, 96, 12, 47, 94, 75, 72, 60, 60, 1, 88, 19, 86, 89, 43, 0, 84, 18, 57, 80, 73, 56, 59]
last_save: 1004

Gen:21
TrainFitness:1.0
TestFitness:0.5
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],+097372.0840).all():
      if np.greater(x[index],-560874.7883).all():
        return True
      else:
        return False
      return True
    else:
      if np.less(np.cos(x[index]),+059208.2463).all():
        return False
      else:
        return True
      return False
  def adf1(index):
    if np.equal(sigmoid(x[index]),-469031.8942).all():
      return True
    else:
      return False
  def adf2(index):
    if np.greater(np.tanh(x[index]),+429550.8949).all():
      return False
    else:
      return False
  def adf3(index):
    if np.greater(x[index],-681716.7562).all():
      return True
    else:
      return False
  def adf4(index):
    if np.greater(x[index],-778142.4741).all():
      return False
    else:
      return False
  def adf7(index):
    if np.greater(x[index],+004920.1345).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+755.925, adf1(1)*+954.527, adf2(2)*+621.436, adf3(3)*-621.525, adf4(4)*+194.480, adf7(7)*-803.508], [1, 0, 0, 1, 0], 806.585)
result=p(); 1.0
IndLenGenome:370
IndGenome:[83, 30, 59, 4, 54, 47, 9, 11, 80, 51, 40, 69, 37, 63, 87, 32, 80, 88, 14, 20, 53, 66, 85, 42, 75, 75, 75, 66, 40, 38, 57, 34, 57, 38, 28, 13, 18, 51, 86, 17, 13, 58, 97, 97, 86, 15, 80, 85, 39, 82, 80, 18, 52, 84, 56, 53, 75, 30, 101, 23, 81, 83, 80, 63, 96, 87, 59, 44, 26, 79, 80, 23, 21, 18, 9, 74, 82, 86, 21, 13, 17, 33, 10, 68, 96, 36, 38, 74, 52, 79, 55, 35, 30, 98, 69, 24, 49, 71, 61, 96, 51, 51, 61, 20, 37, 20, 76, 78, 91, 87, 61, 46, 97, 75, 56, 72, 72, 83, 69, 57, 54, 87, 76, 3, 67, 57, 47, 48, 21, 34, 22, 44, 7, 54, 61, 11, 59, 89, 27, 81, 63, 51, 56, 48, 10, 70, 34, 9, 72, 90, 1, 33, 64, 85, 32, 13, 22, 97, 65, 76, 56, 27, 45, 85, 39, 32, 65, 23, 50, 41, 19, 75, 34, 25, 82, 97, 3, 40, 64, 46, 52, 61, 74, 53, 16, 43, 65, 41, 96, 92, 71, 55, 22, 75, 22, 80, 69, 51, 59, 54, 94, 38, 20, 85, 73, 86, 78, 90, 73, 65, 10, 38, 63, 19, 54, 12, 19, 76, 96, 58, 80, 66, 55, 18, 5, 51, 57, 58, 21, 90, 24, 24, 15, 13, 75, 87, 62, 6, 84, 82, 75, 13, 88, 74, 15, 42, 29, 13, 55, 99, 20, 71, 33, 65, 88, 62, 17, 73, 17, 82, 34, 74, 46, 89, 45, 20, 22, 67, 78, 74, 99, 36, 16, 65, 76, 32, 58, 88, 51, 44, 4, 30, 75, 72, 47, 8, 86, 74, 63, 100, 55, 62, 5, 70, 73, 72, 66, 59, 47, 38, 58, 9, 79, 54, 5, 76, 13, 56, 55, 47, 34, 2, 72, 96, 89, 76, 2, 100, 87, 18, 86, 80, 41, 23, 55, 73, 42, 5, 28, 57, 79, 26, 98, 36, 77, 46, 0, 17, 88, 42, 60, 33, 100, 26, 48, 86, 44, 39, 96, 12, 47, 94, 75, 72, 60, 60, 1, 88, 19, 86, 89, 43, 0, 84, 18, 57, 80, 73, 56, 59]
last_save: 1004

Gen:21
last_save: 1004
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.6666666666666666
TestFitness:1.0
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(rlog(x[index]),-733966.1406).all():
      return True
    else:
      return False
  def adf1(index):
    if np.greater(sigmoid(x[index]),-349906.1009).all():
      return True
    else:
      return False
  def adf2(index):
    if np.less(x[index],+194099.4504).all():
      return False
    else:
      return True
  def adf3(index):
    if np.equal(psqrt(x[index]),-273507.3447).all():
      return True
    else:
      return False
  def adf4(index):
    if np.less(x[index],-219623.1991).all():
      return False
    else:
      return False
  def adf7(index):
    if np.greater(np.cos(x[index]),+013805.4234).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+127.182, adf1(1)*-382.972, adf2(2)*+045.092, adf3(3)*-453.637, adf4(4)*-383.125, adf7(7)*-324.954], [0, 0, 0, 1, 0], 684.539)
result=p(); 0.6666666666666666
IndLenGenome:285
IndGenome:[58, 11, 12, 54, 3, 97, 8, 80, 21, 18, 29, 72, 75, 83, 48, 15, 58, 78, 77, 3, 80, 47, 98, 67, 85, 43, 97, 33, 53, 63, 26, 6, 86, 24, 64, 36, 66, 38, 85, 83, 20, 94, 16, 15, 5, 5, 87, 94, 40, 5, 13, 87, 60, 90, 22, 34, 48, 5, 55, 66, 38, 84, 89, 61, 71, 62, 98, 59, 98, 31, 85, 9, 12, 72, 68, 94, 51, 71, 84, 24, 63, 35, 58, 19, 11, 75, 64, 49, 82, 16, 94, 37, 37, 92, 91, 13, 33, 75, 46, 79, 50, 21, 32, 10, 80, 17, 6, 93, 12, 95, 93, 51, 62, 19, 15, 54, 72, 11, 16, 80, 83, 27, 14, 78, 33, 71, 77, 57, 76, 13, 42, 22, 28, 75, 20, 29, 79, 99, 61, 59, 65, 30, 77, 43, 13, 69, 33, 17, 71, 94, 26, 33, 47, 75, 27, 20, 54, 30, 81, 74, 30, 55, 39, 86, 80, 29, 56, 85, 14, 71, 78, 99, 90, 24, 32, 25, 43, 76, 3, 99, 44, 49, 83, 42, 91, 24, 84, 87, 57, 57, 95, 28, 77, 44, 91, 94, 99, 57, 21, 13, 11, 34, 66, 87, 65, 73, 100, 34, 12, 54, 35, 59, 47, 55, 14, 89, 14, 50, 81, 81, 73, 94, 72, 71, 43, 13, 28, 34, 88, 18, 14, 75, 59, 97, 26, 18, 24, 1, 13, 75, 93, 1, 85, 0, 97, 48, 46, 57, 86, 43, 13, 14, 89, 91, 32, 30, 88, 72, 45, 2, 32, 20, 0, 68, 95, 41, 17, 44, 81, 69, 37, 7, 31, 70, 36, 1, 55, 29, 56, 41, 15, 46, 80, 23, 15]
last_save: 1005

Gen:17
TrainFitness:0.8333333333333334
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(sigmoid(x[index]),+162590.9436).all():
      return True
    else:
      return False
  def adf1(index):
    if np.equal(np.cos(x[index]),-560255.3827).all():
      return False
    else:
      return True
  def adf2(index):
    if np.less(np.sin(x[index]),+383263.0408).all():
      return False
    else:
      return True
  def adf3(index):
    if np.equal(x[index],-664303.3477).all():
      if np.equal(sigmoid(x[index]),-470405.6901).all():
        return False
      else:
        return True
      return True
    else:
      if np.greater(x[index],+905876.4547).all():
        return False
      else:
        return False
      return False
  def adf4(index):
    if np.greater(x[index],-710645.1921).all():
      if np.equal(rlog(x[index]),-105575.1081).all():
        return False
      else:
        return False
      return True
    else:
      if np.less(x[index],-399590.6490).all():
        if np.greater(np.cos(x[index]),-409944.2240).all():
          return False
        else:
          return True
        return False
      else:
        if np.less(x[index],-646548.2738).all():
          return True
        else:
          return False
        return False
      return False
  def adf7(index):
    if np.greater(x[index],+286745.0216).all():
      if np.less(np.cos(x[index]),+323009.0509).all():
        if np.less(np.tanh(x[index]),-309791.0879).all():
          return False
        else:
          return True
        return True
      else:
        if np.equal(x[index],+581218.3797).all():
          return True
        else:
          return False
        return False
      return True
    else:
      if np.less(x[index],+029189.2035).all():
        return False
      else:
        return True
      return True
  return multiple_operation([adf0(0)*-930.261, adf1(1)*+177.796, adf2(2)*-625.246, adf3(3)*-937.914, adf4(4)*+171.421, adf7(7)*+523.776], [1, 0, 0, 1, 1], 623.651)
result=p(); 0.8333333333333334
IndLenGenome:384
IndGenome:[81, 47, 23, 65, 95, 86, 63, 82, 88, 18, 51, 16, 92, 35, 39, 90, 59, 64, 63, 56, 98, 9, 78, 71, 95, 16, 73, 50, 15, 39, 55, 56, 60, 82, 35, 55, 13, 8, 52, 17, 35, 26, 29, 93, 43, 44, 36, 61, 12, 35, 3, 88, 43, 22, 66, 93, 70, 4, 10, 78, 53, 48, 99, 54, 95, 68, 57, 6, 79, 75, 76, 46, 84, 93, 90, 63, 73, 94, 57, 57, 23, 47, 66, 81, 11, 59, 77, 74, 77, 60, 84, 70, 95, 66, 9, 0, 31, 43, 22, 80, 91, 30, 43, 63, 88, 39, 99, 70, 5, 48, 47, 46, 54, 45, 44, 97, 15, 31, 97, 14, 84, 53, 27, 87, 44, 47, 76, 97, 91, 30, 76, 34, 45, 91, 39, 72, 71, 35, 74, 14, 22, 56, 87, 33, 61, 80, 15, 25, 57, 65, 61, 10, 28, 11, 31, 45, 66, 4, 96, 52, 65, 57, 37, 15, 83, 49, 19, 95, 69, 40, 96, 94, 59, 70, 37, 3, 32, 31, 53, 47, 57, 74, 50, 19, 29, 64, 74, 92, 72, 94, 90, 69, 46, 79, 19, 10, 25, 68, 33, 15, 16, 54, 86, 55, 84, 58, 72, 57, 43, 58, 96, 33, 65, 61, 25, 46, 69, 30, 99, 67, 56, 92, 92, 28, 6, 77, 24, 65, 90, 22, 91, 96, 24, 46, 31, 34, 85, 39, 44, 86, 83, 42, 93, 60, 20, 99, 30, 75, 30, 39, 39, 64, 48, 38, 49, 65, 95, 33, 30, 29, 47, 59, 91, 40, 68, 17, 29, 25, 92, 54, 79, 98, 5, 74, 90, 40, 35, 78, 11, 92, 81, 28, 43, 47, 19, 87, 80, 31, 67, 56, 73, 100, 89, 58, 28, 9, 0, 2, 89, 1, 48, 29, 82, 100, 23, 5, 21, 36, 10, 68, 50, 77, 33, 45, 69, 13, 60, 12, 56, 91, 45, 60, 27, 61, 77, 27, 37, 99, 96, 23, 41, 8, 66, 22, 85, 32, 84, 96, 83, 97, 72, 19, 73, 77, 99, 61, 74, 48, 24, 1, 51, 27, 21, 74, 92, 71, 64, 86, 39, 85, 92, 53, 47, 87, 6, 72, 75, 26, 18, 51, 89, 34, 16, 62, 33, 76, 45, 81, 24, 35, 9, 64, 72, 38]
last_save: 1005

Gen:146
TrainFitness:1.0
TestFitness:0.8333333333333334
MaxGenLen:530
Individual: def p():
  def adf0(index):
    if np.equal(sigmoid(x[index]),+162530.9236).all():
      return True
    else:
      return False
  def adf1(index):
    if np.less(np.tanh(x[index]),-495402.7386).all():
      return False
    else:
      return False
  def adf2(index):
    if np.less(x[index],+622967.4202).all():
      return False
    else:
      return True
  def adf3(index):
    if np.equal(x[index],+323009.2501).all():
      if np.less(np.tanh(x[index]),-309991.8873).all():
        return False
      else:
        return True
      return True
    else:
      if np.greater(x[index],-581218.3797).all():
        return True
      else:
        return False
      return False
  def adf4(index):
    if np.less(x[index],+009182.2035).all():
      return False
    else:
      return True
  def adf7(index):
    if np.greater(np.cos(x[index]),+835646.5482).all():
      if np.less(np.sin(x[index]),-588487.0732).all():
        return False
      else:
        return False
      return False
    else:
      if np.equal(np.cos(x[index]),+309791.0879).all():
        return False
      else:
        return True
      return True
  return multiple_operation([adf0(0)*+508.121, adf1(1)*-970.173, adf2(2)*+889.089, adf3(3)*+203.516, adf4(4)*+735.930, adf7(7)*+527.177], [1, 0, 1, 1, 0], 282.463)
result=p(); 1.0
IndLenGenome:310
IndGenome:[81, 47, 23, 33, 95, 86, 63, 82, 88, 18, 51, 16, 92, 35, 3, 90, 59, 82, 63, 56, 66, 9, 78, 71, 10, 96, 68, 33, 15, 23, 54, 9, 55, 84, 30, 72, 57, 43, 58, 96, 33, 65, 61, 25, 46, 69, 30, 82, 44, 56, 92, 92, 99, 6, 77, 24, 22, 90, 22, 65, 96, 24, 28, 31, 68, 85, 47, 44, 75, 83, 42, 93, 60, 20, 99, 62, 75, 30, 81, 39, 70, 48, 56, 49, 65, 95, 33, 30, 29, 69, 59, 91, 38, 68, 17, 33, 25, 92, 98, 79, 87, 5, 74, 71, 40, 35, 78, 11, 92, 81, 28, 43, 47, 19, 87, 80, 31, 67, 56, 73, 100, 17, 58, 94, 9, 0, 80, 89, 1, 48, 22, 62, 100, 23, 5, 21, 36, 2, 68, 50, 69, 46, 79, 78, 10, 25, 68, 33, 15, 16, 54, 86, 55, 84, 58, 72, 57, 43, 58, 96, 50, 65, 61, 25, 88, 28, 64, 98, 67, 70, 37, 3, 32, 31, 53, 47, 57, 74, 50, 19, 29, 40, 95, 33, 30, 29, 47, 59, 91, 40, 68, 17, 29, 25, 92, 54, 79, 98, 5, 74, 90, 65, 100, 78, 11, 92, 81, 28, 43, 47, 19, 87, 80, 31, 67, 83, 73, 100, 89, 58, 28, 9, 0, 28, 89, 1, 48, 29, 82, 100, 23, 5, 21, 36, 10, 68, 50, 77, 33, 45, 69, 13, 60, 12, 56, 91, 45, 32, 27, 61, 77, 27, 37, 99, 96, 23, 41, 0, 66, 22, 78, 32, 84, 96, 83, 97, 72, 19, 73, 77, 99, 61, 74, 48, 24, 1, 51, 27, 21, 74, 38, 71, 64, 86, 39, 85, 92, 53, 47, 87, 6, 72, 75, 26, 18, 51, 89, 34, 16, 62, 33, 76, 45, 81, 24, 35, 9, 64, 72, 38]
last_save: 1005

Gen:146
last_save: 1005
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],+012254.6629).all():
      return True
    else:
      return False
  def adf1(index):
    if np.equal(x[index],+412127.7490).all():
      return False
    else:
      return False
  def adf2(index):
    if np.less(x[index],-033604.4051).all():
      return False
    else:
      return True
  def adf3(index):
    if np.greater(np.cos(x[index]),-109954.8514).all():
      return False
    else:
      return True
  def adf4(index):
    if np.less(x[index],-436835.4646).all():
      return True
    else:
      return True
  def adf7(index):
    if np.greater(x[index],-175507.1381).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+913.234, adf1(1)*+772.450, adf2(2)*+094.847, adf3(3)*-723.856, adf4(4)*+207.736, adf7(7)*+694.710], [1, 1, 1, 0, 0], 581.281)
result=p(); 0.8333333333333334
IndLenGenome:280
IndGenome:[81, 23, 53, 30, 56, 49, 80, 59, 64, 33, 59, 23, 25, 37, 5, 53, 55, 22, 61, 25, 62, 60, 47, 80, 79, 47, 94, 16, 75, 80, 11, 30, 14, 33, 64, 84, 86, 64, 69, 51, 97, 94, 80, 35, 27, 28, 88, 17, 89, 97, 39, 79, 42, 15, 66, 29, 69, 29, 84, 85, 90, 59, 14, 68, 55, 67, 96, 21, 54, 67, 15, 13, 91, 31, 78, 35, 17, 53, 96, 29, 39, 41, 77, 29, 52, 41, 79, 72, 49, 85, 52, 97, 12, 97, 93, 43, 52, 99, 81, 37, 60, 44, 43, 34, 22, 90, 36, 35, 36, 87, 78, 24, 9, 43, 66, 82, 34, 72, 69, 6, 38, 92, 38, 80, 78, 95, 22, 79, 21, 22, 81, 90, 97, 4, 25, 26, 96, 45, 81, 93, 65, 46, 54, 6, 51, 24, 26, 9, 93, 34, 78, 19, 60, 40, 37, 19, 11, 63, 65, 74, 73, 23, 23, 72, 26, 14, 24, 14, 63, 46, 80, 6, 55, 84, 94, 31, 49, 89, 50, 71, 10, 81, 38, 78, 95, 75, 80, 100, 70, 34, 78, 60, 68, 55, 7, 29, 25, 79, 47, 91, 81, 8, 13, 95, 39, 78, 3, 4, 6, 2, 51, 73, 45, 94, 47, 41, 11, 64, 10, 74, 11, 84, 56, 59, 84, 2, 45, 56, 40, 63, 7, 96, 32, 88, 28, 8, 59, 0, 95, 72, 4, 10, 83, 13, 16, 83, 59, 52, 20, 46, 72, 90, 23, 93, 20, 55, 80, 28, 66, 4, 79, 14, 10, 80, 44, 95, 16, 12, 100, 62, 85, 68, 55, 23, 45, 76, 99, 54, 22, 62]
last_save: 1006

Gen:180
TrainFitness:1.0
TestFitness:0.8333333333333334
MaxGenLen:545
Individual: def p():
  def adf0(index):
    if np.equal(x[index],-580145.8695).all():
      return False
    else:
      return False
  def adf1(index):
    if np.greater(x[index],+018565.1150).all():
      return True
    else:
      return False
  def adf2(index):
    if np.equal(x[index],-481544.2120).all():
      return True
    else:
      return False
  def adf3(index):
    if np.greater(x[index],+005607.9209).all():
      return True
    else:
      return False
  def adf4(index):
    if np.less(x[index],+434161.1804).all():
      return False
    else:
      return True
  def adf7(index):
    if np.equal(np.cos(x[index]),-600025.0205).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-270.237, adf1(1)*+493.896, adf2(2)*-528.287, adf3(3)*+988.610, adf4(4)*-721.839, adf7(7)*-129.702], [1, 1, 1, 0, 1], 189.314)
result=p(); 1.0
IndLenGenome:263
IndGenome:[25, 31, 92, 91, 98, 1, 55, 73, 98, 85, 58, 70, 31, 4, 95, 68, 96, 39, 35, 99, 63, 33, 85, 15, 19, 50, 42, 19, 60, 41, 8, 15, 46, 55, 41, 71, 35, 90, 48, 49, 62, 7, 56, 97, 87, 73, 21, 84, 68, 61, 55, 4, 14, 62, 31, 52, 20, 48, 63, 33, 39, 78, 19, 87, 42, 19, 60, 60, 55, 6, 50, 27, 19, 42, 40, 69, 48, 33, 44, 81, 55, 31, 71, 62, 61, 74, 23, 94, 71, 76, 91, 81, 68, 40, 34, 59, 2, 58, 97, 53, 94, 31, 13, 43, 32, 46, 40, 40, 40, 42, 75, 20, 42, 40, 5, 40, 29, 26, 81, 75, 53, 36, 62, 47, 40, 42, 3, 7, 6, 90, 62, 14, 89, 63, 8, 69, 76, 91, 69, 68, 5, 82, 48, 2, 58, 97, 49, 92, 71, 99, 78, 78, 16, 31, 40, 20, 55, 66, 37, 32, 31, 28, 33, 49, 60, 85, 27, 51, 12, 69, 27, 10, 12, 57, 89, 85, 63, 32, 69, 84, 1, 8, 59, 73, 81, 94, 92, 85, 69, 21, 71, 68, 98, 18, 29, 56, 19, 96, 16, 40, 35, 74, 59, 9, 40, 9, 30, 68, 38, 79, 86, 50, 26, 82, 94, 91, 22, 44, 66, 94, 28, 40, 0, 73, 70, 11, 54, 56, 44, 24, 2, 45, 41, 82, 20, 41, 60, 32, 6, 95, 24, 58, 0, 84, 81, 78, 88, 34, 46, 90, 15, 66, 4, 22, 50, 4, 71, 81, 52, 37, 93, 48, 86]
last_save: 1006

Gen:180
last_save: 1006
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.5
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(psqrt(x[index]),-759468.2625).all():
      return False
    else:
      return True
  def adf1(index):
    if np.equal(x[index],+496937.1315).all():
      return False
    else:
      return True
  def adf2(index):
    if np.less(x[index],+031468.9057).all():
      return True
    else:
      return False
  def adf3(index):
    if np.less(np.cos(x[index]),+020077.5320).all():
      return True
    else:
      return False
  def adf4(index):
    if np.greater(psqrt(x[index]),+965917.4521).all():
      return True
    else:
      return True
  def adf7(index):
    if np.less(np.cos(x[index]),+993120.2985).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+611.389, adf1(1)*-719.732, adf2(2)*+976.328, adf3(3)*-230.452, adf4(4)*-331.835, adf7(7)*+872.663], [1, 0, 0, 0, 0], 325.037)
result=p(); 0.8333333333333334
IndLenGenome:285
IndGenome:[39, 83, 88, 17, 50, 63, 25, 73, 59, 70, 21, 85, 42, 56, 78, 88, 84, 64, 27, 17, 69, 79, 62, 5, 24, 86, 15, 63, 24, 97, 50, 82, 44, 69, 49, 41, 89, 46, 83, 28, 83, 93, 67, 12, 55, 73, 22, 13, 24, 64, 47, 24, 17, 81, 39, 87, 40, 47, 13, 76, 82, 67, 43, 49, 13, 33, 65, 26, 29, 69, 37, 90, 42, 46, 10, 61, 51, 38, 25, 41, 40, 10, 21, 20, 21, 28, 23, 22, 40, 21, 49, 97, 25, 8, 93, 69, 11, 77, 19, 23, 90, 15, 88, 75, 59, 26, 89, 11, 70, 55, 40, 22, 23, 90, 19, 37, 44, 23, 72, 23, 87, 52, 50, 42, 89, 20, 26, 72, 35, 82, 43, 2, 53, 24, 16, 77, 17, 93, 94, 15, 63, 80, 23, 65, 64, 68, 45, 12, 76, 63, 21, 95, 70, 39, 87, 66, 21, 44, 11, 16, 33, 74, 49, 68, 62, 18, 45, 87, 16, 63, 53, 37, 39, 92, 22, 4, 78, 58, 28, 72, 36, 66, 97, 52, 96, 44, 15, 32, 69, 45, 92, 99, 77, 18, 63, 69, 81, 15, 13, 27, 69, 81, 4, 62, 88, 15, 9, 64, 10, 11, 3, 92, 36, 62, 90, 64, 52, 25, 88, 75, 90, 71, 3, 100, 92, 53, 50, 92, 17, 48, 27, 64, 35, 70, 77, 84, 2, 12, 70, 50, 72, 72, 26, 19, 23, 83, 41, 49, 78, 28, 68, 61, 64, 33, 87, 67, 70, 68, 17, 10, 18, 95, 5, 31, 85, 85, 56, 35, 81, 76, 99, 10, 11, 41, 10, 19, 100, 91, 94, 74, 28, 70, 59, 23, 82]
last_save: 1007

Gen:6
TrainFitness:0.8333333333333334
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(np.cos(x[index]),+610492.1390).all():
      return False
    else:
      return True
  def adf1(index):
    if np.greater(x[index],+027264.4706).all():
      return True
    else:
      return False
  def adf2(index):
    if np.less(x[index],-107254.9060).all():
      return True
    else:
      return True
  def adf3(index):
    if np.greater(x[index],+919477.6848).all():
      return False
    else:
      return False
  def adf4(index):
    if np.greater(rlog(x[index]),-693992.3937).all():
      return False
    else:
      return True
  def adf7(index):
    if np.less(x[index],+264175.3307).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*-990.056, adf1(1)*+729.132, adf2(2)*+992.756, adf3(3)*+032.953, adf4(4)*+977.305, adf7(7)*-787.601], [1, 1, 0, 0, 0], 722.668)
result=p(); 0.8333333333333334
IndLenGenome:316
IndGenome:[77, 38, 54, 25, 87, 12, 91, 10, 58, 36, 86, 51, 20, 44, 39, 52, 11, 83, 89, 40, 63, 26, 10, 77, 78, 83, 78, 62, 75, 90, 42, 57, 12, 66, 54, 94, 67, 40, 26, 86, 75, 70, 31, 28, 91, 90, 29, 11, 71, 90, 37, 12, 85, 64, 59, 40, 46, 60, 34, 58, 35, 21, 27, 11, 77, 24, 58, 49, 51, 39, 4, 77, 67, 86, 88, 44, 18, 1, 67, 96, 89, 18, 44, 70, 16, 19, 21, 76, 59, 23, 19, 99, 2, 93, 99, 3, 47, 91, 22, 31, 13, 97, 7, 10, 40, 36, 52, 86, 14, 51, 37, 35, 23, 23, 90, 97, 25, 63, 33, 34, 14, 99, 19, 59, 79, 30, 40, 15, 66, 44, 38, 60, 87, 72, 79, 31, 13, 2, 25, 72, 70, 39, 59, 82, 87, 15, 86, 69, 18, 97, 50, 53, 2, 99, 75, 73, 69, 36, 10, 59, 37, 47, 73, 50, 75, 42, 33, 48, 17, 68, 87, 56, 40, 51, 16, 65, 53, 20, 20, 10, 52, 7, 62, 52, 86, 36, 48, 35, 63, 53, 66, 23, 73, 35, 38, 56, 8, 41, 40, 76, 72, 78, 53, 16, 31, 42, 33, 71, 98, 28, 75, 32, 97, 44, 16, 40, 11, 58, 50, 43, 62, 14, 9, 57, 5, 68, 57, 83, 36, 49, 28, 69, 74, 20, 48, 0, 0, 85, 66, 88, 63, 85, 68, 52, 67, 54, 97, 91, 52, 18, 53, 20, 69, 51, 53, 92, 31, 35, 44, 67, 32, 52, 3, 20, 13, 49, 73, 93, 79, 22, 80, 3, 30, 12, 57, 39, 31, 35, 82, 27, 88, 52, 23, 4, 33, 5, 74, 65, 42, 73, 11, 28, 2, 66, 75, 28, 30, 34, 1, 6, 20, 14, 58, 8, 87, 55, 20, 87, 42, 88, 61, 37, 98, 8, 19, 65]
last_save: 1007

Gen:14
TrainFitness:1.0
TestFitness:0.3333333333333333
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],+005730.0644).all():
      return False
    else:
      return True
  def adf1(index):
    if np.greater(np.cos(x[index]),-149045.4319).all():
      return False
    else:
      return True
  def adf2(index):
    if np.greater(sigmoid(x[index]),-305825.2060).all():
      return True
    else:
      return True
  def adf3(index):
    if np.greater(np.cos(x[index]),-363505.1462).all():
      return False
    else:
      return True
  def adf4(index):
    if np.less(x[index],+939637.8920).all():
      return False
    else:
      return False
  def adf7(index):
    if np.less(np.sin(x[index]),-744196.0592).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*-689.597, adf1(1)*-811.029, adf2(2)*-510.337, adf3(3)*-991.357, adf4(4)*+299.880, adf7(7)*+864.795], [1, 0, 1, 0, 0], 387.327)
result=p(); 1.0
IndLenGenome:371
IndGenome:[86, 63, 34, 63, 69, 43, 87, 58, 80, 10, 30, 85, 17, 73, 40, 20, 76, 44, 94, 81, 82, 79, 93, 48, 2, 7, 55, 79, 53, 91, 4, 59, 30, 74, 75, 54, 73, 31, 69, 11, 72, 62, 59, 60, 68, 27, 96, 7, 43, 23, 10, 25, 68, 92, 55, 42, 40, 26, 70, 58, 24, 13, 13, 36, 62, 55, 31, 41, 33, 83, 56, 93, 65, 90, 35, 31, 44, 56, 52, 79, 84, 98, 89, 34, 37, 11, 60, 96, 59, 13, 99, 36, 33, 37, 8, 99, 52, 90, 13, 65, 73, 51, 28, 74, 78, 15, 63, 56, 67, 44, 94, 1, 19, 96, 40, 95, 59, 52, 71, 43, 10, 51, 68, 33, 11, 76, 48, 49, 95, 49, 7, 19, 7, 19, 18, 81, 61, 30, 52, 29, 100, 75, 84, 95, 51, 60, 33, 73, 77, 19, 31, 17, 79, 89, 91, 23, 75, 17, 29, 80, 72, 2, 29, 59, 88, 28, 50, 99, 68, 99, 48, 36, 24, 47, 59, 85, 83, 71, 40, 45, 98, 54, 47, 33, 98, 67, 63, 62, 37, 51, 92, 62, 39, 45, 43, 12, 49, 30, 21, 81, 34, 33, 86, 27, 65, 94, 18, 44, 93, 60, 69, 48, 36, 73, 38, 98, 31, 28, 30, 74, 69, 57, 40, 62, 50, 49, 29, 91, 50, 73, 12, 79, 54, 28, 96, 24, 24, 38, 87, 59, 48, 77, 31, 4, 33, 26, 95, 74, 89, 25, 78, 16, 19, 24, 81, 23, 41, 69, 46, 15, 68, 27, 11, 59, 58, 39, 54, 92, 60, 65, 96, 90, 59, 65, 42, 54, 48, 3, 16, 44, 72, 82, 21, 39, 31, 56, 73, 24, 14, 50, 9, 16, 76, 91, 36, 39, 85, 26, 11, 17, 7, 17, 30, 99, 20, 6, 74, 23, 34, 8, 97, 56, 29, 38, 58, 38, 85, 28, 9, 54, 52, 81, 48, 94, 82, 13, 62, 12, 44, 80, 14, 20, 32, 14, 28, 44, 49, 14, 79, 0, 49, 45, 79, 79, 30, 64, 30, 57, 72, 34, 36, 63, 16, 91, 86, 79, 19, 43, 96, 44, 59, 68, 40, 91, 22, 56, 33, 66, 47, 25, 76]
last_save: 1007

Gen:14
last_save: 1007
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.5
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],+021825.2002).all():
      return True
    else:
      return False
  def adf1(index):
    if np.less(rlog(x[index]),+463781.8129).all():
      return True
    else:
      return False
  def adf2(index):
    if np.less(x[index],-264707.7857).all():
      return False
    else:
      return True
  def adf3(index):
    if np.greater(psqrt(x[index]),-227132.3110).all():
      return False
    else:
      return True
  def adf4(index):
    if np.less(x[index],-478489.4955).all():
      return True
    else:
      return True
  def adf7(index):
    if np.greater(np.cos(x[index]),-658173.4612).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+562.214, adf1(1)*-627.469, adf2(2)*+602.644, adf3(3)*+688.332, adf4(4)*+408.480, adf7(7)*+234.351], [1, 1, 1, 0, 0], 019.239)
result=p(); 0.8333333333333334
IndLenGenome:283
IndGenome:[21, 45, 28, 55, 62, 21, 86, 75, 45, 35, 90, 72, 2, 88, 51, 98, 35, 79, 94, 88, 79, 39, 43, 47, 64, 28, 79, 58, 6, 73, 55, 34, 58, 18, 56, 35, 71, 41, 95, 50, 22, 37, 4, 58, 40, 47, 58, 84, 99, 19, 90, 28, 89, 55, 41, 70, 41, 22, 52, 32, 99, 61, 18, 14, 12, 83, 50, 59, 93, 82, 49, 9, 35, 99, 83, 56, 18, 94, 81, 47, 69, 89, 53, 81, 85, 77, 91, 32, 74, 82, 95, 88, 92, 96, 12, 37, 33, 80, 39, 27, 68, 47, 43, 77, 33, 21, 52, 6, 86, 60, 91, 46, 33, 57, 74, 40, 95, 76, 16, 33, 52, 50, 22, 99, 92, 15, 41, 81, 58, 33, 39, 49, 26, 21, 26, 90, 74, 12, 57, 36, 37, 40, 10, 86, 82, 72, 15, 98, 18, 12, 81, 80, 36, 38, 50, 53, 42, 52, 71, 24, 54, 30, 20, 14, 12, 75, 54, 77, 24, 18, 99, 44, 17, 93, 55, 98, 49, 20, 43, 71, 62, 57, 36, 81, 97, 34, 38, 95, 16, 50, 86, 22, 81, 40, 38, 97, 34, 97, 2, 77, 45, 10, 91, 40, 29, 40, 34, 2, 57, 44, 15, 11, 31, 7, 20, 30, 54, 89, 19, 88, 32, 5, 82, 67, 80, 52, 57, 54, 92, 66, 99, 54, 2, 22, 88, 23, 61, 52, 0, 68, 74, 49, 30, 79, 12, 13, 43, 88, 87, 99, 31, 82, 80, 47, 2, 0, 37, 80, 90, 6, 98, 68, 2, 2, 56, 61, 25, 6, 96, 2, 20, 68, 95, 82, 76, 72, 97, 16, 61, 49, 30, 25, 30]
last_save: 1008

Gen:26
TrainFitness:1.0
TestFitness:0.0
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(sigmoid(x[index]),+190106.7896).all():
      return False
    else:
      return False
  def adf1(index):
    if np.greater(x[index],+004920.0039).all():
      if np.less(x[index],+834326.8228).all():
        if np.equal(np.cos(x[index]),-419127.8750).all():
          if np.less(np.cos(x[index]),-119150.0770).all():
            return True
          else:
            return False
          return False
        else:
          if np.greater(x[index],-475662.9216).all():
            return False
          else:
            return False
          return True
        return False
      else:
        if np.greater(x[index],-572427.0575).all():
          return False
        else:
          return False
        return False
      return False
    else:
      if np.less(rlog(x[index]),-879906.9218).all():
        return False
      else:
        return True
      return False
  def adf2(index):
    if np.less(x[index],-817389.7296).all():
      return True
    else:
      return True
  def adf3(index):
    if np.equal(np.cos(x[index]),+385513.9045).all():
      if np.equal(sigmoid(x[index]),+963739.9988).all():
        return True
      else:
        return True
      return False
    else:
      if np.equal(x[index],+331891.5724).all():
        if np.less(x[index],-151590.5185).all():
          if np.greater(np.tanh(x[index]),-751881.7349).all():
            return True
          else:
            return False
          return False
        else:
          if np.equal(x[index],-734923.3347).all():
            return True
          else:
            return False
          return False
        return False
      else:
        if np.less(sigmoid(x[index]),+443977.2230).all():
          return False
        else:
          return False
        return True
      return True
  def adf4(index):
    if np.greater(x[index],+204466.8578).all():
      return True
    else:
      return False
  def adf7(index):
    if np.less(np.sin(x[index]),-091809.3638).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+506.900, adf1(1)*+768.209, adf2(2)*-251.447, adf3(3)*+402.448, adf4(4)*-565.519, adf7(7)*-644.058], [0, 0, 0, 1, 0], 460.605)
result=p(); 1.0
IndLenGenome:455
IndGenome:[4, 48, 12, 49, 77, 18, 27, 54, 20, 39, 71, 19, 80, 51, 80, 16, 77, 48, 39, 96, 55, 3, 11, 42, 26, 84, 51, 83, 46, 90, 90, 10, 24, 59, 32, 40, 10, 30, 83, 59, 78, 94, 13, 5, 85, 84, 36, 38, 3, 24, 13, 42, 56, 28, 42, 42, 18, 74, 39, 32, 24, 91, 62, 7, 16, 84, 41, 99, 91, 62, 47, 8, 27, 25, 30, 65, 61, 94, 31, 27, 69, 42, 51, 91, 39, 71, 15, 40, 20, 77, 67, 80, 34, 67, 57, 55, 84, 3, 49, 11, 6, 64, 77, 55, 26, 6, 2, 29, 72, 81, 26, 39, 37, 94, 47, 73, 93, 61, 8, 69, 91, 65, 57, 42, 64, 22, 7, 10, 85, 37, 85, 11, 51, 45, 41, 15, 19, 90, 58, 49, 53, 41, 88, 87, 19, 99, 50, 26, 89, 82, 41, 68, 87, 58, 49, 17, 31, 85, 87, 35, 31, 98, 38, 31, 37, 53, 58, 99, 17, 42, 19, 36, 68, 42, 98, 14, 33, 98, 28, 7, 53, 64, 61, 93, 48, 15, 15, 31, 3, 99, 60, 34, 85, 71, 95, 28, 45, 22, 16, 73, 69, 16, 53, 57, 73, 19, 39, 9, 98, 38, 6, 2, 29, 72, 81, 26, 39, 37, 94, 47, 73, 93, 61, 8, 69, 91, 65, 47, 42, 64, 22, 7, 10, 85, 3, 35, 11, 51, 45, 41, 15, 89, 90, 65, 91, 18, 25, 13, 90, 56, 68, 62, 79, 48, 87, 35, 31, 98, 38, 31, 37, 53, 34, 79, 78, 67, 57, 43, 11, 91, 68, 15, 32, 47, 43, 54, 99, 72, 53, 33, 73, 4, 27, 86, 51, 33, 89, 95, 61, 52, 57, 29, 46, 46, 14, 94, 13, 69, 47, 77, 52, 92, 13, 10, 85, 47, 20, 18, 72, 47, 39, 95, 72, 64, 69, 22, 40, 34, 74, 86, 96, 68, 55, 87, 78, 36, 43, 34, 61, 94, 56, 42, 69, 59, 11, 70, 49, 91, 98, 40, 59, 33, 16, 13, 18, 36, 82, 28, 43, 11, 94, 42, 65, 30, 46, 19, 70, 10, 37, 14, 76, 57, 86, 38, 62, 40, 79, 36, 35, 22, 82, 15, 51, 44, 64, 37, 27, 42, 80, 24, 40, 42, 4, 4, 58, 22, 13, 58, 25, 66, 45, 65, 71, 89, 72, 19, 51, 86, 24, 54, 0, 55, 28, 60, 10, 10, 42, 69, 10, 17, 64, 26, 80, 6, 30, 5, 63, 96, 39, 64, 75, 24, 79, 35, 12, 57, 4, 0, 32, 61, 97, 16, 22, 39, 81, 69, 69, 68, 59, 86, 39, 35, 81, 96, 67, 1, 31, 81, 86, 91, 78, 73, 91, 64, 54]
last_save: 1008

Gen:26
last_save: 1008
Exit:TrueFalseFalse

Gen:1
TrainFitness:1.0
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(rlog(x[index]),+133916.2269).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(x[index],+532685.0645).all():
      return False
    else:
      return False
  def adf2(index):
    if np.less(x[index],-256717.5790).all():
      return False
    else:
      return True
  def adf3(index):
    if np.less(x[index],+005855.3964).all():
      return False
    else:
      return True
  def adf4(index):
    if np.less(np.tanh(x[index]),-136662.0000).all():
      return True
    else:
      return True
  def adf7(index):
    if np.greater(x[index],-636681.0339).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+175.141, adf1(1)*-318.392, adf2(2)*+287.523, adf3(3)*+861.540, adf4(4)*-426.033, adf7(7)*+817.140], [0, 0, 1, 1, 1], 428.389)
result=p(); 1.0
IndLenGenome:282
IndGenome:[30, 67, 79, 66, 80, 21, 37, 86, 60, 38, 49, 81, 30, 86, 10, 57, 46, 75, 86, 8, 3, 40, 3, 45, 67, 96, 78, 66, 67, 65, 85, 31, 63, 24, 88, 67, 22, 35, 21, 21, 94, 97, 29, 17, 13, 7, 78, 78, 85, 72, 45, 82, 27, 3, 62, 58, 89, 65, 40, 73, 57, 65, 16, 69, 38, 93, 34, 57, 84, 81, 32, 78, 78, 61, 64, 91, 73, 21, 16, 54, 59, 22, 40, 91, 4, 39, 23, 82, 22, 13, 73, 80, 50, 66, 78, 26, 40, 99, 6, 86, 82, 13, 15, 99, 16, 71, 2, 88, 56, 28, 89, 86, 86, 64, 26, 85, 34, 60, 13, 38, 76, 40, 41, 13, 30, 60, 71, 83, 16, 90, 69, 20, 92, 82, 87, 83, 46, 17, 69, 65, 27, 83, 72, 95, 18, 36, 23, 46, 55, 45, 25, 63, 55, 25, 82, 78, 13, 26, 71, 94, 12, 98, 55, 97, 80, 54, 35, 11, 36, 52, 33, 76, 75, 20, 33, 11, 46, 20, 96, 13, 52, 79, 74, 41, 79, 93, 22, 61, 46, 23, 21, 0, 98, 52, 95, 1, 43, 54, 62, 87, 19, 58, 0, 83, 74, 61, 44, 0, 32, 78, 44, 9, 16, 75, 52, 66, 82, 93, 23, 93, 67, 1, 0, 71, 61, 74, 29, 39, 35, 68, 60, 92, 87, 95, 82, 84, 64, 58, 42, 42, 98, 90, 80, 23, 98, 10, 34, 17, 11, 16, 52, 55, 34, 35, 7, 66, 34, 40, 24, 45, 98, 39, 18, 24, 76, 67, 4, 9, 77, 64, 37, 6, 12, 33, 81, 10, 81, 68, 32, 68, 3, 99]
last_save: 1009

Gen:1
last_save: 1009
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.3333333333333333
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(np.sin(x[index]),-934067.8361).all():
      return False
    else:
      return True
  def adf1(index):
    if np.equal(x[index],+511625.4339).all():
      return True
    else:
      return True
  def adf2(index):
    if np.equal(x[index],-028217.0649).all():
      return False
    else:
      return False
  def adf3(index):
    if np.equal(rlog(x[index]),+214086.6737).all():
      return False
    else:
      return True
  def adf4(index):
    if np.equal(rlog(x[index]),-794110.1456).all():
      return False
    else:
      return True
  def adf7(index):
    if np.greater(x[index],-778127.9897).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+904.501, adf1(1)*-877.574, adf2(2)*-939.286, adf3(3)*+417.611, adf4(4)*-654.299, adf7(7)*+436.949], [1, 0, 1, 1, 0], 300.013)
result=p(); 0.6666666666666666
IndLenGenome:283
IndGenome:[36, 65, 41, 23, 63, 6, 55, 43, 73, 97, 80, 10, 9, 30, 53, 71, 91, 42, 64, 63, 75, 15, 86, 90, 12, 74, 8, 20, 8, 14, 83, 77, 52, 17, 33, 92, 42, 91, 42, 14, 10, 74, 85, 46, 36, 92, 24, 31, 77, 85, 98, 75, 49, 13, 87, 49, 47, 20, 96, 39, 92, 9, 84, 43, 61, 19, 69, 7, 49, 22, 45, 81, 29, 8, 34, 61, 80, 83, 35, 24, 25, 25, 54, 19, 46, 26, 79, 39, 25, 62, 47, 96, 76, 87, 9, 86, 91, 56, 33, 15, 43, 88, 19, 8, 66, 37, 63, 10, 6, 31, 68, 29, 13, 93, 34, 101, 42, 47, 19, 46, 21, 31, 52, 54, 14, 90, 29, 75, 9, 32, 59, 97, 50, 46, 81, 61, 38, 33, 17, 11, 45, 24, 51, 42, 71, 97, 76, 72, 34, 64, 81, 17, 92, 67, 43, 19, 80, 80, 84, 13, 80, 29, 68, 27, 18, 66, 74, 98, 39, 24, 60, 64, 13, 31, 73, 66, 69, 67, 86, 89, 21, 77, 97, 74, 58, 97, 80, 46, 40, 44, 30, 76, 56, 52, 29, 38, 21, 64, 78, 30, 90, 59, 15, 59, 65, 78, 18, 38, 10, 56, 98, 40, 76, 40, 33, 87, 23, 92, 18, 89, 80, 50, 33, 89, 7, 22, 47, 6, 87, 65, 46, 96, 44, 16, 3, 4, 98, 50, 52, 6, 65, 2, 57, 14, 41, 95, 45, 28, 35, 39, 13, 14, 54, 0, 26, 40, 36, 90, 58, 14, 26, 7, 49, 99, 98, 46, 86, 64, 41, 76, 90, 21, 74, 7, 75, 4, 76, 63, 55, 31, 64, 36, 19]
last_save: 10010

Gen:3
TrainFitness:0.8333333333333334
TestFitness:0.5
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(rlog(x[index]),-505671.9150).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(x[index],+027802.3058).all():
      return False
    else:
      return True
  def adf2(index):
    if np.greater(x[index],-169525.5043).all():
      return False
    else:
      return True
  def adf3(index):
    if np.less(np.cos(x[index]),-306224.6697).all():
      if np.greater(x[index],-019562.8486).all():
        if np.less(sigmoid(x[index]),-271334.1865).all():
          if np.less(x[index],+467819.2695).all():
            if np.greater(x[index],-421091.9574).all():
              return False
            else:
              return True
            return False
          else:
            if np.greater(np.cos(x[index]),-042575.3423).all():
              return False
            else:
              return False
            return True
          return False
        else:
          if np.equal(np.sin(x[index]),+514874.3750).all():
            return False
          else:
            return False
          return False
        return True
      else:
        if np.equal(psqrt(x[index]),-576577.8659).all():
          return False
        else:
          return False
        return True
      return False
    else:
      if np.equal(psqrt(x[index]),-560491.7673).all():
        return True
      else:
        return True
      return True
  def adf4(index):
    if np.equal(x[index],+893924.3867).all():
      return True
    else:
      return True
  def adf7(index):
    if np.equal(np.sin(x[index]),+723484.3099).all():
      if np.less(x[index],+953303.8854).all():
        return True
      else:
        return True
      return True
    else:
      if np.greater(np.sin(x[index]),-064674.7458).all():
        return False
      else:
        return True
      return True
  return multiple_operation([adf0(0)*-483.569, adf1(1)*+898.467, adf2(2)*-805.098, adf3(3)*+110.631, adf4(4)*+557.513, adf7(7)*+608.440], [1, 0, 1, 0, 0], 148.795)
result=p(); 0.8333333333333334
IndLenGenome:454
IndGenome:[93, 22, 91, 17, 49, 62, 22, 71, 91, 55, 15, 100, 45, 26, 47, 71, 59, 21, 95, 50, 57, 37, 20, 83, 1, 63, 7, 10, 36, 40, 22, 57, 68, 10, 62, 83, 30, 25, 8, 17, 58, 29, 73, 12, 71, 10, 77, 26, 51, 16, 89, 95, 42, 55, 55, 20, 44, 83, 61, 24, 94, 26, 16, 70, 76, 97, 29, 77, 78, 73, 10, 56, 42, 2, 4, 6, 76, 9, 47, 10, 61, 51, 37, 88, 61, 90, 20, 11, 39, 25, 16, 62, 8, 74, 78, 26, 74, 11, 67, 34, 3, 54, 13, 98, 62, 37, 11, 13, 13, 74, 81, 58, 86, 35, 96, 98, 64, 69, 14, 92, 32, 64, 56, 37, 78, 61, 59, 82, 76, 49, 15, 27, 27, 13, 44, 23, 96, 64, 12, 31, 60, 39, 91, 29, 45, 87, 34, 97, 2, 43, 49, 72, 50, 55, 21, 87, 38, 40, 74, 2, 35, 57, 55, 73, 54, 52, 33, 29, 17, 94, 15, 75, 92, 16, 84, 27, 18, 33, 85, 1, 14, 48, 27, 54, 23, 37, 55, 80, 15, 11, 31, 64, 35, 71, 80, 83, 52, 49, 81, 15, 97, 86, 45, 77, 87, 28, 46, 25, 89, 55, 57, 80, 41, 43, 98, 40, 59, 27, 45, 13, 95, 56, 10, 14, 39, 81, 57, 6, 57, 13, 48, 42, 30, 94, 31, 68, 55, 11, 84, 99, 78, 59, 53, 59, 72, 24, 13, 98, 36, 77, 98, 60, 23, 34, 13, 29, 86, 18, 20, 64, 78, 17, 82, 83, 74, 58, 54, 13, 80, 49, 89, 89, 37, 63, 99, 84, 27, 59, 55, 93, 43, 80, 93, 18, 98, 35, 14, 22, 66, 66, 81, 99, 56, 78, 44, 93, 80, 90, 96, 14, 96, 57, 34, 77, 74, 95, 58, 53, 54, 74, 57, 77, 12, 93, 98, 84, 48, 93, 95, 86, 79, 12, 12, 80, 48, 49, 58, 84, 96, 27, 82, 39, 71, 18, 30, 55, 70, 59, 28, 57, 56, 84, 61, 61, 50, 26, 43, 41, 96, 14, 81, 75, 65, 37, 85, 41, 93, 54, 94, 29, 96, 60, 98, 74, 14, 80, 19, 25, 6, 43, 6, 56, 40, 11, 34, 88, 47, 39, 45, 0, 62, 89, 40, 63, 12, 1, 3, 46, 11, 15, 28, 81, 99, 62, 23, 76, 67, 74, 22, 26, 82, 88, 57, 77, 19, 33, 30, 41, 33, 0, 92, 100, 67, 82, 54, 76, 1, 75, 24, 7, 62, 68, 35, 49, 20, 78, 16, 62, 94, 5, 72, 49, 42, 14, 36, 45, 38, 91, 22, 45, 1, 96, 18, 11, 17, 46, 100, 71, 4, 65, 82, 80, 2, 81]
last_save: 10010

Gen:44
TrainFitness:1.0
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(rlog(x[index]),+505671.9150).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(x[index],+006027.0023).all():
      return True
    else:
      return False
  def adf2(index):
    if np.less(x[index],+076169.5255).all():
      return True
    else:
      return True
  def adf3(index):
    if np.greater(np.tanh(x[index]),+797830.6224).all():
      return True
    else:
      return True
  def adf4(index):
    if np.less(x[index],-100195.6284).all():
      return True
    else:
      return True
  def adf7(index):
    if np.less(sigmoid(x[index]),-271334.1865).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+467.819, adf1(1)*+577.343, adf2(2)*+109.195, adf3(3)*+239.200, adf4(4)*-048.575, adf7(7)*+397.455], [0, 0, 1, 0, 1], 148.745)
result=p(); 1.0
IndLenGenome:457
IndGenome:[93, 22, 91, 17, 49, 62, 22, 71, 62, 62, 15, 100, 45, 26, 47, 71, 59, 21, 95, 50, 57, 37, 20, 83, 1, 63, 7, 10, 36, 40, 10, 36, 40, 22, 57, 30, 10, 62, 83, 30, 25, 8, 17, 58, 29, 73, 12, 71, 10, 77, 26, 51, 16, 89, 95, 42, 55, 55, 20, 44, 83, 61, 24, 94, 26, 16, 70, 76, 97, 29, 77, 78, 73, 10, 56, 42, 2, 4, 6, 76, 9, 47, 10, 61, 51, 37, 88, 61, 90, 20, 11, 39, 25, 16, 62, 8, 74, 78, 26, 74, 11, 67, 34, 3, 54, 13, 98, 62, 37, 11, 13, 13, 74, 81, 58, 86, 35, 96, 98, 73, 69, 14, 92, 32, 64, 56, 37, 78, 61, 59, 82, 76, 49, 15, 27, 27, 13, 44, 23, 96, 64, 12, 31, 60, 39, 91, 29, 45, 87, 34, 97, 2, 43, 49, 72, 50, 40, 21, 87, 38, 40, 74, 8, 35, 57, 55, 73, 54, 77, 33, 29, 17, 94, 15, 75, 92, 16, 84, 27, 18, 33, 85, 1, 14, 48, 27, 54, 45, 37, 4, 80, 15, 11, 47, 64, 35, 71, 80, 83, 52, 49, 81, 93, 97, 86, 45, 77, 86, 28, 46, 25, 89, 55, 57, 80, 41, 43, 98, 40, 59, 27, 45, 13, 95, 56, 10, 14, 39, 81, 57, 6, 57, 13, 48, 42, 30, 94, 31, 68, 55, 11, 84, 99, 78, 59, 53, 59, 72, 24, 13, 98, 81, 51, 87, 81, 68, 63, 56, 18, 64, 55, 27, 30, 52, 67, 17, 67, 40, 96, 56, 96, 47, 78, 85, 55, 37, 76, 93, 45, 84, 26, 22, 67, 55, 65, 19, 21, 56, 88, 49, 34, 50, 48, 48, 71, 50, 69, 5, 53, 12, 54, 97, 73, 27, 36, 46, 77, 60, 47, 32, 23, 60, 86, 39, 26, 99, 43, 81, 56, 64, 75, 73, 98, 25, 4, 18, 70, 37, 32, 90, 74, 96, 41, 50, 23, 71, 18, 30, 55, 70, 59, 28, 57, 56, 84, 61, 61, 50, 26, 43, 41, 27, 14, 81, 75, 65, 37, 85, 41, 93, 54, 94, 29, 96, 60, 98, 74, 14, 80, 19, 25, 6, 43, 6, 56, 40, 11, 34, 88, 47, 39, 45, 0, 62, 89, 40, 63, 12, 1, 3, 46, 11, 15, 28, 81, 99, 62, 23, 76, 67, 74, 22, 26, 82, 88, 57, 77, 19, 33, 30, 41, 33, 0, 92, 100, 67, 82, 54, 76, 1, 75, 24, 7, 62, 68, 35, 49, 20, 78, 16, 62, 94, 5, 72, 49, 42, 14, 36, 45, 38, 91, 22, 45, 1, 96, 18, 11, 17, 46, 100, 71, 4, 65, 82, 80, 2, 81]
last_save: 10010

Gen:44
last_save: 10010
Exit:TrueFalseFalse