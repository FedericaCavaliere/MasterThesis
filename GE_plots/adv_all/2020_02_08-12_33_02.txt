Dataset:Meander/Full.csv
FS:True
Seed:1237
Size:3

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],+081233.8266).all():
      return False
    else:
      return False
  def adf1(index):
    if np.equal(rlog(x[index]),+421436.1079).all():
      return True
    else:
      return True
  def adf2(index):
    if np.equal(np.cos(x[index]),-132936.0643).all():
      return False
    else:
      return False
  def adf3(index):
    if np.equal(x[index],+660924.7699).all():
      return False
    else:
      return False
  def adf4(index):
    if np.less(x[index],-409604.4045).all():
      return True
    else:
      return False
  def adf7(index):
    if np.equal(x[index],+684405.6256).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-435.520, adf1(1)*+887.000, adf2(2)*-675.276, adf3(3)*+908.982, adf4(4)*-075.030, adf7(7)*-620.053], [1, 0, 1, 1, 1], 316.543)
result=p(); 0.8333333333333334
IndLenGenome:282
IndGenome:[78, 94, 28, 37, 6, 25, 68, 41, 74, 27, 49, 56, 59, 87, 9, 64, 42, 44, 74, 74, 61, 45, 47, 43, 19, 83, 93, 29, 74, 41, 32, 53, 71, 59, 65, 84, 77, 59, 79, 36, 61, 12, 67, 17, 14, 57, 36, 26, 26, 19, 47, 60, 40, 13, 23, 49, 26, 46, 19, 29, 18, 52, 17, 82, 16, 84, 41, 29, 5, 20, 75, 61, 72, 91, 21, 51, 40, 51, 41, 57, 73, 77, 51, 14, 40, 12, 63, 21, 36, 30, 83, 66, 4, 56, 1, 85, 31, 89, 21, 94, 16, 51, 68, 57, 28, 92, 64, 92, 12, 40, 90, 53, 59, 61, 91, 38, 93, 59, 97, 55, 63, 88, 34, 55, 48, 92, 19, 48, 93, 96, 72, 60, 48, 15, 87, 26, 93, 30, 16, 36, 39, 23, 46, 47, 50, 91, 36, 5, 70, 35, 28, 38, 70, 97, 93, 32, 90, 23, 40, 44, 74, 20, 58, 20, 84, 88, 46, 76, 75, 59, 70, 44, 46, 94, 82, 24, 68, 24, 93, 60, 50, 19, 75, 42, 65, 90, 50, 15, 39, 29, 67, 77, 13, 50, 7, 86, 61, 42, 82, 99, 59, 74, 88, 94, 32, 48, 72, 61, 71, 87, 90, 97, 69, 81, 40, 46, 98, 3, 34, 90, 33, 9, 14, 87, 32, 77, 77, 97, 67, 39, 38, 59, 81, 71, 7, 75, 81, 93, 66, 50, 25, 8, 69, 91, 9, 10, 53, 30, 9, 25, 47, 44, 56, 78, 60, 32, 47, 64, 100, 75, 11, 90, 79, 46, 5, 69, 73, 45, 72, 89, 74, 22, 41, 35, 21, 97, 80, 9, 63, 90, 84, 61]
last_save: 331

Gen:2001
last_save: 331
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(np.cos(x[index]),-508638.0102).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(psqrt(x[index]),+646540.6969).all():
      return True
    else:
      return True
  def adf2(index):
    if np.greater(x[index],+901256.8646).all():
      return True
    else:
      return True
  def adf3(index):
    if np.equal(np.sin(x[index]),+950491.5964).all():
      return True
    else:
      return True
  def adf4(index):
    if np.greater(x[index],-815366.3955).all():
      return True
    else:
      return False
  def adf7(index):
    if np.equal(psqrt(x[index]),-967179.3121).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+540.010, adf1(1)*-212.569, adf2(2)*-283.209, adf3(3)*-965.723, adf4(4)*+609.361, adf7(7)*+744.418], [0, 0, 0, 0, 1], 413.403)
result=p(); 0.6666666666666666
IndLenGenome:285
IndGenome:[13, 73, 56, 40, 6, 36, 5, 32, 87, 44, 69, 6, 86, 87, 73, 5, 87, 86, 33, 12, 82, 50, 73, 19, 87, 71, 31, 29, 14, 73, 18, 80, 8, 90, 39, 51, 32, 43, 5, 39, 5, 16, 52, 95, 16, 44, 71, 88, 46, 60, 52, 89, 46, 92, 43, 60, 67, 98, 21, 49, 86, 12, 84, 4, 15, 63, 69, 89, 44, 42, 20, 84, 97, 76, 81, 57, 75, 79, 70, 45, 9, 18, 79, 41, 66, 45, 56, 44, 67, 53, 89, 91, 76, 48, 86, 44, 76, 78, 62, 30, 43, 79, 45, 95, 53, 48, 75, 14, 29, 51, 42, 4, 12, 58, 30, 20, 7, 16, 77, 72, 19, 14, 31, 69, 22, 95, 76, 50, 26, 76, 73, 98, 96, 45, 69, 83, 91, 27, 28, 69, 70, 72, 90, 53, 16, 33, 92, 89, 90, 58, 20, 26, 40, 41, 50, 11, 64, 28, 18, 31, 30, 52, 41, 39, 59, 41, 27, 83, 96, 16, 23, 86, 76, 41, 60, 30, 57, 15, 90, 45, 40, 66, 79, 29, 75, 61, 95, 54, 39, 64, 9, 2, 79, 45, 74, 20, 43, 29, 64, 72, 95, 61, 30, 28, 66, 99, 94, 35, 32, 54, 84, 65, 86, 84, 60, 90, 40, 92, 45, 59, 37, 100, 40, 7, 57, 11, 5, 36, 53, 77, 11, 4, 98, 18, 42, 73, 80, 49, 62, 64, 49, 37, 94, 46, 5, 94, 98, 18, 94, 86, 39, 0, 52, 33, 75, 21, 6, 21, 88, 22, 36, 60, 34, 79, 70, 40, 57, 6, 39, 37, 45, 42, 36, 25, 9, 8, 93, 75, 95, 29, 49, 29, 21, 38, 9]
last_save: 332

Gen:3
TrainFitness:0.8333333333333334
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],+036502.4395).all():
      if np.greater(np.tanh(x[index]),-120109.7098).all():
        return False
      else:
        return False
      return True
    else:
      if np.greater(x[index],+297775.2674).all():
        return False
      else:
        return True
      return True
  def adf1(index):
    if np.less(x[index],+010907.1845).all():
      return True
    else:
      return True
  def adf2(index):
    if np.equal(rlog(x[index]),-708636.4761).all():
      if np.less(x[index],-185294.2307).all():
        return True
      else:
        return True
      return True
    else:
      if np.greater(x[index],-654352.7254).all():
        if np.greater(rlog(x[index]),+105971.0201).all():
          return False
        else:
          return False
        return True
      else:
        if np.less(x[index],+851341.0550).all():
          if np.equal(np.sin(x[index]),-583355.3884).all():
            return True
          else:
            return False
          return False
        else:
          if np.greater(sigmoid(x[index]),-824133.3607).all():
            return True
          else:
            return True
          return False
        return True
      return True
  def adf3(index):
    if np.greater(x[index],-819899.7020).all():
      return False
    else:
      return True
  def adf4(index):
    if np.less(psqrt(x[index]),+907241.2536).all():
      return False
    else:
      return True
  def adf7(index):
    if np.equal(x[index],-727912.2988).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*-805.989, adf1(1)*+654.393, adf2(2)*+003.644, adf3(3)*-315.514, adf4(4)*+242.186, adf7(7)*+217.538], [1, 1, 1, 0, 0], 221.365)
result=p(); 0.8333333333333334
IndLenGenome:366
IndGenome:[88, 92, 33, 72, 35, 67, 3, 90, 30, 37, 20, 93, 6, 45, 40, 82, 54, 53, 39, 15, 61, 51, 38, 92, 93, 47, 87, 71, 12, 50, 11, 90, 49, 7, 40, 79, 68, 55, 73, 18, 81, 90, 61, 84, 78, 99, 42, 39, 47, 27, 7, 85, 52, 66, 37, 54, 69, 70, 30, 86, 73, 67, 51, 99, 74, 48, 80, 61, 50, 49, 10, 77, 41, 78, 64, 5, 50, 60, 77, 2, 18, 56, 40, 82, 70, 9, 53, 27, 20, 98, 16, 13, 26, 44, 47, 46, 21, 51, 61, 91, 50, 21, 85, 91, 78, 5, 2, 69, 34, 22, 63, 20, 17, 78, 38, 34, 6, 9, 33, 33, 78, 97, 93, 86, 75, 54, 93, 5, 22, 77, 72, 35, 44, 13, 36, 18, 52, 74, 2, 75, 31, 10, 65, 69, 77, 91, 30, 12, 90, 21, 13, 15, 82, 22, 54, 76, 89, 2, 20, 89, 88, 75, 41, 43, 84, 31, 50, 95, 5, 80, 19, 80, 22, 96, 83, 45, 69, 85, 8, 63, 73, 85, 25, 93, 28, 68, 24, 16, 91, 21, 25, 90, 92, 69, 63, 87, 23, 98, 72, 14, 71, 73, 93, 23, 66, 60, 37, 70, 26, 49, 28, 98, 44, 35, 75, 15, 10, 35, 47, 8, 31, 69, 98, 99, 79, 47, 50, 62, 70, 23, 68, 59, 17, 79, 60, 65, 47, 60, 30, 69, 50, 87, 32, 74, 41, 82, 35, 63, 76, 25, 46, 49, 19, 74, 23, 50, 19, 33, 77, 82, 47, 19, 31, 22, 52, 39, 78, 88, 21, 88, 71, 72, 36, 71, 56, 58, 80, 55, 9, 78, 19, 36, 94, 58, 66, 75, 44, 93, 89, 53, 86, 84, 86, 50, 70, 93, 46, 4, 34, 17, 47, 57, 53, 61, 85, 95, 21, 84, 29, 34, 16, 82, 54, 72, 21, 68, 56, 39, 90, 14, 22, 1, 17, 15, 33, 48, 97, 37, 51, 31, 34, 50, 59, 2, 2, 81, 13, 26, 25, 58, 73, 96, 55, 27, 10, 86, 78, 30, 45, 29, 55, 61, 45, 17, 11, 5, 91, 42, 16, 23, 30, 97, 72, 26, 22, 38]
last_save: 332

Gen:1618
TrainFitness:1.0
TestFitness:0.5
MaxGenLen:980
Individual: def p():
  def adf0(index):
    if np.less(x[index],+026860.3068).all():
      if np.greater(rlog(x[index]),-423356.5257).all():
        return True
      else:
        return True
      return True
    else:
      if np.less(x[index],-233505.2576).all():
        return True
      else:
        return True
      return False
  def adf1(index):
    if np.greater(np.sin(x[index]),+531730.9749).all():
      return True
    else:
      return False
  def adf2(index):
    if np.less(x[index],-883630.6209).all():
      return False
    else:
      return False
  def adf3(index):
    if np.greater(x[index],+008795.9678).all():
      return True
    else:
      return False
  def adf4(index):
    if np.less(np.cos(x[index]),-973441.6548).all():
      if np.equal(x[index],-578833.0867).all():
        return False
      else:
        return True
      return True
    else:
      if np.greater(x[index],+000003.7959).all():
        return True
      else:
        return False
      return True
  def adf7(index):
    if np.less(np.cos(x[index]),+691973.4416).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*-515.781, adf1(1)*+860.893, adf2(2)*+163.553, adf3(3)*+569.307, adf4(4)*+700.907, adf7(7)*-753.918], [0, 1, 0, 1, 1], 111.441)
result=p(); 1.0
IndLenGenome:955
IndGenome:[27, 55, 42, 72, 13, 46, 21, 70, 22, 0, 20, 12, 6, 78, 16, 90, 83, 60, 6, 48, 23, 12, 84, 4, 41, 33, 75, 74, 32, 83, 23, 35, 86, 65, 22, 45, 97, 56, 14, 50, 33, 40, 41, 33, 75, 74, 32, 83, 23, 35, 60, 65, 22, 45, 97, 56, 14, 50, 33, 40, 91, 6, 70, 66, 14, 100, 77, 45, 13, 11, 87, 3, 40, 29, 87, 4, 29, 38, 49, 31, 57, 76, 77, 74, 57, 25, 28, 28, 73, 6, 73, 60, 36, 72, 10, 29, 67, 3, 81, 11, 96, 47, 90, 40, 30, 70, 40, 58, 67, 49, 65, 39, 46, 77, 38, 10, 25, 31, 28, 73, 16, 78, 61, 36, 79, 61, 59, 67, 3, 4, 4, 41, 96, 75, 74, 18, 7, 23, 35, 14, 65, 41, 85, 97, 8, 88, 83, 33, 40, 48, 6, 7, 75, 74, 32, 83, 69, 81, 11, 96, 47, 90, 40, 30, 70, 40, 43, 67, 49, 65, 39, 46, 77, 38, 10, 25, 31, 28, 73, 16, 100, 61, 36, 79, 61, 59, 67, 3, 4, 4, 41, 96, 75, 74, 18, 7, 23, 35, 14, 65, 41, 85, 97, 8, 71, 83, 74, 40, 48, 6, 20, 88, 69, 33, 77, 18, 58, 11, 6, 83, 85, 45, 43, 35, 78, 63, 85, 76, 49, 93, 10, 67, 25, 68, 78, 47, 60, 30, 69, 50, 87, 69, 15, 4, 77, 45, 13, 59, 21, 88, 2, 98, 27, 76, 43, 73, 81, 81, 71, 41, 4, 84, 31, 67, 23, 73, 83, 17, 45, 53, 8, 50, 11, 90, 49, 7, 40, 79, 68, 55, 73, 18, 81, 90, 61, 84, 78, 99, 42, 39, 47, 27, 7, 85, 52, 66, 51, 54, 69, 70, 30, 86, 73, 67, 51, 99, 74, 48, 80, 61, 50, 49, 10, 77, 41, 78, 64, 5, 50, 60, 77, 2, 18, 56, 40, 82, 70, 9, 53, 27, 20, 98, 16, 13, 26, 44, 47, 46, 21, 51, 61, 91, 50, 21, 85, 91, 78, 5, 2, 69, 34, 22, 63, 20, 17, 78, 38, 34, 6, 9, 33, 33, 78, 97, 93, 86, 75, 54, 93, 5, 96, 77, 72, 35, 11, 13, 36, 18, 52, 74, 2, 75, 31, 10, 65, 69, 77, 91, 30, 12, 90, 21, 13, 15, 82, 22, 54, 76, 89, 2, 20, 89, 88, 75, 41, 43, 84, 31, 50, 95, 5, 80, 19, 80, 22, 96, 83, 45, 69, 85, 8, 63, 73, 85, 25, 93, 28, 68, 24, 16, 91, 21, 25, 90, 92, 69, 63, 87, 23, 98, 72, 14, 71, 73, 93, 23, 66, 60, 37, 70, 26, 49, 28, 98, 44, 35, 75, 15, 10, 35, 47, 8, 31, 69, 98, 99, 79, 47, 50, 62, 70, 23, 68, 59, 17, 79, 60, 65, 47, 60, 30, 69, 50, 87, 32, 74, 41, 82, 35, 63, 76, 25, 46, 49, 19, 74, 23, 50, 19, 33, 77, 82, 47, 19, 31, 22, 52, 39, 78, 88, 21, 88, 71, 72, 36, 71, 56, 58, 80, 55, 9, 78, 19, 36, 94, 58, 66, 75, 44, 93, 89, 53, 86, 84, 86, 50, 70, 93, 46, 4, 34, 17, 47, 57, 54, 76, 89, 2, 60, 30, 69, 50, 87, 32, 74, 22, 99, 74, 45, 17, 56, 14, 20, 98, 16, 4, 26, 44, 80, 56, 14, 35, 33, 40, 91, 6, 70, 66, 15, 41, 82, 35, 63, 76, 25, 46, 49, 19, 39, 66, 17, 73, 60, 36, 96, 22, 77, 54, 45, 69, 63, 8, 63, 40, 48, 6, 20, 88, 15, 33, 77, 58, 58, 12, 6, 83, 85, 45, 44, 35, 78, 63, 85, 76, 49, 93, 80, 67, 25, 68, 78, 47, 60, 30, 69, 50, 87, 32, 74, 22, 99, 74, 45, 17, 56, 14, 20, 98, 16, 4, 26, 44, 47, 46, 21, 51, 61, 91, 50, 21, 86, 65, 22, 45, 97, 56, 33, 50, 33, 64, 60, 36, 72, 45, 29, 67, 3, 81, 11, 96, 47, 7, 49, 19, 74, 38, 13, 26, 44, 47, 46, 21, 51, 61, 91, 50, 21, 85, 91, 78, 20, 4, 77, 1, 7, 74, 56, 25, 22, 85, 97, 56, 14, 50, 33, 40, 91, 6, 70, 66, 15, 11, 77, 45, 13, 11, 43, 66, 40, 29, 87, 4, 28, 4, 41, 7, 75, 74, 32, 83, 23, 35, 86, 65, 22, 85, 97, 56, 14, 35, 33, 40, 91, 6, 70, 66, 15, 82, 77, 45, 68, 11, 43, 66, 40, 29, 87, 4, 52, 16, 49, 54, 39, 76, 77, 74, 57, 25, 28, 28, 93, 37, 73, 60, 36, 40, 82, 70, 9, 53, 48, 20, 98, 16, 13, 57, 44, 47, 42, 39, 47, 27, 7, 85, 52, 66, 37, 54, 69, 70, 30, 86, 73, 67, 51, 99, 74, 48, 80, 61, 50, 28, 10, 41, 35, 71, 59, 13, 93, 52, 32, 82, 83, 58, 30, 86, 98, 94, 69, 13, 94, 28, 83, 31, 43, 77, 33, 44, 32, 95, 101, 54, 84, 79, 65, 35, 63, 39, 68, 58, 54, 56, 54, 11, 78, 74, 91, 47, 79, 65, 51, 22, 26, 68, 85, 53, 12, 88, 73, 34, 65, 54, 27, 7, 95, 19, 62, 95, 28, 41, 91, 28, 18, 72, 5, 5, 97, 99, 99, 27, 87, 94, 26, 3, 37, 67, 81, 1, 31, 80, 85, 47, 38, 65, 15, 1, 34, 53, 7, 59, 7, 18, 22, 70, 72, 80, 18, 5, 66, 29, 60, 82, 59, 19, 61, 67, 98, 46, 56, 22, 70, 8, 100, 86, 41, 38, 58, 91, 59, 14, 8, 100, 91, 68, 54]
last_save: 332

Gen:1618
last_save: 332
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.6666666666666666
TestFitness:1.0
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],-314610.3153).all():
      return True
    else:
      return False
  def adf1(index):
    if np.equal(np.sin(x[index]),+543911.7683).all():
      return False
    else:
      return True
  def adf2(index):
    if np.less(np.sin(x[index]),-115745.5196).all():
      return True
    else:
      return True
  def adf3(index):
    if np.less(np.sin(x[index]),+742097.9924).all():
      return False
    else:
      return True
  def adf4(index):
    if np.less(x[index],+962614.5498).all():
      return False
    else:
      return True
  def adf7(index):
    if np.less(rlog(x[index]),-698021.4371).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-699.197, adf1(1)*+740.757, adf2(2)*-614.970, adf3(3)*-321.995, adf4(4)*-423.893, adf7(7)*-896.946], [1, 0, 1, 0, 1], 854.532)
result=p(); 0.6666666666666666
IndLenGenome:285
IndGenome:[48, 5, 7, 35, 97, 11, 31, 81, 34, 85, 42, 77, 64, 19, 47, 23, 51, 24, 88, 42, 19, 92, 64, 57, 92, 71, 49, 84, 76, 84, 54, 90, 88, 13, 95, 45, 61, 49, 60, 37, 53, 10, 69, 83, 62, 69, 4, 70, 24, 9, 89, 36, 15, 49, 95, 19, 64, 45, 31, 15, 80, 53, 55, 47, 38, 99, 44, 72, 31, 71, 19, 39, 70, 63, 92, 72, 33, 67, 33, 57, 24, 68, 27, 58, 95, 8, 64, 14, 97, 77, 14, 39, 82, 58, 90, 71, 49, 9, 63, 84, 7, 19, 59, 39, 90, 35, 8, 64, 23, 4, 36, 77, 20, 24, 99, 32, 67, 24, 96, 49, 97, 52, 43, 31, 19, 67, 25, 86, 89, 14, 74, 28, 64, 58, 91, 96, 49, 3, 45, 41, 99, 34, 59, 27, 31, 31, 16, 21, 23, 31, 45, 21, 91, 30, 39, 57, 86, 94, 88, 31, 82, 79, 29, 13, 48, 23, 76, 21, 12, 46, 88, 84, 85, 85, 18, 15, 74, 86, 81, 97, 43, 95, 64, 92, 50, 29, 97, 56, 79, 44, 9, 98, 62, 7, 52, 69, 47, 86, 8, 31, 45, 10, 77, 100, 32, 40, 73, 46, 86, 46, 15, 96, 36, 31, 69, 68, 43, 40, 78, 36, 28, 23, 58, 79, 46, 71, 76, 31, 61, 6, 20, 58, 8, 43, 14, 99, 6, 67, 4, 25, 43, 34, 84, 11, 45, 39, 11, 6, 51, 49, 23, 12, 68, 90, 5, 74, 28, 51, 46, 96, 85, 33, 12, 40, 24, 62, 73, 15, 34, 53, 92, 87, 15, 16, 24, 51, 99, 24, 64, 91, 42, 28, 73, 95, 7]
last_save: 333

Gen:11
TrainFitness:0.8333333333333334
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(np.cos(x[index]),+986989.5858).all():
      return True
    else:
      return False
  def adf1(index):
    if np.greater(x[index],+018473.5892).all():
      return False
    else:
      return True
  def adf2(index):
    if np.less(x[index],-327955.2719).all():
      return False
    else:
      return True
  def adf3(index):
    if np.equal(x[index],+466502.1037).all():
      return True
    else:
      return True
  def adf4(index):
    if np.greater(psqrt(x[index]),-674745.4697).all():
      return False
    else:
      return True
  def adf7(index):
    if np.less(x[index],+253806.6210).all():
      if np.equal(x[index],+204030.7616).all():
        return False
      else:
        return False
      return False
    else:
      if np.less(x[index],+855233.9827).all():
        if np.equal(x[index],+413224.4027).all():
          return False
        else:
          return True
        return False
      else:
        if np.greater(np.sin(x[index]),-675582.9127).all():
          return False
        else:
          return False
        return False
      return True
  return multiple_operation([adf0(0)*-465.551, adf1(1)*-538.672, adf2(2)*+186.186, adf3(3)*-475.008, adf4(4)*-326.173, adf7(7)*+556.225], [0, 0, 0, 1, 0], 085.740)
result=p(); 0.8333333333333334
IndLenGenome:270
IndGenome:[68, 44, 64, 5, 49, 66, 91, 79, 94, 99, 29, 8, 76, 49, 58, 49, 15, 68, 95, 68, 34, 71, 39, 9, 87, 45, 83, 30, 58, 80, 41, 58, 4, 77, 53, 95, 98, 89, 32, 75, 74, 14, 59, 100, 23, 44, 37, 21, 63, 12, 57, 89, 45, 25, 82, 17, 61, 19, 99, 40, 86, 17, 17, 67, 69, 100, 24, 84, 86, 16, 45, 60, 82, 11, 90, 13, 37, 48, 12, 5, 19, 39, 26, 47, 12, 47, 97, 86, 27, 94, 47, 24, 95, 44, 86, 9, 37, 87, 8, 60, 64, 13, 43, 65, 60, 28, 15, 12, 65, 93, 68, 60, 96, 76, 82, 51, 100, 29, 5, 23, 55, 58, 3, 22, 90, 74, 40, 83, 80, 67, 26, 11, 16, 41, 89, 41, 24, 52, 40, 27, 13, 22, 45, 88, 75, 75, 92, 83, 43, 49, 68, 92, 77, 33, 53, 9, 60, 24, 49, 44, 61, 83, 72, 2, 84, 34, 20, 42, 67, 61, 44, 99, 47, 51, 28, 60, 39, 49, 85, 16, 97, 25, 25, 98, 52, 79, 31, 72, 77, 65, 59, 23, 48, 52, 33, 22, 25, 45, 94, 86, 35, 75, 15, 41, 49, 69, 94, 25, 83, 78, 26, 57, 2, 91, 36, 10, 51, 98, 76, 71, 68, 56, 83, 63, 95, 14, 77, 55, 20, 100, 78, 58, 83, 4, 53, 32, 56, 91, 67, 23, 65, 30, 77, 25, 85, 36, 82, 32, 85, 12, 70, 48, 86, 43, 96, 61, 30, 48, 15, 67, 4, 0, 47, 72, 81, 37, 17, 85, 90, 48]
last_save: 333

Gen:2011
last_save: 333
Exit:FalseFalseTrue