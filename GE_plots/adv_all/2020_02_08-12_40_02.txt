Dataset:Meander/Full.csv
FS:False
Seed:1236
Size:3

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(np.cos(x[index]),+915779.0029).all():
      return True
    else:
      return True
  def adf1(index):
    if np.less(x[index],-881835.3504).all():
      return False
    else:
      return True
  def adf2(index):
    if np.greater(x[index],+042527.0016).all():
      return False
    else:
      return True
  def adf3(index):
    if np.less(x[index],-105054.6617).all():
      return False
    else:
      return False
  def adf4(index):
    if np.greater(x[index],-602433.3952).all():
      return True
    else:
      return True
  def adf5(index):
    if np.greater(x[index],-109343.1995).all():
      return True
    else:
      return False
  def adf6(index):
    if np.greater(sigmoid(x[index]),-726418.9509).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(x[index],+885863.9197).all():
      return True
    else:
      return True
  def adf8(index):
    if np.less(sigmoid(x[index]),-280850.4617).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+953.272, adf1(1)*-952.426, adf2(2)*-559.454, adf3(3)*+953.376, adf4(4)*+101.937, adf5(5)*-213.696, adf6(6)*+329.929, adf7(7)*-730.843, adf8(8)*-884.438], [1, 0, 0, 0, 1, 1, 0, 1], 007.914)
result=p(); 0.6666666666666666
IndLenGenome:414
IndGenome:[66, 13, 66, 51, 15, 55, 33, 39, 45, 50, 43, 28, 40, 45, 30, 55, 76, 73, 58, 25, 99, 95, 25, 36, 61, 74, 79, 18, 64, 94, 69, 36, 55, 27, 58, 55, 37, 50, 86, 67, 52, 11, 46, 85, 45, 72, 83, 74, 56, 58, 96, 38, 12, 94, 65, 52, 46, 49, 63, 25, 60, 63, 46, 75, 73, 76, 54, 40, 99, 43, 33, 20, 14, 83, 11, 71, 47, 48, 93, 39, 53, 97, 78, 67, 52, 95, 13, 17, 29, 10, 39, 57, 36, 97, 84, 69, 15, 44, 51, 23, 42, 21, 53, 53, 21, 45, 31, 39, 51, 94, 61, 65, 14, 83, 75, 24, 78, 10, 22, 19, 16, 40, 40, 53, 51, 36, 33, 15, 89, 62, 70, 45, 43, 31, 87, 79, 85, 69, 73, 49, 55, 15, 60, 20, 95, 44, 44, 34, 9, 99, 12, 59, 35, 44, 81, 98, 30, 52, 46, 57, 77, 64, 78, 42, 10, 12, 93, 30, 22, 67, 89, 37, 2, 60, 71, 20, 99, 26, 21, 56, 88, 10, 97, 9, 21, 11, 51, 30, 44, 71, 89, 78, 24, 36, 78, 5, 36, 68, 22, 38, 86, 17, 30, 86, 36, 90, 55, 75, 89, 84, 90, 13, 73, 54, 65, 78, 33, 75, 22, 14, 56, 88, 43, 62, 54, 44, 20, 65, 57, 39, 23, 63, 33, 77, 33, 69, 17, 70, 45, 60, 63, 78, 68, 39, 81, 15, 70, 91, 44, 9, 12, 57, 89, 75, 53, 80, 89, 58, 29, 52, 71, 69, 56, 39, 98, 28, 30, 64, 93, 81, 29, 42, 86, 29, 92, 63, 83, 57, 70, 62, 73, 2, 51, 71, 21, 11, 95, 89, 80, 58, 28, 79, 15, 33, 73, 88, 78, 19, 20, 18, 23, 25, 44, 53, 47, 88, 20, 2, 18, 6, 70, 10, 46, 78, 91, 46, 44, 95, 44, 88, 54, 50, 13, 60, 29, 70, 51, 82, 50, 94, 20, 50, 23, 82, 18, 71, 84, 65, 0, 58, 6, 43, 75, 25, 5, 37, 87, 55, 94, 31, 28, 10, 77, 99, 63, 64, 40, 55, 71, 40, 90, 61, 7, 6, 86, 6, 81, 100, 52, 70, 9, 18, 100, 74, 49, 0, 35, 32, 89, 32, 66, 51, 21, 81, 43, 33, 48, 91, 58, 30, 63, 38, 36, 81, 6, 21, 52, 72, 27, 73, 32, 62, 44, 22, 27, 44, 87, 27, 8, 100, 16, 46, 19, 18]
last_save: 321

Gen:2001
last_save: 321
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(rlog(x[index]),+735998.6233).all():
      return False
    else:
      return False
  def adf1(index):
    if np.greater(x[index],+747999.7843).all():
      return True
    else:
      return True
  def adf2(index):
    if np.less(np.sin(x[index]),+107696.0958).all():
      return False
    else:
      return True
  def adf3(index):
    if np.equal(rlog(x[index]),-878364.7736).all():
      return True
    else:
      return False
  def adf4(index):
    if np.less(np.sin(x[index]),+263811.4489).all():
      return False
    else:
      return False
  def adf5(index):
    if np.less(x[index],-321474.4849).all():
      return True
    else:
      return False
  def adf6(index):
    if np.greater(x[index],-254908.5466).all():
      return False
    else:
      return True
  def adf7(index):
    if np.equal(x[index],+131226.5383).all():
      return True
    else:
      return False
  def adf8(index):
    if np.less(x[index],+056406.2311).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+264.388, adf1(1)*+341.536, adf2(2)*+815.408, adf3(3)*-173.967, adf4(4)*-264.226, adf5(5)*+558.141, adf6(6)*+593.199, adf7(7)*-429.475, adf8(8)*+241.535], [1, 0, 0, 1, 1, 1, 1, 1], 165.400)
result=p(); 0.6666666666666666
IndLenGenome:415
IndGenome:[89, 23, 91, 11, 52, 82, 72, 26, 97, 32, 48, 73, 19, 39, 83, 17, 32, 87, 87, 96, 3, 18, 89, 69, 91, 99, 77, 9, 25, 19, 97, 91, 92, 24, 87, 24, 36, 18, 5, 64, 13, 44, 4, 10, 78, 99, 93, 31, 44, 52, 58, 4, 61, 21, 37, 99, 84, 81, 100, 93, 17, 77, 24, 95, 94, 16, 64, 42, 92, 18, 9, 88, 54, 90, 63, 78, 26, 32, 78, 38, 1, 60, 21, 58, 48, 20, 78, 30, 91, 16, 72, 98, 99, 92, 29, 49, 28, 85, 26, 43, 30, 56, 77, 86, 97, 11, 79, 18, 80, 68, 45, 41, 62, 57, 98, 55, 37, 27, 61, 25, 71, 29, 6, 83, 88, 45, 89, 17, 10, 15, 93, 61, 22, 47, 28, 83, 45, 79, 46, 64, 64, 24, 15, 66, 35, 61, 61, 31, 58, 61, 66, 34, 99, 71, 92, 86, 26, 54, 35, 98, 81, 23, 60, 76, 78, 1, 81, 72, 54, 84, 47, 14, 65, 19, 27, 77, 90, 51, 40, 22, 84, 20, 75, 88, 68, 13, 71, 86, 60, 58, 15, 69, 38, 94, 23, 15, 5, 35, 52, 87, 53, 100, 36, 24, 31, 49, 28, 77, 94, 85, 62, 17, 93, 97, 33, 96, 16, 53, 19, 66, 58, 22, 61, 33, 34, 68, 61, 83, 54, 92, 76, 30, 82, 78, 57, 46, 19, 54, 64, 67, 48, 72, 73, 19, 36, 55, 54, 98, 96, 55, 30, 82, 73, 57, 89, 86, 43, 25, 36, 93, 12, 65, 18, 59, 83, 89, 14, 12, 13, 65, 48, 81, 86, 23, 53, 62, 11, 97, 33, 19, 58, 11, 66, 18, 23, 25, 39, 99, 44, 55, 86, 66, 86, 92, 21, 24, 93, 80, 43, 27, 45, 95, 16, 7, 95, 22, 55, 85, 0, 66, 63, 82, 86, 40, 45, 36, 97, 3, 90, 72, 97, 37, 24, 14, 23, 64, 33, 46, 9, 89, 7, 34, 38, 9, 64, 58, 61, 100, 85, 70, 2, 45, 88, 34, 86, 40, 65, 12, 1, 80, 53, 50, 59, 83, 48, 13, 11, 12, 79, 82, 3, 69, 9, 57, 21, 31, 82, 5, 43, 73, 37, 82, 0, 10, 54, 23, 40, 8, 15, 26, 16, 85, 44, 9, 34, 82, 18, 96, 24, 13, 61, 49, 26, 50, 48, 88, 66, 22, 75, 90, 14, 44, 97, 33, 12, 87, 60, 64, 56, 14, 59, 66, 6, 8, 3]
last_save: 322

Gen:8
TrainFitness:0.7777777777777778
TestFitness:0.5555555555555556
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],+698708.1019).all():
      return False
    else:
      return True
  def adf1(index):
    if np.less(x[index],+631721.7916).all():
      return True
    else:
      return False
  def adf2(index):
    if np.equal(x[index],-181740.8118).all():
      return False
    else:
      return True
  def adf3(index):
    if np.less(x[index],-533727.5294).all():
      return False
    else:
      return False
  def adf4(index):
    if np.equal(x[index],-030727.5545).all():
      return False
    else:
      return False
  def adf5(index):
    if np.greater(x[index],+471121.5972).all():
      if np.greater(x[index],+025162.8272).all():
        return False
      else:
        return False
      return False
    else:
      if np.greater(x[index],-521360.9508).all():
        return True
      else:
        return False
      return False
  def adf6(index):
    if np.less(np.sin(x[index]),+652490.6542).all():
      if np.equal(x[index],-368036.2215).all():
        return True
      else:
        return True
      return False
    else:
      if np.equal(x[index],+842990.1520).all():
        return True
      else:
        return False
      return True
  def adf7(index):
    if np.less(x[index],+107708.7272).all():
      return False
    else:
      return True
  def adf8(index):
    if np.less(x[index],+012921.8184).all():
      if np.greater(np.tanh(x[index]),+005399.0242).all():
        return False
      else:
        return False
      return False
    else:
      if np.less(np.tanh(x[index]),-652013.6696).all():
        if np.greater(psqrt(x[index]),+833691.8240).all():
          return True
        else:
          return False
        return True
      else:
        if np.greater(x[index],-052380.7517).all():
          return True
        else:
          return False
        return True
      return False
  return multiple_operation([adf0(0)*+875.460, adf1(1)*+218.120, adf2(2)*+600.477, adf3(3)*-833.116, adf4(4)*-490.936, adf5(5)*+311.503, adf6(6)*-544.746, adf7(7)*+265.591, adf8(8)*-669.417], [1, 1, 1, 0, 0, 0, 0, 1], 700.931)
result=p(); 0.7777777777777778
IndLenGenome:456
IndGenome:[16, 54, 4, 71, 37, 61, 11, 64, 61, 6, 99, 8, 57, 10, 18, 41, 20, 11, 69, 93, 86, 59, 17, 19, 83, 89, 82, 7, 86, 23, 21, 47, 72, 91, 67, 79, 11, 36, 24, 5, 61, 43, 17, 89, 75, 61, 65, 51, 8, 81, 87, 4, 20, 78, 51, 51, 48, 45, 96, 81, 59, 43, 15, 73, 45, 32, 35, 73, 43, 17, 12, 67, 35, 22, 99, 94, 37, 11, 84, 43, 74, 33, 26, 97, 64, 60, 43, 20, 47, 22, 17, 55, 75, 34, 5, 41, 61, 65, 16, 13, 36, 31, 94, 66, 14, 74, 77, 11, 71, 32, 71, 75, 49, 47, 32, 17, 45, 5, 44, 80, 32, 10, 72, 15, 71, 26, 42, 48, 62, 47, 12, 15, 69, 97, 37, 42, 73, 27, 97, 17, 95, 52, 91, 53, 16, 80, 49, 85, 20, 58, 80, 45, 93, 62, 66, 88, 19, 22, 84, 54, 80, 71, 36, 85, 22, 54, 19, 20, 36, 15, 24, 22, 43, 29, 15, 43, 15, 20, 73, 66, 78, 80, 3, 16, 42, 72, 21, 35, 26, 52, 39, 23, 98, 53, 99, 24, 20, 98, 84, 92, 59, 89, 50, 31, 45, 12, 70, 30, 65, 62, 51, 51, 28, 77, 31, 46, 37, 71, 80, 87, 67, 40, 68, 97, 52, 27, 32, 35, 90, 52, 32, 34, 37, 91, 66, 14, 31, 50, 21, 22, 19, 32, 101, 78, 31, 58, 84, 15, 36, 82, 44, 10, 78, 46, 60, 50, 65, 73, 79, 69, 30, 62, 24, 22, 11, 93, 83, 68, 37, 73, 94, 26, 91, 55, 12, 86, 85, 92, 70, 41, 13, 46, 96, 79, 16, 75, 45, 90, 23, 99, 80, 66, 58, 93, 63, 56, 19, 91, 28, 22, 24, 40, 38, 43, 64, 35, 51, 47, 84, 23, 33, 50, 35, 62, 43, 88, 60, 97, 65, 81, 37, 92, 43, 2, 3, 10, 54, 39, 48, 44, 68, 47, 75, 14, 96, 10, 62, 4, 16, 32, 81, 28, 91, 22, 90, 19, 14, 73, 26, 10, 10, 24, 57, 77, 74, 17, 57, 68, 73, 33, 41, 61, 96, 85, 79, 62, 44, 9, 80, 99, 43, 6, 31, 100, 70, 73, 41, 61, 15, 80, 73, 80, 13, 12, 55, 14, 34, 47, 54, 36, 25, 0, 15, 72, 66, 65, 65, 99, 1, 17, 89, 1, 66, 6, 89, 64, 71, 67, 83, 7, 19, 9, 84, 66, 70, 0, 61, 8, 47, 100, 60, 9, 13, 41, 69, 32, 28, 18, 32, 59, 61, 29, 16, 54, 80, 63, 87, 29, 34, 34, 71, 81, 57, 68, 17, 44, 65, 83, 100, 38, 44, 39, 89, 33, 44, 93]
last_save: 322

Gen:2008
last_save: 322
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.7777777777777778
TestFitness:1.0
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(np.sin(x[index]),+673369.9139).all():
      return False
    else:
      return True
  def adf1(index):
    if np.equal(psqrt(x[index]),-794046.0926).all():
      return True
    else:
      return True
  def adf2(index):
    if np.equal(np.cos(x[index]),+000295.5520).all():
      return True
    else:
      return True
  def adf3(index):
    if np.less(x[index],+037659.1465).all():
      return True
    else:
      return False
  def adf4(index):
    if np.less(x[index],-359994.1145).all():
      return False
    else:
      return False
  def adf5(index):
    if np.greater(np.cos(x[index]),+389537.8805).all():
      return False
    else:
      return True
  def adf6(index):
    if np.equal(x[index],+375244.4865).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(sigmoid(x[index]),+136502.8631).all():
      return False
    else:
      return False
  def adf8(index):
    if np.equal(rlog(x[index]),-088246.0393).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+143.625, adf1(1)*+512.162, adf2(2)*+431.469, adf3(3)*+769.598, adf4(4)*-726.174, adf5(5)*-497.880, adf6(6)*+519.196, adf7(7)*+255.778, adf8(8)*+365.458], [1, 0, 1, 0, 1, 0, 0, 1], 120.761)
result=p(); 0.7777777777777778
IndLenGenome:418
IndGenome:[74, 75, 50, 78, 7, 98, 20, 20, 76, 66, 81, 47, 77, 27, 49, 46, 53, 75, 10, 62, 21, 66, 31, 66, 69, 24, 49, 9, 7, 79, 10, 23, 81, 56, 89, 90, 59, 29, 3, 22, 80, 52, 62, 69, 95, 33, 64, 75, 66, 38, 32, 55, 89, 81, 26, 26, 41, 5, 8, 56, 63, 46, 47, 99, 78, 84, 85, 83, 34, 40, 36, 83, 46, 63, 73, 8, 24, 61, 23, 76, 65, 55, 78, 26, 20, 58, 96, 28, 52, 39, 18, 46, 35, 93, 84, 65, 88, 76, 33, 59, 26, 20, 16, 83, 91, 86, 73, 84, 25, 24, 51, 42, 68, 82, 52, 72, 88, 37, 31, 80, 94, 75, 79, 34, 47, 23, 98, 44, 93, 64, 35, 94, 29, 19, 30, 75, 11, 22, 38, 38, 50, 77, 86, 73, 92, 26, 93, 34, 28, 61, 6, 45, 46, 50, 67, 23, 51, 49, 79, 86, 16, 1, 53, 54, 35, 27, 37, 88, 9, 56, 37, 53, 70, 92, 56, 35, 74, 74, 98, 62, 64, 77, 18, 14, 28, 69, 71, 18, 15, 39, 94, 78, 86, 55, 20, 31, 45, 30, 22, 80, 11, 19, 27, 82, 37, 97, 39, 29, 31, 96, 21, 67, 56, 57, 72, 71, 21, 65, 82, 30, 61, 86, 52, 59, 24, 60, 51, 11, 92, 36, 23, 74, 11, 77, 26, 23, 63, 31, 61, 53, 74, 81, 32, 35, 99, 99, 65, 35, 42, 46, 51, 63, 24, 84, 57, 49, 56, 69, 49, 89, 60, 67, 19, 54, 94, 18, 40, 84, 90, 22, 25, 92, 15, 65, 55, 35, 39, 80, 20, 95, 46, 5, 90, 49, 44, 90, 43, 100, 100, 86, 61, 27, 63, 10, 41, 21, 39, 35, 1, 60, 75, 18, 46, 51, 22, 34, 11, 98, 3, 30, 1, 41, 67, 71, 46, 82, 51, 34, 92, 13, 54, 69, 16, 92, 24, 89, 80, 53, 98, 54, 28, 63, 15, 42, 71, 3, 73, 70, 88, 48, 93, 49, 2, 20, 80, 85, 62, 26, 53, 74, 32, 68, 42, 70, 24, 78, 28, 13, 84, 36, 44, 41, 86, 3, 10, 60, 87, 38, 0, 40, 55, 9, 13, 81, 86, 0, 67, 47, 64, 68, 100, 22, 16, 42, 3, 21, 71, 45, 7, 31, 52, 85, 47, 30, 6, 89, 60, 71, 27, 35, 100, 8, 14, 39, 99, 80, 87, 37, 7, 47, 60, 98, 80, 80, 19, 52, 53, 83]
last_save: 323

Gen:2001
last_save: 323
Exit:FalseFalseTrue