Dataset:Spiral/Full.csv
FS:False
Seed:1237
Size:3

Gen:1
TrainFitness:1.0
TestFitness:0.5555555555555556
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(rlog(x[index]),+054235.9948).all():
      return True
    else:
      return True
  def adf1(index):
    if np.greater(np.cos(x[index]),+297575.0496).all():
      return True
    else:
      return False
  def adf2(index):
    if np.equal(sigmoid(x[index]),-248188.5565).all():
      return True
    else:
      return True
  def adf3(index):
    if np.greater(psqrt(x[index]),-784023.6578).all():
      return True
    else:
      return False
  def adf4(index):
    if np.less(np.cos(x[index]),+342953.4941).all():
      return True
    else:
      return False
  def adf5(index):
    if np.greater(rlog(x[index]),-834150.6132).all():
      return True
    else:
      return True
  def adf6(index):
    if np.greater(x[index],-730352.1519).all():
      return False
    else:
      return True
  def adf7(index):
    if np.less(x[index],+015615.8628).all():
      return False
    else:
      return False
  def adf8(index):
    if np.less(np.cos(x[index]),+377783.3032).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+855.134, adf1(1)*+480.227, adf2(2)*-713.555, adf3(3)*-861.800, adf4(4)*-719.001, adf5(5)*-001.364, adf6(6)*+006.876, adf7(7)*+304.974, adf8(8)*-318.091], [0, 1, 0, 1, 0, 1, 1, 0], 804.467)
result=p(); 1.0
IndLenGenome:420
IndGenome:[41, 81, 46, 30, 96, 24, 87, 41, 95, 21, 77, 33, 54, 37, 84, 30, 79, 97, 4, 37, 46, 7, 42, 10, 63, 78, 17, 14, 70, 87, 38, 15, 68, 5, 54, 92, 67, 56, 30, 85, 92, 86, 59, 24, 87, 13, 41, 92, 20, 33, 22, 33, 60, 93, 34, 42, 96, 14, 49, 96, 52, 87, 19, 88, 96, 87, 59, 47, 25, 81, 60, 43, 13, 69, 40, 48, 81, 60, 46, 93, 36, 21, 24, 38, 67, 7, 53, 35, 36, 60, 47, 41, 47, 16, 29, 53, 15, 27, 33, 90, 28, 90, 72, 27, 76, 84, 85, 51, 78, 48, 75, 74, 99, 41, 4, 34, 35, 53, 37, 29, 76, 81, 51, 60, 24, 63, 80, 98, 68, 8, 11, 61, 52, 91, 29, 14, 88, 29, 36, 27, 60, 73, 50, 74, 40, 93, 58, 50, 69, 93, 46, 40, 75, 91, 36, 75, 97, 65, 34, 30, 88, 53, 100, 77, 34, 18, 22, 91, 55, 38, 33, 53, 24, 52, 31, 54, 95, 29, 37, 17, 40, 19, 82, 54, 33, 78, 51, 90, 82, 16, 85, 25, 68, 13, 46, 44, 40, 60, 77, 26, 26, 95, 67, 50, 37, 57, 65, 87, 74, 89, 29, 81, 28, 42, 29, 93, 58, 18, 80, 35, 44, 52, 94, 51, 75, 33, 12, 55, 59, 15, 13, 35, 60, 48, 65, 43, 54, 18, 59, 22, 90, 14, 3, 47, 73, 73, 45, 74, 14, 39, 46, 94, 73, 26, 18, 26, 52, 98, 46, 65, 31, 35, 16, 71, 74, 18, 80, 85, 55, 86, 74, 65, 61, 71, 78, 62, 42, 68, 95, 27, 77, 29, 48, 38, 91, 18, 68, 32, 86, 15, 5, 22, 4, 66, 74, 25, 50, 64, 94, 56, 20, 64, 12, 25, 66, 44, 29, 72, 25, 59, 20, 20, 51, 81, 72, 77, 87, 93, 5, 37, 84, 0, 37, 39, 14, 69, 58, 54, 12, 34, 58, 100, 48, 88, 47, 97, 20, 32, 72, 97, 51, 13, 58, 67, 50, 72, 40, 100, 47, 51, 57, 57, 33, 23, 59, 78, 17, 46, 34, 52, 54, 42, 59, 93, 8, 7, 2, 51, 39, 36, 12, 72, 90, 66, 90, 61, 9, 78, 44, 10, 39, 27, 80, 81, 23, 20, 62, 71, 34, 4, 35, 16, 51, 39, 50, 43, 54, 99, 70, 55, 77, 33, 89, 85, 3, 72, 27, 0, 5, 41, 77, 7, 26, 63, 32, 45, 17, 73, 9, 92]
last_save: 331

Gen:1
last_save: 331
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],-798895.0555).all():
      return True
    else:
      return True
  def adf1(index):
    if np.equal(np.cos(x[index]),-717731.3866).all():
      return True
    else:
      return True
  def adf2(index):
    if np.equal(rlog(x[index]),-808278.5753).all():
      return True
    else:
      return True
  def adf3(index):
    if np.equal(psqrt(x[index]),-081093.4465).all():
      return True
    else:
      return False
  def adf4(index):
    if np.less(x[index],+761313.6686).all():
      return True
    else:
      return True
  def adf5(index):
    if np.less(np.cos(x[index]),+762551.8006).all():
      return True
    else:
      return True
  def adf6(index):
    if np.greater(x[index],+002552.6889).all():
      return True
    else:
      return False
  def adf7(index):
    if np.equal(np.sin(x[index]),-218653.0060).all():
      return True
    else:
      return False
  def adf8(index):
    if np.greater(sigmoid(x[index]),+498459.2199).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+639.533, adf1(1)*+301.984, adf2(2)*-639.634, adf3(3)*-744.899, adf4(4)*-633.877, adf5(5)*+694.611, adf6(6)*-709.847, adf7(7)*-064.452, adf8(8)*-867.916], [1, 0, 0, 1, 0, 0, 0, 0], 549.793)
result=p(); 0.6666666666666666
IndLenGenome:418
IndGenome:[71, 12, 5, 31, 13, 99, 9, 71, 22, 83, 6, 69, 73, 36, 85, 78, 67, 92, 33, 90, 22, 94, 68, 24, 99, 101, 29, 80, 74, 39, 14, 43, 7, 96, 38, 63, 6, 93, 22, 68, 27, 44, 37, 40, 65, 82, 8, 2, 11, 41, 23, 49, 13, 4, 4, 54, 6, 66, 86, 4, 34, 64, 7, 69, 13, 16, 41, 70, 66, 90, 45, 31, 38, 49, 93, 63, 23, 77, 79, 89, 96, 95, 37, 79, 40, 75, 87, 37, 66, 12, 36, 15, 36, 67, 17, 10, 46, 37, 15, 70, 2, 5, 90, 29, 37, 42, 22, 88, 45, 22, 24, 86, 18, 81, 45, 32, 66, 87, 21, 70, 28, 77, 94, 76, 84, 21, 76, 90, 26, 91, 52, 84, 38, 10, 11, 71, 76, 73, 67, 83, 37, 90, 32, 24, 98, 35, 80, 95, 16, 57, 71, 17, 68, 16, 99, 15, 34, 57, 69, 53, 6, 4, 60, 33, 56, 32, 37, 64, 47, 39, 35, 39, 81, 36, 32, 51, 31, 48, 89, 47, 83, 64, 28, 40, 56, 6, 75, 29, 59, 64, 15, 23, 99, 87, 55, 59, 91, 39, 65, 28, 88, 35, 98, 84, 49, 83, 31, 98, 11, 16, 93, 19, 14, 38, 76, 29, 19, 19, 61, 15, 31, 78, 17, 46, 24, 10, 23, 93, 24, 44, 37, 19, 85, 45, 93, 64, 36, 6, 86, 76, 66, 69, 34, 28, 13, 54, 32, 55, 10, 83, 2, 69, 80, 85, 95, 30, 10, 30, 80, 62, 48, 90, 50, 38, 18, 19, 82, 45, 28, 73, 79, 60, 26, 86, 18, 65, 41, 99, 22, 8, 63, 72, 30, 96, 73, 51, 0, 93, 5, 36, 54, 45, 57, 50, 61, 67, 90, 62, 6, 44, 7, 84, 84, 19, 10, 23, 84, 67, 25, 99, 97, 48, 75, 89, 31, 50, 84, 25, 32, 56, 48, 99, 46, 27, 49, 68, 67, 64, 50, 13, 82, 60, 82, 44, 2, 34, 64, 24, 21, 88, 89, 55, 23, 2, 9, 24, 18, 74, 54, 15, 46, 86, 44, 76, 28, 83, 84, 54, 71, 48, 52, 33, 51, 17, 85, 57, 87, 16, 25, 48, 20, 0, 9, 81, 65, 23, 2, 9, 68, 82, 53, 8, 14, 30, 79, 51, 70, 88, 96, 83, 27, 57, 96, 7, 25, 23, 99, 67, 17, 83, 32, 51, 67, 20, 56, 100, 70, 98, 26, 81, 70, 31, 86, 30, 60, 31, 22, 61]
last_save: 332

Gen:2
TrainFitness:0.6666666666666666
TestFitness:0.8888888888888888
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(np.cos(x[index]),+122730.8693).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(np.sin(x[index]),+185666.2048).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(x[index],+017264.0765).all():
      return False
    else:
      return True
  def adf3(index):
    if np.less(x[index],-288734.0487).all():
      return False
    else:
      return True
  def adf4(index):
    if np.less(rlog(x[index]),+451605.5227).all():
      return False
    else:
      return False
  def adf5(index):
    if np.greater(sigmoid(x[index]),-830999.0963).all():
      return True
    else:
      return True
  def adf6(index):
    if np.less(x[index],-314368.5274).all():
      return False
    else:
      return True
  def adf7(index):
    if np.greater(psqrt(x[index]),-595485.9705).all():
      return True
    else:
      return True
  def adf8(index):
    if np.less(np.sin(x[index]),-112395.9493).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*-820.009, adf1(1)*+698.769, adf2(2)*-667.123, adf3(3)*+453.203, adf4(4)*+754.239, adf5(5)*+688.482, adf6(6)*-445.360, adf7(7)*-354.778, adf8(8)*-395.424], [1, 1, 0, 0, 1, 1, 0, 0], 505.427)
result=p(); 0.6666666666666666
IndLenGenome:418
IndGenome:[57, 34, 12, 75, 11, 56, 14, 47, 82, 5, 59, 65, 69, 21, 51, 10, 99, 93, 81, 46, 45, 23, 95, 67, 47, 77, 36, 74, 37, 55, 85, 79, 49, 30, 82, 52, 3, 77, 39, 16, 71, 37, 30, 19, 46, 6, 2, 65, 49, 41, 44, 22, 12, 85, 1, 86, 84, 50, 57, 16, 85, 80, 25, 92, 74, 75, 35, 11, 48, 72, 10, 84, 41, 26, 22, 71, 47, 2, 13, 69, 19, 47, 51, 40, 85, 53, 78, 18, 24, 87, 16, 32, 27, 87, 50, 22, 44, 66, 39, 87, 9, 79, 33, 95, 64, 37, 43, 22, 20, 56, 65, 67, 81, 67, 49, 61, 31, 34, 80, 13, 25, 50, 48, 88, 34, 13, 85, 15, 19, 67, 78, 43, 63, 43, 20, 34, 32, 53, 49, 17, 23, 15, 27, 97, 58, 74, 86, 31, 82, 32, 87, 47, 23, 50, 18, 76, 27, 46, 17, 78, 60, 75, 24, 56, 63, 42, 73, 45, 78, 59, 18, 60, 28, 10, 63, 83, 69, 61, 90, 90, 46, 36, 26, 22, 93, 4, 93, 94, 56, 30, 56, 18, 60, 20, 60, 87, 37, 20, 61, 20, 72, 61, 90, 48, 6, 86, 72, 99, 84, 2, 85, 47, 6, 89, 90, 65, 84, 20, 81, 15, 85, 15, 59, 65, 52, 34, 36, 16, 79, 48, 11, 19, 57, 43, 17, 69, 44, 61, 23, 78, 79, 14, 43, 10, 24, 89, 24, 53, 38, 45, 47, 13, 8, 44, 38, 27, 82, 74, 70, 37, 49, 58, 14, 65, 99, 22, 50, 45, 32, 91, 86, 74, 98, 43, 96, 72, 71, 42, 19, 43, 27, 62, 31, 70, 99, 89, 55, 33, 9, 91, 23, 43, 74, 30, 75, 35, 71, 53, 75, 2, 23, 26, 37, 24, 6, 53, 55, 46, 67, 52, 24, 78, 16, 73, 62, 11, 37, 20, 81, 92, 74, 52, 70, 29, 18, 16, 33, 62, 48, 60, 7, 45, 32, 92, 93, 61, 64, 49, 16, 46, 43, 49, 72, 37, 100, 30, 2, 0, 0, 73, 21, 77, 93, 13, 69, 99, 27, 63, 74, 15, 88, 26, 28, 46, 10, 29, 93, 98, 99, 3, 22, 33, 92, 40, 75, 31, 76, 100, 98, 24, 51, 34, 59, 30, 63, 60, 27, 49, 18, 19, 43, 75, 22, 88, 81, 46, 100, 80, 11, 39, 3, 72, 76, 38, 40, 24, 39, 17, 97, 78, 60, 25, 79, 57, 83, 29, 69, 46]
last_save: 332

Gen:326
TrainFitness:0.7777777777777778
TestFitness:0.8888888888888888
MaxGenLen:590
Individual: def p():
  def adf0(index):
    if np.greater(x[index],-365194.7304).all():
      if np.greater(sigmoid(x[index]),+947713.7101).all():
        return True
      else:
        return True
      return True
    else:
      if np.less(np.cos(x[index]),-016629.5068).all():
        return True
      else:
        return True
      return True
  def adf1(index):
    if np.equal(x[index],-108673.7257).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(x[index],+479439.8933).all():
      return True
    else:
      return False
  def adf3(index):
    if np.greater(np.sin(x[index]),+801329.1071).all():
      return False
    else:
      return True
  def adf4(index):
    if np.greater(x[index],+009722.8137).all():
      if np.less(x[index],-139921.0123).all():
        return False
      else:
        return False
      return False
    else:
      if np.less(np.cos(x[index]),+509752.8524).all():
        return True
      else:
        return True
      return False
  def adf5(index):
    if np.greater(x[index],-464160.6824).all():
      if np.equal(x[index],-370248.5056).all():
        if np.equal(x[index],+545936.4036).all():
          return True
        else:
          return False
        return True
      else:
        if np.greater(x[index],-211897.3980).all():
          return True
        else:
          return True
        return False
      return False
    else:
      if np.less(x[index],-591458.8484).all():
        return False
      else:
        return False
      return False
  def adf6(index):
    if np.less(x[index],+699915.1876).all():
      return True
    else:
      return True
  def adf7(index):
    if np.greater(np.cos(x[index]),-346666.6948).all():
      return False
    else:
      return True
  def adf8(index):
    if np.less(x[index],-550000.2800).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+906.685, adf1(1)*-832.093, adf2(2)*+574.570, adf3(3)*-284.744, adf4(4)*+475.978, adf5(5)*-045.268, adf6(6)*+987.403, adf7(7)*+424.441, adf8(8)*-329.484], [1, 0, 0, 0, 0, 0, 1, 0], 182.317)
result=p(); 0.7777777777777778
IndLenGenome:479
IndGenome:[18, 45, 87, 96, 47, 96, 29, 24, 17, 73, 93, 16, 35, 71, 49, 54, 87, 23, 90, 14, 21, 45, 24, 51, 52, 12, 91, 99, 54, 37, 17, 51, 13, 7, 51, 70, 11, 6, 46, 88, 31, 85, 20, 43, 42, 59, 56, 30, 71, 66, 26, 22, 59, 55, 10, 86, 88, 12, 34, 20, 65, 55, 8, 33, 91, 91, 40, 61, 90, 58, 66, 37, 53, 67, 42, 65, 47, 63, 23, 44, 35, 87, 47, 85, 10, 9, 4, 67, 59, 24, 23, 29, 18, 69, 3, 83, 32, 47, 21, 75, 63, 94, 48, 77, 26, 35, 18, 60, 11, 73, 32, 59, 21, 20, 67, 31, 59, 12, 16, 74, 61, 3, 59, 9, 22, 41, 40, 90, 29, 37, 42, 22, 88, 51, 13, 7, 63, 70, 11, 6, 93, 2, 61, 3, 59, 9, 22, 41, 40, 91, 32, 63, 69, 31, 67, 17, 10, 46, 37, 15, 70, 2, 5, 90, 29, 37, 45, 22, 88, 45, 22, 24, 86, 18, 81, 45, 32, 66, 87, 21, 70, 97, 77, 94, 76, 84, 21, 76, 90, 26, 88, 52, 84, 38, 10, 11, 71, 76, 73, 67, 83, 37, 90, 32, 24, 98, 35, 80, 95, 16, 57, 71, 17, 68, 16, 99, 15, 34, 75, 69, 53, 6, 4, 60, 33, 56, 32, 37, 64, 47, 39, 63, 39, 41, 36, 32, 51, 31, 48, 89, 47, 83, 89, 28, 40, 56, 6, 75, 29, 59, 64, 15, 23, 99, 87, 55, 59, 91, 74, 65, 28, 88, 44, 98, 84, 49, 83, 31, 98, 11, 16, 93, 19, 14, 38, 76, 29, 19, 19, 61, 15, 31, 78, 17, 46, 24, 10, 23, 93, 24, 38, 37, 19, 85, 45, 93, 64, 36, 6, 86, 76, 66, 69, 34, 28, 13, 54, 32, 55, 10, 83, 2, 69, 80, 85, 95, 30, 10, 30, 80, 62, 48, 90, 50, 38, 18, 19, 82, 45, 28, 73, 79, 60, 26, 86, 18, 65, 41, 99, 22, 8, 63, 72, 30, 19, 73, 51, 0, 93, 5, 17, 54, 45, 57, 50, 61, 67, 90, 62, 68, 44, 7, 84, 84, 19, 10, 23, 84, 67, 25, 99, 97, 48, 75, 89, 31, 50, 84, 25, 32, 56, 48, 99, 46, 27, 49, 68, 67, 64, 50, 13, 82, 60, 82, 44, 2, 34, 64, 24, 21, 88, 89, 55, 23, 2, 9, 24, 18, 74, 54, 15, 46, 86, 44, 76, 28, 83, 84, 54, 71, 48, 52, 33, 51, 17, 85, 57, 87, 16, 25, 48, 20, 0, 9, 81, 65, 23, 2, 9, 68, 82, 53, 8, 14, 30, 79, 51, 70, 88, 96, 83, 27, 57, 96, 7, 25, 23, 99, 67, 17, 83, 32, 51, 67, 20, 56, 100, 70, 98, 26, 81, 70, 31, 86, 30, 60, 31, 22, 61]
last_save: 332

Gen:2326
last_save: 332
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.5555555555555556
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],+504186.4884).all():
      return True
    else:
      return False
  def adf1(index):
    if np.equal(x[index],-046690.8072).all():
      return True
    else:
      return True
  def adf2(index):
    if np.less(np.cos(x[index]),-426346.8218).all():
      return False
    else:
      return False
  def adf3(index):
    if np.equal(x[index],+221961.8081).all():
      return False
    else:
      return True
  def adf4(index):
    if np.greater(x[index],+536454.2605).all():
      return True
    else:
      return False
  def adf5(index):
    if np.less(x[index],-955720.5400).all():
      return False
    else:
      return True
  def adf6(index):
    if np.less(rlog(x[index]),-617372.4625).all():
      return True
    else:
      return False
  def adf7(index):
    if np.less(rlog(x[index]),+965885.7825).all():
      return False
    else:
      return False
  def adf8(index):
    if np.equal(x[index],-114755.3659).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-355.966, adf1(1)*+768.895, adf2(2)*-811.981, adf3(3)*+509.614, adf4(4)*-501.086, adf5(5)*+794.762, adf6(6)*+703.524, adf7(7)*-151.217, adf8(8)*-418.240], [1, 1, 0, 0, 0, 0, 1, 0], 363.020)
result=p(); 0.5555555555555556
IndLenGenome:414
IndGenome:[38, 13, 13, 26, 92, 19, 32, 79, 87, 35, 85, 21, 60, 27, 45, 52, 89, 33, 88, 65, 23, 28, 48, 92, 16, 30, 12, 90, 17, 76, 50, 91, 31, 32, 25, 79, 28, 66, 33, 44, 60, 85, 33, 24, 83, 25, 27, 83, 25, 25, 85, 11, 19, 82, 84, 90, 76, 16, 24, 51, 11, 42, 95, 58, 91, 86, 79, 86, 14, 73, 78, 98, 55, 54, 34, 20, 80, 97, 79, 18, 51, 92, 81, 65, 25, 50, 51, 18, 85, 96, 35, 21, 43, 9, 88, 20, 67, 11, 64, 39, 14, 31, 91, 46, 23, 95, 17, 15, 48, 9, 97, 91, 35, 8, 17, 53, 16, 33, 62, 21, 66, 56, 59, 26, 57, 87, 50, 41, 20, 80, 48, 75, 28, 89, 32, 75, 81, 85, 64, 34, 37, 71, 75, 65, 92, 48, 13, 77, 94, 34, 36, 27, 48, 21, 17, 28, 91, 39, 91, 46, 16, 89, 88, 82, 26, 36, 75, 64, 88, 86, 41, 14, 75, 16, 28, 41, 59, 52, 15, 25, 81, 94, 10, 71, 93, 52, 28, 65, 37, 90, 90, 18, 81, 12, 60, 11, 98, 87, 89, 46, 44, 33, 79, 64, 90, 62, 20, 9, 70, 76, 15, 73, 37, 48, 45, 42, 68, 44, 46, 50, 17, 72, 18, 95, 57, 65, 95, 95, 5, 83, 49, 79, 48, 44, 12, 62, 25, 74, 20, 65, 94, 39, 27, 84, 26, 36, 97, 45, 74, 15, 68, 71, 27, 50, 82, 39, 30, 61, 82, 80, 31, 18, 56, 11, 28, 84, 3, 26, 80, 50, 98, 30, 56, 99, 37, 12, 61, 67, 21, 26, 69, 73, 7, 74, 25, 41, 38, 11, 2, 73, 8, 78, 29, 73, 78, 41, 27, 62, 89, 55, 92, 56, 77, 30, 55, 66, 0, 6, 71, 94, 81, 60, 37, 8, 71, 31, 53, 18, 48, 34, 90, 55, 23, 26, 95, 21, 0, 30, 75, 10, 25, 30, 93, 69, 30, 54, 73, 36, 13, 3, 69, 3, 26, 84, 54, 59, 51, 34, 76, 59, 71, 52, 76, 49, 13, 95, 17, 59, 42, 62, 45, 75, 94, 73, 72, 44, 24, 56, 100, 60, 69, 73, 96, 47, 19, 90, 65, 10, 100, 71, 31, 76, 64, 81, 49, 65, 24, 93, 6, 26, 7, 26, 51, 22, 27, 7, 56, 87, 41, 32, 70, 24, 71, 92, 59, 97, 25, 95, 14, 22, 68, 51, 45, 45]
last_save: 333

Gen:57
TrainFitness:0.6666666666666666
TestFitness:0.5555555555555556
MaxGenLen:515
Individual: def p():
  def adf0(index):
    if np.greater(rlog(x[index]),+541413.8248).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(x[index],+022704.2504).all():
      return False
    else:
      return True
  def adf2(index):
    if np.less(x[index],-137503.0757).all():
      return True
    else:
      return True
  def adf3(index):
    if np.greater(np.tanh(x[index]),-859012.6965).all():
      return False
    else:
      return True
  def adf4(index):
    if np.less(x[index],-871476.0229).all():
      return False
    else:
      return False
  def adf5(index):
    if np.greater(x[index],+832617.4138).all():
      return False
    else:
      return True
  def adf6(index):
    if np.less(x[index],-164947.2909).all():
      return True
    else:
      return False
  def adf7(index):
    if np.less(rlog(x[index]),-376133.1147).all():
      return False
    else:
      return False
  def adf8(index):
    if np.greater(x[index],-867843.9254).all():
      if np.less(x[index],+614419.2207).all():
        return False
      else:
        return False
      return False
    else:
      if np.equal(x[index],+714376.8151).all():
        return False
      else:
        return False
      return False
  return multiple_operation([adf0(0)*+981.323, adf1(1)*-829.184, adf2(2)*-215.059, adf3(3)*-916.186, adf4(4)*+275.295, adf5(5)*-153.329, adf6(6)*+378.192, adf7(7)*+865.193, adf8(8)*-904.799], [0, 1, 0, 0, 1, 1, 0, 1], 198.412)
result=p(); 0.6666666666666666
IndLenGenome:478
IndGenome:[8, 64, 70, 13, 66, 56, 64, 69, 20, 76, 5, 24, 61, 14, 91, 33, 8, 42, 94, 38, 21, 57, 39, 95, 31, 73, 30, 14, 54, 0, 52, 52, 77, 0, 94, 32, 15, 50, 94, 7, 60, 73, 23, 79, 81, 15, 95, 67, 71, 73, 97, 15, 30, 53, 20, 67, 75, 27, 38, 84, 75, 23, 63, 54, 2, 31, 99, 81, 58, 75, 49, 10, 51, 22, 86, 99, 66, 5, 65, 18, 27, 95, 67, 95, 51, 85, 93, 38, 77, 21, 4, 7, 76, 20, 82, 92, 49, 77, 19, 8, 59, 75, 99, 85, 8, 23, 18, 63, 22, 46, 71, 77, 84, 21, 93, 68, 29, 100, 48, 99, 43, 29, 59, 31, 71, 71, 56, 44, 19, 64, 97, 12, 69, 30, 59, 42, 49, 23, 35, 76, 84, 76, 97, 97, 24, 53, 47, 26, 61, 53, 83, 51, 31, 14, 77, 21, 41, 42, 68, 20, 27, 89, 63, 77, 55, 68, 6, 87, 58, 44, 33, 9, 72, 15, 24, 77, 10, 3, 28, 10, 76, 16, 91, 84, 44, 41, 69, 32, 22, 60, 87, 57, 87, 27, 19, 35, 7, 51, 84, 76, 97, 51, 24, 53, 47, 26, 88, 11, 65, 51, 67, 15, 27, 9, 60, 97, 44, 73, 79, 68, 81, 3, 12, 53, 92, 41, 27, 38, 22, 59, 21, 28, 94, 88, 11, 72, 62, 81, 25, 50, 85, 89, 13, 61, 19, 69, 41, 86, 11, 78, 46, 75, 12, 70, 22, 97, 55, 52, 9, 5, 20, 29, 31, 31, 95, 13, 23, 52, 59, 96, 44, 40, 33, 57, 58, 11, 39, 32, 70, 14, 81, 88, 46, 15, 91, 29, 23, 64, 97, 12, 69, 30, 94, 67, 49, 89, 35, 76, 75, 92, 52, 91, 59, 22, 13, 23, 31, 59, 38, 44, 91, 42, 40, 74, 48, 22, 36, 63, 59, 91, 25, 33, 31, 76, 49, 87, 57, 34, 92, 89, 83, 98, 96, 64, 21, 57, 17, 10, 61, 98, 25, 49, 47, 10, 92, 60, 35, 20, 84, 71, 57, 31, 97, 36, 35, 39, 50, 29, 11, 37, 26, 84, 78, 93, 38, 0, 36, 65, 21, 78, 88, 28, 92, 90, 63, 10, 70, 26, 34, 0, 5, 19, 50, 90, 89, 88, 34, 36, 93, 62, 27, 25, 37, 1, 33, 91, 40, 76, 45, 52, 59, 13, 81, 42, 89, 12, 46, 22, 19, 90, 48, 13, 89, 27, 78, 12, 39, 13, 96, 47, 87, 74, 38, 92, 27, 81, 29, 72, 59, 22, 5, 38, 6, 12, 18, 52, 28, 84, 71, 22, 18, 65, 19, 13, 71, 6, 81, 29, 78, 37, 64, 80, 22, 50, 85, 48, 58, 65, 44, 40, 77, 50, 3, 79, 53, 45, 88, 38, 78, 68, 4, 53, 50, 26, 29, 10, 56, 38]
last_save: 333

Gen:126
TrainFitness:0.7777777777777778
TestFitness:0.3333333333333333
MaxGenLen:530
Individual: def p():
  def adf0(index):
    if np.greater(rlog(x[index]),+241412.8248).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(x[index],+004704.2504).all():
      return False
    else:
      return True
  def adf2(index):
    if np.less(x[index],-737503.0707).all():
      return True
    else:
      return True
  def adf3(index):
    if np.greater(np.tanh(x[index]),-359012.8945).all():
      return False
    else:
      return True
  def adf4(index):
    if np.less(x[index],-875472.0229).all():
      return False
    else:
      return False
  def adf5(index):
    if np.greater(x[index],+732617.4038).all():
      return False
    else:
      return True
  def adf6(index):
    if np.less(x[index],-564947.2909).all():
      return True
    else:
      return False
  def adf7(index):
    if np.less(rlog(x[index]),-376133.1147).all():
      return True
    else:
      return False
  def adf8(index):
    if np.less(x[index],+186120.2753).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*-632.964, adf1(1)*-909.204, adf2(2)*+519.347, adf3(3)*-479.156, adf4(4)*-192.335, adf5(5)*-120.488, adf6(6)*-953.697, adf7(7)*+938.641, adf8(8)*-185.960], [0, 1, 0, 0, 1, 1, 1, 1], 590.917)
result=p(); 0.7777777777777778
IndLenGenome:393
IndGenome:[8, 64, 70, 13, 66, 16, 64, 69, 20, 76, 32, 24, 31, 14, 91, 62, 8, 42, 94, 38, 21, 57, 39, 95, 31, 73, 30, 14, 54, 0, 80, 44, 77, 0, 94, 32, 15, 50, 94, 7, 60, 73, 23, 79, 81, 15, 95, 67, 47, 73, 97, 15, 30, 53, 20, 67, 60, 27, 60, 84, 75, 23, 63, 54, 2, 31, 99, 81, 83, 75, 49, 10, 51, 22, 88, 99, 24, 5, 65, 18, 27, 95, 67, 95, 51, 49, 93, 38, 47, 65, 4, 7, 2, 20, 82, 92, 49, 77, 19, 8, 55, 75, 99, 85, 8, 23, 97, 63, 22, 46, 71, 77, 84, 50, 93, 68, 29, 100, 14, 99, 43, 29, 59, 49, 71, 25, 56, 44, 19, 64, 97, 12, 69, 30, 59, 42, 49, 23, 35, 76, 68, 76, 97, 97, 24, 53, 47, 26, 61, 53, 83, 51, 31, 14, 77, 50, 85, 8, 11, 61, 19, 89, 28, 86, 11, 78, 46, 31, 12, 70, 22, 97, 55, 3, 9, 5, 20, 84, 3, 31, 95, 16, 23, 52, 59, 96, 44, 40, 33, 57, 69, 80, 39, 32, 70, 14, 53, 88, 46, 15, 91, 29, 23, 64, 97, 12, 69, 30, 94, 67, 49, 91, 35, 76, 75, 73, 52, 91, 59, 22, 13, 23, 45, 59, 89, 44, 91, 42, 40, 74, 48, 88, 36, 63, 59, 19, 25, 33, 76, 49, 87, 57, 34, 92, 89, 23, 98, 96, 64, 21, 60, 17, 10, 61, 98, 25, 49, 46, 10, 92, 60, 35, 20, 84, 71, 57, 31, 97, 36, 35, 39, 50, 29, 11, 37, 77, 84, 78, 93, 38, 0, 36, 65, 21, 78, 88, 28, 92, 90, 63, 10, 70, 26, 34, 0, 5, 88, 70, 90, 12, 88, 34, 36, 93, 62, 27, 25, 37, 1, 33, 91, 40, 76, 45, 52, 59, 13, 81, 42, 89, 12, 46, 22, 19, 90, 48, 13, 89, 27, 78, 12, 39, 13, 96, 47, 87, 74, 38, 92, 27, 81, 29, 72, 59, 22, 5, 38, 6, 12, 18, 52, 28, 84, 71, 22, 18, 65, 19, 13, 71, 6, 81, 29, 78, 37, 64, 80, 22, 50, 85, 48, 58, 65, 44, 40, 77, 50, 3, 79, 53, 45, 88, 38, 78, 68, 4, 53, 50, 26, 29, 10, 56, 38]
last_save: 333

Gen:2126
last_save: 333
Exit:FalseFalseTrue