Dataset:Spiral/Full.csv
FS:True
Seed:1236
Size:10

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(psqrt(x[index]),+173879.2124).all():
      return True
    else:
      return False
  def adf1(index):
    if np.equal(np.sin(x[index]),+831504.8412).all():
      return True
    else:
      return False
  def adf2(index):
    if np.equal(np.cos(x[index]),+301453.9606).all():
      return True
    else:
      return False
  def adf3(index):
    if np.greater(np.cos(x[index]),-843340.8342).all():
      return False
    else:
      return False
  def adf4(index):
    if np.less(psqrt(x[index]),+987564.5925).all():
      return False
    else:
      return True
  def adf7(index):
    if np.equal(x[index],-005437.1718).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*-300.173, adf1(1)*-263.539, adf2(2)*-743.321, adf3(3)*+462.720, adf4(4)*-729.020, adf7(7)*+455.164], [1, 1, 0, 0, 0], 772.789)
result=p(); 0.6666666666666666
IndLenGenome:286
IndGenome:[77, 15, 85, 8, 39, 9, 16, 73, 95, 22, 62, 24, 38, 92, 64, 81, 3, 93, 51, 82, 59, 5, 95, 87, 71, 78, 75, 19, 87, 53, 78, 47, 32, 56, 19, 34, 32, 48, 78, 26, 76, 92, 31, 94, 32, 52, 73, 43, 44, 11, 15, 37, 10, 18, 37, 90, 53, 24, 91, 7, 86, 23, 42, 63, 26, 49, 88, 25, 38, 66, 96, 39, 59, 48, 15, 76, 85, 74, 13, 62, 9, 35, 50, 65, 63, 67, 62, 62, 71, 62, 92, 74, 79, 9, 64, 46, 61, 33, 55, 78, 22, 81, 46, 16, 17, 17, 78, 96, 42, 45, 12, 60, 82, 47, 95, 70, 35, 12, 73, 94, 21, 93, 90, 17, 98, 77, 57, 72, 67, 94, 39, 42, 20, 25, 3, 24, 29, 54, 31, 51, 34, 70, 83, 97, 49, 33, 84, 55, 82, 57, 35, 90, 92, 28, 18, 49, 71, 2, 25, 40, 9, 33, 66, 63, 26, 43, 17, 77, 88, 32, 75, 70, 49, 34, 88, 54, 18, 8, 19, 53, 101, 40, 93, 13, 86, 40, 46, 31, 34, 74, 45, 22, 82, 31, 98, 1, 95, 89, 31, 51, 96, 45, 20, 74, 31, 26, 11, 11, 96, 26, 42, 6, 99, 25, 49, 98, 67, 47, 26, 74, 23, 93, 1, 68, 98, 10, 6, 2, 8, 96, 51, 98, 30, 76, 100, 37, 46, 99, 3, 24, 51, 77, 37, 5, 68, 81, 9, 76, 100, 37, 38, 76, 39, 77, 23, 61, 92, 25, 23, 11, 21, 90, 87, 69, 66, 92, 55, 22, 47, 64, 61, 74, 60, 96, 62, 41, 98, 71, 71, 14, 26, 75, 60, 45, 38, 30]
last_save: 1021

Gen:2001
last_save: 1021
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],+246873.7058).all():
      return True
    else:
      return False
  def adf1(index):
    if np.less(sigmoid(x[index]),-454991.7621).all():
      return True
    else:
      return False
  def adf2(index):
    if np.less(x[index],+612486.9686).all():
      return False
    else:
      return False
  def adf3(index):
    if np.equal(x[index],+917169.2213).all():
      return False
    else:
      return False
  def adf4(index):
    if np.equal(rlog(x[index]),+638337.3895).all():
      return False
    else:
      return False
  def adf7(index):
    if np.less(np.tanh(x[index]),-789943.4561).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-232.164, adf1(1)*+632.301, adf2(2)*-939.980, adf3(3)*-673.020, adf4(4)*-799.671, adf7(7)*-184.095], [0, 0, 1, 0, 0], 221.767)
result=p(); 0.6666666666666666
IndLenGenome:283
IndGenome:[94, 94, 13, 62, 9, 38, 39, 74, 27, 17, 57, 46, 91, 93, 33, 9, 90, 98, 84, 60, 13, 97, 37, 34, 24, 38, 24, 71, 31, 19, 78, 43, 66, 25, 46, 61, 19, 79, 15, 95, 22, 54, 73, 91, 44, 67, 99, 80, 62, 53, 101, 42, 39, 47, 66, 10, 88, 42, 17, 11, 26, 53, 86, 76, 92, 19, 54, 56, 72, 38, 18, 57, 42, 17, 22, 43, 38, 80, 40, 51, 47, 17, 23, 43, 19, 61, 76, 98, 43, 25, 45, 46, 59, 43, 96, 21, 93, 19, 19, 76, 79, 50, 15, 15, 30, 53, 47, 94, 35, 15, 7, 29, 89, 76, 28, 37, 66, 95, 46, 57, 12, 96, 34, 43, 45, 92, 90, 41, 96, 71, 95, 31, 48, 73, 36, 67, 69, 58, 25, 18, 54, 29, 22, 23, 18, 34, 33, 65, 54, 37, 60, 33, 81, 83, 70, 37, 59, 69, 56, 30, 15, 93, 99, 83, 19, 21, 62, 44, 41, 17, 84, 12, 93, 28, 45, 43, 32, 14, 22, 80, 84, 51, 99, 72, 96, 96, 33, 11, 48, 34, 29, 30, 1, 65, 74, 35, 49, 19, 51, 13, 44, 16, 95, 65, 16, 55, 69, 93, 99, 92, 64, 55, 34, 44, 78, 63, 54, 83, 78, 59, 77, 0, 59, 63, 42, 87, 39, 70, 98, 7, 38, 30, 41, 4, 68, 18, 78, 35, 92, 34, 55, 96, 2, 57, 8, 65, 16, 37, 21, 6, 61, 6, 10, 77, 81, 37, 53, 55, 33, 52, 11, 48, 56, 56, 61, 94, 21, 43, 43, 57, 57, 44, 85, 75, 93, 79, 74, 5, 68, 31, 43, 30, 90]
last_save: 1022

Gen:3
TrainFitness:0.8333333333333334
TestFitness:0.5
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],-350541.1289).all():
      return True
    else:
      return True
  def adf1(index):
    if np.equal(x[index],-659294.3813).all():
      return False
    else:
      return False
  def adf2(index):
    if np.equal(x[index],+888050.4523).all():
      return True
    else:
      return True
  def adf3(index):
    if np.equal(x[index],-747018.5399).all():
      return True
    else:
      return True
  def adf4(index):
    if np.greater(x[index],-155328.1885).all():
      return False
    else:
      return False
  def adf7(index):
    if np.greater(x[index],+021475.9712).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*-914.213, adf1(1)*-279.777, adf2(2)*+559.862, adf3(3)*+807.309, adf4(4)*-852.395, adf7(7)*-994.340], [1, 1, 1, 1, 1], 016.485)
result=p(); 0.8333333333333334
IndLenGenome:435
IndGenome:[77, 69, 57, 7, 24, 53, 67, 75, 49, 3, 25, 100, 35, 74, 41, 21, 92, 38, 79, 32, 78, 54, 99, 20, 21, 66, 31, 95, 76, 45, 99, 42, 99, 64, 3, 58, 41, 33, 17, 91, 28, 77, 59, 55, 89, 52, 11, 88, 38, 58, 50, 25, 90, 34, 45, 62, 33, 82, 2, 46, 91, 86, 43, 26, 9, 11, 87, 14, 57, 70, 31, 48, 85, 33, 99, 19, 80, 68, 6, 87, 99, 33, 60, 95, 81, 91, 5, 5, 73, 42, 28, 61, 28, 68, 25, 71, 45, 33, 65, 60, 29, 93, 10, 22, 50, 12, 11, 24, 27, 25, 99, 67, 51, 82, 33, 58, 71, 26, 48, 75, 32, 59, 91, 34, 52, 81, 23, 69, 57, 98, 92, 57, 89, 37, 87, 17, 63, 26, 23, 45, 45, 39, 78, 56, 2, 14, 70, 46, 58, 70, 47, 73, 40, 59, 89, 97, 90, 48, 65, 2, 33, 59, 85, 71, 11, 52, 29, 99, 14, 43, 64, 20, 80, 11, 93, 17, 25, 57, 30, 40, 41, 76, 64, 88, 65, 32, 43, 35, 83, 66, 67, 67, 5, 99, 13, 92, 58, 30, 49, 95, 48, 89, 43, 95, 73, 74, 37, 89, 17, 44, 10, 55, 93, 90, 66, 21, 86, 40, 25, 6, 49, 95, 16, 97, 16, 9, 68, 4, 17, 61, 94, 7, 63, 19, 11, 24, 14, 65, 50, 99, 98, 53, 61, 47, 68, 99, 74, 43, 59, 5, 36, 23, 64, 33, 11, 95, 41, 47, 66, 88, 47, 55, 19, 54, 99, 59, 87, 74, 75, 91, 27, 68, 94, 20, 45, 55, 93, 74, 13, 84, 33, 89, 80, 38, 96, 63, 93, 69, 63, 74, 91, 95, 51, 66, 28, 25, 65, 80, 38, 41, 26, 74, 86, 35, 29, 32, 95, 13, 55, 29, 25, 95, 50, 39, 99, 24, 54, 27, 70, 39, 31, 70, 45, 10, 92, 79, 81, 37, 21, 1, 34, 68, 62, 48, 66, 32, 28, 71, 68, 51, 89, 4, 80, 100, 17, 77, 59, 49, 24, 14, 13, 25, 30, 79, 57, 37, 82, 27, 71, 92, 95, 40, 54, 67, 70, 97, 36, 28, 24, 53, 67, 19, 55, 17, 57, 29, 43, 35, 86, 45, 50, 53, 15, 90, 28, 54, 69, 41, 41, 69, 75, 63, 20, 73, 23, 53, 55, 1, 43, 96, 84, 82, 44, 100, 42, 56, 84, 31, 24, 39, 60, 7, 5, 92, 30, 28, 77, 8, 54, 2, 21, 9, 30, 30, 48, 72, 13, 20, 80, 91, 2, 83, 42, 77, 71]
last_save: 1022

Gen:198
TrainFitness:1.0
TestFitness:0.5
MaxGenLen:545
Individual: def p():
  def adf0(index):
    if np.greater(x[index],-157321.1883).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(x[index],+005800.3599).all():
      return False
    else:
      return True
  def adf2(index):
    if np.equal(x[index],-129953.4001).all():
      return True
    else:
      return False
  def adf3(index):
    if np.less(np.cos(x[index]),-445493.2181).all():
      if np.less(x[index],+393020.2795).all():
        if np.less(x[index],+550452.3966).all():
          return False
        else:
          return True
        return False
      else:
        if np.greater(x[index],+018339.9751).all():
          return True
        else:
          return False
        return False
      return False
    else:
      if np.greater(np.tanh(x[index]),+807306.9700).all():
        return False
      else:
        return True
      return False
  def adf4(index):
    if np.equal(x[index],-234001.3757).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(x[index],+679309.5921).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+553.226, adf1(1)*+694.245, adf2(2)*-001.646, adf3(3)*+566.775, adf4(4)*-809.589, adf7(7)*-479.740], [1, 0, 0, 1, 0], 569.567)
result=p(); 1.0
IndLenGenome:472
IndGenome:[77, 69, 30, 7, 24, 37, 67, 75, 49, 91, 5, 37, 73, 42, 41, 61, 28, 68, 93, 17, 25, 57, 3, 70, 39, 31, 70, 12, 10, 70, 35, 58, 70, 60, 73, 15, 59, 19, 97, 90, 48, 65, 2, 33, 59, 85, 71, 11, 52, 29, 99, 55, 43, 64, 20, 80, 11, 16, 9, 68, 4, 17, 61, 94, 7, 63, 19, 11, 24, 14, 65, 34, 99, 83, 52, 21, 28, 61, 18, 68, 25, 71, 45, 46, 65, 53, 29, 93, 10, 22, 50, 12, 77, 59, 55, 89, 58, 11, 88, 38, 58, 5, 25, 90, 44, 45, 62, 33, 69, 6, 46, 91, 86, 43, 77, 9, 11, 18, 14, 57, 70, 31, 48, 53, 33, 99, 19, 37, 5, 51, 26, 23, 45, 45, 39, 78, 56, 2, 14, 70, 46, 58, 70, 47, 73, 40, 96, 89, 97, 90, 60, 65, 2, 33, 59, 85, 71, 11, 52, 29, 99, 42, 43, 64, 20, 80, 11, 93, 17, 25, 57, 52, 81, 23, 69, 57, 95, 13, 80, 68, 6, 87, 99, 33, 60, 59, 55, 89, 52, 11, 88, 38, 58, 50, 25, 90, 34, 45, 85, 33, 82, 2, 46, 91, 86, 43, 26, 9, 54, 2, 14, 85, 17, 87, 57, 30, 40, 41, 76, 64, 86, 65, 32, 43, 35, 26, 66, 67, 67, 5, 99, 13, 92, 58, 30, 49, 95, 48, 89, 43, 95, 73, 74, 37, 89, 17, 44, 10, 55, 93, 90, 66, 21, 86, 40, 25, 6, 49, 95, 16, 97, 16, 9, 68, 4, 17, 61, 94, 7, 63, 19, 11, 24, 14, 65, 50, 99, 98, 53, 61, 47, 68, 99, 74, 43, 59, 5, 36, 23, 64, 33, 11, 95, 41, 47, 66, 88, 47, 55, 19, 54, 99, 59, 87, 74, 75, 91, 27, 68, 94, 20, 45, 55, 93, 74, 13, 84, 33, 89, 80, 38, 96, 63, 93, 69, 63, 74, 91, 95, 51, 66, 28, 25, 65, 80, 38, 41, 26, 74, 86, 35, 29, 32, 95, 13, 55, 29, 25, 95, 50, 39, 99, 24, 54, 27, 70, 39, 31, 70, 45, 10, 92, 79, 81, 37, 21, 1, 34, 68, 62, 48, 66, 32, 28, 71, 68, 51, 89, 4, 80, 100, 17, 77, 59, 49, 24, 14, 13, 25, 30, 79, 57, 37, 82, 27, 71, 92, 95, 40, 54, 67, 70, 97, 36, 28, 24, 53, 67, 19, 55, 17, 57, 29, 43, 35, 86, 45, 50, 53, 15, 90, 28, 54, 69, 41, 41, 69, 75, 63, 20, 73, 23, 53, 55, 1, 43, 96, 84, 82, 44, 100, 42, 56, 84, 31, 24, 39, 60, 7, 5, 92, 30, 28, 77, 8, 54, 2, 21, 9, 30, 30, 48, 72, 13, 20, 80, 91, 2, 83, 42, 77, 71]
last_save: 1022

Gen:198
last_save: 1022
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],+036655.1502).all():
      return True
    else:
      return False
  def adf1(index):
    if np.equal(np.sin(x[index]),-796225.6332).all():
      return True
    else:
      return True
  def adf2(index):
    if np.less(np.cos(x[index]),-822808.6546).all():
      return True
    else:
      return False
  def adf3(index):
    if np.equal(rlog(x[index]),-956232.3359).all():
      return False
    else:
      return False
  def adf4(index):
    if np.equal(psqrt(x[index]),-074014.9773).all():
      return True
    else:
      return False
  def adf7(index):
    if np.equal(sigmoid(x[index]),-382182.0236).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+684.627, adf1(1)*-159.787, adf2(2)*-657.188, adf3(3)*-614.034, adf4(4)*-679.358, adf7(7)*-053.100], [0, 1, 0, 0, 1], 832.847)
result=p(); 0.8333333333333334
IndLenGenome:286
IndGenome:[23, 16, 24, 67, 56, 96, 46, 13, 71, 75, 12, 19, 46, 83, 99, 60, 7, 92, 92, 85, 33, 41, 52, 75, 96, 68, 90, 26, 1, 23, 62, 10, 73, 5, 38, 2, 75, 59, 70, 7, 82, 62, 28, 94, 70, 66, 6, 29, 58, 69, 90, 20, 99, 69, 60, 49, 85, 11, 27, 52, 38, 32, 85, 30, 25, 87, 5, 33, 41, 62, 59, 88, 99, 41, 36, 74, 21, 51, 31, 33, 11, 47, 75, 33, 70, 31, 91, 53, 10, 68, 38, 18, 67, 71, 60, 70, 24, 49, 23, 26, 28, 12, 27, 69, 5, 61, 24, 22, 28, 9, 61, 89, 36, 80, 47, 54, 89, 47, 46, 72, 23, 18, 85, 92, 90, 29, 93, 72, 16, 31, 85, 57, 76, 47, 43, 16, 70, 19, 77, 16, 38, 84, 32, 58, 43, 25, 12, 13, 33, 96, 30, 31, 92, 50, 42, 47, 26, 22, 36, 25, 41, 40, 75, 84, 96, 43, 44, 84, 95, 78, 24, 92, 95, 65, 29, 76, 23, 66, 53, 29, 39, 32, 28, 43, 68, 63, 67, 56, 75, 55, 63, 16, 91, 58, 4, 67, 33, 14, 100, 0, 64, 82, 4, 14, 72, 25, 69, 22, 69, 74, 83, 14, 53, 13, 80, 19, 71, 27, 6, 61, 4, 60, 14, 74, 38, 25, 88, 6, 59, 65, 97, 36, 25, 28, 34, 46, 50, 7, 29, 45, 17, 10, 91, 50, 56, 55, 69, 42, 52, 95, 11, 1, 3, 5, 92, 92, 77, 0, 45, 85, 11, 13, 26, 17, 40, 71, 97, 65, 6, 59, 87, 34, 33, 20, 73, 1, 49, 93, 39, 0, 52, 23, 22, 0, 36, 36]
last_save: 1023

Gen:559
TrainFitness:1.0
TestFitness:0.3333333333333333
MaxGenLen:665
Individual: def p():
  def adf0(index):
    if np.equal(np.cos(x[index]),+909272.7297).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(x[index],+004365.8034).all():
      return False
    else:
      return True
  def adf2(index):
    if np.less(x[index],+436515.9794).all():
      return False
    else:
      return False
  def adf3(index):
    if np.less(x[index],+127891.7648).all():
      return True
    else:
      return False
  def adf4(index):
    if np.less(x[index],-290243.4462).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(x[index],+802689.3472).all():
      if np.less(x[index],-307437.6771).all():
        return False
      else:
        return True
      return True
    else:
      if np.greater(np.tanh(x[index]),+282329.5803).all():
        return True
      else:
        return True
      return True
  return multiple_operation([adf0(0)*-594.936, adf1(1)*+766.515, adf2(2)*+695.240, adf3(3)*-882.592, adf4(4)*-806.909, adf7(7)*+967.359], [1, 1, 0, 1, 0], 083.615)
result=p(); 1.0
IndLenGenome:540
IndGenome:[68, 51, 83, 19, 95, 2, 85, 17, 58, 6, 69, 80, 49, 12, 47, 2, 37, 92, 49, 67, 69, 79, 64, 61, 85, 17, 21, 6, 86, 80, 70, 54, 63, 26, 25, 58, 10, 13, 14, 79, 40, 35, 5, 1, 15, 22, 96, 50, 14, 83, 46, 65, 51, 85, 69, 77, 69, 24, 47, 35, 73, 17, 46, 43, 86, 62, 16, 81, 12, 57, 28, 69, 91, 47, 46, 84, 58, 2, 15, 23, 79, 64, 27, 85, 61, 98, 22, 69, 80, 82, 94, 93, 4, 34, 66, 72, 76, 25, 67, 74, 27, 27, 77, 87, 82, 81, 28, 80, 2, 56, 68, 79, 63, 94, 17, 42, 81, 34, 95, 18, 63, 30, 43, 100, 37, 84, 73, 67, 66, 37, 17, 51, 7, 28, 78, 17, 99, 30, 74, 22, 34, 30, 12, 68, 2, 83, 92, 49, 15, 78, 80, 3, 46, 74, 22, 26, 15, 58, 47, 13, 85, 79, 64, 19, 43, 56, 37, 98, 4, 67, 66, 26, 65, 51, 85, 18, 78, 17, 46, 9, 15, 22, 34, 0, 12, 47, 20, 58, 58, 12, 15, 69, 2, 7, 27, 22, 68, 20, 6, 69, 80, 49, 18, 36, 70, 49, 36, 47, 83, 25, 9, 42, 73, 33, 76, 87, 34, 75, 70, 68, 23, 56, 31, 25, 35, 72, 86, 5, 65, 81, 54, 25, 7, 49, 25, 13, 42, 47, 58, 35, 36, 98, 21, 90, 58, 54, 39, 81, 95, 88, 83, 11, 69, 52, 66, 47, 51, 36, 58, 43, 97, 97, 71, 97, 41, 18, 72, 76, 64, 38, 69, 71, 57, 36, 68, 75, 94, 80, 2, 56, 68, 38, 49, 94, 17, 42, 26, 5, 38, 2, 75, 59, 70, 7, 82, 62, 28, 94, 70, 66, 6, 29, 58, 69, 90, 20, 99, 69, 60, 49, 85, 11, 27, 52, 38, 32, 85, 30, 25, 87, 5, 33, 41, 62, 59, 88, 99, 41, 36, 74, 21, 51, 31, 33, 11, 47, 75, 33, 70, 31, 91, 53, 10, 68, 38, 18, 67, 71, 60, 70, 24, 49, 23, 26, 28, 12, 27, 69, 5, 61, 24, 22, 28, 9, 61, 89, 36, 80, 47, 54, 89, 47, 46, 72, 23, 18, 85, 92, 90, 29, 93, 72, 16, 31, 85, 57, 76, 47, 43, 16, 70, 19, 77, 16, 38, 84, 32, 58, 43, 25, 12, 13, 33, 96, 30, 31, 92, 50, 42, 47, 26, 22, 36, 25, 41, 40, 75, 84, 96, 43, 44, 84, 95, 78, 24, 92, 95, 65, 29, 76, 23, 66, 53, 29, 39, 32, 28, 43, 68, 63, 67, 56, 75, 55, 63, 16, 91, 58, 4, 67, 33, 14, 100, 0, 64, 82, 4, 14, 72, 25, 69, 22, 69, 74, 83, 14, 53, 13, 80, 19, 71, 27, 6, 61, 4, 60, 14, 74, 38, 25, 88, 6, 59, 65, 97, 36, 25, 28, 34, 46, 50, 7, 29, 45, 17, 10, 91, 50, 56, 55, 69, 42, 52, 95, 11, 1, 3, 5, 92, 92, 77, 0, 45, 85, 11, 13, 26, 17, 40, 71, 97, 65, 6, 59, 87, 34, 33, 20, 73, 1, 49, 93, 39, 0, 52, 23, 22, 0, 36, 36]
last_save: 1023

Gen:559
last_save: 1023
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(sigmoid(x[index]),+915965.2548).all():
      return True
    else:
      return False
  def adf1(index):
    if np.greater(x[index],+033966.6449).all():
      return True
    else:
      return False
  def adf2(index):
    if np.greater(psqrt(x[index]),+429786.0601).all():
      return False
    else:
      return True
  def adf3(index):
    if np.greater(x[index],-249087.4422).all():
      return True
    else:
      return True
  def adf4(index):
    if np.greater(np.tanh(x[index]),+306191.8441).all():
      return True
    else:
      return True
  def adf7(index):
    if np.less(np.tanh(x[index]),-096257.9331).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+543.760, adf1(1)*-793.545, adf2(2)*+948.340, adf3(3)*+800.943, adf4(4)*+477.832, adf7(7)*+716.024], [0, 1, 0, 1, 0], 789.936)
result=p(); 0.8333333333333334
IndLenGenome:285
IndGenome:[37, 47, 26, 87, 91, 69, 20, 5, 44, 60, 46, 85, 7, 28, 53, 54, 67, 28, 63, 10, 24, 18, 55, 50, 88, 63, 97, 94, 68, 94, 62, 13, 44, 20, 82, 34, 87, 7, 61, 85, 54, 13, 36, 92, 30, 53, 72, 61, 47, 78, 90, 32, 75, 16, 83, 9, 12, 45, 43, 11, 66, 17, 56, 39, 15, 42, 39, 82, 92, 82, 87, 74, 10, 89, 24, 78, 38, 65, 49, 50, 90, 43, 24, 10, 63, 30, 89, 56, 55, 84, 81, 48, 34, 69, 49, 72, 36, 42, 10, 67, 24, 14, 41, 81, 2, 61, 45, 74, 66, 17, 96, 33, 54, 65, 66, 97, 33, 76, 50, 13, 84, 82, 82, 69, 32, 74, 66, 45, 19, 87, 66, 71, 53, 10, 61, 49, 78, 6, 7, 78, 27, 52, 56, 84, 48, 35, 30, 58, 10, 27, 16, 73, 29, 86, 30, 12, 18, 60, 97, 73, 88, 64, 92, 39, 81, 95, 33, 54, 50, 14, 56, 21, 48, 29, 94, 69, 79, 52, 62, 99, 27, 48, 94, 94, 85, 87, 73, 27, 39, 19, 23, 80, 1, 64, 12, 72, 19, 42, 84, 62, 35, 28, 5, 16, 23, 85, 91, 100, 3, 96, 93, 0, 92, 49, 8, 28, 44, 55, 58, 32, 57, 46, 2, 8, 9, 33, 17, 36, 42, 10, 63, 11, 87, 78, 32, 62, 50, 78, 100, 57, 20, 15, 6, 57, 12, 41, 56, 62, 10, 68, 95, 24, 43, 42, 39, 35, 1, 53, 13, 57, 64, 67, 38, 5, 9, 98, 47, 44, 5, 19, 55, 50, 8, 94, 49, 97, 27, 19, 74, 68, 19, 2, 75, 26, 82]
last_save: 1024

Gen:59
TrainFitness:1.0
TestFitness:0.5
MaxGenLen:515
Individual: def p():
  def adf0(index):
    if np.less(x[index],-065283.4413).all():
      return False
    else:
      return False
  def adf1(index):
    if np.greater(x[index],+191207.5052).all():
      return True
    else:
      return False
  def adf2(index):
    if np.equal(np.tanh(x[index]),-221309.2178).all():
      if np.equal(sigmoid(x[index]),+531676.9629).all():
        return True
      else:
        return True
      return True
    else:
      if np.equal(psqrt(x[index]),+590030.0379).all():
        return True
      else:
        return False
      return True
  def adf3(index):
    if np.greater(x[index],+012910.6012).all():
      if np.equal(x[index],-251917.5491).all():
        return False
      else:
        return True
      return True
    else:
      if np.equal(x[index],+560433.2725).all():
        return True
      else:
        return False
      return False
  def adf4(index):
    if np.greater(x[index],-535055.0078).all():
      return False
    else:
      return True
  def adf7(index):
    if np.less(x[index],+004970.5024).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*-953.975, adf1(1)*-708.307, adf2(2)*-450.535, adf3(3)*+492.674, adf4(4)*-605.607, adf7(7)*-557.169], [1, 0, 1, 0, 0], 208.849)
result=p(); 1.0
IndLenGenome:419
IndGenome:[37, 47, 26, 87, 91, 69, 20, 5, 44, 60, 46, 85, 32, 28, 53, 54, 4, 51, 73, 45, 61, 99, 7, 69, 89, 61, 18, 94, 71, 19, 11, 92, 60, 67, 65, 40, 45, 32, 70, 47, 58, 94, 85, 62, 28, 44, 50, 35, 19, 62, 52, 41, 73, 80, 79, 82, 91, 87, 38, 31, 14, 78, 69, 8, 94, 81, 45, 43, 11, 66, 17, 56, 39, 76, 42, 39, 82, 92, 82, 87, 74, 10, 89, 24, 48, 38, 65, 49, 50, 90, 43, 50, 10, 63, 27, 89, 56, 55, 84, 81, 48, 34, 69, 49, 87, 36, 61, 80, 51, 12, 89, 61, 60, 66, 90, 41, 22, 89, 53, 23, 74, 51, 27, 52, 45, 21, 99, 41, 17, 75, 54, 59, 61, 97, 50, 98, 81, 59, 13, 40, 92, 27, 5, 36, 90, 84, 33, 73, 32, 87, 52, 5, 32, 71, 37, 70, 39, 90, 25, 32, 89, 68, 55, 63, 45, 60, 95, 45, 70, 90, 47, 48, 91, 60, 77, 51, 43, 29, 23, 26, 44, 70, 40, 64, 59, 57, 80, 85, 80, 22, 54, 67, 20, 3, 39, 97, 51, 84, 39, 95, 93, 49, 77, 15, 80, 17, 85, 47, 60, 78, 93, 80, 17, 41, 79, 95, 54, 85, 20, 25, 93, 55, 58, 26, 86, 64, 49, 82, 46, 67, 44, 64, 77, 34, 46, 40, 35, 26, 40, 67, 53, 69, 95, 85, 75, 87, 41, 66, 9, 66, 21, 34, 57, 22, 32, 63, 82, 40, 98, 98, 14, 39, 72, 18, 81, 28, 75, 85, 73, 31, 91, 79, 48, 27, 48, 35, 56, 95, 39, 33, 62, 69, 32, 87, 73, 67, 11, 55, 60, 78, 73, 53, 38, 63, 71, 99, 81, 56, 51, 74, 23, 22, 77, 75, 74, 97, 22, 69, 41, 97, 62, 71, 6, 52, 79, 12, 37, 24, 35, 38, 57, 69, 63, 20, 27, 10, 41, 83, 18, 73, 74, 45, 39, 94, 8, 77, 21, 100, 11, 60, 26, 9, 69, 31, 44, 93, 29, 2, 17, 29, 55, 69, 59, 9, 41, 94, 37, 17, 93, 56, 20, 30, 12, 85, 8, 89, 46, 34, 87, 59, 31, 27, 78, 41, 55, 69, 23, 68, 19, 87, 91, 61, 41, 39, 56, 56, 44, 53, 2, 95, 6, 3, 20, 8, 72, 37, 2, 38, 45, 10, 35, 7, 75, 29, 3, 76, 43, 47, 72, 84, 100, 19, 93, 44, 61, 93, 18, 77, 2]
last_save: 1024

Gen:59
last_save: 1024
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],+011767.6526).all():
      return False
    else:
      return True
  def adf1(index):
    if np.equal(x[index],+619788.8173).all():
      return False
    else:
      return True
  def adf2(index):
    if np.less(x[index],-022686.4525).all():
      return False
    else:
      return False
  def adf3(index):
    if np.less(rlog(x[index]),+891062.3613).all():
      return True
    else:
      return False
  def adf4(index):
    if np.greater(x[index],-128390.5542).all():
      return True
    else:
      return False
  def adf7(index):
    if np.less(x[index],-541310.8843).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+843.535, adf1(1)*+263.830, adf2(2)*+948.775, adf3(3)*+037.402, adf4(4)*-438.891, adf7(7)*+505.900], [0, 1, 0, 1, 1], 193.855)
result=p(); 0.8333333333333334
IndLenGenome:280
IndGenome:[63, 62, 16, 4, 55, 74, 86, 53, 75, 15, 49, 4, 57, 34, 23, 51, 11, 46, 48, 73, 73, 54, 25, 29, 25, 88, 94, 8, 13, 53, 70, 74, 52, 81, 46, 5, 21, 93, 63, 92, 80, 3, 46, 78, 88, 62, 1, 11, 49, 83, 69, 10, 73, 97, 53, 29, 65, 11, 36, 61, 42, 82, 65, 96, 40, 96, 72, 37, 75, 80, 55, 65, 23, 92, 96, 18, 47, 24, 32, 33, 39, 54, 94, 21, 94, 49, 82, 21, 80, 53, 86, 98, 71, 81, 20, 21, 35, 28, 20, 39, 35, 40, 63, 40, 75, 28, 93, 53, 20, 70, 75, 74, 16, 86, 94, 73, 32, 43, 82, 59, 92, 91, 37, 61, 38, 45, 61, 85, 21, 46, 18, 25, 36, 80, 92, 48, 62, 67, 33, 68, 26, 68, 73, 25, 56, 47, 89, 17, 65, 98, 98, 70, 65, 35, 37, 63, 30, 73, 58, 90, 49, 20, 24, 43, 57, 44, 84, 94, 58, 88, 52, 38, 79, 29, 91, 93, 56, 34, 18, 87, 63, 38, 55, 25, 18, 14, 63, 52, 49, 63, 91, 50, 90, 4, 100, 37, 2, 34, 91, 77, 85, 96, 60, 68, 25, 43, 30, 16, 80, 27, 77, 67, 40, 100, 59, 40, 18, 60, 33, 20, 57, 16, 24, 64, 11, 18, 82, 87, 81, 58, 50, 9, 48, 5, 27, 62, 9, 12, 67, 13, 0, 90, 81, 24, 83, 18, 64, 44, 85, 26, 32, 76, 37, 9, 73, 95, 6, 19, 79, 84, 78, 98, 80, 85, 95, 5, 74, 72, 81, 73, 40, 52, 28, 71, 30, 15, 84, 99, 92, 16]
last_save: 1025

Gen:30
TrainFitness:1.0
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(rlog(x[index]),-315602.0809).all():
      return False
    else:
      return False
  def adf1(index):
    if np.greater(np.sin(x[index]),-804260.0324).all():
      return True
    else:
      return False
  def adf2(index):
    if np.greater(np.tanh(x[index]),-676567.0161).all():
      if np.greater(psqrt(x[index]),+580238.2496).all():
        return True
      else:
        return False
      return True
    else:
      if np.less(psqrt(x[index]),-180335.7733).all():
        return True
      else:
        return True
      return True
  def adf3(index):
    if np.equal(x[index],+447583.6166).all():
      return False
    else:
      return True
  def adf4(index):
    if np.less(x[index],+009645.8660).all():
      return False
    else:
      return True
  def adf7(index):
    if np.equal(x[index],-011554.7974).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+732.743, adf1(1)*-247.297, adf2(2)*+793.040, adf3(3)*-437.186, adf4(4)*+800.457, adf7(7)*-337.611], [1, 1, 0, 1, 1], 745.254)
result=p(); 1.0
IndLenGenome:396
IndGenome:[42, 77, 30, 49, 36, 32, 28, 62, 19, 27, 53, 41, 95, 76, 40, 2, 80, 48, 80, 89, 17, 11, 26, 37, 48, 12, 78, 14, 43, 69, 28, 20, 34, 12, 76, 20, 40, 73, 52, 54, 4, 41, 55, 46, 23, 81, 56, 44, 82, 83, 25, 66, 87, 56, 55, 86, 17, 70, 11, 96, 41, 23, 54, 98, 53, 51, 76, 12, 55, 18, 20, 22, 3, 78, 32, 14, 19, 96, 10, 27, 28, 37, 88, 86, 41, 23, 41, 86, 51, 78, 70, 73, 23, 65, 47, 27, 83, 83, 74, 72, 26, 20, 17, 98, 39, 80, 84, 95, 4, 14, 17, 5, 38, 33, 26, 11, 56, 56, 85, 78, 72, 41, 52, 95, 9, 14, 78, 50, 20, 39, 36, 94, 95, 28, 86, 16, 10, 51, 74, 51, 15, 20, 97, 84, 25, 89, 30, 91, 11, 95, 75, 74, 87, 99, 57, 24, 19, 93, 62, 93, 58, 14, 56, 87, 73, 12, 7, 34, 83, 89, 39, 22, 62, 94, 87, 42, 99, 27, 91, 40, 26, 27, 29, 73, 40, 64, 50, 85, 85, 81, 74, 73, 97, 1, 78, 36, 14, 72, 16, 38, 40, 90, 54, 45, 37, 44, 47, 43, 33, 73, 87, 56, 51, 41, 83, 15, 71, 22, 57, 43, 86, 27, 54, 35, 12, 45, 94, 82, 82, 78, 38, 5, 87, 22, 35, 65, 62, 27, 83, 83, 74, 72, 26, 20, 17, 98, 39, 80, 84, 65, 4, 14, 17, 5, 18, 29, 83, 65, 91, 37, 79, 74, 43, 45, 21, 84, 72, 62, 24, 72, 98, 57, 26, 2, 32, 33, 68, 54, 70, 19, 80, 30, 41, 23, 32, 55, 89, 19, 54, 29, 90, 19, 80, 88, 23, 17, 73, 62, 97, 29, 66, 72, 68, 40, 53, 44, 58, 75, 8, 93, 4, 90, 27, 52, 24, 12, 23, 2, 6, 96, 19, 38, 36, 98, 29, 35, 76, 23, 6, 33, 91, 0, 62, 68, 96, 5, 78, 50, 95, 21, 14, 10, 87, 49, 68, 95, 61, 84, 23, 22, 89, 8, 99, 3, 26, 40, 74, 94, 74, 48, 11, 27, 37, 67, 2, 57, 86, 62, 57, 60, 33, 32, 35, 56, 8, 24, 39, 83, 46, 14, 100, 63, 73, 47, 54, 35, 92, 79, 26, 23, 74, 19, 18, 76, 9, 58]
last_save: 1025

Gen:30
last_save: 1025
Exit:TrueFalseFalse

Gen:1
TrainFitness:1.0
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(np.sin(x[index]),-899761.4787).all():
      return False
    else:
      return True
  def adf1(index):
    if np.less(x[index],-678348.3617).all():
      return True
    else:
      return False
  def adf2(index):
    if np.less(x[index],+007806.1006).all():
      return False
    else:
      return True
  def adf3(index):
    if np.greater(np.tanh(x[index]),+259343.7512).all():
      return False
    else:
      return True
  def adf4(index):
    if np.equal(x[index],+263079.7798).all():
      return True
    else:
      return True
  def adf7(index):
    if np.greater(x[index],-983166.3709).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*-385.079, adf1(1)*-731.908, adf2(2)*-665.326, adf3(3)*+208.579, adf4(4)*+018.196, adf7(7)*-942.525], [0, 0, 1, 1, 1], 468.086)
result=p(); 1.0
IndLenGenome:282
IndGenome:[99, 31, 11, 17, 32, 21, 17, 32, 84, 47, 56, 21, 33, 19, 21, 8, 13, 34, 99, 65, 31, 78, 94, 39, 5, 88, 73, 44, 81, 64, 89, 30, 13, 12, 68, 72, 55, 29, 34, 95, 58, 73, 50, 82, 15, 3, 31, 20, 98, 96, 95, 58, 66, 51, 38, 4, 11, 16, 39, 56, 85, 25, 37, 34, 97, 81, 90, 65, 28, 58, 59, 32, 53, 86, 12, 16, 88, 79, 5, 60, 96, 33, 99, 49, 59, 29, 1, 51, 90, 51, 32, 58, 77, 23, 21, 23, 76, 11, 21, 58, 89, 27, 33, 11, 91, 19, 95, 56, 57, 86, 97, 69, 23, 62, 50, 78, 98, 9, 70, 82, 83, 66, 95, 39, 89, 53, 19, 97, 60, 47, 28, 64, 88, 59, 72, 98, 17, 71, 12, 57, 40, 5, 76, 70, 95, 20, 84, 22, 60, 34, 88, 11, 86, 16, 48, 87, 64, 77, 98, 79, 42, 21, 68, 47, 16, 18, 28, 43, 67, 59, 77, 16, 30, 50, 11, 46, 25, 16, 17, 70, 53, 47, 79, 91, 4, 35, 66, 64, 42, 30, 45, 43, 77, 29, 11, 64, 33, 87, 87, 96, 52, 53, 51, 37, 39, 2, 79, 24, 23, 17, 23, 74, 16, 68, 85, 67, 2, 85, 68, 64, 33, 53, 88, 81, 64, 48, 47, 48, 46, 37, 28, 43, 91, 25, 47, 94, 99, 64, 72, 94, 1, 88, 23, 62, 41, 17, 32, 63, 88, 0, 40, 0, 26, 8, 55, 30, 88, 15, 96, 48, 44, 99, 39, 81, 50, 89, 60, 47, 15, 22, 83, 11, 30, 86, 79, 38, 85, 10, 4, 86, 90, 59]
last_save: 1026

Gen:1
last_save: 1026
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.5
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],-320526.5689).all():
      return True
    else:
      return False
  def adf1(index):
    if np.equal(sigmoid(x[index]),-176647.1054).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(x[index],-068041.1896).all():
      return False
    else:
      return True
  def adf3(index):
    if np.greater(x[index],+714673.7195).all():
      return True
    else:
      return False
  def adf4(index):
    if np.less(x[index],+009950.4729).all():
      return False
    else:
      return True
  def adf7(index):
    if np.greater(np.sin(x[index]),-103103.2585).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*-558.705, adf1(1)*+267.608, adf2(2)*+730.761, adf3(3)*+766.081, adf4(4)*-597.484, adf7(7)*+955.704], [1, 1, 0, 0, 1], 146.135)
result=p(); 0.8333333333333334
IndLenGenome:282
IndGenome:[6, 33, 12, 27, 38, 29, 76, 21, 8, 37, 39, 73, 17, 27, 6, 2, 35, 27, 10, 34, 71, 81, 31, 27, 71, 77, 66, 84, 73, 7, 87, 80, 10, 58, 97, 70, 17, 83, 32, 68, 29, 69, 41, 4, 88, 9, 80, 67, 50, 55, 15, 75, 49, 24, 49, 41, 21, 57, 79, 16, 50, 91, 37, 64, 86, 19, 58, 93, 86, 97, 68, 13, 25, 35, 91, 46, 85, 93, 24, 24, 24, 96, 57, 35, 81, 34, 90, 59, 10, 91, 66, 65, 49, 26, 81, 34, 77, 43, 37, 74, 28, 55, 18, 41, 26, 42, 60, 73, 72, 60, 27, 39, 23, 87, 99, 60, 81, 63, 82, 27, 55, 17, 48, 36, 41, 77, 96, 37, 96, 56, 35, 17, 5, 44, 85, 14, 80, 65, 54, 76, 56, 58, 21, 61, 85, 70, 86, 59, 17, 57, 92, 90, 61, 46, 25, 15, 56, 60, 15, 43, 75, 34, 76, 55, 98, 7, 64, 41, 32, 84, 17, 59, 25, 37, 24, 84, 64, 42, 50, 40, 95, 93, 81, 21, 33, 85, 92, 18, 12, 55, 42, 4, 55, 70, 5, 89, 43, 99, 14, 9, 25, 11, 97, 57, 92, 100, 47, 26, 40, 94, 99, 43, 14, 66, 92, 44, 18, 82, 2, 71, 20, 93, 15, 56, 8, 63, 32, 32, 24, 0, 87, 33, 6, 83, 55, 49, 66, 19, 71, 81, 28, 5, 70, 39, 22, 5, 69, 21, 84, 58, 58, 17, 41, 78, 26, 29, 1, 68, 33, 28, 67, 72, 92, 5, 32, 77, 63, 31, 79, 20, 79, 35, 38, 45, 84, 36, 14, 14, 58, 12, 95, 67]
last_save: 1027

Gen:36
TrainFitness:1.0
TestFitness:0.5
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],-273829.1124).all():
      return False
    else:
      return False
  def adf1(index):
    if np.greater(rlog(x[index]),-033763.0021).all():
      return False
    else:
      return False
  def adf2(index):
    if np.less(x[index],-855859.1939).all():
      return False
    else:
      return True
  def adf3(index):
    if np.less(sigmoid(x[index]),+451872.0956).all():
      return True
    else:
      return False
  def adf4(index):
    if np.less(x[index],+009675.2646).all():
      if np.less(x[index],-884671.3578).all():
        return True
      else:
        return True
      return True
    else:
      if np.equal(np.tanh(x[index]),+692745.4683).all():
        return False
      else:
        return False
      return True
  def adf7(index):
    if np.equal(x[index],-407284.9314).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-607.780, adf1(1)*+008.755, adf2(2)*-306.889, adf3(3)*+589.651, adf4(4)*-559.452, adf7(7)*+672.129], [1, 1, 1, 1, 0], 156.208)
result=p(); 1.0
IndLenGenome:457
IndGenome:[61, 93, 20, 73, 97, 97, 1, 83, 19, 22, 7, 43, 38, 2, 49, 31, 31, 72, 54, 61, 61, 87, 39, 6, 6, 22, 54, 73, 10, 50, 63, 3, 47, 76, 83, 20, 20, 82, 61, 73, 21, 35, 11, 82, 87, 71, 33, 37, 58, 55, 75, 48, 25, 99, 21, 39, 73, 19, 97, 20, 60, 17, 22, 94, 75, 24, 50, 35, 14, 65, 31, 88, 67, 52, 20, 9, 25, 26, 58, 11, 53, 94, 84, 28, 23, 45, 88, 4, 40, 70, 59, 56, 67, 5, 82, 26, 64, 16, 75, 82, 91, 54, 59, 20, 78, 58, 74, 26, 7, 91, 73, 65, 47, 98, 90, 46, 80, 99, 56, 30, 56, 48, 62, 22, 46, 99, 82, 17, 14, 75, 14, 76, 28, 63, 61, 9, 34, 98, 69, 23, 43, 60, 37, 87, 54, 60, 37, 72, 48, 24, 59, 93, 51, 44, 54, 97, 87, 17, 48, 25, 76, 26, 80, 37, 97, 28, 50, 87, 18, 11, 10, 70, 18, 87, 95, 15, 71, 77, 16, 23, 40, 26, 78, 48, 59, 75, 32, 42, 25, 68, 29, 16, 85, 21, 95, 53, 78, 15, 85, 29, 14, 55, 72, 49, 100, 81, 16, 17, 72, 11, 82, 9, 72, 63, 73, 81, 45, 98, 68, 11, 15, 76, 62, 90, 98, 74, 97, 61, 47, 86, 3, 38, 21, 67, 45, 55, 83, 48, 89, 45, 34, 97, 74, 50, 44, 53, 2, 11, 62, 14, 29, 21, 93, 42, 81, 23, 13, 78, 64, 78, 63, 41, 25, 72, 94, 16, 53, 94, 84, 28, 17, 45, 88, 4, 40, 70, 43, 56, 76, 5, 82, 26, 64, 16, 75, 58, 91, 54, 59, 63, 41, 25, 72, 94, 16, 53, 94, 84, 28, 17, 45, 88, 4, 40, 70, 43, 56, 67, 5, 82, 26, 64, 16, 75, 82, 91, 54, 59, 20, 78, 58, 74, 26, 24, 59, 93, 51, 44, 54, 97, 80, 17, 48, 25, 76, 26, 80, 37, 97, 28, 50, 87, 18, 11, 10, 70, 18, 87, 95, 15, 71, 77, 16, 23, 40, 26, 78, 48, 59, 75, 32, 42, 25, 68, 29, 16, 85, 21, 95, 53, 78, 15, 85, 29, 14, 55, 72, 49, 100, 81, 16, 17, 72, 11, 82, 9, 72, 63, 73, 81, 45, 98, 68, 11, 15, 76, 62, 90, 46, 42, 61, 30, 19, 33, 68, 15, 36, 94, 78, 1, 27, 9, 77, 51, 68, 64, 3, 62, 38, 7, 63, 97, 95, 75, 63, 77, 72, 13, 84, 39, 39, 8, 20, 21, 46, 39, 90, 42, 26, 32, 90, 37, 79, 50, 9, 98, 50, 64, 43, 74, 76, 69, 25, 42, 57, 79, 20]
last_save: 1027

Gen:36
last_save: 1027
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.5
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(psqrt(x[index]),+670986.0192).all():
      return True
    else:
      return False
  def adf1(index):
    if np.greater(np.sin(x[index]),-181473.2287).all():
      return False
    else:
      return False
  def adf2(index):
    if np.less(x[index],+490628.5659).all():
      return False
    else:
      return True
  def adf3(index):
    if np.greater(sigmoid(x[index]),-180886.0312).all():
      return False
    else:
      return False
  def adf4(index):
    if np.equal(np.tanh(x[index]),-222705.5320).all():
      return False
    else:
      return True
  def adf7(index):
    if np.greater(np.cos(x[index]),+514673.9837).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+365.457, adf1(1)*+158.482, adf2(2)*-858.677, adf3(3)*-929.793, adf4(4)*+218.456, adf7(7)*+393.896], [0, 0, 0, 1, 1], 224.120)
result=p(); 0.6666666666666666
IndLenGenome:286
IndGenome:[41, 37, 49, 18, 59, 67, 16, 24, 70, 20, 82, 10, 52, 11, 61, 47, 77, 70, 17, 84, 61, 32, 20, 90, 82, 87, 57, 27, 25, 55, 55, 30, 53, 54, 13, 82, 56, 53, 34, 87, 14, 20, 5, 25, 72, 15, 34, 43, 10, 82, 72, 54, 93, 73, 24, 73, 17, 98, 67, 9, 20, 66, 9, 91, 86, 89, 43, 97, 65, 40, 23, 84, 75, 81, 26, 35, 73, 31, 24, 61, 14, 46, 44, 5, 97, 42, 82, 29, 77, 25, 68, 12, 48, 18, 20, 10, 78, 43, 85, 96, 39, 25, 93, 89, 16, 74, 53, 61, 94, 15, 49, 15, 12, 67, 32, 31, 81, 20, 69, 63, 22, 67, 93, 21, 29, 88, 82, 27, 23, 11, 13, 59, 52, 66, 54, 80, 33, 12, 41, 98, 19, 17, 47, 76, 47, 13, 58, 65, 51, 50, 26, 74, 57, 68, 2, 68, 23, 56, 12, 57, 81, 29, 24, 89, 38, 16, 67, 26, 49, 55, 19, 68, 70, 58, 30, 42, 79, 16, 58, 49, 56, 76, 45, 22, 20, 41, 98, 83, 54, 4, 11, 68, 93, 76, 24, 96, 39, 59, 46, 33, 38, 46, 2, 48, 88, 60, 48, 83, 47, 50, 43, 62, 44, 63, 72, 96, 60, 70, 53, 6, 59, 0, 52, 61, 19, 30, 39, 72, 40, 9, 33, 80, 62, 81, 9, 64, 90, 41, 78, 18, 47, 47, 40, 82, 52, 73, 96, 53, 28, 19, 43, 80, 77, 8, 28, 75, 12, 82, 76, 75, 90, 21, 41, 33, 23, 58, 9, 28, 50, 44, 39, 10, 90, 31, 81, 10, 24, 41, 56, 71, 73, 95, 60, 22, 42, 90]
last_save: 1028

Gen:20
TrainFitness:0.8333333333333334
TestFitness:0.3333333333333333
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],-728600.3152).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(x[index],-821144.2883).all():
      return False
    else:
      return True
  def adf2(index):
    if np.greater(x[index],+349050.2700).all():
      if np.equal(np.sin(x[index]),-868499.7602).all():
        return True
      else:
        return False
      return True
    else:
      if np.less(np.tanh(x[index]),-268258.0991).all():
        return False
      else:
        return True
      return False
  def adf3(index):
    if np.greater(x[index],+018745.0635).all():
      return False
    else:
      return True
  def adf4(index):
    if np.less(sigmoid(x[index]),-191921.4273).all():
      return True
    else:
      return True
  def adf7(index):
    if np.less(psqrt(x[index]),-390613.7295).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*-901.531, adf1(1)*+373.164, adf2(2)*+983.836, adf3(3)*-901.991, adf4(4)*-917.072, adf7(7)*-693.055], [1, 0, 1, 0, 0], 524.361)
result=p(); 0.8333333333333334
IndLenGenome:397
IndGenome:[97, 89, 81, 97, 41, 65, 53, 65, 38, 97, 62, 38, 26, 40, 80, 23, 81, 25, 32, 37, 67, 65, 67, 37, 91, 47, 3, 78, 98, 32, 41, 41, 24, 54, 62, 48, 18, 83, 53, 80, 40, 74, 17, 51, 31, 37, 14, 98, 63, 34, 59, 40, 65, 20, 52, 27, 40, 50, 47, 14, 86, 6, 32, 13, 42, 28, 46, 88, 34, 69, 89, 97, 16, 60, 52, 58, 59, 30, 49, 70, 16, 92, 66, 17, 79, 52, 76, 68, 62, 45, 88, 80, 89, 59, 91, 85, 20, 3, 52, 41, 6, 71, 86, 16, 54, 20, 51, 8, 97, 94, 35, 60, 66, 13, 35, 99, 8, 35, 93, 4, 34, 99, 93, 3, 7, 41, 89, 21, 99, 92, 41, 34, 82, 77, 83, 68, 90, 5, 63, 67, 72, 71, 39, 91, 44, 3, 69, 30, 76, 11, 83, 47, 62, 29, 45, 48, 50, 23, 40, 50, 87, 91, 89, 70, 91, 65, 33, 21, 57, 2, 45, 43, 37, 13, 31, 16, 24, 61, 70, 77, 9, 58, 93, 88, 63, 66, 75, 37, 29, 39, 80, 41, 29, 69, 11, 40, 27, 23, 59, 81, 57, 80, 27, 92, 69, 59, 89, 36, 79, 93, 30, 85, 35, 11, 55, 56, 15, 72, 88, 55, 65, 62, 24, 13, 6, 61, 66, 62, 50, 82, 8, 71, 53, 16, 44, 62, 68, 23, 35, 27, 74, 14, 7, 40, 92, 28, 67, 63, 78, 99, 30, 78, 79, 40, 36, 83, 77, 44, 61, 77, 87, 40, 59, 51, 76, 75, 74, 92, 82, 54, 15, 36, 55, 62, 48, 26, 17, 75, 45, 59, 12, 81, 80, 37, 75, 62, 54, 23, 92, 98, 38, 19, 81, 54, 15, 82, 48, 95, 23, 31, 20, 80, 65, 98, 53, 34, 26, 55, 25, 74, 71, 30, 86, 49, 38, 56, 80, 33, 42, 88, 81, 97, 13, 67, 51, 51, 24, 33, 65, 68, 62, 62, 90, 34, 83, 48, 66, 58, 43, 18, 8, 67, 46, 17, 86, 9, 10, 31, 25, 37, 28, 2, 9, 90, 93, 91, 47, 79, 10, 38, 70, 59, 78, 0, 27, 89, 83, 46, 47, 46, 56, 9, 64, 23, 68, 44, 7, 78, 88, 80, 84, 91, 85, 30, 61, 8, 69, 82, 6, 31, 86, 38, 43, 60, 4, 69, 14]
last_save: 1028

Gen:78
TrainFitness:1.0
TestFitness:0.3333333333333333
MaxGenLen:515
Individual: def p():
  def adf0(index):
    if np.equal(x[index],-728600.3152).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(x[index],-821144.2883).all():
      return False
    else:
      return True
  def adf2(index):
    if np.greater(x[index],+757717.3882).all():
      if np.equal(np.sin(x[index]),+330047.1174).all():
        return True
      else:
        return False
      return True
    else:
      if np.less(x[index],+007466.2328).all():
        return True
      else:
        return False
      return True
  def adf3(index):
    if np.less(np.sin(x[index]),+090626.7926).all():
      return True
    else:
      return True
  def adf4(index):
    if np.equal(x[index],-321616.6401).all():
      if np.less(x[index],-481216.1001).all():
        if np.less(x[index],-431954.4395).all():
          if np.less(sigmoid(x[index]),-879919.3476).all():
            return False
          else:
            return True
          return True
        else:
          if np.greater(np.tanh(x[index]),+733553.9988).all():
            return False
          else:
            return True
          return True
        return False
      else:
        if np.equal(np.cos(x[index]),+717452.8605).all():
          return True
        else:
          return False
        return False
      return False
    else:
      if np.equal(x[index],-255005.1581).all():
        return False
      else:
        return True
      return False
  def adf7(index):
    if np.less(np.tanh(x[index]),+171633.4351).all():
      if np.less(x[index],+034710.6891).all():
        return False
      else:
        return True
      return True
    else:
      if np.greater(np.sin(x[index]),-817292.8926).all():
        return False
      else:
        return False
      return True
  return multiple_operation([adf0(0)*+436.428, adf1(1)*-447.058, adf2(2)*-908.372, adf3(3)*-170.071, adf4(4)*+531.725, adf7(7)*-164.107], [0, 1, 0, 1, 0], 799.097)
result=p(); 1.0
IndLenGenome:506
IndGenome:[97, 89, 33, 97, 41, 65, 53, 65, 38, 97, 62, 38, 26, 40, 80, 23, 81, 25, 32, 37, 67, 65, 67, 37, 91, 47, 3, 78, 98, 32, 41, 41, 24, 54, 62, 48, 18, 83, 53, 80, 40, 74, 17, 51, 31, 25, 32, 37, 67, 65, 67, 37, 91, 47, 3, 78, 98, 32, 41, 41, 24, 54, 62, 48, 18, 83, 53, 80, 40, 74, 17, 51, 31, 37, 14, 98, 63, 34, 59, 40, 65, 20, 52, 27, 40, 50, 47, 14, 86, 6, 32, 13, 42, 28, 46, 1, 34, 69, 89, 97, 16, 60, 52, 58, 59, 30, 49, 70, 16, 92, 66, 17, 79, 52, 76, 68, 62, 45, 88, 80, 89, 59, 91, 85, 20, 3, 52, 41, 6, 71, 86, 16, 54, 20, 51, 8, 41, 34, 9, 75, 23, 77, 34, 88, 61, 52, 41, 6, 71, 30, 30, 61, 28, 68, 19, 95, 17, 93, 63, 74, 43, 11, 9, 75, 64, 84, 13, 19, 35, 19, 19, 42, 27, 79, 65, 96, 88, 47, 99, 19, 51, 19, 53, 14, 37, 66, 57, 40, 44, 49, 99, 24, 38, 88, 96, 80, 67, 53, 23, 5, 75, 53, 89, 79, 18, 8, 15, 26, 72, 31, 97, 41, 16, 73, 83, 84, 13, 7, 51, 67, 4, 65, 22, 48, 36, 40, 35, 4, 47, 13, 23, 57, 38, 19, 41, 75, 14, 42, 65, 75, 20, 90, 75, 41, 35, 88, 51, 97, 72, 79, 22, 38, 79, 79, 18, 8, 15, 26, 72, 31, 97, 41, 16, 73, 13, 84, 13, 45, 51, 67, 4, 65, 11, 48, 36, 70, 23, 4, 47, 1, 0, 76, 38, 19, 41, 75, 14, 42, 65, 75, 20, 90, 75, 41, 35, 88, 51, 97, 72, 79, 22, 38, 79, 62, 96, 25, 13, 8, 39, 17, 61, 54, 92, 24, 13, 6, 44, 62, 68, 23, 35, 27, 74, 14, 7, 40, 25, 28, 67, 63, 78, 99, 30, 78, 83, 47, 62, 29, 45, 48, 21, 37, 40, 50, 87, 91, 89, 70, 91, 65, 33, 21, 57, 2, 45, 43, 37, 2, 31, 16, 24, 61, 70, 77, 9, 58, 93, 88, 63, 66, 75, 37, 29, 39, 80, 69, 77, 99, 28, 51, 62, 20, 23, 46, 74, 24, 63, 34, 87, 45, 16, 40, 74, 87, 91, 89, 70, 91, 65, 33, 21, 57, 2, 45, 43, 37, 13, 26, 81, 63, 86, 78, 100, 79, 7, 57, 22, 59, 71, 80, 19, 72, 97, 82, 53, 57, 56, 30, 53, 70, 83, 46, 99, 7, 21, 97, 34, 52, 4, 56, 84, 51, 50, 88, 0, 93, 85, 73, 43, 39, 54, 35, 46, 18, 9, 73, 39, 58, 88, 12, 67, 93, 73, 26, 45, 78, 27, 37, 63, 38, 70, 51, 84, 21, 19, 28, 90, 83, 63, 61, 46, 23, 24, 57, 5, 10, 83, 91, 62, 37, 77, 64, 34, 5, 93, 41, 35, 30, 49, 57, 95, 39, 41, 1, 48, 32]
last_save: 1028

Gen:78
last_save: 1028
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.16666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(sigmoid(x[index]),-120770.2825).all():
      return False
    else:
      return True
  def adf1(index):
    if np.greater(np.sin(x[index]),-955560.8421).all():
      return True
    else:
      return False
  def adf2(index):
    if np.greater(np.tanh(x[index]),+437445.7360).all():
      return False
    else:
      return True
  def adf3(index):
    if np.less(x[index],+288045.3803).all():
      return False
    else:
      return False
  def adf4(index):
    if np.equal(np.tanh(x[index]),-627259.0494).all():
      return True
    else:
      return False
  def adf7(index):
    if np.less(x[index],-735410.4223).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*-885.838, adf1(1)*+256.838, adf2(2)*+419.885, adf3(3)*+515.095, adf4(4)*-326.119, adf7(7)*-425.898], [1, 0, 0, 0, 1], 205.633)
result=p(); 0.6666666666666666
IndLenGenome:285
IndGenome:[91, 30, 21, 57, 85, 32, 19, 3, 81, 58, 81, 23, 28, 68, 94, 70, 30, 38, 58, 16, 64, 93, 75, 89, 41, 83, 82, 13, 99, 44, 61, 75, 54, 78, 32, 94, 7, 63, 29, 9, 6, 25, 15, 25, 50, 23, 19, 67, 96, 52, 75, 68, 9, 79, 26, 17, 99, 76, 72, 66, 20, 44, 24, 12, 69, 10, 80, 29, 13, 70, 14, 20, 16, 40, 25, 92, 68, 32, 44, 44, 54, 52, 63, 37, 33, 67, 2, 33, 32, 51, 51, 13, 66, 75, 42, 10, 17, 73, 1, 87, 16, 7, 1, 50, 49, 40, 90, 12, 77, 52, 92, 48, 70, 43, 60, 77, 34, 30, 91, 53, 40, 74, 57, 35, 61, 74, 54, 55, 22, 37, 88, 98, 81, 28, 16, 29, 69, 19, 45, 29, 12, 95, 34, 28, 85, 54, 99, 20, 28, 41, 18, 15, 81, 68, 84, 93, 72, 15, 49, 39, 72, 48, 65, 64, 18, 78, 58, 84, 30, 73, 63, 76, 58, 75, 11, 93, 32, 76, 85, 73, 94, 42, 45, 12, 38, 10, 25, 47, 41, 24, 14, 18, 99, 2, 98, 25, 97, 25, 92, 99, 39, 35, 26, 41, 46, 98, 68, 54, 29, 47, 28, 69, 69, 22, 67, 99, 43, 68, 37, 72, 35, 9, 42, 21, 9, 64, 46, 96, 47, 78, 37, 45, 55, 67, 78, 46, 45, 51, 59, 53, 97, 4, 74, 6, 97, 100, 58, 33, 73, 9, 38, 66, 64, 25, 29, 67, 71, 61, 96, 40, 0, 61, 21, 80, 9, 46, 18, 88, 26, 44, 74, 45, 95, 14, 9, 56, 9, 4, 97, 31, 13, 7, 87, 63, 4]
last_save: 1029

Gen:11
TrainFitness:0.8333333333333334
TestFitness:0.16666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],+877974.6981).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(psqrt(x[index]),+781767.2019).all():
      return True
    else:
      return True
  def adf2(index):
    if np.equal(sigmoid(x[index]),-730031.4846).all():
      return True
    else:
      return False
  def adf3(index):
    if np.less(np.tanh(x[index]),-133735.3534).all():
      if np.less(np.cos(x[index]),-809863.1753).all():
        if np.less(x[index],-352741.3738).all():
          return True
        else:
          return False
        return True
      else:
        if np.equal(x[index],-169993.6578).all():
          return True
        else:
          return True
        return True
      return True
    else:
      if np.greater(sigmoid(x[index]),+534455.6578).all():
        return False
      else:
        return False
      return True
  def adf4(index):
    if np.equal(x[index],+748452.4955).all():
      return False
    else:
      return False
  def adf7(index):
    if np.greater(x[index],+039570.9303).all():
      if np.greater(sigmoid(x[index]),+150372.9350).all():
        return True
      else:
        return True
      return False
    else:
      if np.equal(x[index],+025849.0256).all():
        return True
      else:
        return False
      return True
  return multiple_operation([adf0(0)*+767.715, adf1(1)*-032.264, adf2(2)*-197.596, adf3(3)*-533.778, adf4(4)*+070.857, adf7(7)*+307.950], [0, 1, 0, 0, 1], 129.678)
result=p(); 0.8333333333333334
IndLenGenome:323
IndGenome:[18, 97, 54, 85, 68, 77, 73, 30, 97, 18, 17, 67, 89, 97, 84, 36, 9, 8, 41, 95, 75, 44, 43, 91, 38, 53, 24, 74, 89, 97, 38, 91, 87, 76, 97, 82, 40, 31, 99, 80, 24, 75, 41, 98, 98, 27, 9, 63, 48, 67, 83, 50, 90, 13, 71, 74, 48, 84, 76, 50, 23, 30, 56, 32, 82, 44, 80, 11, 43, 40, 41, 73, 73, 97, 93, 55, 63, 95, 93, 54, 94, 10, 31, 80, 49, 41, 79, 28, 18, 70, 69, 98, 76, 43, 91, 87, 55, 3, 87, 100, 83, 63, 11, 51, 83, 25, 82, 57, 4, 31, 53, 47, 43, 38, 98, 9, 58, 51, 95, 13, 66, 11, 57, 61, 36, 49, 69, 79, 3, 6, 85, 57, 78, 78, 78, 18, 52, 37, 42, 96, 15, 79, 84, 30, 85, 33, 74, 64, 45, 75, 96, 75, 77, 98, 89, 71, 98, 29, 45, 53, 95, 95, 36, 66, 77, 54, 18, 94, 45, 12, 94, 29, 45, 35, 85, 35, 54, 70, 87, 18, 93, 47, 42, 87, 60, 13, 89, 65, 97, 80, 19, 13, 90, 63, 13, 57, 42, 93, 75, 42, 67, 31, 35, 70, 53, 87, 22, 19, 23, 25, 90, 88, 96, 35, 13, 65, 21, 53, 12, 79, 30, 52, 55, 38, 74, 69, 70, 42, 45, 76, 72, 89, 6, 8, 90, 5, 38, 10, 57, 16, 67, 7, 31, 95, 28, 91, 80, 90, 3, 22, 12, 96, 4, 7, 97, 1, 61, 59, 27, 55, 59, 26, 47, 91, 12, 25, 53, 53, 67, 47, 28, 24, 86, 52, 20, 27, 30, 8, 65, 17, 33, 92, 8, 3, 70, 67, 29, 95, 10, 32, 78, 71, 60, 22, 33, 27, 1, 32, 69, 96, 97, 88, 73, 68, 85, 44, 29, 77, 3, 16, 19, 86, 71, 67, 0, 37, 7, 86, 54, 69, 89, 36, 25]
last_save: 1029

Gen:379
TrainFitness:1.0
TestFitness:0.6666666666666666
MaxGenLen:605
Individual: def p():
  def adf0(index):
    if np.greater(x[index],+312734.0684).all():
      return True
    else:
      return False
  def adf1(index):
    if np.greater(np.tanh(x[index]),-029935.6823).all():
      return False
    else:
      return True
  def adf2(index):
    if np.greater(x[index],+451548.0021).all():
      return False
    else:
      return True
  def adf3(index):
    if np.less(x[index],+005879.6905).all():
      return False
    else:
      return True
  def adf4(index):
    if np.equal(np.cos(x[index]),-688011.3755).all():
      return False
    else:
      return False
  def adf7(index):
    if np.equal(x[index],+519025.3470).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+053.497, adf1(1)*+825.705, adf2(2)*-345.347, adf3(3)*+879.690, adf4(4)*-174.890, adf7(7)*+880.113], [1, 1, 1, 1, 1], 531.845)
result=p(); 1.0
IndLenGenome:442
IndGenome:[18, 20, 88, 47, 12, 77, 73, 26, 15, 43, 51, 72, 67, 23, 84, 100, 86, 38, 34, 92, 75, 85, 63, 81, 38, 14, 64, 11, 89, 100, 12, 39, 29, 23, 45, 56, 88, 42, 83, 87, 58, 54, 77, 42, 15, 36, 80, 23, 24, 95, 61, 75, 34, 98, 20, 70, 72, 41, 53, 0, 38, 43, 64, 87, 93, 54, 10, 10, 80, 35, 98, 57, 79, 36, 49, 50, 45, 3, 40, 21, 57, 74, 78, 49, 70, 23, 46, 36, 88, 38, 70, 21, 61, 93, 47, 65, 15, 55, 49, 23, 17, 95, 43, 81, 38, 14, 55, 11, 89, 100, 12, 95, 93, 54, 27, 10, 82, 35, 98, 39, 79, 36, 49, 50, 45, 3, 24, 79, 57, 74, 98, 78, 18, 52, 45, 37, 0, 75, 45, 31, 37, 43, 64, 95, 93, 54, 27, 10, 82, 35, 98, 57, 79, 36, 49, 50, 45, 3, 40, 21, 57, 74, 78, 49, 80, 23, 46, 36, 88, 38, 70, 21, 61, 93, 47, 65, 15, 55, 49, 23, 17, 95, 43, 81, 38, 14, 55, 11, 89, 100, 12, 95, 93, 54, 27, 10, 82, 35, 98, 39, 66, 36, 49, 50, 45, 3, 24, 79, 57, 74, 98, 78, 18, 52, 45, 37, 0, 75, 45, 31, 37, 43, 64, 95, 93, 54, 27, 10, 82, 91, 98, 85, 95, 61, 75, 34, 98, 11, 17, 72, 41, 73, 29, 37, 43, 64, 95, 93, 54, 27, 10, 82, 35, 98, 79, 79, 36, 49, 96, 15, 79, 84, 30, 85, 33, 74, 64, 45, 75, 96, 75, 77, 98, 89, 71, 98, 29, 45, 53, 95, 95, 36, 66, 77, 44, 18, 94, 45, 12, 94, 29, 45, 35, 85, 35, 54, 70, 87, 18, 93, 47, 42, 87, 60, 13, 89, 65, 97, 80, 19, 13, 90, 63, 13, 57, 42, 93, 75, 42, 67, 31, 35, 70, 53, 87, 22, 19, 23, 25, 90, 88, 96, 35, 13, 65, 21, 53, 12, 79, 30, 52, 55, 38, 74, 69, 70, 42, 45, 76, 72, 89, 6, 8, 90, 5, 38, 10, 57, 16, 67, 7, 31, 95, 28, 91, 80, 90, 3, 22, 12, 96, 4, 7, 97, 1, 61, 59, 27, 55, 59, 26, 7, 91, 12, 25, 53, 53, 67, 47, 28, 24, 86, 52, 20, 27, 30, 8, 65, 17, 33, 92, 8, 3, 70, 67, 29, 95, 10, 32, 78, 71, 60, 22, 33, 27, 1, 32, 69, 96, 97, 88, 73, 68, 85, 44, 29, 77, 3, 16, 19, 86, 71, 67, 0, 37, 7, 86, 54, 69, 89, 36, 25]
last_save: 1029

Gen:379
last_save: 1029
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.5
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],+254833.5648).all():
      return False
    else:
      return True
  def adf1(index):
    if np.less(np.sin(x[index]),-903914.6042).all():
      return True
    else:
      return False
  def adf2(index):
    if np.less(x[index],+012318.6424).all():
      return True
    else:
      return False
  def adf3(index):
    if np.greater(x[index],-657642.8947).all():
      return False
    else:
      return True
  def adf4(index):
    if np.less(x[index],+446217.4129).all():
      return True
    else:
      return True
  def adf7(index):
    if np.equal(np.tanh(x[index]),-073246.7787).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+009.926, adf1(1)*-728.831, adf2(2)*-769.702, adf3(3)*+193.972, adf4(4)*+288.735, adf7(7)*+779.498], [0, 1, 1, 0, 1], 160.196)
result=p(); 0.8333333333333334
IndLenGenome:282
IndGenome:[70, 40, 96, 80, 47, 84, 87, 75, 67, 94, 13, 4, 14, 49, 81, 47, 16, 52, 38, 47, 80, 76, 82, 83, 29, 42, 61, 51, 60, 43, 38, 39, 72, 41, 40, 74, 72, 53, 6, 37, 13, 99, 73, 88, 35, 97, 68, 92, 20, 14, 23, 64, 67, 18, 20, 29, 18, 58, 6, 51, 13, 42, 14, 16, 51, 86, 90, 76, 55, 29, 42, 96, 63, 35, 35, 14, 97, 61, 13, 87, 56, 24, 23, 24, 56, 36, 87, 94, 95, 14, 54, 50, 45, 76, 82, 49, 93, 50, 41, 72, 91, 80, 43, 68, 79, 24, 22, 36, 67, 48, 75, 44, 39, 70, 45, 13, 98, 79, 27, 62, 23, 12, 40, 89, 89, 68, 82, 60, 58, 94, 69, 59, 39, 20, 86, 60, 5, 69, 17, 90, 79, 19, 22, 27, 62, 31, 73, 39, 24, 63, 72, 92, 27, 78, 52, 57, 68, 88, 54, 75, 46, 31, 93, 77, 59, 64, 91, 37, 84, 88, 87, 21, 91, 34, 77, 72, 22, 28, 25, 10, 33, 66, 39, 37, 22, 77, 72, 10, 42, 87, 23, 47, 4, 78, 21, 93, 65, 61, 41, 50, 25, 100, 60, 65, 90, 35, 52, 15, 11, 34, 34, 48, 91, 79, 13, 53, 62, 56, 31, 20, 30, 39, 30, 5, 98, 52, 24, 62, 4, 63, 74, 6, 14, 91, 24, 2, 92, 95, 33, 27, 11, 8, 69, 39, 51, 5, 72, 4, 52, 2, 65, 45, 75, 86, 47, 56, 79, 67, 40, 55, 36, 49, 46, 80, 41, 72, 61, 26, 40, 55, 80, 29, 0, 47, 3, 10, 70, 65, 25, 71, 39, 63]
last_save: 10210

Gen:162
TrainFitness:1.0
TestFitness:0.6666666666666666
MaxGenLen:545
Individual: def p():
  def adf0(index):
    if np.less(rlog(x[index]),-478194.1227).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(x[index],+005837.8164).all():
      return False
    else:
      return True
  def adf2(index):
    if np.less(x[index],-382200.9709).all():
      return False
    else:
      return False
  def adf3(index):
    if np.greater(x[index],+978819.0019).all():
      if np.less(psqrt(x[index]),+935348.8739).all():
        return False
      else:
        return True
      return False
    else:
      if np.equal(x[index],+152484.5312).all():
        return True
      else:
        return True
      return False
  def adf4(index):
    if np.greater(np.sin(x[index]),-153715.4514).all():
      return False
    else:
      return False
  def adf7(index):
    if np.equal(rlog(x[index]),+350419.9442).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*-625.657, adf1(1)*-422.433, adf2(2)*+361.534, adf3(3)*-758.986, adf4(4)*+705.070, adf7(7)*-298.891], [0, 1, 0, 1, 0], 781.448)
result=p(); 1.0
IndLenGenome:350
IndGenome:[50, 74, 41, 27, 82, 20, 40, 0, 25, 5, 94, 87, 28, 41, 89, 74, 81, 92, 12, 27, 25, 45, 81, 65, 7, 13, 98, 82, 20, 40, 0, 25, 18, 23, 87, 28, 41, 26, 74, 81, 92, 36, 27, 25, 85, 81, 65, 7, 13, 98, 92, 42, 90, 10, 49, 7, 40, 59, 5, 29, 25, 78, 95, 54, 23, 59, 2, 52, 19, 97, 28, 88, 81, 49, 50, 80, 1, 79, 47, 34, 28, 11, 43, 56, 84, 89, 73, 45, 33, 64, 98, 68, 27, 83, 99, 17, 24, 49, 31, 41, 63, 45, 44, 27, 11, 65, 42, 64, 28, 84, 75, 73, 61, 92, 64, 76, 83, 27, 25, 93, 54, 60, 40, 29, 21, 31, 65, 13, 17, 41, 15, 24, 25, 1, 14, 99, 45, 95, 43, 47, 72, 64, 74, 56, 59, 23, 5, 90, 94, 21, 9, 29, 44, 94, 62, 3, 17, 81, 16, 80, 93, 15, 6, 2, 25, 36, 55, 27, 9, 21, 40, 4, 42, 2, 94, 13, 33, 35, 10, 66, 73, 76, 41, 75, 13, 24, 19, 83, 41, 57, 95, 98, 49, 18, 26, 10, 10, 87, 67, 10, 55, 80, 67, 50, 52, 87, 65, 32, 89, 58, 28, 99, 31, 62, 32, 65, 96, 65, 2, 76, 67, 28, 81, 14, 34, 28, 23, 99, 79, 72, 56, 23, 40, 30, 28, 57, 91, 76, 83, 27, 25, 93, 54, 60, 40, 29, 21, 31, 65, 13, 17, 63, 15, 24, 25, 1, 14, 99, 45, 95, 43, 47, 72, 64, 74, 56, 59, 23, 5, 90, 69, 21, 9, 29, 44, 94, 62, 3, 17, 81, 16, 80, 93, 15, 6, 2, 25, 24, 50, 65, 37, 17, 50, 27, 32, 74, 55, 36, 55, 27, 9, 21, 40, 4, 42, 2, 94, 13, 33, 35, 10, 66, 73, 22, 76, 75, 37, 4, 18, 13, 96, 59, 71, 98, 30, 1, 74, 62, 99, 63, 9, 93, 26, 73, 29, 76, 99, 56, 92, 62, 1, 24, 13, 27, 11, 5, 65, 80, 91, 67]
last_save: 10210

Gen:162
last_save: 10210
Exit:TrueFalseFalse