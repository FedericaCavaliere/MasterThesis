Dataset:Spiral/Full.csv
FS:False
Seed:1238
Size:3

Gen:1
TrainFitness:1.0
TestFitness:0.5555555555555556
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(psqrt(x[index]),-892158.0322).all():
      return False
    else:
      return False
  def adf1(index):
    if np.greater(psqrt(x[index]),+138702.5051).all():
      return False
    else:
      return True
  def adf2(index):
    if np.equal(sigmoid(x[index]),-237377.8427).all():
      return True
    else:
      return True
  def adf3(index):
    if np.equal(rlog(x[index]),-208974.2275).all():
      return True
    else:
      return True
  def adf4(index):
    if np.greater(psqrt(x[index]),+956196.0991).all():
      return True
    else:
      return False
  def adf5(index):
    if np.greater(x[index],+979493.6810).all():
      return True
    else:
      return True
  def adf6(index):
    if np.equal(x[index],-490967.4225).all():
      return False
    else:
      return True
  def adf7(index):
    if np.less(sigmoid(x[index]),-897564.0764).all():
      return False
    else:
      return False
  def adf8(index):
    if np.greater(np.sin(x[index]),-801535.6179).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*-545.728, adf1(1)*-889.765, adf2(2)*+631.181, adf3(3)*-273.001, adf4(4)*+708.135, adf5(5)*-481.209, adf6(6)*-879.883, adf7(7)*-734.172, adf8(8)*-851.782], [0, 1, 1, 0, 1, 1, 0, 1], 992.958)
result=p(); 1.0
IndLenGenome:420
IndGenome:[1, 47, 59, 50, 94, 2, 93, 83, 83, 3, 63, 85, 49, 85, 55, 25, 34, 6, 84, 5, 27, 39, 56, 57, 64, 7, 73, 79, 34, 26, 15, 3, 44, 39, 16, 92, 79, 48, 76, 27, 30, 99, 39, 79, 33, 42, 26, 80, 17, 19, 19, 40, 49, 64, 50, 16, 42, 18, 18, 99, 48, 62, 58, 89, 36, 35, 49, 31, 94, 11, 89, 79, 19, 78, 61, 92, 42, 26, 54, 76, 67, 10, 69, 85, 83, 71, 90, 25, 85, 15, 99, 21, 40, 39, 10, 73, 19, 17, 25, 88, 89, 25, 41, 58, 12, 38, 60, 97, 69, 75, 69, 82, 50, 63, 94, 18, 68, 68, 46, 48, 24, 49, 29, 63, 65, 70, 13, 72, 70, 77, 70, 62, 64, 33, 31, 81, 96, 48, 79, 71, 83, 52, 74, 39, 54, 50, 71, 29, 60, 50, 70, 70, 93, 20, 98, 98, 42, 40, 57, 78, 21, 31, 96, 53, 21, 32, 98, 48, 64, 92, 22, 57, 95, 47, 39, 98, 29, 97, 71, 85, 25, 46, 22, 21, 74, 67, 14, 52, 85, 78, 43, 29, 55, 48, 2, 37, 55, 62, 77, 97, 85, 27, 68, 47, 11, 52, 36, 80, 13, 41, 46, 38, 27, 76, 11, 38, 55, 13, 58, 55, 73, 73, 53, 99, 91, 97, 73, 47, 98, 36, 64, 63, 57, 72, 92, 81, 18, 17, 42, 52, 50, 81, 31, 58, 96, 69, 34, 37, 33, 32, 88, 80, 31, 13, 72, 23, 47, 55, 37, 27, 78, 17, 58, 45, 80, 83, 72, 44, 68, 24, 22, 71, 78, 57, 33, 40, 79, 93, 51, 69, 71, 15, 91, 58, 33, 86, 54, 41, 98, 51, 51, 99, 63, 65, 99, 69, 18, 0, 21, 18, 38, 14, 98, 62, 97, 78, 16, 49, 16, 14, 95, 65, 12, 79, 51, 70, 91, 87, 85, 9, 78, 5, 83, 19, 57, 76, 100, 48, 56, 57, 46, 60, 4, 59, 38, 28, 20, 1, 8, 56, 40, 47, 30, 33, 24, 96, 4, 29, 72, 66, 94, 78, 27, 49, 29, 48, 34, 31, 90, 28, 56, 87, 64, 55, 27, 40, 67, 68, 11, 51, 80, 74, 71, 61, 40, 93, 49, 83, 23, 65, 84, 48, 89, 53, 56, 6, 43, 31, 21, 41, 93, 78, 7, 100, 59, 92, 43, 51, 42, 73, 90, 61, 65, 58, 6, 44, 54, 73, 72, 69, 14, 90, 5, 22, 2, 69, 17, 92, 51, 30]
last_save: 341

Gen:1
last_save: 341
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.5555555555555556
TestFitness:1.0
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],+670588.1963).all():
      return True
    else:
      return True
  def adf1(index):
    if np.less(x[index],+550360.3563).all():
      return False
    else:
      return True
  def adf2(index):
    if np.less(x[index],-635483.2634).all():
      return True
    else:
      return False
  def adf3(index):
    if np.greater(x[index],-023902.7665).all():
      return True
    else:
      return True
  def adf4(index):
    if np.equal(np.sin(x[index]),-441859.5738).all():
      return True
    else:
      return False
  def adf5(index):
    if np.greater(np.sin(x[index]),-027731.2455).all():
      return False
    else:
      return True
  def adf6(index):
    if np.greater(rlog(x[index]),+671377.7496).all():
      return False
    else:
      return True
  def adf7(index):
    if np.greater(psqrt(x[index]),+324825.3295).all():
      return True
    else:
      return False
  def adf8(index):
    if np.less(x[index],+890300.8832).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*-451.753, adf1(1)*+216.430, adf2(2)*-883.236, adf3(3)*-597.928, adf4(4)*-607.908, adf5(5)*+504.022, adf6(6)*-595.379, adf7(7)*+684.027, adf8(8)*-475.890], [1, 0, 0, 0, 0, 1, 0, 0], 707.251)
result=p(); 0.5555555555555556
IndLenGenome:415
IndGenome:[9, 13, 99, 60, 44, 4, 92, 11, 9, 86, 87, 43, 1, 57, 53, 23, 39, 70, 43, 27, 24, 12, 66, 83, 40, 10, 44, 66, 56, 22, 95, 54, 12, 92, 55, 13, 73, 24, 15, 86, 62, 25, 21, 35, 3, 52, 91, 33, 66, 76, 27, 28, 27, 66, 35, 2, 2, 71, 74, 99, 80, 88, 41, 61, 25, 86, 61, 77, 85, 68, 10, 77, 18, 42, 53, 33, 36, 85, 36, 30, 48, 37, 55, 71, 77, 58, 58, 64, 59, 10, 11, 52, 92, 77, 31, 83, 43, 47, 95, 90, 49, 77, 46, 14, 75, 53, 85, 53, 67, 76, 16, 20, 73, 11, 33, 7, 67, 70, 54, 95, 29, 53, 71, 71, 97, 85, 80, 74, 51, 58, 70, 99, 89, 77, 69, 52, 55, 88, 17, 13, 40, 85, 59, 95, 6, 11, 44, 14, 38, 93, 68, 98, 83, 79, 35, 73, 13, 27, 83, 34, 50, 50, 94, 91, 27, 13, 80, 68, 57, 35, 26, 88, 18, 54, 30, 18, 10, 9, 73, 72, 12, 62, 53, 52, 70, 22, 86, 84, 96, 84, 18, 51, 3, 56, 46, 96, 60, 85, 70, 69, 10, 82, 49, 90, 54, 19, 50, 65, 27, 62, 72, 58, 22, 90, 60, 34, 22, 52, 25, 75, 22, 75, 83, 35, 57, 95, 4, 24, 59, 72, 23, 76, 33, 78, 97, 37, 81, 68, 28, 55, 20, 92, 63, 58, 65, 97, 57, 18, 97, 18, 34, 44, 79, 47, 43, 31, 97, 60, 21, 46, 90, 95, 16, 66, 45, 26, 14, 83, 82, 48, 34, 15, 26, 93, 43, 88, 43, 38, 80, 72, 37, 71, 61, 37, 5, 41, 97, 35, 4, 13, 54, 58, 37, 75, 67, 61, 79, 68, 56, 19, 54, 52, 42, 46, 76, 4, 55, 15, 100, 94, 96, 29, 44, 92, 39, 3, 21, 7, 45, 72, 60, 53, 72, 45, 56, 7, 36, 25, 67, 48, 93, 54, 57, 21, 84, 9, 56, 37, 79, 83, 7, 26, 44, 26, 23, 46, 58, 81, 31, 38, 58, 96, 29, 21, 69, 94, 96, 4, 47, 95, 69, 81, 5, 23, 42, 60, 60, 65, 0, 46, 72, 16, 2, 31, 33, 12, 4, 55, 90, 65, 81, 76, 74, 3, 97, 76, 52, 67, 67, 13, 28, 83, 67, 22, 72, 88, 47, 17, 23, 95, 56, 75, 36, 88, 70, 0, 52, 3, 17, 39, 47, 10, 81, 100, 31]
last_save: 342

Gen:19
TrainFitness:0.6666666666666666
TestFitness:0.8888888888888888
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(np.sin(x[index]),-272231.0857).all():
      return True
    else:
      return True
  def adf1(index):
    if np.greater(x[index],-383754.9334).all():
      return False
    else:
      return False
  def adf2(index):
    if np.less(x[index],+536548.0238).all():
      return True
    else:
      return True
  def adf3(index):
    if np.greater(np.sin(x[index]),+303387.1877).all():
      return False
    else:
      return False
  def adf4(index):
    if np.greater(np.tanh(x[index]),-831668.1652).all():
      return False
    else:
      return False
  def adf5(index):
    if np.greater(psqrt(x[index]),+690259.5245).all():
      return True
    else:
      return False
  def adf6(index):
    if np.equal(x[index],+739633.4221).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(x[index],-473134.3944).all():
      if np.equal(x[index],+048210.3346).all():
        if np.greater(np.cos(x[index]),-844981.9586).all():
          return False
        else:
          return False
        return False
      else:
        if np.equal(x[index],-586157.3758).all():
          return False
        else:
          return True
        return True
      return True
    else:
      if np.equal(np.sin(x[index]),+483511.3760).all():
        return False
      else:
        return True
      return True
  def adf8(index):
    if np.greater(x[index],+012847.7036).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+289.747, adf1(1)*-977.124, adf2(2)*-588.263, adf3(3)*-769.116, adf4(4)*+440.000, adf5(5)*-212.209, adf6(6)*+093.124, adf7(7)*-620.684, adf8(8)*-925.264], [0, 0, 1, 1, 1, 1, 1, 0], 387.289)
result=p(); 0.6666666666666666
IndLenGenome:437
IndGenome:[7, 26, 89, 21, 58, 6, 90, 12, 9, 51, 42, 67, 22, 42, 43, 51, 100, 18, 45, 57, 66, 12, 69, 77, 84, 15, 73, 25, 33, 53, 78, 13, 57, 65, 74, 49, 3, 13, 74, 37, 11, 93, 29, 4, 69, 17, 74, 92, 35, 93, 76, 15, 24, 38, 60, 12, 53, 68, 10, 40, 22, 81, 39, 96, 24, 99, 86, 88, 53, 30, 23, 83, 68, 97, 31, 48, 47, 87, 73, 65, 16, 45, 81, 94, 62, 69, 11, 83, 48, 13, 81, 86, 96, 38, 21, 86, 35, 62, 23, 81, 63, 99, 18, 22, 77, 27, 62, 24, 66, 79, 30, 52, 75, 69, 15, 32, 24, 5, 22, 63, 68, 83, 59, 47, 83, 2, 24, 97, 3, 29, 46, 43, 33, 84, 62, 92, 91, 56, 57, 74, 28, 81, 15, 35, 48, 41, 99, 14, 67, 33, 41, 23, 54, 33, 79, 84, 64, 62, 64, 26, 33, 83, 78, 45, 40, 64, 28, 42, 61, 60, 63, 23, 74, 16, 27, 81, 80, 25, 69, 17, 71, 68, 64, 74, 59, 98, 81, 29, 25, 8, 26, 61, 85, 57, 93, 47, 59, 98, 81, 29, 25, 8, 26, 61, 85, 57, 93, 47, 85, 48, 27, 46, 48, 22, 9, 26, 16, 42, 31, 68, 78, 34, 98, 23, 65, 51, 21, 53, 17, 46, 90, 85, 36, 56, 72, 43, 90, 41, 70, 12, 10, 80, 71, 62, 28, 14, 97, 27, 60, 63, 56, 88, 59, 21, 22, 23, 92, 38, 12, 28, 99, 47, 44, 97, 58, 83, 75, 29, 67, 77, 31, 62, 24, 83, 47, 70, 25, 48, 58, 52, 76, 13, 14, 35, 16, 67, 36, 59, 1, 51, 16, 95, 28, 77, 24, 34, 20, 70, 30, 100, 27, 39, 65, 62, 31, 12, 2, 100, 39, 75, 72, 55, 50, 59, 53, 41, 52, 94, 83, 43, 13, 26, 52, 30, 56, 88, 44, 51, 29, 68, 89, 42, 65, 72, 96, 24, 69, 80, 44, 71, 21, 39, 97, 57, 14, 47, 23, 98, 37, 32, 68, 99, 46, 13, 92, 6, 3, 25, 36, 82, 97, 32, 19, 12, 97, 0, 11, 26, 10, 71, 97, 36, 2, 40, 59, 14, 4, 75, 11, 16, 9, 28, 23, 25, 14, 96, 47, 21, 85, 52, 82, 37, 100, 11, 83, 6, 55, 38, 79, 96, 23, 76, 59, 30, 38, 67, 36, 13, 88, 23, 51, 4, 56, 31, 86, 2, 66, 64, 37, 73, 96, 8, 85, 17, 17, 75, 43, 34, 3, 23, 68, 76, 36, 70, 44, 55, 80]
last_save: 342

Gen:23
TrainFitness:0.7777777777777778
TestFitness:0.8888888888888888
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],+059063.0996).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(x[index],+330918.4979).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(x[index],-825229.0703).all():
      return True
    else:
      return True
  def adf3(index):
    if np.equal(sigmoid(x[index]),+539493.4563).all():
      return False
    else:
      return False
  def adf4(index):
    if np.greater(x[index],+586519.0055).all():
      if np.equal(np.tanh(x[index]),+090200.9312).all():
        return True
      else:
        return False
      return False
    else:
      if np.equal(np.sin(x[index]),+198905.2649).all():
        return True
      else:
        return True
      return True
  def adf5(index):
    if np.less(x[index],-616858.7767).all():
      return True
    else:
      return False
  def adf6(index):
    if np.greater(x[index],+008026.5550).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(rlog(x[index]),+141566.0168).all():
      return True
    else:
      return True
  def adf8(index):
    if np.greater(np.cos(x[index]),-069880.2563).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+722.141, adf1(1)*+016.806, adf2(2)*-466.951, adf3(3)*+695.025, adf4(4)*-660.168, adf5(5)*+154.969, adf6(6)*+988.025, adf7(7)*-784.529, adf8(8)*+168.001], [0, 1, 0, 0, 1, 1, 1, 0], 042.173)
result=p(); 0.7777777777777778
IndLenGenome:419
IndGenome:[96, 92, 5, 73, 67, 87, 62, 42, 51, 50, 35, 69, 60, 16, 23, 40, 9, 9, 16, 87, 79, 66, 75, 37, 65, 25, 18, 13, 13, 23, 50, 89, 81, 98, 24, 9, 27, 9, 81, 71, 57, 49, 6, 91, 73, 47, 76, 48, 72, 45, 92, 82, 19, 80, 47, 30, 13, 4, 36, 56, 93, 41, 16, 15, 23, 40, 33, 45, 13, 29, 84, 79, 13, 64, 5, 46, 3, 59, 35, 55, 44, 87, 99, 37, 31, 60, 36, 95, 68, 26, 65, 11, 99, 60, 0, 95, 15, 21, 38, 28, 62, 31, 12, 2, 100, 39, 50, 72, 80, 50, 59, 53, 41, 52, 94, 83, 43, 13, 26, 52, 30, 56, 88, 44, 51, 29, 68, 89, 100, 65, 72, 96, 24, 69, 80, 44, 2, 21, 39, 97, 57, 14, 47, 44, 86, 31, 26, 28, 75, 48, 67, 97, 46, 27, 84, 53, 88, 83, 27, 75, 57, 34, 40, 20, 90, 28, 40, 82, 26, 55, 35, 15, 40, 16, 11, 61, 29, 78, 28, 10, 97, 52, 92, 41, 74, 31, 95, 36, 96, 20, 31, 46, 98, 30, 26, 51, 41, 15, 14, 19, 76, 59, 85, 20, 16, 99, 78, 48, 10, 52, 55, 26, 73, 40, 37, 98, 24, 55, 22, 17, 97, 52, 92, 41, 74, 31, 95, 16, 96, 20, 31, 46, 98, 30, 26, 51, 41, 15, 14, 56, 76, 59, 85, 41, 15, 14, 19, 76, 59, 85, 30, 42, 45, 74, 31, 5, 16, 96, 20, 31, 46, 98, 30, 26, 51, 41, 15, 14, 19, 76, 59, 85, 20, 16, 99, 78, 48, 10, 52, 55, 26, 73, 40, 37, 98, 24, 55, 22, 79, 74, 44, 46, 51, 76, 68, 70, 30, 71, 21, 82, 65, 50, 96, 5, 41, 83, 32, 77, 70, 24, 42, 1, 67, 83, 30, 96, 75, 82, 44, 13, 4, 87, 19, 18, 41, 78, 54, 99, 65, 71, 36, 81, 35, 83, 52, 10, 98, 64, 75, 84, 61, 75, 88, 98, 83, 12, 37, 81, 90, 5, 30, 10, 62, 84, 65, 40, 59, 14, 4, 75, 11, 16, 9, 28, 23, 25, 14, 96, 47, 21, 84, 52, 82, 37, 100, 11, 83, 6, 55, 38, 79, 96, 23, 76, 59, 30, 38, 67, 36, 13, 88, 23, 51, 4, 56, 31, 86, 2, 66, 64, 37, 73, 96, 8, 85, 17, 17, 75, 43, 34, 3, 23, 68, 76, 36, 70, 44, 55, 80]
last_save: 342

Gen:569
TrainFitness:0.8888888888888888
TestFitness:0.5555555555555556
MaxGenLen:650
Individual: def p():
  def adf0(index):
    if np.less(x[index],+059063.0996).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(x[index],+330918.4979).all():
      return False
    else:
      return False
  def adf2(index):
    if np.equal(x[index],-825229.0723).all():
      return True
    else:
      return True
  def adf3(index):
    if np.equal(sigmoid(x[index]),+539493.4563).all():
      return False
    else:
      return False
  def adf4(index):
    if np.greater(x[index],+586519.0054).all():
      if np.equal(np.tanh(x[index]),+090270.9312).all():
        return True
      else:
        return False
      return False
    else:
      if np.equal(np.sin(x[index]),+198905.2649).all():
        return True
      else:
        return True
      return True
  def adf5(index):
    if np.less(x[index],-616858.7767).all():
      return True
    else:
      return True
  def adf6(index):
    if np.greater(x[index],+008026.5550).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(rlog(x[index]),+151900.5418).all():
      return True
    else:
      return True
  def adf8(index):
    if np.less(x[index],+093124.3336).all():
      if np.equal(np.tanh(x[index]),-905264.9042).all():
        if np.greater(x[index],+461685.8776).all():
          return False
        else:
          return True
        return False
      else:
        if np.greater(x[index],+000026.5550).all():
          if np.less(x[index],+722141.5660).all():
            if np.less(np.sin(x[index]),-549695.0698).all():
              return True
            else:
              return True
            return True
          else:
            if np.equal(x[index],-458212.2090).all():
              return True
            else:
              return True
            return True
          return False
        else:
          if np.equal(x[index],+065132.7042).all():
            return False
          else:
            return False
          return False
        return True
      return True
    else:
      if np.greater(rlog(x[index]),+009312.4313).all():
        return True
      else:
        return True
      return True
  return multiple_operation([adf0(0)*-890.526, adf1(1)*-421.977, adf2(2)*-616.858, adf3(3)*-743.837, adf4(4)*-000.802, adf5(5)*-566.119, adf6(6)*+722.141, adf7(7)*+016.806, adf8(8)*-496.950], [1, 0, 0, 0, 0, 1, 0, 1], 784.527)
result=p(); 0.8888888888888888
IndLenGenome:637
IndGenome:[96, 92, 5, 73, 67, 87, 62, 42, 51, 50, 35, 69, 60, 16, 23, 40, 9, 9, 16, 87, 79, 66, 75, 37, 65, 25, 18, 13, 13, 23, 50, 89, 81, 98, 24, 9, 27, 9, 81, 71, 57, 49, 92, 91, 73, 47, 76, 48, 72, 45, 92, 82, 19, 80, 47, 2, 13, 4, 36, 56, 93, 41, 16, 15, 23, 40, 33, 45, 13, 29, 84, 79, 13, 64, 5, 46, 3, 59, 35, 55, 44, 87, 99, 37, 31, 60, 36, 95, 68, 26, 65, 11, 99, 60, 0, 95, 64, 21, 38, 62, 62, 31, 12, 60, 100, 39, 50, 72, 87, 50, 59, 53, 41, 52, 94, 83, 1, 13, 26, 52, 30, 56, 88, 69, 51, 29, 68, 89, 100, 65, 72, 96, 24, 69, 80, 44, 2, 21, 39, 97, 57, 14, 47, 44, 86, 31, 26, 28, 75, 48, 67, 97, 46, 27, 84, 46, 88, 69, 27, 75, 57, 34, 40, 20, 90, 28, 40, 82, 26, 55, 35, 15, 40, 16, 11, 61, 29, 78, 28, 10, 25, 52, 92, 41, 65, 11, 99, 60, 0, 95, 64, 21, 38, 30, 62, 31, 12, 2, 100, 69, 50, 72, 80, 50, 59, 53, 41, 52, 94, 83, 43, 13, 26, 52, 30, 56, 88, 44, 51, 29, 68, 89, 100, 65, 72, 96, 24, 69, 80, 44, 2, 21, 93, 97, 57, 14, 47, 44, 86, 31, 26, 28, 75, 48, 67, 97, 46, 27, 84, 53, 88, 83, 27, 75, 57, 34, 40, 20, 90, 0, 40, 82, 26, 55, 35, 15, 40, 16, 11, 61, 29, 78, 28, 10, 97, 52, 92, 41, 74, 31, 95, 36, 96, 20, 31, 46, 98, 30, 26, 51, 41, 15, 14, 19, 76, 59, 85, 20, 16, 99, 78, 48, 54, 52, 55, 26, 73, 40, 37, 47, 24, 55, 28, 62, 31, 12, 2, 100, 39, 50, 72, 80, 50, 59, 53, 41, 71, 21, 82, 65, 50, 96, 5, 41, 83, 32, 77, 70, 24, 42, 1, 67, 83, 62, 62, 31, 12, 2, 100, 39, 50, 72, 80, 50, 59, 53, 41, 52, 94, 83, 1, 13, 26, 52, 30, 56, 88, 69, 51, 29, 68, 89, 100, 65, 72, 96, 24, 69, 80, 44, 2, 21, 39, 97, 57, 14, 47, 44, 86, 31, 26, 28, 75, 48, 67, 97, 46, 27, 84, 53, 88, 83, 27, 75, 57, 34, 40, 20, 90, 28, 40, 82, 26, 55, 35, 15, 76, 16, 11, 61, 29, 78, 28, 10, 97, 52, 92, 41, 74, 31, 95, 36, 96, 20, 31, 46, 98, 30, 26, 51, 41, 15, 14, 19, 76, 59, 85, 20, 16, 99, 78, 48, 10, 52, 55, 26, 73, 78, 37, 98, 24, 55, 22, 17, 97, 52, 24, 41, 74, 76, 59, 30, 38, 67, 36, 13, 88, 23, 84, 26, 55, 35, 15, 40, 16, 11, 61, 29, 78, 28, 10, 36, 60, 54, 45, 11, 13, 97, 80, 89, 32, 41, 79, 99, 35, 27, 93, 49, 93, 91, 10, 76, 68, 70, 30, 71, 87, 82, 65, 50, 96, 5, 41, 83, 32, 77, 70, 24, 42, 1, 67, 83, 30, 96, 75, 82, 44, 13, 4, 87, 19, 18, 41, 78, 54, 99, 65, 71, 36, 81, 35, 83, 52, 10, 98, 64, 75, 84, 61, 75, 88, 98, 83, 12, 37, 81, 90, 5, 30, 10, 62, 84, 65, 40, 59, 14, 4, 75, 11, 16, 9, 28, 23, 25, 14, 96, 47, 21, 84, 19, 82, 37, 100, 11, 83, 6, 55, 38, 79, 96, 23, 76, 59, 30, 38, 67, 36, 13, 88, 23, 51, 4, 56, 31, 86, 2, 66, 64, 37, 73, 96, 8, 85, 17, 17, 75, 43, 34, 3, 23, 68, 76, 36, 70, 44, 55, 80]
last_save: 342

Gen:2569
last_save: 342
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.5555555555555556
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(sigmoid(x[index]),+338029.6521).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(x[index],-351113.2797).all():
      return True
    else:
      return True
  def adf2(index):
    if np.equal(x[index],-413360.3174).all():
      return False
    else:
      return False
  def adf3(index):
    if np.less(x[index],+009365.7354).all():
      return True
    else:
      return False
  def adf4(index):
    if np.equal(x[index],-869404.8860).all():
      return True
    else:
      return False
  def adf5(index):
    if np.greater(x[index],-651028.3869).all():
      return False
    else:
      return True
  def adf6(index):
    if np.equal(x[index],+279875.5022).all():
      return False
    else:
      return False
  def adf7(index):
    if np.less(x[index],-562066.1588).all():
      return False
    else:
      return False
  def adf8(index):
    if np.greater(sigmoid(x[index]),+159777.5396).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-823.634, adf1(1)*-321.627, adf2(2)*+153.034, adf3(3)*+677.428, adf4(4)*-991.420, adf5(5)*-250.065, adf6(6)*+846.953, adf7(7)*-733.133, adf8(8)*-140.416], [0, 0, 0, 0, 1, 0, 0, 0], 034.824)
result=p(); 0.6666666666666666
IndLenGenome:412
IndGenome:[26, 79, 57, 71, 84, 21, 39, 63, 27, 69, 28, 71, 64, 53, 33, 16, 37, 94, 96, 45, 2, 60, 18, 82, 43, 23, 84, 39, 97, 67, 23, 37, 95, 63, 94, 94, 82, 9, 79, 13, 84, 2, 77, 89, 42, 91, 8, 34, 31, 56, 75, 56, 84, 61, 8, 87, 55, 88, 35, 52, 61, 23, 62, 96, 35, 66, 56, 22, 12, 61, 86, 71, 80, 51, 15, 70, 61, 6, 33, 95, 63, 27, 52, 56, 81, 8, 56, 29, 31, 68, 9, 92, 64, 14, 40, 20, 91, 15, 23, 11, 13, 61, 16, 11, 85, 38, 20, 24, 76, 21, 15, 78, 62, 89, 9, 83, 87, 10, 20, 84, 53, 72, 15, 73, 40, 50, 86, 83, 94, 26, 54, 63, 86, 56, 71, 94, 58, 36, 47, 43, 91, 45, 35, 11, 10, 41, 54, 91, 29, 97, 74, 84, 66, 93, 48, 82, 60, 6, 89, 57, 76, 77, 88, 98, 68, 48, 99, 34, 11, 67, 56, 86, 15, 63, 42, 92, 61, 79, 74, 19, 56, 77, 73, 87, 53, 12, 53, 85, 60, 53, 87, 69, 71, 29, 44, 89, 33, 17, 11, 39, 40, 43, 84, 42, 71, 57, 44, 81, 69, 22, 73, 52, 65, 21, 76, 29, 11, 45, 67, 90, 55, 40, 27, 23, 29, 10, 30, 4, 52, 47, 79, 57, 3, 95, 99, 86, 61, 13, 90, 33, 39, 62, 85, 10, 45, 20, 28, 86, 46, 80, 60, 93, 32, 68, 23, 46, 70, 91, 57, 65, 24, 55, 27, 57, 32, 52, 77, 86, 49, 98, 60, 39, 15, 95, 82, 63, 16, 43, 33, 75, 31, 72, 93, 100, 92, 5, 32, 53, 68, 72, 2, 24, 93, 80, 74, 96, 85, 48, 40, 18, 95, 40, 26, 15, 70, 54, 35, 91, 44, 56, 51, 3, 22, 84, 36, 69, 93, 83, 84, 46, 13, 62, 17, 56, 38, 59, 73, 40, 8, 78, 44, 96, 11, 94, 98, 88, 16, 44, 14, 24, 50, 11, 10, 42, 71, 54, 91, 88, 59, 56, 90, 96, 75, 38, 19, 17, 10, 66, 89, 18, 38, 100, 29, 95, 15, 21, 5, 94, 53, 24, 17, 38, 96, 61, 61, 96, 45, 82, 52, 17, 64, 49, 31, 4, 20, 2, 87, 93, 78, 67, 42, 15, 19, 1, 56, 71, 17, 19, 24, 73, 92, 70, 73, 99, 59, 61, 68, 74, 34, 61, 34, 90]
last_save: 343

Gen:107
TrainFitness:0.7777777777777778
TestFitness:0.3333333333333333
MaxGenLen:530
Individual: def p():
  def adf0(index):
    if np.less(x[index],-971707.7798).all():
      return False
    else:
      return True
  def adf1(index):
    if np.greater(np.cos(x[index]),+760710.9951).all():
      return True
    else:
      return False
  def adf2(index):
    if np.greater(rlog(x[index]),-371472.9348).all():
      return False
    else:
      return True
  def adf3(index):
    if np.greater(psqrt(x[index]),+998067.8396).all():
      return True
    else:
      return True
  def adf4(index):
    if np.equal(x[index],-369144.1259).all():
      return True
    else:
      return False
  def adf5(index):
    if np.greater(x[index],+585730.2621).all():
      return False
    else:
      return True
  def adf6(index):
    if np.equal(x[index],+308877.7475).all():
      if np.equal(np.sin(x[index]),-260982.4588).all():
        if np.equal(x[index],-766729.9217).all():
          return False
        else:
          return False
        return True
      else:
        if np.greater(x[index],+943784.6800).all():
          return False
        else:
          return False
        return True
      return False
    else:
      if np.less(psqrt(x[index]),-056864.4715).all():
        if np.equal(x[index],-456181.7179).all():
          return False
        else:
          return False
        return True
      else:
        if np.less(x[index],+005786.5522).all():
          if np.less(np.cos(x[index]),-742350.3091).all():
            return False
          else:
            return True
          return False
        else:
          if np.equal(x[index],+421744.9232).all():
            return False
          else:
            return False
          return False
        return True
      return False
  def adf7(index):
    if np.less(np.cos(x[index]),-900796.5531).all():
      return False
    else:
      return True
  def adf8(index):
    if np.less(np.sin(x[index]),+999611.1411).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+616.420, adf1(1)*+298.769, adf2(2)*-950.144, adf3(3)*+234.142, adf4(4)*+326.406, adf5(5)*+893.659, adf6(6)*-471.483, adf7(7)*-936.120, adf8(8)*-330.877], [1, 0, 1, 1, 0, 1, 0, 1], 194.851)
result=p(); 0.7777777777777778
IndLenGenome:489
IndGenome:[52, 29, 93, 39, 88, 59, 58, 45, 84, 99, 7, 81, 47, 90, 47, 87, 67, 69, 38, 81, 54, 18, 67, 81, 62, 13, 63, 18, 44, 77, 96, 30, 37, 51, 10, 9, 29, 75, 11, 18, 55, 80, 17, 51, 88, 4, 31, 71, 38, 73, 97, 81, 44, 37, 22, 59, 3, 74, 58, 95, 72, 33, 73, 21, 32, 47, 91, 48, 90, 89, 79, 78, 70, 66, 47, 98, 83, 19, 76, 14, 22, 88, 61, 20, 41, 69, 99, 2, 13, 16, 39, 1, 44, 54, 61, 32, 25, 69, 62, 95, 59, 73, 18, 33, 100, 48, 14, 35, 78, 35, 47, 73, 20, 72, 56, 42, 71, 89, 90, 24, 70, 61, 98, 91, 74, 44, 65, 43, 100, 78, 38, 67, 57, 77, 54, 27, 65, 58, 82, 29, 20, 42, 73, 13, 71, 32, 46, 30, 69, 28, 62, 34, 35, 38, 58, 99, 5, 51, 23, 85, 99, 17, 26, 56, 57, 92, 99, 79, 62, 21, 37, 11, 21, 28, 95, 12, 53, 34, 32, 90, 19, 14, 33, 57, 78, 74, 96, 68, 40, 80, 17, 85, 82, 27, 66, 37, 16, 44, 83, 84, 25, 47, 60, 45, 86, 18, 26, 44, 54, 17, 81, 35, 67, 68, 71, 93, 77, 70, 94, 25, 96, 71, 98, 21, 37, 21, 97, 69, 61, 59, 14, 32, 90, 16, 39, 54, 26, 77, 70, 10, 65, 67, 58, 86, 15, 15, 42, 92, 61, 79, 74, 19, 56, 77, 73, 87, 84, 12, 53, 85, 60, 53, 60, 69, 71, 29, 44, 89, 33, 17, 11, 39, 40, 43, 84, 42, 71, 57, 44, 94, 69, 22, 73, 52, 65, 65, 21, 76, 29, 11, 45, 67, 90, 55, 40, 27, 23, 29, 10, 30, 17, 19, 96, 65, 85, 73, 91, 15, 12, 57, 85, 91, 32, 48, 72, 44, 90, 89, 69, 19, 26, 41, 61, 11, 74, 81, 31, 94, 78, 86, 44, 47, 100, 71, 6, 41, 66, 94, 62, 70, 20, 14, 52, 42, 59, 28, 27, 86, 29, 20, 53, 87, 29, 85, 80, 31, 14, 14, 89, 14, 33, 52, 33, 54, 81, 74, 52, 86, 82, 67, 63, 2, 96, 4, 20, 66, 95, 44, 6, 58, 89, 13, 66, 95, 29, 82, 55, 58, 64, 17, 61, 64, 88, 33, 46, 41, 47, 39, 43, 26, 11, 32, 40, 43, 91, 98, 73, 83, 30, 18, 7, 67, 73, 63, 68, 67, 89, 38, 19, 48, 61, 54, 11, 9, 24, 48, 55, 91, 63, 5, 20, 99, 49, 74, 23, 52, 52, 41, 64, 73, 60, 53, 32, 38, 53, 66, 80, 22, 1, 75, 23, 60, 56, 77, 93, 52, 75, 46, 3, 14, 36, 10, 34, 18, 46, 89, 52, 70, 95, 49, 8, 92, 87, 84, 16, 63, 15, 7, 22, 88, 49, 37, 69, 28, 49, 75, 76, 88, 17]
last_save: 343

Gen:2107
last_save: 343
Exit:FalseFalseTrue