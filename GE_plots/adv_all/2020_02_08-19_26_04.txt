Dataset:Meander/Full.csv
FS:False
Seed:1237
Size:3

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(rlog(x[index]),-988482.5318).all():
      return True
    else:
      return True
  def adf1(index):
    if np.equal(np.sin(x[index]),-061475.3800).all():
      return False
    else:
      return True
  def adf2(index):
    if np.equal(x[index],+693664.0977).all():
      return False
    else:
      return False
  def adf3(index):
    if np.less(sigmoid(x[index]),-549107.1122).all():
      return True
    else:
      return True
  def adf4(index):
    if np.less(x[index],+618019.2216).all():
      return False
    else:
      return True
  def adf5(index):
    if np.equal(x[index],+500622.7182).all():
      return True
    else:
      return True
  def adf6(index):
    if np.equal(rlog(x[index]),-235908.7592).all():
      return False
    else:
      return False
  def adf7(index):
    if np.less(x[index],+490126.3920).all():
      return True
    else:
      return False
  def adf8(index):
    if np.less(x[index],-788073.6842).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+906.929, adf1(1)*+957.710, adf2(2)*-104.280, adf3(3)*+961.323, adf4(4)*-714.579, adf5(5)*-460.504, adf6(6)*+307.988, adf7(7)*+024.754, adf8(8)*+103.680], [0, 0, 1, 0, 0, 1, 0, 1], 675.495)
result=p(); 0.6666666666666666
IndLenGenome:415
IndGenome:[50, 82, 22, 66, 16, 83, 9, 88, 59, 56, 93, 11, 63, 89, 56, 10, 92, 37, 89, 35, 97, 77, 48, 91, 26, 41, 29, 4, 74, 6, 57, 100, 5, 40, 86, 75, 18, 47, 38, 74, 89, 26, 22, 85, 95, 21, 20, 84, 53, 77, 79, 5, 98, 47, 24, 92, 25, 29, 65, 16, 97, 73, 38, 98, 30, 32, 50, 93, 56, 34, 12, 39, 22, 60, 30, 40, 66, 67, 14, 15, 75, 18, 12, 67, 85, 29, 56, 92, 71, 62, 68, 31, 84, 7, 75, 90, 10, 59, 7, 70, 48, 81, 59, 50, 63, 57, 45, 83, 51, 22, 32, 29, 85, 67, 79, 65, 36, 49, 94, 73, 98, 55, 30, 87, 51, 48, 11, 60, 48, 21, 93, 48, 79, 56, 50, 92, 57, 15, 21, 40, 72, 42, 82, 60, 84, 98, 46, 87, 57, 15, 49, 18, 50, 16, 36, 58, 71, 49, 31, 91, 14, 56, 97, 8, 32, 52, 29, 57, 24, 80, 82, 71, 23, 51, 44, 77, 81, 78, 95, 83, 30, 63, 62, 76, 29, 79, 23, 28, 94, 35, 36, 99, 91, 67, 62, 27, 99, 71, 15, 16, 89, 73, 68, 11, 59, 30, 66, 38, 34, 57, 10, 95, 61, 30, 38, 10, 94, 37, 77, 80, 76, 52, 32, 88, 72, 62, 53, 43, 59, 34, 81, 27, 63, 70, 72, 18, 39, 46, 50, 42, 55, 56, 92, 90, 75, 58, 42, 46, 49, 96, 44, 78, 39, 23, 31, 27, 57, 53, 74, 98, 75, 96, 40, 55, 41, 77, 80, 68, 67, 83, 56, 45, 80, 69, 74, 55, 16, 42, 60, 15, 72, 75, 31, 73, 25, 10, 18, 97, 11, 23, 77, 15, 26, 13, 65, 63, 40, 8, 17, 33, 83, 90, 20, 16, 65, 60, 73, 19, 90, 26, 94, 31, 46, 15, 50, 61, 38, 13, 91, 30, 25, 67, 78, 58, 57, 57, 62, 11, 28, 93, 33, 37, 83, 58, 1, 30, 3, 6, 83, 35, 49, 84, 79, 100, 62, 81, 17, 4, 19, 36, 50, 66, 25, 7, 99, 24, 100, 34, 31, 24, 90, 53, 93, 76, 57, 64, 46, 29, 98, 48, 99, 61, 26, 35, 96, 88, 21, 87, 9, 8, 21, 51, 67, 31, 11, 57, 81, 1, 28, 38, 13, 67, 29, 27, 44, 92, 96, 9, 26, 9, 89, 30, 78, 70, 41, 4, 73, 100, 74, 79, 84, 37, 35, 71, 31]
last_save: 331

Gen:2001
last_save: 331
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],-999914.6545).all():
      return True
    else:
      return True
  def adf1(index):
    if np.less(x[index],+137179.3088).all():
      return False
    else:
      return False
  def adf2(index):
    if np.less(np.sin(x[index]),-248193.3107).all():
      return True
    else:
      return False
  def adf3(index):
    if np.less(x[index],-203771.9856).all():
      return False
    else:
      return False
  def adf4(index):
    if np.greater(x[index],+806329.7933).all():
      return False
    else:
      return True
  def adf5(index):
    if np.equal(x[index],-882554.8266).all():
      return False
    else:
      return True
  def adf6(index):
    if np.equal(sigmoid(x[index]),+606029.3810).all():
      return True
    else:
      return True
  def adf7(index):
    if np.less(sigmoid(x[index]),-165190.6793).all():
      return False
    else:
      return False
  def adf8(index):
    if np.greater(x[index],-453305.9191).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*-008.130, adf1(1)*-864.895, adf2(2)*+898.511, adf3(3)*+150.140, adf4(4)*+782.094, adf5(5)*-141.139, adf6(6)*+713.430, adf7(7)*+233.810, adf8(8)*-395.029], [1, 1, 1, 1, 0, 1, 1, 1], 826.573)
result=p(); 0.6666666666666666
IndLenGenome:414
IndGenome:[58, 92, 18, 86, 17, 64, 94, 71, 81, 91, 15, 7, 69, 71, 30, 43, 69, 51, 20, 31, 29, 89, 4, 70, 11, 89, 47, 55, 80, 59, 88, 81, 35, 79, 93, 32, 76, 69, 71, 63, 22, 85, 9, 13, 56, 49, 9, 57, 33, 51, 11, 23, 31, 5, 21, 41, 56, 57, 5, 40, 20, 92, 6, 25, 95, 53, 74, 35, 59, 47, 77, 86, 49, 72, 40, 79, 52, 83, 27, 44, 69, 24, 70, 79, 44, 45, 99, 67, 96, 29, 47, 50, 33, 41, 89, 81, 49, 85, 40, 12, 34, 83, 50, 29, 9, 15, 61, 64, 48, 96, 78, 79, 31, 60, 67, 30, 61, 32, 26, 87, 41, 81, 51, 10, 50, 7, 38, 48, 50, 75, 80, 28, 85, 97, 7, 54, 43, 59, 77, 59, 93, 34, 33, 75, 81, 63, 64, 19, 18, 46, 83, 15, 77, 22, 23, 59, 65, 17, 73, 45, 87, 45, 68, 96, 67, 30, 30, 18, 58, 93, 53, 35, 91, 18, 48, 84, 69, 59, 16, 65, 82, 79, 76, 29, 22, 97, 84, 44, 20, 20, 86, 43, 85, 15, 19, 96, 36, 34, 68, 29, 77, 28, 49, 46, 11, 11, 11, 53, 40, 32, 18, 39, 82, 18, 73, 10, 71, 84, 13, 32, 89, 26, 61, 28, 45, 7, 59, 98, 71, 56, 31, 70, 30, 27, 83, 12, 74, 70, 55, 73, 90, 68, 78, 45, 81, 11, 89, 52, 15, 59, 86, 65, 28, 85, 83, 20, 37, 83, 13, 29, 93, 24, 18, 20, 77, 88, 47, 39, 58, 33, 58, 13, 61, 11, 20, 77, 99, 21, 66, 77, 7, 20, 17, 90, 21, 94, 65, 93, 22, 28, 57, 96, 13, 18, 22, 46, 59, 24, 73, 44, 49, 57, 6, 6, 84, 50, 75, 81, 76, 47, 62, 14, 34, 9, 32, 3, 34, 11, 34, 100, 7, 64, 47, 50, 28, 19, 40, 58, 21, 14, 3, 22, 45, 21, 81, 69, 3, 0, 91, 13, 82, 34, 16, 41, 48, 11, 55, 5, 17, 75, 92, 59, 48, 29, 99, 92, 90, 0, 12, 96, 32, 31, 41, 11, 46, 35, 87, 41, 45, 100, 80, 14, 22, 12, 54, 6, 82, 49, 39, 93, 36, 41, 51, 2, 15, 66, 34, 36, 34, 25, 67, 42, 51, 35, 30, 11, 63, 66, 70, 93, 13, 70, 92, 84, 56, 59, 84, 97, 24, 80, 6, 78, 14, 17]
last_save: 332

Gen:3
TrainFitness:0.7777777777777778
TestFitness:0.5555555555555556
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(rlog(x[index]),-183943.3269).all():
      if np.greater(x[index],-147196.9958).all():
        return False
      else:
        return True
      return False
    else:
      if np.less(x[index],+398830.4950).all():
        return False
      else:
        return True
      return False
  def adf1(index):
    if np.greater(x[index],+204366.2934).all():
      return True
    else:
      return False
  def adf2(index):
    if np.equal(x[index],+491140.5751).all():
      return True
    else:
      return True
  def adf3(index):
    if np.less(x[index],+014332.5982).all():
      return False
    else:
      return True
  def adf4(index):
    if np.equal(x[index],-819780.4915).all():
      if np.equal(x[index],-494926.8040).all():
        return True
      else:
        return False
      return True
    else:
      if np.greater(x[index],+592969.2813).all():
        return False
      else:
        return True
      return True
  def adf5(index):
    if np.equal(np.tanh(x[index]),-824497.0682).all():
      return False
    else:
      return True
  def adf6(index):
    if np.equal(x[index],+978565.1799).all():
      return False
    else:
      return False
  def adf7(index):
    if np.less(x[index],+146636.3265).all():
      return False
    else:
      return True
  def adf8(index):
    if np.equal(rlog(x[index]),-650782.4694).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+799.043, adf1(1)*-045.806, adf2(2)*-354.163, adf3(3)*-718.025, adf4(4)*+618.599, adf5(5)*+313.669, adf6(6)*-867.394, adf7(7)*-520.285, adf8(8)*+752.234], [0, 0, 1, 0, 1, 0, 0, 0], 004.825)
result=p(); 0.7777777777777778
IndLenGenome:417
IndGenome:[78, 54, 72, 6, 52, 91, 30, 10, 34, 15, 95, 21, 58, 33, 29, 4, 33, 93, 62, 86, 49, 3, 63, 59, 51, 83, 25, 11, 74, 57, 61, 49, 6, 29, 89, 35, 38, 85, 30, 27, 35, 31, 69, 15, 72, 44, 73, 29, 68, 68, 83, 50, 54, 29, 45, 10, 41, 38, 97, 68, 57, 63, 65, 16, 20, 66, 52, 40, 24, 93, 46, 96, 42, 19, 43, 54, 70, 39, 81, 71, 89, 59, 94, 14, 52, 34, 19, 91, 41, 4, 40, 65, 67, 25, 81, 90, 50, 10, 5, 58, 11, 48, 24, 96, 30, 71, 34, 33, 23, 82, 15, 29, 78, 82, 41, 78, 25, 28, 82, 77, 11, 56, 97, 50, 88, 31, 69, 7, 68, 70, 64, 19, 41, 5, 3, 86, 21, 41, 81, 90, 14, 89, 74, 89, 32, 46, 38, 30, 14, 70, 90, 25, 86, 91, 36, 59, 78, 72, 14, 15, 19, 72, 69, 6, 59, 92, 48, 21, 53, 71, 96, 100, 32, 41, 26, 82, 68, 90, 49, 36, 38, 52, 84, 74, 39, 97, 30, 46, 88, 22, 39, 58, 76, 13, 86, 61, 76, 36, 30, 69, 97, 98, 55, 66, 45, 31, 67, 69, 19, 43, 21, 68, 83, 22, 27, 80, 50, 82, 51, 24, 66, 26, 23, 16, 23, 72, 36, 95, 53, 82, 93, 49, 50, 34, 64, 47, 45, 69, 96, 65, 20, 37, 38, 92, 54, 76, 79, 34, 53, 75, 24, 28, 30, 78, 73, 27, 69, 29, 20, 24, 23, 25, 15, 25, 80, 24, 75, 88, 80, 96, 30, 99, 71, 53, 95, 24, 61, 86, 23, 5, 93, 32, 77, 51, 8, 30, 2, 85, 100, 48, 76, 76, 51, 78, 15, 39, 9, 68, 84, 21, 33, 81, 73, 86, 6, 89, 28, 11, 97, 38, 76, 37, 43, 49, 14, 38, 41, 7, 95, 92, 30, 22, 78, 95, 71, 4, 96, 27, 35, 42, 32, 13, 74, 4, 80, 82, 47, 14, 45, 90, 34, 100, 8, 20, 50, 64, 98, 52, 75, 69, 43, 62, 37, 23, 69, 26, 17, 95, 64, 48, 57, 70, 25, 29, 7, 60, 33, 70, 53, 79, 38, 19, 75, 87, 47, 78, 92, 81, 8, 93, 68, 62, 92, 38, 44, 86, 5, 55, 71, 79, 88, 35, 70, 83, 96, 84, 24, 24, 69, 9, 30, 68, 17, 83, 4, 94, 67, 32, 63, 57, 66, 51, 51, 55, 83, 5, 52]
last_save: 332

Gen:2003
last_save: 332
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.7777777777777778
TestFitness:0.8888888888888888
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(np.cos(x[index]),-327708.6462).all():
      return False
    else:
      return True
  def adf1(index):
    if np.equal(np.sin(x[index]),+358315.9850).all():
      return False
    else:
      return True
  def adf2(index):
    if np.greater(np.sin(x[index]),-555254.9366).all():
      return False
    else:
      return False
  def adf3(index):
    if np.equal(x[index],+846981.8815).all():
      return False
    else:
      return False
  def adf4(index):
    if np.less(x[index],+017356.5955).all():
      return False
    else:
      return True
  def adf5(index):
    if np.less(x[index],-877084.4374).all():
      return False
    else:
      return False
  def adf6(index):
    if np.less(np.tanh(x[index]),+341526.0504).all():
      return False
    else:
      return False
  def adf7(index):
    if np.less(x[index],-439176.5163).all():
      return False
    else:
      return True
  def adf8(index):
    if np.equal(np.tanh(x[index]),-484727.4599).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+439.336, adf1(1)*+124.373, adf2(2)*-213.710, adf3(3)*+946.028, adf4(4)*+486.789, adf5(5)*-147.562, adf6(6)*+527.066, adf7(7)*+181.097, adf8(8)*-663.844], [1, 1, 1, 0, 0, 0, 1, 1], 255.145)
result=p(); 0.7777777777777778
IndLenGenome:417
IndGenome:[84, 73, 76, 8, 86, 21, 56, 35, 75, 70, 7, 21, 44, 13, 55, 18, 43, 70, 57, 75, 55, 13, 86, 99, 69, 69, 66, 4, 23, 16, 83, 62, 24, 95, 71, 35, 76, 100, 1, 34, 85, 64, 84, 73, 78, 41, 62, 29, 56, 71, 27, 81, 71, 98, 70, 79, 45, 41, 95, 57, 64, 44, 91, 46, 80, 43, 23, 12, 25, 4, 92, 65, 62, 9, 20, 20, 98, 23, 4, 15, 6, 20, 35, 33, 79, 85, 88, 52, 31, 66, 28, 97, 74, 79, 98, 82, 84, 38, 28, 50, 90, 17, 63, 44, 24, 2, 30, 36, 10, 14, 25, 81, 96, 26, 58, 82, 69, 36, 37, 44, 31, 27, 98, 64, 54, 92, 57, 76, 55, 67, 86, 41, 19, 14, 18, 85, 63, 15, 93, 64, 75, 13, 53, 28, 91, 12, 50, 17, 77, 7, 25, 71, 40, 25, 29, 12, 9, 93, 50, 18, 58, 99, 50, 41, 65, 43, 98, 15, 74, 65, 45, 79, 32, 29, 87, 55, 39, 86, 93, 70, 39, 67, 81, 31, 93, 96, 2, 10, 88, 23, 37, 96, 95, 69, 34, 47, 45, 60, 58, 89, 31, 83, 34, 64, 84, 25, 37, 93, 5, 90, 27, 62, 50, 72, 80, 87, 68, 42, 12, 94, 83, 83, 35, 26, 99, 94, 64, 73, 25, 96, 57, 90, 51, 13, 46, 66, 76, 94, 11, 24, 54, 23, 47, 49, 73, 85, 50, 96, 42, 17, 32, 27, 60, 34, 11, 62, 38, 25, 15, 21, 92, 24, 26, 86, 15, 37, 65, 68, 31, 11, 73, 62, 78, 30, 74, 74, 42, 97, 100, 37, 15, 76, 77, 37, 89, 10, 52, 82, 18, 93, 4, 1, 38, 85, 4, 41, 48, 68, 94, 97, 27, 1, 96, 44, 57, 76, 29, 75, 83, 49, 17, 49, 46, 83, 45, 77, 81, 64, 74, 7, 27, 89, 20, 92, 46, 52, 27, 77, 50, 39, 22, 39, 11, 58, 68, 51, 75, 45, 54, 49, 54, 41, 7, 50, 90, 81, 88, 57, 92, 53, 40, 14, 49, 70, 28, 71, 72, 13, 29, 53, 54, 40, 20, 34, 18, 0, 3, 6, 12, 42, 63, 80, 62, 64, 80, 32, 41, 21, 39, 3, 65, 62, 43, 49, 21, 29, 42, 77, 58, 19, 36, 25, 69, 89, 1, 2, 79, 49, 49, 73, 89, 60, 2, 93, 39, 77, 86, 21, 97, 35, 14, 99, 3, 27, 53, 94, 60]
last_save: 333

Gen:2001
last_save: 333
Exit:FalseFalseTrue