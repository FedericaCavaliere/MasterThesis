Dataset:Spiral/Full.csv
FS:True
Seed:1238
Size:10

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],+346877.0013).all():
      return True
    else:
      return True
  def adf1(index):
    if np.less(np.cos(x[index]),-793787.6664).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(psqrt(x[index]),+716140.3437).all():
      return False
    else:
      return False
  def adf3(index):
    if np.less(np.sin(x[index]),-682083.1185).all():
      return True
    else:
      return True
  def adf4(index):
    if np.less(np.tanh(x[index]),+744861.1424).all():
      return True
    else:
      return False
  def adf7(index):
    if np.equal(np.tanh(x[index]),+295050.9976).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*-965.904, adf1(1)*-572.848, adf2(2)*+705.662, adf3(3)*+728.896, adf4(4)*-628.443, adf7(7)*-238.651], [0, 0, 0, 0, 1], 645.034)
result=p(); 0.6666666666666666
IndLenGenome:286
IndGenome:[31, 51, 59, 83, 87, 31, 73, 14, 34, 77, 52, 13, 9, 34, 32, 47, 29, 2, 4, 91, 53, 91, 51, 21, 26, 62, 28, 6, 64, 41, 46, 22, 8, 39, 94, 58, 90, 52, 35, 25, 23, 59, 85, 52, 32, 35, 8, 36, 81, 2, 80, 99, 64, 59, 87, 30, 68, 16, 89, 58, 71, 79, 88, 44, 97, 47, 68, 11, 66, 38, 56, 93, 20, 66, 38, 64, 54, 66, 65, 12, 15, 77, 32, 71, 77, 16, 55, 53, 80, 40, 43, 93, 91, 20, 98, 49, 26, 26, 33, 89, 31, 6, 20, 37, 15, 44, 67, 92, 88, 44, 17, 61, 84, 98, 93, 69, 62, 40, 98, 77, 12, 92, 58, 15, 16, 90, 55, 62, 35, 20, 15, 63, 56, 74, 88, 89, 55, 24, 59, 14, 46, 34, 16, 68, 74, 90, 26, 85, 59, 86, 72, 86, 91, 84, 63, 42, 71, 78, 34, 93, 31, 77, 99, 57, 16, 27, 60, 96, 84, 82, 82, 86, 75, 32, 37, 16, 91, 57, 67, 53, 64, 91, 13, 97, 36, 74, 23, 60, 71, 74, 17, 67, 64, 58, 98, 12, 97, 24, 60, 34, 57, 94, 21, 81, 94, 26, 88, 44, 35, 84, 46, 13, 79, 65, 53, 55, 12, 94, 47, 80, 72, 34, 35, 27, 6, 68, 23, 28, 36, 98, 72, 89, 5, 31, 50, 85, 70, 90, 75, 50, 44, 80, 71, 23, 56, 63, 39, 97, 47, 83, 6, 51, 89, 96, 22, 12, 63, 14, 50, 79, 78, 82, 79, 5, 94, 68, 0, 81, 67, 91, 89, 40, 80, 80, 92, 51, 72, 92, 17, 29, 77, 33, 7, 68, 93, 39]
last_save: 1041

Gen:2001
last_save: 1041
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.5
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],+631045.4989).all():
      return False
    else:
      return False
  def adf1(index):
    if np.greater(x[index],+674317.0412).all():
      return True
    else:
      return True
  def adf2(index):
    if np.greater(x[index],+753610.8776).all():
      return False
    else:
      return False
  def adf3(index):
    if np.equal(x[index],+591095.8118).all():
      return True
    else:
      return False
  def adf4(index):
    if np.greater(x[index],+818774.0929).all():
      return True
    else:
      return True
  def adf7(index):
    if np.less(x[index],+002723.7760).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*-781.513, adf1(1)*+806.075, adf2(2)*+389.655, adf3(3)*+652.637, adf4(4)*-931.423, adf7(7)*+927.032], [0, 1, 0, 0, 1], 198.455)
result=p(); 0.8333333333333334
IndLenGenome:279
IndGenome:[96, 15, 75, 21, 58, 79, 49, 32, 53, 51, 29, 65, 91, 79, 67, 53, 11, 83, 34, 64, 3, 96, 90, 25, 21, 21, 80, 61, 15, 49, 97, 13, 52, 56, 90, 87, 88, 57, 41, 67, 74, 88, 97, 38, 92, 3, 91, 54, 72, 24, 39, 48, 70, 69, 47, 9, 23, 58, 66, 49, 11, 71, 82, 95, 58, 55, 58, 5, 54, 66, 32, 88, 6, 47, 22, 97, 10, 42, 7, 71, 99, 19, 27, 60, 75, 28, 27, 16, 59, 95, 68, 54, 3, 85, 56, 50, 28, 52, 53, 80, 63, 15, 15, 80, 72, 33, 27, 52, 95, 67, 19, 87, 53, 96, 51, 80, 10, 13, 99, 25, 47, 50, 79, 16, 41, 49, 24, 64, 49, 67, 49, 61, 21, 19, 96, 85, 25, 12, 42, 93, 43, 38, 93, 15, 17, 66, 83, 63, 31, 18, 11, 60, 77, 20, 24, 41, 38, 10, 26, 44, 26, 77, 2, 42, 67, 11, 49, 19, 41, 28, 84, 73, 76, 77, 84, 17, 80, 22, 96, 62, 10, 24, 87, 11, 95, 98, 64, 84, 1, 20, 39, 74, 40, 60, 63, 59, 91, 77, 56, 76, 24, 89, 33, 40, 91, 29, 11, 14, 24, 12, 2, 82, 44, 69, 17, 17, 62, 3, 65, 43, 11, 83, 45, 77, 14, 47, 98, 24, 7, 84, 61, 10, 86, 54, 5, 65, 100, 94, 83, 12, 80, 14, 53, 90, 9, 28, 80, 20, 77, 98, 94, 19, 76, 100, 15, 62, 64, 96, 27, 73, 57, 27, 55, 54, 14, 21, 4, 11, 65, 24, 93, 45, 30, 83, 62, 4, 20, 23, 100]
last_save: 1042

Gen:3
TrainFitness:1.0
TestFitness:0.5
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(np.sin(x[index]),+788428.9179).all():
      return True
    else:
      return True
  def adf1(index):
    if np.greater(x[index],-274026.2336).all():
      return False
    else:
      return True
  def adf2(index):
    if np.equal(x[index],+933815.6835).all():
      return False
    else:
      return False
  def adf3(index):
    if np.equal(x[index],+102703.0920).all():
      return True
    else:
      return True
  def adf4(index):
    if np.equal(x[index],+816377.9149).all():
      return False
    else:
      return False
  def adf7(index):
    if np.less(x[index],+005518.4116).all():
      if np.less(np.tanh(x[index]),-156761.6747).all():
        return True
      else:
        return False
      return False
    else:
      if np.greater(x[index],-599389.2977).all():
        return True
      else:
        return True
      return True
  return multiple_operation([adf0(0)*+524.301, adf1(1)*+531.494, adf2(2)*-919.751, adf3(3)*-204.916, adf4(4)*-666.308, adf7(7)*-985.718], [1, 1, 0, 0, 0], 739.593)
result=p(); 1.0
IndLenGenome:355
IndGenome:[68, 48, 63, 19, 86, 8, 54, 69, 30, 9, 27, 88, 48, 64, 82, 88, 79, 11, 77, 29, 60, 78, 70, 89, 81, 59, 47, 99, 99, 12, 97, 64, 60, 52, 46, 82, 23, 53, 16, 85, 16, 26, 51, 77, 15, 1, 86, 76, 59, 33, 93, 48, 91, 85, 56, 38, 93, 55, 27, 69, 35, 7, 98, 43, 10, 10, 31, 81, 30, 12, 77, 30, 73, 90, 79, 92, 60, 38, 50, 91, 51, 65, 3, 25, 82, 50, 48, 1, 96, 73, 17, 77, 59, 21, 44, 9, 23, 35, 32, 34, 47, 10, 23, 31, 28, 97, 40, 30, 25, 25, 61, 48, 34, 71, 91, 66, 27, 64, 42, 68, 40, 11, 31, 41, 95, 66, 87, 86, 21, 26, 17, 24, 7, 82, 29, 43, 55, 12, 23, 95, 15, 98, 75, 29, 49, 53, 68, 89, 32, 49, 67, 67, 14, 14, 62, 60, 55, 23, 68, 99, 45, 82, 94, 63, 70, 81, 38, 58, 52, 85, 63, 31, 94, 29, 24, 99, 47, 89, 49, 41, 49, 67, 85, 71, 29, 61, 81, 2, 40, 44, 19, 81, 96, 61, 49, 17, 16, 96, 16, 93, 60, 88, 37, 51, 79, 49, 58, 65, 87, 91, 48, 89, 13, 19, 50, 90, 8, 48, 67, 93, 99, 15, 79, 13, 78, 58, 60, 57, 39, 87, 73, 35, 74, 81, 12, 54, 96, 27, 50, 55, 59, 21, 25, 39, 73, 95, 43, 95, 36, 87, 22, 22, 40, 54, 43, 83, 43, 74, 89, 75, 55, 65, 52, 32, 16, 37, 39, 34, 40, 99, 82, 62, 13, 75, 94, 63, 49, 73, 69, 89, 66, 23, 11, 71, 14, 99, 27, 7, 71, 23, 63, 68, 2, 32, 29, 18, 36, 25, 17, 71, 8, 30, 66, 59, 85, 62, 28, 87, 24, 28, 32, 56, 45, 55, 77, 75, 6, 4, 92, 84, 71, 53, 77, 100, 96, 50, 48, 95, 55, 91, 96, 14, 77, 34, 48, 23, 4, 83, 68, 97, 81, 54, 51, 37, 53, 19, 67, 6, 95, 10, 14, 77, 12, 23, 68]
last_save: 1042

Gen:3
last_save: 1042
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.5
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],+840170.3004).all():
      return True
    else:
      return False
  def adf1(index):
    if np.less(np.sin(x[index]),-522026.1375).all():
      return True
    else:
      return True
  def adf2(index):
    if np.equal(sigmoid(x[index]),-229229.4481).all():
      return False
    else:
      return False
  def adf3(index):
    if np.greater(x[index],+089370.0109).all():
      return False
    else:
      return True
  def adf4(index):
    if np.less(x[index],+311141.3566).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(x[index],+008916.2821).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-431.905, adf1(1)*-794.723, adf2(2)*-625.316, adf3(3)*+815.945, adf4(4)*+766.847, adf7(7)*-424.512], [0, 0, 0, 1, 0], 445.250)
result=p(); 0.8333333333333334
IndLenGenome:282
IndGenome:[95, 14, 56, 18, 37, 23, 7, 51, 74, 45, 34, 30, 64, 70, 50, 70, 91, 14, 72, 61, 21, 96, 25, 87, 88, 82, 66, 20, 28, 95, 36, 18, 53, 44, 14, 45, 77, 68, 32, 66, 85, 99, 75, 29, 34, 47, 64, 51, 41, 1, 87, 82, 59, 14, 44, 98, 92, 38, 4, 57, 39, 54, 43, 58, 72, 25, 49, 51, 11, 24, 88, 89, 61, 96, 29, 16, 88, 55, 84, 14, 77, 55, 55, 62, 64, 51, 54, 70, 99, 95, 54, 79, 50, 72, 29, 61, 84, 50, 70, 37, 19, 60, 10, 31, 75, 94, 46, 82, 9, 35, 30, 62, 57, 16, 86, 32, 8, 48, 13, 29, 83, 71, 78, 50, 48, 97, 51, 59, 12, 63, 36, 54, 61, 77, 58, 49, 10, 50, 62, 13, 11, 81, 51, 40, 66, 30, 56, 56, 96, 31, 50, 78, 12, 24, 33, 46, 75, 87, 37, 90, 95, 61, 44, 70, 50, 33, 13, 32, 50, 42, 46, 94, 47, 37, 34, 64, 15, 81, 71, 54, 22, 14, 12, 75, 22, 41, 51, 85, 28, 38, 71, 1, 18, 94, 16, 10, 58, 9, 96, 1, 98, 32, 56, 81, 80, 77, 77, 0, 29, 71, 77, 6, 34, 7, 60, 86, 47, 21, 40, 5, 19, 51, 84, 11, 60, 50, 45, 64, 89, 77, 7, 3, 55, 2, 39, 84, 4, 100, 2, 68, 60, 28, 76, 5, 18, 84, 62, 69, 78, 71, 73, 7, 99, 39, 98, 10, 14, 0, 52, 83, 78, 51, 70, 32, 3, 82, 50, 61, 19, 17, 33, 91, 2, 25, 14, 75, 97, 60, 27, 79, 99, 46]
last_save: 1043

Gen:56
TrainFitness:1.0
TestFitness:0.3333333333333333
MaxGenLen:515
Individual: def p():
  def adf0(index):
    if np.greater(np.tanh(x[index]),-693807.4737).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(x[index],+455345.5753).all():
      return False
    else:
      return True
  def adf2(index):
    if np.greater(rlog(x[index]),-392502.9372).all():
      return False
    else:
      return True
  def adf3(index):
    if np.greater(x[index],-035458.0557).all():
      return False
    else:
      return False
  def adf4(index):
    if np.greater(x[index],-459782.1071).all():
      if np.greater(x[index],-783173.9696).all():
        return False
      else:
        return False
      return True
    else:
      if np.greater(x[index],-261418.6392).all():
        return False
      else:
        return False
      return False
  def adf7(index):
    if np.greater(x[index],+005885.0150).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+547.327, adf1(1)*+735.392, adf2(2)*+907.270, adf3(3)*-511.003, adf4(4)*-805.575, adf7(7)*+741.625], [1, 0, 1, 1, 1], 270.210)
result=p(); 1.0
IndLenGenome:479
IndGenome:[16, 59, 61, 59, 90, 86, 74, 59, 87, 92, 56, 89, 33, 88, 40, 17, 44, 97, 53, 47, 31, 87, 56, 75, 49, 27, 5, 22, 16, 4, 35, 95, 13, 54, 45, 55, 7, 95, 33, 27, 94, 82, 7, 81, 92, 16, 87, 13, 35, 83, 99, 52, 55, 20, 2, 19, 63, 77, 82, 81, 30, 72, 81, 30, 65, 19, 61, 30, 20, 53, 45, 24, 45, 58, 20, 15, 25, 67, 85, 67, 85, 82, 66, 27, 97, 74, 33, 66, 64, 45, 49, 57, 38, 22, 21, 20, 47, 71, 33, 42, 85, 32, 55, 52, 77, 48, 3, 11, 47, 73, 99, 86, 9, 86, 65, 7, 4, 87, 9, 49, 79, 87, 77, 92, 76, 91, 94, 51, 88, 26, 63, 29, 12, 13, 11, 47, 91, 53, 48, 23, 49, 40, 87, 40, 30, 95, 8, 68, 65, 20, 61, 45, 30, 20, 53, 45, 56, 28, 58, 7, 95, 54, 27, 33, 82, 7, 81, 92, 16, 87, 13, 35, 83, 99, 52, 55, 20, 2, 19, 40, 77, 82, 77, 30, 72, 13, 30, 65, 21, 61, 30, 20, 53, 45, 99, 45, 58, 20, 15, 25, 67, 85, 82, 66, 27, 97, 74, 21, 66, 52, 45, 49, 55, 20, 27, 19, 63, 77, 82, 77, 30, 72, 81, 30, 63, 77, 82, 81, 30, 72, 81, 33, 66, 52, 45, 49, 57, 38, 22, 21, 20, 47, 74, 85, 17, 75, 56, 78, 79, 28, 31, 84, 10, 81, 30, 72, 81, 30, 68, 8, 61, 76, 20, 61, 45, 56, 45, 58, 62, 15, 25, 67, 85, 82, 66, 27, 97, 74, 33, 63, 52, 76, 49, 57, 38, 81, 44, 75, 96, 56, 56, 75, 82, 69, 5, 15, 55, 97, 68, 67, 85, 82, 66, 57, 38, 22, 21, 53, 47, 74, 85, 74, 85, 75, 35, 56, 78, 83, 28, 31, 84, 81, 23, 81, 30, 91, 83, 8, 60, 93, 81, 51, 87, 61, 28, 88, 56, 42, 18, 93, 55, 67, 41, 24, 6, 97, 82, 3, 72, 88, 68, 40, 43, 4, 90, 27, 82, 23, 35, 76, 19, 43, 25, 56, 99, 37, 61, 60, 79, 68, 95, 91, 31, 76, 66, 26, 21, 51, 83, 76, 92, 56, 24, 52, 56, 35, 14, 59, 72, 63, 16, 0, 19, 63, 15, 16, 85, 32, 37, 95, 90, 71, 3, 12, 51, 55, 69, 22, 3, 28, 57, 89, 90, 99, 84, 78, 32, 51, 74, 76, 25, 25, 47, 2, 23, 80, 38, 52, 7, 37, 17, 11, 15, 91, 4, 76, 15, 63, 64, 78, 1, 75, 66, 21, 77, 87, 38, 56, 33, 9, 18, 34, 56, 69, 10, 57, 87, 66, 81, 54, 63, 80, 14, 10, 44, 76, 24, 58, 80, 40, 38, 95, 17, 52, 21, 80, 68, 36, 21]
last_save: 1043

Gen:56
last_save: 1043
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],+609258.8690).all():
      return True
    else:
      return False
  def adf1(index):
    if np.less(rlog(x[index]),-543760.8613).all():
      return True
    else:
      return True
  def adf2(index):
    if np.greater(sigmoid(x[index]),-732895.3585).all():
      return True
    else:
      return True
  def adf3(index):
    if np.equal(x[index],+543229.7964).all():
      return False
    else:
      return False
  def adf4(index):
    if np.greater(x[index],+104067.1911).all():
      return False
    else:
      return False
  def adf7(index):
    if np.less(psqrt(x[index]),+183916.2135).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+434.333, adf1(1)*+702.987, adf2(2)*+019.006, adf3(3)*-844.033, adf4(4)*+679.732, adf7(7)*+298.656], [1, 0, 1, 0, 0], 807.840)
result=p(); 0.6666666666666666
IndLenGenome:283
IndGenome:[43, 16, 78, 80, 94, 17, 26, 15, 23, 3, 27, 86, 14, 68, 61, 71, 98, 20, 2, 7, 47, 24, 73, 66, 84, 84, 88, 18, 30, 56, 30, 75, 46, 50, 37, 31, 7, 45, 77, 70, 17, 69, 98, 19, 27, 96, 57, 11, 23, 29, 95, 22, 63, 84, 53, 32, 44, 68, 63, 88, 93, 11, 79, 100, 50, 48, 35, 70, 50, 78, 78, 63, 17, 69, 37, 19, 58, 99, 37, 55, 8, 12, 35, 87, 34, 79, 12, 88, 16, 83, 39, 72, 34, 75, 18, 29, 44, 16, 41, 39, 75, 12, 65, 31, 93, 62, 51, 21, 76, 43, 29, 14, 77, 66, 88, 70, 89, 92, 30, 81, 27, 89, 52, 88, 43, 99, 23, 30, 88, 26, 37, 21, 56, 50, 38, 49, 86, 8, 37, 70, 46, 46, 72, 98, 43, 71, 24, 44, 25, 23, 83, 63, 63, 63, 90, 94, 20, 39, 14, 83, 25, 66, 51, 10, 85, 64, 44, 69, 26, 68, 41, 70, 69, 83, 44, 41, 92, 21, 94, 27, 79, 98, 58, 30, 91, 20, 53, 86, 25, 54, 94, 82, 20, 22, 76, 32, 42, 81, 49, 9, 90, 58, 42, 77, 100, 34, 77, 67, 8, 59, 68, 21, 86, 1, 59, 36, 23, 91, 44, 80, 90, 50, 65, 88, 21, 27, 82, 5, 54, 6, 24, 0, 36, 35, 0, 80, 66, 80, 3, 7, 76, 11, 46, 61, 39, 97, 3, 89, 71, 1, 77, 45, 39, 96, 71, 88, 2, 82, 31, 6, 9, 74, 80, 78, 94, 74, 80, 29, 61, 19, 64, 69, 22, 30, 91, 70, 84, 12, 94, 19, 41, 41, 74]
last_save: 1044

Gen:7
TrainFitness:0.8333333333333334
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(psqrt(x[index]),+713046.8488).all():
      return True
    else:
      return False
  def adf1(index):
    if np.greater(x[index],-869608.6471).all():
      return False
    else:
      return False
  def adf2(index):
    if np.less(rlog(x[index]),-899901.2921).all():
      return True
    else:
      return True
  def adf3(index):
    if np.less(np.cos(x[index]),+110827.3667).all():
      if np.greater(rlog(x[index]),-562372.2745).all():
        return True
      else:
        return False
      return False
    else:
      if np.greater(sigmoid(x[index]),-026082.8439).all():
        if np.greater(x[index],-042897.8995).all():
          return False
        else:
          return True
        return False
      else:
        if np.less(psqrt(x[index]),-138984.3654).all():
          return False
        else:
          return True
        return False
      return False
  def adf4(index):
    if np.less(x[index],+023988.0607).all():
      return False
    else:
      return True
  def adf7(index):
    if np.greater(x[index],+454901.4203).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*-603.874, adf1(1)*-353.639, adf2(2)*-002.201, adf3(3)*-155.983, adf4(4)*+162.112, adf7(7)*+827.440], [1, 0, 0, 1, 1], 176.177)
result=p(); 0.8333333333333334
IndLenGenome:387
IndGenome:[66, 27, 67, 33, 12, 42, 83, 62, 40, 13, 57, 81, 93, 20, 34, 26, 48, 34, 58, 58, 44, 59, 87, 67, 39, 45, 50, 33, 42, 28, 76, 99, 6, 20, 78, 16, 24, 87, 81, 51, 17, 67, 91, 46, 88, 28, 83, 23, 34, 98, 59, 49, 19, 20, 31, 12, 49, 32, 21, 36, 28, 30, 42, 30, 61, 26, 55, 99, 46, 21, 61, 61, 80, 28, 2, 37, 23, 16, 36, 47, 69, 87, 84, 16, 47, 17, 46, 65, 66, 42, 23, 57, 52, 62, 47, 54, 45, 82, 55, 69, 58, 93, 75, 28, 57, 86, 81, 21, 10, 42, 6, 80, 88, 42, 68, 34, 23, 79, 41, 18, 75, 31, 67, 57, 50, 94, 42, 38, 49, 77, 28, 59, 69, 15, 67, 42, 71, 13, 79, 56, 71, 52, 87, 34, 41, 3, 78, 9, 68, 34, 93, 76, 15, 4, 35, 72, 1, 83, 29, 13, 88, 61, 63, 32, 39, 70, 22, 93, 79, 38, 88, 10, 6, 20, 17, 97, 18, 57, 81, 36, 9, 24, 90, 85, 84, 5, 34, 59, 20, 71, 44, 22, 10, 23, 45, 93, 3, 46, 54, 39, 37, 76, 30, 63, 48, 17, 94, 61, 59, 15, 73, 85, 63, 56, 23, 19, 19, 31, 48, 80, 70, 12, 92, 50, 71, 74, 9, 48, 91, 65, 45, 79, 78, 83, 10, 26, 51, 11, 26, 62, 71, 31, 82, 91, 82, 78, 18, 42, 17, 44, 54, 20, 74, 63, 32, 46, 37, 71, 17, 71, 77, 26, 61, 97, 27, 19, 19, 84, 10, 54, 5, 72, 88, 86, 49, 95, 65, 45, 42, 32, 80, 96, 11, 17, 78, 60, 43, 90, 64, 13, 46, 43, 96, 77, 43, 46, 85, 86, 41, 77, 19, 21, 17, 96, 53, 90, 52, 15, 15, 53, 33, 17, 89, 22, 21, 76, 17, 94, 70, 12, 69, 0, 76, 34, 73, 67, 51, 16, 4, 62, 30, 60, 63, 24, 37, 39, 24, 0, 93, 43, 47, 75, 54, 85, 37, 5, 10, 26, 8, 50, 56, 22, 59, 89, 88, 97, 66, 56, 74, 35, 51, 62, 8, 10, 32, 3, 17, 4, 3, 20, 99, 70, 91, 25, 74, 55, 25, 28, 78, 67, 55, 88, 52, 96, 33, 1, 66]
last_save: 1044

Gen:80
TrainFitness:1.0
TestFitness:0.5
MaxGenLen:515
Individual: def p():
  def adf0(index):
    if np.greater(x[index],-826482.8439).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(x[index],-837289.5721).all():
      return False
    else:
      return False
  def adf2(index):
    if np.less(x[index],-898436.5492).all():
      return False
    else:
      return False
  def adf3(index):
    if np.less(x[index],+006082.8439).all():
      return False
    else:
      return True
  def adf4(index):
    if np.less(x[index],+897899.5721).all():
      return False
    else:
      return False
  def adf7(index):
    if np.less(x[index],-898436.5452).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*-290.239, adf1(1)*+607.787, adf2(2)*+405.454, adf3(3)*+420.353, adf4(4)*+972.038, adf7(7)*+953.536], [1, 1, 1, 0, 0], 220.149)
result=p(); 1.0
IndLenGenome:345
IndGenome:[66, 27, 67, 33, 12, 57, 86, 81, 21, 78, 42, 6, 54, 88, 42, 68, 34, 23, 79, 41, 93, 20, 31, 67, 57, 22, 29, 42, 38, 73, 77, 2, 88, 69, 15, 67, 42, 71, 13, 79, 48, 71, 1, 87, 34, 41, 3, 78, 9, 68, 34, 93, 76, 15, 4, 29, 72, 1, 83, 29, 13, 88, 61, 63, 32, 21, 10, 80, 6, 80, 88, 42, 68, 34, 23, 79, 41, 18, 75, 31, 67, 57, 50, 94, 42, 38, 49, 77, 28, 59, 69, 15, 67, 42, 71, 13, 79, 56, 71, 52, 87, 34, 41, 3, 78, 9, 68, 34, 93, 76, 15, 4, 35, 72, 1, 11, 29, 13, 88, 61, 63, 32, 39, 70, 22, 93, 79, 38, 88, 10, 6, 20, 17, 97, 18, 57, 81, 36, 9, 24, 90, 85, 84, 5, 34, 59, 20, 71, 44, 22, 10, 23, 45, 93, 3, 46, 54, 39, 37, 42, 30, 63, 48, 17, 94, 61, 59, 15, 73, 85, 63, 56, 23, 19, 19, 31, 48, 80, 70, 12, 92, 50, 71, 74, 9, 48, 91, 65, 45, 79, 78, 83, 10, 26, 51, 11, 26, 62, 71, 31, 82, 91, 82, 78, 18, 42, 17, 44, 54, 20, 74, 63, 32, 46, 37, 71, 17, 71, 77, 26, 61, 97, 27, 19, 19, 84, 10, 54, 5, 72, 88, 86, 49, 95, 65, 45, 42, 32, 80, 96, 11, 17, 78, 60, 43, 90, 64, 13, 46, 43, 96, 77, 43, 46, 85, 86, 41, 77, 19, 21, 17, 96, 53, 90, 52, 15, 15, 53, 33, 17, 89, 22, 21, 76, 17, 94, 70, 12, 69, 0, 76, 34, 73, 67, 51, 16, 4, 62, 30, 60, 63, 24, 37, 39, 24, 0, 93, 43, 47, 75, 54, 85, 37, 5, 10, 26, 8, 50, 56, 22, 59, 89, 88, 97, 66, 56, 74, 35, 51, 62, 8, 10, 32, 3, 17, 4, 3, 20, 99, 70, 91, 25, 74, 55, 25, 28, 78, 67, 55, 88, 52, 96, 33, 1, 66]
last_save: 1044

Gen:80
last_save: 1044
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(np.cos(x[index]),-664906.6569).all():
      return True
    else:
      return False
  def adf1(index):
    if np.greater(x[index],+008065.4303).all():
      return True
    else:
      return False
  def adf2(index):
    if np.equal(x[index],+345527.6764).all():
      return False
    else:
      return True
  def adf3(index):
    if np.less(rlog(x[index]),+100393.4624).all():
      return True
    else:
      return True
  def adf4(index):
    if np.greater(x[index],-269127.4253).all():
      return True
    else:
      return True
  def adf7(index):
    if np.greater(sigmoid(x[index]),+249598.8241).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+549.680, adf1(1)*-296.463, adf2(2)*+872.472, adf3(3)*+736.604, adf4(4)*+721.734, adf7(7)*-397.529], [0, 0, 1, 1, 1], 476.942)
result=p(); 0.8333333333333334
IndLenGenome:283
IndGenome:[40, 21, 46, 77, 95, 51, 82, 99, 18, 64, 47, 41, 3, 29, 92, 53, 40, 88, 90, 15, 72, 37, 42, 26, 18, 19, 3, 30, 39, 47, 7, 78, 21, 14, 54, 96, 86, 85, 48, 61, 34, 94, 97, 3, 86, 45, 51, 20, 6, 91, 59, 19, 92, 92, 63, 59, 29, 25, 16, 70, 80, 22, 13, 44, 38, 6, 49, 81, 79, 88, 81, 9, 4, 89, 72, 34, 71, 26, 91, 18, 88, 24, 50, 72, 55, 24, 52, 51, 90, 50, 26, 13, 45, 15, 65, 64, 68, 37, 72, 52, 53, 66, 37, 66, 72, 96, 67, 49, 51, 24, 97, 46, 22, 35, 1, 83, 96, 20, 69, 20, 6, 36, 16, 30, 53, 33, 75, 22, 14, 76, 77, 24, 52, 92, 29, 79, 18, 27, 19, 96, 34, 14, 62, 35, 74, 63, 51, 84, 90, 45, 36, 12, 40, 42, 70, 69, 54, 24, 77, 93, 36, 54, 76, 72, 20, 33, 85, 5, 58, 46, 63, 20, 32, 93, 77, 98, 47, 79, 15, 96, 16, 74, 38, 82, 71, 10, 27, 64, 46, 15, 71, 23, 58, 42, 90, 83, 89, 49, 54, 34, 7, 65, 27, 11, 35, 77, 64, 56, 63, 4, 66, 51, 78, 45, 39, 70, 74, 11, 1, 58, 17, 38, 59, 94, 82, 72, 13, 24, 65, 36, 30, 71, 27, 65, 82, 7, 33, 90, 16, 48, 24, 65, 90, 88, 13, 22, 65, 3, 41, 32, 92, 37, 28, 86, 40, 6, 25, 86, 50, 95, 22, 14, 7, 38, 43, 31, 71, 52, 3, 84, 48, 41, 19, 32, 30, 95, 56, 27, 27, 78, 74, 24, 18]
last_save: 1045

Gen:27
TrainFitness:1.0
TestFitness:0.5
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],-415879.4769).all():
      return False
    else:
      return True
  def adf1(index):
    if np.less(x[index],+527332.1797).all():
      return False
    else:
      return True
  def adf2(index):
    if np.equal(x[index],+149358.3433).all():
      return False
    else:
      return True
  def adf3(index):
    if np.greater(x[index],+005762.5667).all():
      if np.greater(x[index],-368272.0576).all():
        return True
      else:
        return True
      return False
    else:
      if np.equal(x[index],-683665.6025).all():
        return False
      else:
        return False
      return False
  def adf4(index):
    if np.less(x[index],+332179.7926).all():
      return False
    else:
      return True
  def adf7(index):
    if np.greater(sigmoid(x[index]),-543433.9011).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+371.682, adf1(1)*+439.683, adf2(2)*+298.327, adf3(3)*+192.351, adf4(4)*+763.250, adf7(7)*+712.984], [1, 1, 1, 0, 1], 856.580)
result=p(); 1.0
IndLenGenome:337
IndGenome:[71, 77, 99, 3, 13, 101, 46, 57, 27, 74, 21, 65, 68, 67, 79, 94, 27, 36, 29, 43, 68, 25, 55, 61, 19, 59, 88, 83, 95, 2, 67, 53, 13, 52, 51, 77, 89, 7, 59, 92, 86, 43, 98, 35, 25, 30, 26, 21, 44, 69, 23, 45, 28, 63, 24, 73, 3, 89, 30, 21, 8, 35, 81, 9, 71, 30, 46, 20, 70, 25, 37, 96, 62, 15, 16, 16, 87, 65, 21, 77, 82, 45, 35, 83, 16, 78, 2, 97, 72, 0, 85, 67, 76, 16, 64, 97, 59, 23, 37, 42, 41, 71, 16, 28, 33, 96, 86, 75, 66, 20, 32, 75, 87, 55, 61, 19, 59, 88, 83, 95, 2, 67, 53, 13, 52, 51, 77, 89, 87, 59, 92, 86, 43, 98, 35, 25, 30, 26, 21, 44, 69, 23, 45, 44, 63, 24, 73, 3, 89, 30, 21, 51, 35, 81, 9, 71, 30, 46, 27, 93, 27, 81, 56, 78, 52, 77, 96, 93, 84, 3, 39, 66, 8, 23, 98, 84, 48, 42, 59, 68, 73, 62, 67, 25, 2, 93, 51, 99, 52, 63, 25, 91, 44, 26, 12, 87, 56, 93, 32, 5, 90, 85, 16, 77, 97, 51, 82, 99, 18, 64, 47, 41, 3, 29, 92, 53, 89, 48, 85, 86, 75, 28, 70, 17, 63, 20, 32, 93, 77, 98, 47, 79, 15, 96, 34, 74, 38, 82, 71, 10, 27, 64, 46, 15, 71, 23, 58, 42, 90, 83, 89, 49, 54, 34, 7, 65, 27, 11, 35, 77, 64, 56, 63, 4, 66, 51, 78, 45, 39, 70, 74, 11, 1, 58, 17, 38, 59, 94, 82, 72, 13, 24, 65, 36, 30, 71, 27, 65, 82, 7, 33, 90, 16, 48, 24, 65, 60, 88, 13, 22, 65, 3, 41, 32, 92, 37, 28, 86, 40, 6, 25, 86, 50, 95, 22, 14, 7, 38, 43, 31, 71, 52, 3, 84, 48, 41, 19, 32, 30, 95, 56, 27, 27, 78, 74, 24, 18]
last_save: 1045

Gen:27
last_save: 1045
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.6666666666666666
TestFitness:1.0
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(np.sin(x[index]),+312014.8022).all():
      return False
    else:
      return True
  def adf1(index):
    if np.less(np.cos(x[index]),+587536.0948).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(sigmoid(x[index]),+419682.3207).all():
      return False
    else:
      return False
  def adf3(index):
    if np.less(psqrt(x[index]),-778089.1193).all():
      return True
    else:
      return True
  def adf4(index):
    if np.less(np.sin(x[index]),-854608.8897).all():
      return False
    else:
      return True
  def adf7(index):
    if np.less(np.cos(x[index]),+949006.0398).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+706.689, adf1(1)*-595.888, adf2(2)*-600.245, adf3(3)*-417.322, adf4(4)*-067.343, adf7(7)*+392.582], [0, 0, 1, 1, 1], 840.600)
result=p(); 0.6666666666666666
IndLenGenome:288
IndGenome:[41, 63, 4, 12, 66, 8, 64, 7, 51, 26, 66, 15, 67, 69, 85, 78, 64, 57, 88, 27, 10, 90, 80, 57, 96, 19, 91, 26, 73, 16, 34, 59, 59, 53, 48, 48, 28, 49, 97, 68, 70, 97, 62, 18, 73, 12, 43, 64, 86, 20, 41, 54, 27, 5, 33, 41, 46, 71, 34, 66, 50, 42, 95, 27, 52, 88, 44, 89, 62, 58, 39, 63, 21, 42, 13, 80, 88, 28, 92, 95, 57, 32, 53, 43, 81, 48, 59, 43, 68, 10, 99, 25, 31, 82, 72, 82, 28, 86, 64, 58, 20, 62, 96, 70, 26, 72, 67, 31, 80, 36, 68, 99, 66, 12, 74, 91, 34, 80, 39, 31, 48, 23, 80, 93, 77, 75, 18, 99, 82, 83, 75, 30, 78, 81, 93, 67, 33, 57, 89, 84, 66, 49, 98, 15, 89, 54, 14, 24, 28, 90, 50, 12, 69, 58, 36, 24, 51, 38, 98, 57, 15, 28, 44, 39, 42, 57, 75, 44, 48, 37, 26, 23, 98, 64, 83, 10, 71, 51, 83, 64, 82, 58, 25, 15, 20, 59, 83, 46, 27, 42, 30, 69, 29, 15, 31, 90, 21, 1, 4, 35, 36, 78, 71, 77, 89, 19, 57, 46, 68, 75, 6, 11, 40, 81, 40, 24, 8, 78, 53, 27, 67, 20, 71, 1, 82, 95, 100, 34, 0, 55, 41, 74, 9, 61, 19, 56, 52, 38, 31, 20, 85, 75, 58, 76, 75, 94, 14, 51, 97, 75, 95, 77, 16, 45, 91, 11, 26, 90, 24, 71, 64, 41, 56, 17, 77, 1, 25, 42, 4, 22, 50, 86, 86, 3, 93, 68, 45, 14, 94, 11, 62, 66, 54, 75, 62, 13, 45, 33]
last_save: 1046

Gen:5
TrainFitness:0.8333333333333334
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],+054179.8632).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(np.tanh(x[index]),+961880.9102).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(x[index],+168733.8691).all():
      return True
    else:
      return True
  def adf3(index):
    if np.equal(x[index],-770360.2486).all():
      return False
    else:
      return False
  def adf4(index):
    if np.equal(np.sin(x[index]),+196188.0910).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(x[index],+016873.3869).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+095.770, adf1(1)*+248.614, adf2(2)*-667.062, adf3(3)*-184.159, adf4(4)*-117.374, adf7(7)*+440.484], [1, 0, 1, 0, 0], 305.639)
result=p(); 0.8333333333333334
IndLenGenome:374
IndGenome:[15, 61, 9, 23, 68, 71, 23, 22, 96, 70, 15, 64, 11, 97, 59, 58, 36, 53, 2, 39, 93, 29, 71, 40, 12, 32, 24, 72, 51, 59, 16, 51, 38, 48, 10, 29, 31, 20, 42, 37, 61, 55, 21, 3, 43, 38, 44, 10, 21, 16, 78, 17, 13, 93, 58, 86, 79, 71, 30, 84, 33, 83, 62, 9, 90, 19, 95, 67, 87, 40, 23, 66, 80, 12, 44, 38, 76, 61, 45, 18, 51, 71, 40, 12, 32, 24, 72, 51, 59, 16, 51, 38, 48, 10, 29, 31, 20, 42, 37, 61, 55, 21, 3, 43, 38, 44, 10, 21, 16, 78, 17, 13, 93, 58, 86, 79, 71, 30, 84, 33, 83, 62, 9, 90, 19, 95, 67, 87, 40, 23, 66, 80, 12, 44, 38, 76, 61, 14, 78, 17, 31, 76, 96, 17, 60, 56, 82, 92, 77, 54, 41, 48, 84, 11, 5, 59, 43, 11, 95, 41, 11, 87, 63, 77, 14, 19, 84, 46, 14, 74, 50, 44, 38, 14, 71, 15, 88, 55, 92, 86, 53, 43, 60, 15, 66, 83, 89, 26, 86, 3, 89, 60, 19, 70, 68, 48, 74, 14, 72, 71, 78, 12, 28, 62, 14, 5, 43, 75, 52, 88, 37, 76, 30, 60, 59, 80, 50, 83, 32, 12, 31, 62, 80, 58, 57, 12, 30, 28, 20, 24, 29, 58, 45, 39, 19, 35, 67, 34, 84, 50, 83, 18, 20, 79, 17, 74, 45, 84, 76, 17, 21, 7, 60, 87, 28, 87, 84, 42, 74, 10, 60, 51, 32, 82, 95, 4, 12, 51, 75, 44, 26, 49, 43, 91, 54, 55, 26, 33, 94, 75, 48, 82, 63, 30, 17, 27, 51, 59, 26, 12, 84, 99, 17, 25, 46, 86, 83, 57, 98, 32, 78, 90, 83, 6, 62, 37, 14, 13, 90, 73, 32, 74, 44, 11, 45, 81, 92, 29, 43, 49, 20, 46, 84, 54, 45, 12, 54, 49, 98, 91, 56, 87, 64, 29, 73, 55, 93, 77, 30, 4, 29, 76, 100, 34, 33, 90, 30, 41, 86, 11, 23, 52, 81, 91, 13, 34, 69, 4, 38, 78, 1, 5, 3, 10, 87, 84, 70, 11, 40, 35, 65, 25, 2, 57]
last_save: 1046

Gen:44
TrainFitness:1.0
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],+054179.8631).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(np.tanh(x[index]),+961880.1102).all():
      return False
    else:
      return False
  def adf2(index):
    if np.less(x[index],+168733.8691).all():
      return True
    else:
      return True
  def adf3(index):
    if np.equal(x[index],-770360.2486).all():
      return False
    else:
      return False
  def adf4(index):
    if np.equal(np.sin(x[index]),+198188.0910).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(x[index],+006873.3869).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+965.770, adf1(1)*+248.614, adf2(2)*-667.062, adf3(3)*-184.159, adf4(4)*-117.374, adf7(7)*+440.484], [1, 0, 1, 0, 0], 307.823)
result=p(); 1.0
IndLenGenome:390
IndGenome:[15, 61, 9, 23, 68, 71, 23, 22, 96, 70, 15, 64, 11, 97, 59, 58, 36, 53, 91, 39, 93, 29, 71, 40, 12, 32, 24, 72, 51, 59, 16, 51, 38, 48, 10, 71, 31, 20, 42, 37, 61, 55, 21, 34, 43, 38, 44, 10, 21, 16, 78, 17, 13, 93, 58, 86, 79, 71, 30, 84, 33, 83, 62, 9, 90, 19, 95, 67, 87, 40, 23, 66, 80, 12, 44, 38, 76, 29, 45, 18, 51, 71, 40, 12, 32, 24, 72, 51, 59, 68, 51, 38, 48, 10, 29, 31, 20, 42, 37, 61, 55, 21, 3, 43, 38, 20, 10, 30, 16, 78, 17, 13, 93, 58, 86, 79, 71, 30, 84, 64, 83, 62, 9, 19, 86, 95, 67, 87, 40, 23, 66, 80, 12, 44, 38, 76, 61, 14, 78, 17, 31, 76, 96, 17, 60, 56, 82, 92, 69, 54, 41, 48, 84, 11, 5, 59, 43, 11, 95, 41, 11, 87, 63, 77, 14, 19, 84, 46, 14, 74, 50, 44, 38, 14, 71, 15, 88, 55, 92, 86, 53, 43, 60, 77, 8, 22, 53, 19, 23, 37, 65, 68, 45, 55, 63, 91, 52, 90, 9, 15, 1, 65, 17, 70, 15, 79, 67, 8, 24, 47, 5, 25, 97, 6, 22, 23, 47, 75, 57, 90, 22, 25, 33, 56, 7, 50, 94, 74, 58, 44, 89, 38, 55, 51, 58, 6, 57, 42, 71, 60, 97, 26, 78, 33, 2, 16, 85, 35, 17, 51, 16, 84, 4, 56, 45, 40, 42, 36, 15, 47, 53, 17, 46, 51, 31, 51, 72, 94, 81, 22, 14, 68, 17, 46, 90, 97, 41, 78, 47, 76, 32, 65, 80, 84, 56, 98, 46, 38, 97, 36, 82, 71, 27, 39, 33, 48, 34, 48, 64, 66, 16, 17, 51, 13, 99, 29, 61, 30, 57, 91, 65, 98, 31, 33, 84, 56, 73, 99, 90, 14, 36, 42, 0, 93, 18, 29, 55, 69, 16, 7, 50, 17, 66, 29, 98, 8, 97, 63, 69, 72, 27, 52, 63, 18, 16, 95, 38, 87, 79, 97, 94, 53, 31, 66, 37, 56, 69, 91, 26, 11, 94, 51, 57, 37, 44, 20, 32, 23, 36, 44, 16, 87, 45, 1, 36, 66, 66, 65, 41, 16, 54, 50, 0, 16, 1, 98, 30, 44, 29, 89]
last_save: 1046

Gen:44
last_save: 1046
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.5
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],-361161.3827).all():
      return True
    else:
      return False
  def adf1(index):
    if np.greater(x[index],+046381.0626).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(x[index],+775560.8814).all():
      return False
    else:
      return False
  def adf3(index):
    if np.greater(rlog(x[index]),+877539.2696).all():
      return True
    else:
      return False
  def adf4(index):
    if np.less(rlog(x[index]),+828381.9844).all():
      return True
    else:
      return False
  def adf7(index):
    if np.less(x[index],+020699.6565).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-669.102, adf1(1)*-924.970, adf2(2)*-398.108, adf3(3)*-622.703, adf4(4)*+414.204, adf7(7)*+859.416], [0, 1, 1, 1, 0], 378.754)
result=p(); 0.8333333333333334
IndLenGenome:282
IndGenome:[98, 42, 68, 94, 50, 5, 64, 5, 59, 82, 87, 57, 63, 16, 82, 67, 67, 76, 88, 4, 8, 84, 41, 18, 19, 33, 88, 39, 94, 52, 84, 50, 21, 87, 78, 54, 33, 29, 82, 17, 21, 55, 39, 94, 51, 70, 15, 55, 47, 53, 67, 15, 55, 97, 6, 17, 48, 23, 28, 34, 19, 97, 86, 27, 39, 57, 86, 52, 59, 28, 30, 79, 89, 25, 77, 58, 95, 54, 53, 73, 54, 74, 71, 13, 16, 84, 60, 86, 37, 12, 78, 29, 57, 14, 10, 59, 40, 72, 76, 91, 27, 21, 48, 12, 75, 19, 42, 29, 22, 84, 70, 81, 41, 78, 73, 79, 1, 19, 46, 80, 56, 13, 82, 27, 91, 15, 26, 98, 61, 47, 97, 37, 25, 43, 76, 66, 52, 59, 45, 90, 11, 31, 15, 50, 68, 52, 36, 36, 51, 14, 46, 70, 87, 74, 52, 36, 76, 27, 33, 10, 49, 18, 16, 46, 45, 31, 83, 100, 56, 88, 98, 40, 98, 31, 44, 28, 46, 29, 98, 81, 98, 32, 26, 64, 83, 98, 39, 88, 29, 74, 87, 71, 68, 36, 64, 31, 42, 86, 76, 89, 20, 66, 72, 25, 27, 88, 79, 71, 49, 89, 68, 96, 29, 19, 67, 86, 57, 57, 76, 48, 58, 5, 68, 88, 95, 5, 77, 42, 80, 17, 56, 2, 39, 99, 19, 86, 68, 45, 90, 17, 37, 88, 1, 8, 71, 24, 50, 72, 22, 71, 67, 64, 68, 64, 62, 83, 50, 86, 81, 58, 85, 48, 15, 53, 79, 13, 98, 96, 43, 52, 94, 86, 55, 4, 17, 68, 53, 40, 24, 83, 52, 91]
last_save: 1047

Gen:271
TrainFitness:1.0
TestFitness:0.5
MaxGenLen:575
Individual: def p():
  def adf0(index):
    if np.greater(sigmoid(x[index]),-672988.2811).all():
      return False
    else:
      return False
  def adf1(index):
    if np.greater(np.tanh(x[index]),+525154.1902).all():
      return True
    else:
      return False
  def adf2(index):
    if np.equal(x[index],-615435.9665).all():
      return False
    else:
      return False
  def adf3(index):
    if np.equal(sigmoid(x[index]),-472584.6214).all():
      return True
    else:
      return False
  def adf4(index):
    if np.greater(x[index],+009882.8119).all():
      if np.greater(x[index],+800777.9010).all():
        return True
      else:
        return True
      return True
    else:
      if np.equal(x[index],+727840.2044).all():
        if np.less(rlog(x[index]),-850288.0281).all():
          return False
        else:
          return True
        return False
      else:
        if np.greater(psqrt(x[index]),-349469.9244).all():
          if np.equal(x[index],-220300.7882).all():
            return True
          else:
            return False
          return False
        else:
          if np.less(x[index],-292465.1976).all():
            return True
          else:
            return True
          return False
        return False
      return False
  def adf7(index):
    if np.equal(x[index],-347363.7422).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+550.166, adf1(1)*+072.784, adf2(2)*+442.961, adf3(3)*+322.393, adf4(4)*+982.812, adf7(7)*-924.571], [1, 0, 0, 1, 1], 561.942)
result=p(); 1.0
IndLenGenome:389
IndGenome:[88, 59, 40, 7, 78, 8, 3, 82, 75, 68, 46, 57, 92, 19, 18, 8, 82, 48, 21, 71, 31, 57, 20, 95, 69, 72, 56, 56, 52, 2, 25, 72, 15, 81, 35, 34, 81, 89, 40, 12, 62, 59, 26, 29, 32, 81, 88, 41, 28, 96, 91, 65, 44, 83, 75, 19, 46, 96, 65, 11, 51, 18, 73, 89, 56, 27, 65, 37, 20, 94, 37, 82, 65, 18, 14, 86, 52, 81, 94, 24, 43, 7, 60, 82, 3, 11, 32, 68, 35, 30, 20, 19, 18, 8, 82, 48, 21, 71, 9, 17, 72, 7, 28, 78, 25, 38, 40, 10, 37, 27, 37, 49, 90, 11, 40, 50, 22, 58, 8, 62, 65, 37, 20, 64, 94, 37, 82, 27, 18, 14, 100, 52, 20, 94, 24, 43, 7, 60, 82, 90, 11, 75, 68, 35, 30, 92, 38, 18, 80, 82, 48, 71, 1, 88, 37, 58, 23, 18, 34, 89, 18, 87, 57, 93, 44, 79, 84, 26, 29, 79, 22, 14, 64, 53, 38, 93, 10, 37, 58, 52, 2, 90, 43, 40, 50, 47, 58, 8, 62, 8, 37, 31, 31, 31, 57, 20, 95, 69, 72, 19, 42, 74, 96, 65, 11, 19, 17, 16, 38, 52, 15, 9, 43, 22, 71, 32, 81, 69, 13, 54, 23, 64, 77, 33, 96, 53, 47, 74, 52, 92, 79, 95, 83, 74, 24, 36, 41, 35, 65, 80, 91, 6, 16, 31, 78, 40, 40, 37, 82, 27, 18, 14, 86, 56, 20, 94, 24, 92, 19, 66, 21, 75, 66, 71, 33, 92, 2, 3, 89, 23, 18, 8, 99, 59, 98, 32, 58, 51, 32, 45, 23, 67, 99, 22, 94, 95, 17, 61, 55, 65, 44, 6, 27, 85, 15, 85, 56, 81, 79, 14, 22, 47, 98, 1, 83, 81, 33, 85, 46, 77, 19, 6, 58, 24, 22, 68, 68, 10, 58, 3, 82, 52, 61, 17, 16, 65, 76, 52, 16, 82, 26, 36, 88, 8, 26, 67, 54, 40, 96, 15, 66, 25, 61, 67, 8, 24, 28, 76, 3, 67, 58, 23, 41, 30, 16, 49, 96, 0, 76, 32, 20, 75, 91, 42, 13, 0, 93, 36, 43, 9, 67, 49, 96, 73, 72, 29, 60, 91, 27, 9, 20, 38, 91, 28, 42, 46, 91, 15, 53]
last_save: 1047

Gen:271
last_save: 1047
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.0
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],+004190.9678).all():
      return True
    else:
      return False
  def adf1(index):
    if np.greater(np.tanh(x[index]),+376943.4796).all():
      return True
    else:
      return True
  def adf2(index):
    if np.less(sigmoid(x[index]),+804960.2214).all():
      return True
    else:
      return True
  def adf3(index):
    if np.equal(x[index],+313375.5830).all():
      return False
    else:
      return True
  def adf4(index):
    if np.less(x[index],+871106.6025).all():
      return False
    else:
      return True
  def adf7(index):
    if np.equal(x[index],+536089.3692).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*-247.941, adf1(1)*+907.222, adf2(2)*-347.942, adf3(3)*-034.496, adf4(4)*-258.410, adf7(7)*+835.810], [1, 0, 1, 0, 0], 300.243)
result=p(); 0.8333333333333334
IndLenGenome:282
IndGenome:[4, 79, 49, 45, 33, 24, 90, 19, 28, 95, 91, 99, 28, 28, 12, 61, 88, 86, 24, 53, 50, 3, 16, 42, 37, 43, 12, 84, 26, 94, 23, 49, 88, 53, 98, 53, 99, 12, 29, 39, 32, 32, 13, 91, 52, 20, 69, 11, 76, 7, 88, 36, 62, 60, 29, 72, 18, 75, 82, 78, 30, 98, 55, 83, 33, 81, 34, 25, 60, 61, 83, 15, 58, 12, 76, 25, 77, 45, 81, 21, 54, 6, 61, 47, 50, 46, 7, 51, 74, 77, 61, 88, 66, 54, 82, 16, 20, 29, 73, 59, 60, 40, 53, 44, 33, 32, 17, 94, 42, 16, 84, 28, 37, 78, 34, 92, 20, 80, 99, 18, 99, 13, 11, 88, 75, 32, 76, 80, 99, 14, 14, 25, 55, 101, 54, 43, 69, 77, 56, 6, 37, 25, 30, 20, 74, 96, 29, 82, 87, 50, 94, 10, 83, 10, 19, 32, 73, 66, 86, 68, 37, 16, 74, 16, 19, 69, 38, 74, 93, 68, 62, 40, 33, 69, 34, 64, 8, 13, 17, 23, 65, 40, 93, 61, 51, 15, 78, 33, 26, 2, 67, 76, 7, 10, 90, 72, 46, 11, 0, 18, 21, 89, 52, 58, 47, 12, 52, 58, 96, 36, 61, 93, 84, 72, 65, 44, 21, 88, 21, 81, 10, 10, 49, 59, 5, 77, 41, 49, 9, 81, 49, 92, 6, 80, 88, 51, 38, 71, 20, 43, 28, 56, 98, 45, 100, 52, 42, 53, 37, 93, 88, 33, 72, 90, 87, 70, 24, 60, 88, 94, 26, 76, 93, 49, 48, 87, 37, 81, 10, 31, 89, 39, 97, 73, 100, 11, 58, 30, 4, 98, 50, 17]
last_save: 1048

Gen:21
TrainFitness:0.8333333333333334
TestFitness:0.3333333333333333
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(np.tanh(x[index]),+765550.5943).all():
      return False
    else:
      return False
  def adf1(index):
    if np.greater(np.tanh(x[index]),+107988.0092).all():
      return False
    else:
      return False
  def adf2(index):
    if np.equal(rlog(x[index]),-389220.0040).all():
      return False
    else:
      return False
  def adf3(index):
    if np.less(psqrt(x[index]),-592476.5282).all():
      return True
    else:
      return False
  def adf4(index):
    if np.less(x[index],+005936.8631).all():
      return False
    else:
      return True
  def adf7(index):
    if np.less(x[index],-856738.9810).all():
      if np.equal(x[index],-937837.5389).all():
        return False
      else:
        return True
      return False
    else:
      if np.equal(rlog(x[index]),+948962.3131).all():
        if np.greater(sigmoid(x[index]),-171990.7893).all():
          if np.equal(np.tanh(x[index]),+090008.5534).all():
            return True
          else:
            return True
          return False
        else:
          if np.greater(sigmoid(x[index]),+093420.0517).all():
            if np.equal(sigmoid(x[index]),-348667.3898).all():
              return False
            else:
              return True
            return False
          else:
            if np.greater(sigmoid(x[index]),-612291.9158).all():
              return False
            else:
              return False
            return True
          return True
        return True
      else:
        if np.equal(np.cos(x[index]),-349398.9663).all():
          return True
        else:
          return False
        return True
      return True
  return multiple_operation([adf0(0)*-163.416, adf1(1)*+072.908, adf2(2)*+259.382, adf3(3)*-160.508, adf4(4)*-957.025, adf7(7)*-355.631], [0, 0, 0, 0, 1], 419.628)
result=p(); 0.8333333333333334
IndLenGenome:454
IndGenome:[8, 25, 52, 75, 67, 64, 2, 9, 36, 48, 17, 86, 55, 75, 85, 80, 75, 89, 54, 33, 89, 95, 44, 47, 54, 92, 56, 67, 46, 81, 51, 60, 87, 99, 38, 18, 10, 80, 39, 42, 21, 19, 71, 91, 68, 50, 4, 69, 99, 64, 33, 58, 59, 42, 72, 40, 40, 50, 74, 50, 27, 27, 48, 33, 4, 24, 71, 25, 95, 28, 75, 89, 52, 4, 57, 36, 95, 22, 48, 62, 56, 41, 11, 15, 55, 79, 17, 60, 13, 40, 100, 45, 99, 13, 36, 88, 26, 93, 21, 57, 50, 44, 42, 15, 22, 53, 37, 83, 24, 28, 65, 36, 47, 93, 38, 39, 38, 91, 40, 31, 29, 9, 60, 87, 88, 49, 43, 47, 58, 3, 27, 55, 83, 38, 49, 65, 96, 17, 14, 37, 92, 90, 94, 31, 22, 90, 89, 74, 58, 59, 16, 72, 73, 91, 83, 21, 28, 65, 36, 46, 93, 38, 39, 38, 91, 27, 31, 29, 9, 60, 87, 88, 49, 43, 25, 44, 4, 92, 90, 94, 25, 20, 69, 70, 50, 30, 98, 95, 55, 53, 64, 58, 26, 89, 20, 31, 93, 64, 69, 89, 44, 27, 50, 9, 13, 44, 12, 50, 70, 75, 21, 57, 23, 44, 42, 15, 22, 53, 37, 83, 24, 28, 76, 36, 47, 93, 38, 39, 38, 91, 40, 31, 29, 9, 60, 87, 88, 49, 43, 36, 21, 52, 52, 19, 41, 59, 11, 25, 18, 15, 49, 58, 92, 40, 69, 41, 30, 43, 73, 69, 13, 83, 84, 39, 83, 79, 18, 49, 56, 66, 3, 88, 53, 34, 44, 41, 67, 95, 69, 16, 31, 46, 83, 44, 31, 66, 45, 6, 82, 80, 27, 82, 89, 70, 98, 51, 20, 55, 82, 85, 19, 63, 78, 22, 51, 15, 87, 21, 76, 80, 95, 90, 98, 79, 65, 29, 49, 55, 97, 90, 52, 85, 95, 85, 74, 93, 45, 85, 76, 3, 31, 83, 26, 44, 50, 18, 71, 15, 24, 21, 99, 86, 42, 18, 13, 69, 25, 25, 71, 16, 98, 41, 40, 29, 46, 66, 67, 58, 46, 93, 9, 32, 53, 15, 50, 76, 33, 47, 36, 30, 77, 65, 93, 24, 16, 66, 46, 28, 68, 58, 22, 26, 51, 7, 93, 30, 36, 34, 97, 86, 14, 12, 17, 9, 12, 83, 57, 4, 70, 32, 79, 55, 54, 74, 82, 80, 0, 86, 32, 29, 65, 18, 27, 36, 70, 4, 25, 28, 15, 26, 14, 24, 14, 76, 29, 21, 68, 40, 4, 68, 47, 65, 97, 22, 95, 7, 100, 93, 31, 37, 72, 43, 56, 17, 64, 62, 62, 43, 28, 51, 16, 37, 82, 27]
last_save: 1048

Gen:39
TrainFitness:1.0
TestFitness:0.3333333333333333
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],-959677.8621).all():
      return True
    else:
      return False
  def adf1(index):
    if np.less(psqrt(x[index]),-592476.5282).all():
      return True
    else:
      return False
  def adf2(index):
    if np.less(x[index],+007236.8031).all():
      return False
    else:
      return True
  def adf3(index):
    if np.less(np.cos(x[index]),-465544.2896).all():
      return True
    else:
      return False
  def adf4(index):
    if np.equal(np.cos(x[index]),-999184.1094).all():
      return False
    else:
      return False
  def adf7(index):
    if np.less(x[index],-670865.4682).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+252.311, adf1(1)*-386.577, adf2(2)*+899.766, adf3(3)*-565.042, adf4(4)*+765.550, adf7(7)*-395.427], [1, 1, 0, 0, 1], 516.050)
result=p(); 1.0
IndLenGenome:333
IndGenome:[52, 96, 68, 15, 46, 5, 93, 59, 9, 29, 35, 39, 46, 47, 67, 28, 76, 52, 31, 92, 91, 24, 43, 25, 78, 71, 75, 95, 28, 75, 89, 52, 4, 57, 36, 95, 22, 48, 62, 56, 41, 11, 15, 55, 79, 17, 60, 13, 40, 100, 27, 62, 13, 36, 88, 70, 93, 21, 57, 94, 19, 77, 85, 22, 91, 34, 99, 23, 44, 96, 35, 55, 64, 84, 12, 88, 29, 66, 42, 25, 52, 43, 98, 14, 25, 44, 29, 23, 69, 59, 9, 91, 48, 74, 21, 90, 89, 94, 13, 85, 60, 55, 79, 45, 60, 85, 3, 66, 7, 0, 58, 46, 45, 84, 16, 28, 82, 95, 71, 51, 35, 20, 50, 44, 42, 75, 22, 53, 91, 31, 92, 61, 99, 23, 98, 26, 85, 27, 17, 92, 56, 83, 38, 29, 29, 47, 66, 66, 71, 43, 81, 25, 26, 75, 20, 64, 2, 9, 36, 48, 17, 86, 55, 75, 85, 80, 75, 89, 54, 33, 89, 95, 44, 52, 67, 85, 19, 63, 78, 22, 51, 15, 5, 21, 76, 80, 95, 90, 98, 79, 65, 29, 49, 55, 97, 65, 35, 94, 64, 69, 98, 29, 80, 69, 84, 66, 66, 46, 63, 97, 89, 86, 21, 32, 68, 101, 35, 46, 54, 72, 38, 38, 51, 12, 21, 33, 37, 56, 98, 20, 63, 13, 37, 38, 33, 76, 40, 19, 39, 51, 79, 14, 27, 81, 27, 87, 43, 45, 50, 61, 19, 11, 34, 44, 59, 63, 75, 72, 79, 41, 82, 99, 45, 1, 16, 34, 57, 42, 95, 81, 92, 68, 24, 6, 44, 38, 85, 57, 96, 99, 2, 48, 45, 89, 25, 14, 70, 67, 61, 66, 81, 25, 62, 44, 76, 28, 84, 31, 89, 22, 34, 96, 55, 83, 44, 65, 40, 34, 91, 41, 9, 94, 32, 7, 88, 16, 73, 36, 57, 80, 79, 12, 88, 93, 30, 59, 84, 7, 68, 46, 5, 27, 26]
last_save: 1048

Gen:39
last_save: 1048
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.16666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(rlog(x[index]),-603683.5762).all():
      return True
    else:
      return True
  def adf1(index):
    if np.less(x[index],-137362.3971).all():
      return False
    else:
      return False
  def adf2(index):
    if np.equal(x[index],+308295.2477).all():
      return True
    else:
      return False
  def adf3(index):
    if np.equal(x[index],-461888.5573).all():
      return True
    else:
      return True
  def adf4(index):
    if np.equal(x[index],-727495.0456).all():
      return False
    else:
      return False
  def adf7(index):
    if np.less(np.sin(x[index]),+944236.4073).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-939.501, adf1(1)*-925.610, adf2(2)*+027.750, adf3(3)*-704.351, adf4(4)*+492.410, adf7(7)*+988.917], [1, 0, 1, 0, 0], 380.631)
result=p(); 0.6666666666666666
IndLenGenome:282
IndGenome:[58, 59, 82, 71, 97, 92, 12, 81, 26, 37, 17, 18, 77, 43, 78, 39, 13, 89, 51, 21, 96, 39, 5, 86, 42, 36, 27, 36, 38, 94, 12, 29, 78, 89, 99, 32, 81, 20, 43, 28, 19, 33, 69, 99, 22, 73, 99, 81, 40, 15, 92, 90, 26, 47, 54, 80, 87, 95, 25, 44, 30, 32, 39, 41, 81, 78, 21, 89, 79, 69, 53, 74, 14, 18, 80, 85, 29, 59, 69, 88, 44, 13, 46, 94, 70, 94, 83, 24, 63, 74, 81, 19, 45, 67, 76, 92, 23, 55, 75, 23, 67, 32, 20, 77, 31, 77, 51, 73, 60, 14, 22, 35, 26, 54, 25, 93, 52, 80, 90, 20, 6, 14, 11, 32, 20, 10, 37, 41, 62, 15, 45, 66, 74, 62, 17, 71, 28, 87, 97, 60, 63, 11, 56, 46, 84, 25, 41, 17, 74, 48, 26, 12, 32, 81, 36, 15, 75, 27, 88, 53, 73, 87, 73, 36, 24, 90, 37, 87, 96, 61, 90, 91, 56, 61, 99, 63, 59, 23, 49, 82, 77, 27, 68, 32, 28, 7, 53, 23, 31, 54, 45, 100, 57, 63, 31, 51, 43, 88, 25, 40, 37, 16, 32, 36, 53, 76, 12, 27, 27, 57, 30, 39, 90, 42, 100, 77, 50, 97, 19, 9, 6, 25, 23, 30, 66, 34, 8, 84, 61, 96, 52, 56, 42, 40, 31, 10, 84, 36, 30, 1, 99, 41, 15, 81, 34, 47, 48, 84, 55, 96, 98, 8, 91, 70, 88, 61, 27, 27, 86, 11, 84, 37, 38, 97, 66, 50, 61, 15, 21, 49, 15, 54, 55, 66, 24, 71, 99, 44, 44, 59, 3, 41]
last_save: 1049

Gen:11
TrainFitness:0.8333333333333334
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],+118335.1321).all():
      return True
    else:
      return False
  def adf1(index):
    if np.equal(np.cos(x[index]),-752538.6836).all():
      return True
    else:
      return False
  def adf2(index):
    if np.less(np.sin(x[index]),-376145.3817).all():
      if np.less(x[index],-575635.6892).all():
        return True
      else:
        return False
      return False
    else:
      if np.greater(x[index],+593985.2069).all():
        return True
      else:
        return False
      return True
  def adf3(index):
    if np.greater(x[index],-196784.6121).all():
      return True
    else:
      return True
  def adf4(index):
    if np.greater(np.sin(x[index]),+619718.8331).all():
      return False
    else:
      return False
  def adf7(index):
    if np.equal(sigmoid(x[index]),+911363.2830).all():
      if np.equal(x[index],+776929.4978).all():
        if np.less(x[index],-774201.6017).all():
          return False
        else:
          return True
        return False
      else:
        if np.greater(x[index],-605597.3344).all():
          return False
        else:
          return True
        return True
      return True
    else:
      if np.greater(sigmoid(x[index]),+556145.3454).all():
        if np.greater(x[index],-364263.9875).all():
          if np.equal(np.sin(x[index]),+070723.7772).all():
            return False
          else:
            return True
          return False
        else:
          if np.less(x[index],+824046.9009).all():
            return True
          else:
            return False
          return True
        return True
      else:
        if np.less(x[index],+002035.5905).all():
          return True
        else:
          return False
        return True
      return True
  return multiple_operation([adf0(0)*-043.572, adf1(1)*-328.406, adf2(2)*+840.459, adf3(3)*-510.136, adf4(4)*+418.782, adf7(7)*-866.242], [0, 1, 0, 1, 1], 380.475)
result=p(); 0.8333333333333334
IndLenGenome:383
IndGenome:[30, 88, 16, 71, 98, 1, 22, 72, 44, 61, 51, 88, 83, 63, 85, 51, 83, 72, 21, 40, 77, 56, 15, 59, 94, 37, 82, 9, 50, 37, 15, 12, 75, 53, 18, 6, 98, 83, 66, 46, 5, 97, 78, 50, 58, 48, 90, 56, 75, 31, 33, 67, 36, 31, 94, 35, 3, 48, 81, 97, 87, 67, 15, 65, 17, 41, 65, 17, 25, 26, 13, 85, 76, 28, 69, 12, 16, 7, 87, 97, 66, 83, 18, 54, 41, 15, 29, 83, 69, 28, 25, 42, 10, 36, 9, 22, 33, 54, 4, 21, 27, 23, 68, 71, 92, 81, 49, 96, 27, 78, 64, 16, 41, 62, 31, 66, 88, 55, 87, 60, 64, 72, 37, 82, 24, 46, 31, 59, 37, 11, 98, 38, 93, 63, 61, 29, 45, 18, 56, 73, 95, 46, 39, 93, 18, 86, 9, 21, 81, 3, 96, 73, 22, 78, 73, 80, 26, 69, 50, 91, 14, 30, 51, 67, 17, 66, 19, 42, 39, 94, 99, 77, 98, 83, 85, 63, 41, 83, 73, 17, 7, 84, 62, 40, 11, 16, 10, 51, 17, 75, 48, 53, 95, 90, 59, 21, 57, 53, 36, 30, 95, 45, 49, 27, 43, 63, 4, 94, 17, 54, 88, 98, 24, 30, 75, 70, 81, 49, 48, 98, 35, 15, 76, 21, 44, 45, 23, 94, 55, 94, 24, 31, 66, 77, 62, 51, 68, 63, 76, 24, 32, 26, 73, 69, 8, 87, 55, 55, 38, 50, 24, 87, 90, 43, 30, 97, 90, 17, 72, 53, 67, 57, 7, 92, 41, 74, 99, 43, 61, 25, 23, 94, 38, 58, 32, 84, 60, 54, 86, 99, 50, 70, 69, 66, 25, 10, 10, 75, 88, 61, 32, 16, 13, 50, 80, 62, 10, 83, 5, 45, 99, 0, 55, 82, 11, 84, 38, 32, 63, 99, 37, 32, 90, 74, 63, 95, 47, 72, 17, 65, 28, 73, 12, 28, 44, 20, 66, 11, 46, 62, 88, 24, 50, 14, 55, 29, 45, 91, 67, 25, 91, 100, 1, 83, 76, 94, 26, 81, 34, 11, 8, 7, 58, 62, 31, 89, 38, 28, 76, 26, 22, 64, 92, 89, 50, 31, 44, 41, 71, 51, 43, 78, 60, 74, 7, 25, 41, 6, 3, 35, 45, 61, 79]
last_save: 1049

Gen:40
TrainFitness:1.0
TestFitness:0.3333333333333333
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],+108335.1321).all():
      return True
    else:
      return False
  def adf1(index):
    if np.equal(psqrt(x[index]),+175835.0919).all():
      return False
    else:
      return True
  def adf2(index):
    if np.greater(x[index],-695780.8806).all():
      return False
    else:
      return False
  def adf3(index):
    if np.less(x[index],-835714.6732).all():
      return True
    else:
      return False
  def adf4(index):
    if np.greater(sigmoid(x[index]),-266791.7762).all():
      return False
    else:
      return False
  def adf7(index):
    if np.less(x[index],+006165.9153).all():
      if np.less(rlog(x[index]),+692344.1738).all():
        if np.equal(x[index],+846121.6855).all():
          return True
        else:
          return True
        return True
      else:
        if np.less(rlog(x[index]),-188331.9586).all():
          return False
        else:
          return False
        return True
      return False
    else:
      if np.greater(sigmoid(x[index]),-618824.0469).all():
        return False
      else:
        return True
      return False
  return multiple_operation([adf0(0)*+812.630, adf1(1)*+355.905, adf2(2)*-823.972, adf3(3)*+572.758, adf4(4)*+406.162, adf7(7)*+459.517], [1, 0, 1, 1, 0], 114.287)
result=p(); 1.0
IndLenGenome:295
IndGenome:[30, 88, 16, 71, 98, 1, 22, 72, 99, 61, 100, 88, 83, 63, 85, 51, 83, 72, 21, 40, 77, 56, 15, 59, 94, 35, 11, 16, 10, 51, 17, 75, 48, 53, 95, 90, 59, 21, 99, 53, 36, 30, 95, 45, 49, 25, 19, 83, 66, 89, 5, 97, 78, 50, 58, 48, 90, 56, 75, 31, 33, 67, 97, 31, 94, 35, 3, 68, 83, 75, 97, 51, 24, 96, 57, 43, 22, 82, 61, 50, 37, 39, 68, 21, 83, 65, 45, 62, 96, 16, 87, 89, 11, 67, 67, 26, 92, 89, 19, 91, 96, 78, 10, 79, 25, 64, 66, 50, 10, 56, 91, 36, 55, 49, 81, 35, 83, 56, 23, 82, 60, 28, 25, 42, 10, 36, 9, 22, 33, 54, 4, 21, 27, 23, 68, 71, 92, 81, 49, 96, 27, 78, 64, 16, 41, 62, 31, 66, 88, 55, 35, 60, 64, 72, 37, 82, 24, 46, 31, 59, 37, 11, 98, 38, 93, 63, 61, 29, 45, 18, 56, 73, 95, 46, 39, 93, 18, 86, 9, 21, 81, 3, 96, 71, 38, 58, 32, 84, 60, 54, 86, 99, 37, 70, 69, 66, 25, 10, 10, 75, 88, 61, 32, 16, 13, 50, 80, 62, 10, 83, 5, 45, 99, 0, 55, 82, 11, 72, 38, 32, 63, 99, 37, 32, 90, 74, 63, 95, 47, 72, 17, 65, 28, 73, 12, 28, 44, 20, 66, 11, 46, 62, 76, 24, 52, 14, 55, 29, 45, 91, 67, 25, 91, 100, 1, 83, 76, 94, 51, 81, 34, 12, 8, 7, 58, 62, 31, 89, 38, 28, 76, 26, 22, 64, 92, 89, 50, 31, 44, 41, 71, 51, 43, 78, 60, 5, 7, 25, 41, 6, 3, 35, 45, 61, 79]
last_save: 1049

Gen:40
last_save: 1049
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.5
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],-330483.6107).all():
      return False
    else:
      return False
  def adf1(index):
    if np.equal(x[index],+604938.4851).all():
      return True
    else:
      return False
  def adf2(index):
    if np.equal(x[index],-644826.6458).all():
      return True
    else:
      return True
  def adf3(index):
    if np.greater(x[index],+028485.7434).all():
      return True
    else:
      return False
  def adf4(index):
    if np.equal(np.tanh(x[index]),+438178.8984).all():
      return True
    else:
      return True
  def adf7(index):
    if np.equal(np.cos(x[index]),+147335.2553).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+144.767, adf1(1)*+166.009, adf2(2)*+234.569, adf3(3)*+759.140, adf4(4)*+896.820, adf7(7)*+045.587], [0, 0, 1, 1, 1], 967.002)
result=p(); 0.8333333333333334
IndLenGenome:282
IndGenome:[26, 60, 28, 31, 56, 15, 50, 47, 59, 56, 17, 41, 101, 56, 27, 33, 48, 45, 55, 21, 26, 26, 95, 61, 88, 83, 33, 29, 36, 79, 42, 61, 2, 54, 83, 38, 96, 17, 51, 52, 97, 10, 57, 54, 48, 24, 63, 59, 89, 28, 43, 79, 63, 66, 52, 77, 38, 74, 79, 13, 18, 11, 18, 62, 56, 71, 43, 35, 55, 88, 31, 30, 62, 73, 68, 20, 27, 48, 35, 89, 8, 76, 73, 78, 87, 86, 63, 18, 30, 60, 71, 20, 65, 51, 66, 90, 64, 80, 43, 64, 67, 92, 28, 70, 92, 64, 34, 91, 34, 91, 86, 16, 98, 26, 26, 37, 54, 93, 46, 40, 54, 84, 40, 55, 33, 57, 99, 74, 99, 46, 37, 44, 41, 40, 36, 49, 94, 47, 30, 6, 16, 10, 50, 43, 44, 41, 88, 58, 20, 96, 12, 91, 18, 75, 71, 13, 30, 55, 35, 35, 95, 37, 73, 68, 52, 54, 17, 45, 42, 99, 84, 24, 96, 23, 12, 4, 26, 23, 35, 68, 51, 74, 24, 17, 16, 47, 45, 84, 82, 59, 68, 7, 27, 70, 6, 64, 67, 43, 54, 79, 15, 92, 26, 82, 6, 64, 31, 84, 55, 39, 60, 10, 96, 100, 95, 35, 78, 47, 30, 31, 92, 76, 95, 35, 79, 4, 93, 29, 48, 77, 1, 48, 70, 17, 49, 63, 95, 59, 72, 37, 69, 61, 84, 64, 90, 16, 3, 33, 33, 83, 39, 35, 76, 67, 65, 25, 98, 40, 22, 52, 7, 47, 19, 56, 46, 43, 31, 44, 88, 68, 10, 2, 32, 87, 12, 79, 98, 40, 57, 4, 1, 46]
last_save: 10410

Gen:10
TrainFitness:0.8333333333333334
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],+277191.8788).all():
      return False
    else:
      return True
  def adf1(index):
    if np.less(sigmoid(x[index]),-352947.3525).all():
      return True
    else:
      return False
  def adf2(index):
    if np.less(np.cos(x[index]),-755052.4863).all():
      return False
    else:
      return True
  def adf3(index):
    if np.less(x[index],+233256.3117).all():
      if np.equal(x[index],-374057.7366).all():
        return False
      else:
        return False
      return False
    else:
      if np.greater(x[index],+605379.4967).all():
        return True
      else:
        return False
      return True
  def adf4(index):
    if np.less(x[index],+003418.2843).all():
      return False
    else:
      return True
  def adf7(index):
    if np.equal(psqrt(x[index]),-375353.0044).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+415.493, adf1(1)*-213.892, adf2(2)*+375.371, adf3(3)*+066.674, adf4(4)*-489.999, adf7(7)*-386.992], [0, 1, 1, 0, 0], 873.916)
result=p(); 0.8333333333333334
IndLenGenome:411
IndGenome:[19, 90, 76, 15, 82, 95, 50, 64, 93, 82, 27, 87, 41, 19, 11, 38, 77, 88, 48, 23, 78, 15, 19, 34, 34, 69, 68, 55, 45, 33, 15, 52, 9, 24, 47, 73, 45, 62, 25, 28, 95, 8, 79, 4, 84, 67, 40, 61, 85, 87, 85, 65, 40, 45, 82, 44, 38, 96, 53, 33, 82, 12, 70, 48, 37, 13, 5, 22, 43, 82, 43, 3, 22, 75, 96, 83, 31, 11, 77, 25, 89, 29, 35, 51, 94, 13, 47, 34, 80, 45, 87, 87, 3, 26, 86, 93, 85, 53, 97, 51, 83, 87, 26, 59, 36, 40, 55, 33, 57, 99, 74, 99, 46, 37, 44, 41, 40, 36, 49, 94, 47, 30, 6, 16, 10, 50, 43, 44, 41, 98, 72, 78, 44, 63, 31, 52, 42, 11, 95, 10, 35, 10, 23, 45, 33, 47, 95, 93, 25, 33, 70, 90, 24, 14, 44, 90, 65, 35, 9, 52, 64, 34, 31, 15, 24, 79, 3, 53, 85, 59, 2, 61, 23, 68, 49, 32, 17, 76, 10, 73, 37, 55, 13, 47, 61, 28, 82, 77, 80, 76, 76, 16, 27, 94, 90, 21, 65, 84, 88, 49, 29, 59, 69, 26, 73, 34, 83, 68, 16, 9, 89, 22, 60, 78, 87, 19, 94, 48, 46, 48, 57, 13, 79, 61, 96, 77, 55, 21, 30, 95, 72, 83, 35, 29, 95, 38, 59, 7, 84, 14, 95, 32, 97, 6, 38, 80, 32, 58, 41, 77, 65, 55, 76, 77, 85, 64, 94, 77, 99, 39, 82, 88, 27, 76, 44, 61, 81, 11, 24, 89, 16, 25, 59, 58, 44, 75, 13, 93, 78, 22, 80, 85, 89, 13, 79, 71, 80, 45, 59, 25, 101, 16, 48, 10, 22, 32, 53, 99, 63, 75, 77, 68, 84, 25, 22, 81, 90, 39, 78, 37, 51, 99, 66, 87, 33, 74, 37, 4, 79, 44, 73, 30, 28, 86, 37, 34, 10, 20, 25, 38, 4, 60, 27, 19, 90, 42, 40, 60, 75, 34, 33, 21, 94, 55, 10, 60, 68, 16, 15, 15, 20, 22, 71, 48, 37, 22, 61, 88, 19, 16, 71, 67, 11, 30, 27, 87, 10, 56, 10, 44, 87, 81, 99, 62, 91, 46, 49, 14, 36, 63, 20, 38, 51, 4, 76, 29, 3, 84, 26, 87, 16, 19, 61, 66, 71, 20, 36, 6, 50, 1, 64, 63, 86, 31, 98, 82, 38, 86, 76, 73, 13]
last_save: 10410

Gen:22
TrainFitness:1.0
TestFitness:0.5
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],+277191.8788).all():
      return False
    else:
      return True
  def adf1(index):
    if np.less(sigmoid(x[index]),-352947.3525).all():
      return True
    else:
      return False
  def adf2(index):
    if np.less(np.cos(x[index]),-755052.4863).all():
      return False
    else:
      return True
  def adf3(index):
    if np.less(x[index],+233256.3117).all():
      if np.equal(x[index],-374057.7366).all():
        return False
      else:
        return False
      return False
    else:
      if np.greater(x[index],+605379.4967).all():
        return True
      else:
        return False
      return True
  def adf4(index):
    if np.less(x[index],+009416.2843).all():
      return False
    else:
      return True
  def adf7(index):
    if np.equal(psqrt(x[index]),-375353.0044).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*-412.493, adf1(1)*-213.892, adf2(2)*+375.371, adf3(3)*+066.674, adf4(4)*-489.999, adf7(7)*-386.992], [0, 1, 1, 0, 0], 873.789)
result=p(); 1.0
IndLenGenome:406
IndGenome:[10, 90, 76, 15, 82, 95, 50, 64, 93, 82, 27, 87, 41, 19, 11, 38, 77, 88, 48, 23, 78, 15, 19, 34, 34, 69, 68, 55, 45, 33, 15, 52, 9, 24, 47, 73, 45, 62, 25, 28, 95, 8, 79, 4, 84, 67, 40, 61, 85, 87, 85, 65, 40, 45, 82, 44, 38, 96, 53, 33, 82, 12, 70, 48, 37, 13, 5, 22, 43, 82, 43, 3, 22, 75, 96, 83, 31, 11, 77, 25, 89, 29, 35, 51, 94, 13, 47, 34, 80, 45, 87, 87, 3, 26, 86, 93, 85, 53, 97, 51, 83, 87, 26, 59, 36, 40, 55, 33, 57, 99, 74, 99, 46, 37, 44, 41, 40, 36, 49, 94, 47, 30, 6, 16, 10, 50, 29, 44, 41, 96, 72, 78, 44, 63, 31, 52, 42, 11, 95, 10, 35, 10, 23, 45, 33, 47, 95, 93, 25, 33, 70, 90, 24, 14, 44, 90, 65, 35, 9, 89, 64, 34, 31, 62, 24, 79, 3, 53, 85, 59, 2, 61, 23, 68, 49, 32, 17, 76, 10, 73, 37, 55, 13, 47, 61, 28, 82, 77, 80, 76, 76, 16, 27, 94, 90, 21, 65, 84, 88, 49, 29, 59, 69, 26, 73, 34, 83, 68, 16, 9, 89, 22, 60, 78, 87, 19, 94, 48, 46, 48, 57, 13, 47, 18, 39, 88, 73, 63, 92, 64, 64, 91, 34, 91, 86, 16, 98, 26, 26, 37, 54, 93, 46, 40, 54, 84, 40, 55, 33, 57, 99, 74, 99, 46, 37, 44, 41, 40, 36, 49, 94, 47, 30, 6, 16, 10, 50, 43, 44, 41, 88, 58, 20, 96, 12, 91, 18, 75, 71, 13, 30, 55, 35, 35, 95, 37, 73, 68, 52, 54, 51, 45, 42, 99, 84, 24, 93, 23, 12, 4, 26, 23, 35, 68, 51, 74, 24, 17, 16, 47, 45, 84, 82, 59, 68, 7, 27, 70, 6, 64, 67, 43, 54, 79, 15, 92, 26, 82, 6, 64, 31, 84, 55, 39, 60, 10, 96, 100, 95, 35, 78, 47, 30, 31, 92, 76, 95, 35, 79, 4, 93, 29, 48, 77, 1, 48, 70, 17, 49, 63, 95, 59, 72, 37, 69, 61, 84, 64, 90, 16, 3, 33, 33, 83, 39, 35, 76, 67, 65, 25, 98, 40, 22, 52, 7, 47, 19, 56, 46, 43, 31, 44, 88, 68, 10, 2, 32, 87, 12, 79, 98, 40, 57, 4, 1, 46]
last_save: 10410

Gen:22
last_save: 10410
Exit:TrueFalseFalse