Dataset:Meander/Full.csv
FS:True
Seed:1234
Size:7

Gen:1
TrainFitness:1.0
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(np.sin(x[index]),-508656.3861).all():
      return False
    else:
      return True
  def adf1(index):
    if np.greater(x[index],+670296.1024).all():
      return False
    else:
      return False
  def adf2(index):
    if np.equal(x[index],-819883.5492).all():
      return False
    else:
      return True
  def adf3(index):
    if np.greater(rlog(x[index]),+907188.1422).all():
      return True
    else:
      return True
  def adf4(index):
    if np.less(x[index],+876185.8921).all():
      return False
    else:
      return False
  def adf7(index):
    if np.equal(x[index],+872181.3925).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+518.051, adf1(1)*-809.014, adf2(2)*+363.834, adf3(3)*+435.738, adf4(4)*+368.081, adf7(7)*+764.836], [1, 0, 1, 1, 1], 258.044)
result=p(); 1.0
IndLenGenome:282
IndGenome:[88, 54, 29, 32, 21, 12, 24, 46, 38, 69, 21, 97, 12, 64, 100, 101, 96, 97, 23, 45, 95, 43, 15, 54, 5, 63, 46, 48, 47, 83, 54, 38, 48, 12, 84, 50, 51, 93, 98, 41, 48, 71, 53, 57, 29, 64, 65, 78, 29, 65, 72, 64, 92, 17, 67, 48, 11, 55, 71, 70, 23, 11, 55, 44, 29, 12, 62, 97, 13, 72, 81, 92, 18, 30, 58, 10, 49, 2, 23, 76, 97, 53, 73, 26, 96, 95, 16, 83, 92, 79, 61, 63, 67, 76, 18, 37, 85, 47, 35, 77, 86, 12, 68, 37, 15, 92, 47, 10, 37, 84, 50, 39, 21, 24, 57, 78, 38, 67, 68, 50, 46, 88, 68, 93, 90, 34, 73, 54, 20, 82, 12, 93, 77, 51, 98, 96, 66, 14, 28, 68, 53, 79, 20, 30, 16, 85, 11, 71, 24, 60, 29, 86, 55, 44, 81, 24, 18, 16, 52, 21, 11, 64, 80, 28, 26, 85, 59, 65, 59, 64, 26, 68, 21, 68, 39, 92, 40, 44, 46, 19, 78, 58, 48, 91, 70, 65, 33, 43, 68, 91, 50, 24, 63, 13, 14, 83, 6, 77, 59, 0, 32, 20, 39, 99, 95, 35, 85, 26, 52, 52, 70, 56, 62, 58, 88, 45, 97, 12, 20, 7, 37, 24, 13, 84, 99, 63, 4, 84, 41, 87, 49, 82, 73, 61, 17, 7, 32, 57, 7, 51, 17, 59, 13, 60, 66, 81, 96, 72, 82, 53, 39, 5, 10, 74, 47, 62, 20, 22, 35, 62, 86, 30, 95, 85, 63, 63, 95, 38, 32, 10, 31, 76, 29, 99, 91, 80, 14, 24, 18, 40, 100, 8]
last_save: 701

Gen:1
last_save: 701
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.6666666666666666
TestFitness:1.0
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],+864644.8758).all():
      return True
    else:
      return True
  def adf1(index):
    if np.greater(sigmoid(x[index]),-805702.6246).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(np.tanh(x[index]),+802053.8845).all():
      return True
    else:
      return False
  def adf3(index):
    if np.equal(x[index],-855038.1078).all():
      return True
    else:
      return True
  def adf4(index):
    if np.equal(x[index],+870025.3005).all():
      return False
    else:
      return False
  def adf7(index):
    if np.greater(x[index],+924354.8600).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*-389.129, adf1(1)*+495.782, adf2(2)*-541.565, adf3(3)*-274.762, adf4(4)*+454.460, adf7(7)*+902.072], [1, 0, 1, 1, 1], 018.303)
result=p(); 0.6666666666666666
IndLenGenome:282
IndGenome:[29, 6, 88, 9, 39, 75, 81, 50, 63, 34, 83, 21, 3, 66, 92, 99, 92, 83, 38, 61, 4, 46, 15, 34, 62, 76, 39, 74, 87, 74, 40, 83, 41, 17, 58, 92, 82, 80, 32, 27, 41, 97, 27, 19, 53, 10, 91, 30, 11, 63, 77, 15, 15, 60, 44, 56, 24, 25, 58, 94, 97, 95, 50, 77, 53, 13, 55, 85, 24, 90, 82, 15, 20, 78, 78, 19, 76, 29, 74, 25, 41, 65, 85, 54, 25, 97, 14, 95, 92, 61, 80, 80, 12, 50, 16, 66, 85, 37, 65, 93, 49, 90, 64, 65, 90, 10, 44, 17, 10, 39, 71, 26, 16, 42, 96, 56, 15, 24, 36, 39, 72, 25, 35, 77, 38, 8, 11, 11, 67, 98, 34, 32, 19, 54, 38, 50, 21, 28, 82, 80, 42, 37, 24, 44, 46, 67, 23, 60, 30, 18, 55, 16, 14, 45, 74, 59, 42, 32, 17, 17, 20, 25, 58, 48, 23, 5, 62, 36, 69, 64, 93, 18, 51, 28, 38, 12, 11, 58, 68, 81, 90, 25, 47, 35, 10, 38, 9, 73, 18, 36, 15, 89, 47, 18, 90, 22, 56, 60, 62, 77, 26, 92, 24, 58, 0, 95, 21, 38, 71, 57, 31, 17, 55, 23, 66, 89, 53, 52, 89, 57, 6, 12, 12, 65, 3, 79, 15, 74, 20, 88, 80, 71, 92, 32, 84, 16, 30, 38, 65, 77, 55, 17, 27, 41, 60, 95, 7, 3, 32, 25, 4, 10, 61, 35, 47, 7, 64, 12, 99, 18, 47, 89, 47, 70, 97, 64, 8, 52, 11, 73, 19, 31, 63, 42, 36, 98, 79, 31, 80, 56, 77, 5]
last_save: 702

Gen:3
TrainFitness:0.8333333333333334
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],+116535.8286).all():
      return False
    else:
      return True
  def adf1(index):
    if np.equal(x[index],+428378.3166).all():
      return True
    else:
      return False
  def adf2(index):
    if np.less(x[index],-041296.4884).all():
      if np.less(np.sin(x[index]),-539776.0472).all():
        return True
      else:
        return True
      return False
    else:
      if np.equal(x[index],-461126.9975).all():
        return False
      else:
        return True
      return True
  def adf3(index):
    if np.less(x[index],+026519.6364).all():
      if np.equal(x[index],-342253.9952).all():
        return True
      else:
        return False
      return False
    else:
      if np.greater(x[index],-884642.2090).all():
        return True
      else:
        return True
      return False
  def adf4(index):
    if np.equal(sigmoid(x[index]),-044493.4842).all():
      return False
    else:
      return False
  def adf7(index):
    if np.greater(x[index],+185486.3096).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+102.493, adf1(1)*-332.195, adf2(2)*+200.775, adf3(3)*-178.420, adf4(4)*+444.306, adf7(7)*+339.609], [1, 1, 1, 1, 1], 517.884)
result=p(); 0.8333333333333334
IndLenGenome:423
IndGenome:[3, 80, 94, 89, 5, 59, 32, 30, 73, 71, 81, 96, 5, 3, 35, 18, 62, 78, 46, 95, 82, 31, 7, 17, 61, 86, 72, 15, 14, 52, 68, 63, 77, 68, 73, 51, 6, 96, 38, 93, 11, 24, 38, 58, 55, 83, 83, 41, 20, 54, 31, 62, 59, 96, 44, 8, 28, 14, 13, 88, 70, 78, 91, 33, 44, 85, 83, 39, 97, 77, 46, 30, 74, 37, 2, 64, 86, 91, 35, 83, 17, 65, 79, 82, 84, 96, 31, 71, 32, 16, 59, 79, 17, 75, 67, 82, 44, 87, 20, 69, 82, 77, 15, 80, 51, 90, 82, 26, 75, 81, 79, 36, 93, 46, 54, 81, 50, 89, 36, 39, 62, 33, 34, 42, 52, 15, 83, 19, 39, 15, 22, 86, 35, 69, 77, 72, 73, 13, 39, 33, 18, 8, 84, 66, 44, 32, 42, 40, 9, 40, 74, 92, 9, 87, 43, 17, 38, 63, 71, 55, 60, 90, 64, 24, 4, 49, 33, 34, 68, 74, 12, 59, 35, 33, 51, 3, 61, 70, 84, 20, 41, 98, 55, 54, 48, 86, 23, 90, 59, 96, 18, 68, 50, 63, 65, 60, 94, 81, 0, 72, 94, 9, 23, 34, 53, 75, 93, 63, 12, 71, 59, 95, 80, 24, 9, 82, 20, 90, 97, 47, 35, 81, 73, 18, 31, 67, 98, 24, 72, 60, 25, 30, 40, 84, 84, 4, 33, 90, 16, 71, 60, 89, 73, 3, 39, 56, 10, 9, 63, 17, 93, 91, 45, 55, 43, 75, 41, 37, 8, 68, 84, 30, 53, 34, 20, 99, 51, 28, 38, 49, 45, 75, 97, 70, 84, 13, 87, 82, 36, 88, 64, 78, 30, 10, 11, 26, 91, 12, 24, 14, 17, 16, 78, 20, 43, 47, 88, 28, 72, 65, 29, 19, 16, 30, 19, 63, 47, 36, 31, 75, 87, 95, 53, 19, 70, 74, 10, 70, 13, 11, 87, 15, 79, 14, 50, 97, 34, 89, 98, 31, 67, 45, 50, 36, 90, 98, 4, 90, 92, 33, 10, 68, 54, 21, 62, 67, 16, 58, 33, 70, 27, 59, 64, 0, 87, 78, 28, 23, 88, 98, 16, 88, 35, 3, 69, 61, 97, 18, 89, 63, 61, 60, 65, 36, 99, 99, 33, 75, 88, 26, 22, 51, 28, 75, 40, 23, 26, 72, 46, 38, 7, 70, 16, 13, 67, 1, 0, 25, 92, 34, 12, 100, 42, 25, 34, 78, 17, 89, 67, 30, 84, 98, 0, 99, 52, 79, 5, 37, 14, 91, 56, 25, 6]
last_save: 702

Gen:2003
last_save: 702
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],-997997.2889).all():
      return False
    else:
      return True
  def adf1(index):
    if np.equal(x[index],+198710.0233).all():
      return True
    else:
      return False
  def adf2(index):
    if np.equal(x[index],-912608.0089).all():
      return True
    else:
      return False
  def adf3(index):
    if np.equal(x[index],-524128.6173).all():
      return True
    else:
      return False
  def adf4(index):
    if np.greater(x[index],+012512.3755).all():
      return False
    else:
      return True
  def adf7(index):
    if np.equal(x[index],+918383.6558).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*-599.721, adf1(1)*-738.286, adf2(2)*-536.091, adf3(3)*-508.098, adf4(4)*+786.058, adf7(7)*+283.563], [1, 1, 1, 1, 0], 455.728)
result=p(); 0.8333333333333334
IndLenGenome:279
IndGenome:[11, 95, 81, 54, 15, 53, 17, 49, 27, 62, 53, 35, 2, 29, 17, 45, 84, 28, 87, 93, 98, 53, 92, 98, 95, 65, 41, 45, 93, 17, 78, 89, 33, 92, 46, 58, 44, 98, 98, 35, 95, 36, 67, 7, 45, 48, 7, 67, 47, 73, 35, 48, 95, 1, 64, 25, 69, 77, 53, 13, 10, 32, 44, 86, 62, 25, 56, 69, 65, 89, 78, 71, 26, 27, 76, 59, 14, 85, 87, 82, 24, 63, 92, 93, 87, 89, 55, 59, 59, 37, 33, 77, 81, 66, 66, 87, 69, 97, 71, 88, 82, 35, 25, 12, 11, 59, 12, 92, 68, 92, 79, 92, 46, 19, 11, 48, 29, 10, 70, 83, 58, 28, 19, 49, 78, 93, 79, 67, 80, 33, 41, 24, 65, 79, 48, 23, 85, 75, 61, 71, 15, 30, 68, 37, 66, 49, 36, 40, 70, 17, 41, 60, 63, 37, 53, 41, 56, 48, 30, 38, 78, 55, 8, 97, 11, 68, 16, 90, 35, 92, 93, 24, 15, 62, 97, 43, 58, 31, 61, 10, 76, 42, 21, 38, 22, 28, 85, 96, 49, 85, 77, 43, 86, 19, 66, 62, 95, 74, 8, 44, 13, 69, 24, 91, 75, 55, 90, 20, 89, 20, 36, 73, 52, 32, 34, 29, 16, 90, 76, 72, 26, 11, 44, 82, 13, 6, 75, 84, 41, 2, 53, 58, 12, 58, 53, 49, 30, 74, 8, 100, 35, 95, 96, 0, 60, 60, 48, 11, 16, 61, 97, 37, 33, 53, 87, 80, 84, 45, 35, 90, 39, 42, 59, 92, 32, 54, 23, 34, 34, 6, 39, 96, 87, 48, 84, 74, 27, 32, 51]
last_save: 703

Gen:2001
last_save: 703
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(psqrt(x[index]),-118182.1706).all():
      return False
    else:
      return True
  def adf1(index):
    if np.less(np.tanh(x[index]),-096492.6455).all():
      return True
    else:
      return True
  def adf2(index):
    if np.greater(x[index],+702900.1435).all():
      return True
    else:
      return False
  def adf3(index):
    if np.less(x[index],+255702.4740).all():
      return True
    else:
      return False
  def adf4(index):
    if np.less(x[index],+015536.3890).all():
      return True
    else:
      return False
  def adf7(index):
    if np.less(np.cos(x[index]),+222682.4769).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-996.494, adf1(1)*-010.055, adf2(2)*+220.765, adf3(3)*+251.324, adf4(4)*+662.185, adf7(7)*-611.880], [0, 0, 1, 1, 0], 083.793)
result=p(); 0.8333333333333334
IndLenGenome:283
IndGenome:[41, 86, 13, 2, 37, 31, 76, 77, 88, 95, 13, 39, 62, 58, 90, 15, 24, 41, 77, 42, 45, 68, 66, 13, 71, 30, 53, 70, 40, 8, 41, 83, 95, 42, 67, 21, 57, 80, 60, 38, 92, 15, 12, 74, 76, 89, 30, 42, 47, 83, 90, 97, 85, 81, 50, 85, 43, 23, 32, 91, 58, 61, 87, 34, 58, 68, 85, 15, 21, 41, 44, 10, 16, 4, 7, 55, 53, 34, 99, 16, 2, 26, 39, 75, 96, 31, 84, 69, 74, 91, 11, 61, 19, 33, 6, 46, 74, 45, 26, 32, 77, 49, 27, 38, 56, 78, 99, 86, 30, 12, 3, 66, 39, 45, 70, 20, 55, 70, 52, 32, 87, 67, 69, 16, 67, 98, 64, 35, 92, 50, 94, 96, 15, 65, 84, 20, 98, 44, 72, 71, 10, 48, 55, 91, 79, 29, 51, 7, 99, 49, 12, 96, 74, 74, 83, 48, 17, 83, 54, 72, 94, 27, 22, 53, 20, 93, 62, 75, 24, 86, 39, 10, 68, 52, 31, 52, 30, 52, 48, 21, 77, 46, 80, 17, 62, 35, 51, 20, 71, 71, 47, 0, 48, 4, 52, 67, 52, 84, 38, 13, 82, 15, 6, 49, 89, 7, 43, 16, 92, 4, 34, 21, 95, 81, 3, 77, 30, 70, 4, 7, 32, 63, 15, 21, 28, 7, 0, 48, 70, 88, 9, 21, 3, 60, 58, 38, 6, 5, 73, 71, 7, 33, 69, 38, 16, 39, 92, 42, 27, 80, 0, 64, 40, 73, 34, 9, 33, 95, 87, 35, 20, 83, 90, 25, 7, 46, 68, 22, 39, 62, 29, 86, 73, 72, 66, 27, 47, 93, 93, 15, 23, 67, 34]
last_save: 704

Gen:2001
last_save: 704
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:1.0
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],-684595.5552).all():
      return False
    else:
      return True
  def adf1(index):
    if np.less(x[index],+923694.5409).all():
      return True
    else:
      return False
  def adf2(index):
    if np.equal(x[index],-094759.8352).all():
      return False
    else:
      return False
  def adf3(index):
    if np.equal(np.cos(x[index]),-408610.8861).all():
      return True
    else:
      return False
  def adf4(index):
    if np.equal(x[index],-829153.6260).all():
      return False
    else:
      return True
  def adf7(index):
    if np.equal(np.tanh(x[index]),+755842.7346).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+392.924, adf1(1)*-143.150, adf2(2)*-533.785, adf3(3)*-823.487, adf4(4)*-490.494, adf7(7)*+097.591], [0, 0, 0, 0, 0], 323.921)
result=p(); 0.6666666666666666
IndLenGenome:282
IndGenome:[75, 56, 94, 54, 94, 14, 33, 14, 7, 44, 23, 94, 31, 42, 83, 15, 16, 97, 95, 7, 68, 60, 33, 53, 14, 99, 43, 15, 15, 28, 52, 86, 4, 23, 40, 62, 69, 26, 13, 91, 22, 64, 63, 89, 17, 36, 14, 81, 90, 23, 65, 18, 99, 64, 22, 79, 94, 33, 73, 98, 95, 97, 4, 30, 66, 12, 75, 62, 15, 14, 78, 86, 40, 47, 91, 33, 95, 37, 44, 92, 69, 18, 29, 56, 67, 96, 66, 92, 61, 95, 35, 80, 38, 49, 43, 71, 23, 49, 85, 25, 15, 96, 78, 87, 13, 92, 27, 57, 80, 80, 45, 19, 77, 14, 24, 95, 97, 49, 94, 86, 59, 79, 89, 50, 96, 66, 36, 31, 85, 52, 79, 74, 78, 52, 44, 83, 94, 70, 76, 26, 66, 76, 49, 23, 95, 93, 40, 98, 34, 33, 40, 24, 93, 44, 70, 64, 62, 52, 65, 85, 14, 81, 68, 21, 15, 69, 91, 59, 27, 45, 78, 23, 14, 99, 27, 10, 69, 82, 75, 39, 86, 68, 32, 89, 49, 38, 67, 28, 77, 5, 12, 56, 19, 4, 67, 90, 58, 87, 31, 44, 53, 100, 33, 100, 95, 17, 31, 2, 32, 5, 45, 76, 30, 77, 3, 33, 50, 60, 93, 0, 7, 88, 13, 94, 58, 69, 4, 35, 47, 40, 8, 18, 42, 95, 77, 21, 85, 80, 44, 0, 66, 86, 68, 13, 57, 75, 62, 94, 92, 34, 38, 74, 71, 40, 45, 62, 48, 92, 10, 82, 68, 15, 89, 7, 91, 32, 98, 49, 15, 20, 85, 30, 42, 82, 8, 22, 55, 23, 81, 12, 19, 70]
last_save: 705

Gen:28
TrainFitness:0.8333333333333334
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],+565302.3174).all():
      return True
    else:
      return True
  def adf1(index):
    if np.greater(x[index],+466578.3169).all():
      return True
    else:
      return True
  def adf2(index):
    if np.equal(np.tanh(x[index]),-183395.5972).all():
      return True
    else:
      return False
  def adf3(index):
    if np.equal(np.tanh(x[index]),-859295.2134).all():
      return True
    else:
      return False
  def adf4(index):
    if np.less(psqrt(x[index]),+218074.4727).all():
      return True
    else:
      return True
  def adf7(index):
    if np.less(x[index],+031912.5201).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+421.755, adf1(1)*-913.833, adf2(2)*-652.302, adf3(3)*-795.603, adf4(4)*+366.045, adf7(7)*+109.701], [0, 1, 1, 0, 1], 991.984)
result=p(); 0.8333333333333334
IndLenGenome:448
IndGenome:[50, 62, 92, 1, 26, 27, 82, 74, 61, 65, 36, 75, 73, 100, 2, 63, 61, 57, 24, 82, 80, 56, 47, 3, 35, 92, 28, 14, 4, 96, 16, 55, 67, 38, 93, 81, 16, 49, 32, 68, 100, 29, 26, 78, 80, 83, 59, 5, 81, 88, 73, 33, 79, 5, 15, 89, 77, 92, 34, 21, 25, 23, 23, 18, 32, 59, 43, 19, 48, 55, 99, 52, 59, 25, 72, 31, 93, 24, 52, 59, 25, 45, 49, 84, 47, 62, 42, 40, 52, 91, 98, 90, 67, 84, 34, 7, 12, 77, 6, 4, 68, 95, 97, 61, 25, 80, 65, 50, 33, 81, 49, 91, 22, 75, 2, 40, 11, 92, 39, 53, 14, 83, 92, 26, 74, 22, 91, 47, 85, 75, 54, 23, 6, 9, 31, 73, 28, 33, 83, 18, 49, 58, 66, 85, 42, 83, 40, 62, 71, 87, 34, 17, 29, 45, 86, 10, 3, 35, 26, 28, 93, 86, 66, 60, 24, 45, 23, 38, 78, 21, 90, 59, 67, 70, 51, 47, 76, 45, 19, 64, 73, 21, 49, 39, 11, 19, 58, 54, 15, 27, 93, 41, 43, 79, 45, 34, 4, 40, 16, 55, 65, 38, 15, 81, 16, 55, 32, 68, 36, 29, 26, 78, 80, 31, 81, 46, 8, 98, 28, 4, 88, 91, 13, 90, 67, 17, 34, 7, 41, 91, 48, 59, 70, 35, 13, 22, 93, 53, 37, 51, 85, 39, 17, 34, 46, 44, 89, 30, 80, 73, 5, 59, 94, 60, 38, 65, 46, 77, 19, 82, 41, 28, 86, 58, 47, 77, 23, 40, 63, 77, 73, 86, 28, 81, 67, 3, 46, 94, 85, 93, 77, 25, 48, 43, 50, 45, 58, 16, 53, 56, 87, 22, 82, 11, 52, 72, 18, 19, 33, 89, 40, 60, 61, 97, 42, 93, 71, 82, 64, 37, 88, 24, 80, 57, 23, 94, 49, 43, 75, 38, 66, 98, 34, 4, 67, 21, 49, 84, 50, 58, 53, 70, 19, 76, 58, 45, 47, 93, 41, 60, 96, 15, 26, 88, 77, 74, 23, 51, 19, 39, 45, 34, 14, 24, 76, 8, 82, 57, 76, 76, 23, 4, 95, 61, 64, 5, 74, 54, 33, 56, 26, 65, 65, 98, 59, 59, 88, 3, 41, 44, 29, 84, 68, 66, 2, 71, 94, 67, 81, 32, 62, 35, 81, 45, 12, 73, 27, 91, 44, 57, 77, 28, 20, 21, 4, 89, 98, 90, 48, 51, 41, 97, 19, 3, 30, 27, 1, 64, 27, 60, 33, 52, 41, 28, 6, 34, 8, 1, 78, 88, 74, 25, 90, 94, 20, 28, 53, 25, 0, 88, 21, 23, 36, 11, 39, 71, 28, 38]
last_save: 705

Gen:2028
last_save: 705
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(sigmoid(x[index]),+535542.5448).all():
      return True
    else:
      return True
  def adf1(index):
    if np.greater(x[index],-415076.3855).all():
      return True
    else:
      return True
  def adf2(index):
    if np.greater(x[index],+817888.6659).all():
      return True
    else:
      return False
  def adf3(index):
    if np.equal(np.tanh(x[index]),+182131.5813).all():
      return False
    else:
      return True
  def adf4(index):
    if np.equal(x[index],+958491.4929).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(x[index],+023780.9829).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+042.768, adf1(1)*-755.120, adf2(2)*-072.969, adf3(3)*-537.126, adf4(4)*+358.442, adf7(7)*+416.349], [0, 0, 1, 1, 1], 610.628)
result=p(); 0.8333333333333334
IndLenGenome:282
IndGenome:[2, 27, 1, 2, 99, 49, 45, 71, 68, 54, 30, 65, 29, 88, 51, 25, 38, 59, 40, 14, 51, 50, 47, 31, 44, 92, 4, 63, 74, 58, 86, 43, 26, 50, 29, 41, 66, 53, 56, 21, 48, 50, 28, 39, 82, 18, 75, 60, 22, 10, 51, 7, 53, 74, 27, 97, 83, 69, 79, 21, 29, 78, 27, 38, 21, 41, 40, 74, 86, 52, 40, 42, 15, 21, 87, 57, 48, 92, 71, 54, 69, 84, 44, 88, 99, 24, 95, 42, 49, 54, 43, 84, 72, 38, 41, 74, 59, 58, 86, 38, 39, 46, 45, 82, 55, 21, 74, 78, 93, 65, 34, 59, 45, 55, 37, 44, 46, 26, 19, 84, 47, 40, 90, 19, 75, 62, 62, 89, 79, 38, 87, 3, 47, 61, 12, 35, 23, 61, 46, 87, 82, 29, 62, 63, 31, 51, 35, 12, 68, 38, 69, 29, 49, 73, 36, 64, 86, 86, 68, 85, 87, 68, 31, 50, 44, 71, 62, 74, 71, 38, 78, 82, 20, 41, 92, 37, 88, 28, 71, 95, 10, 43, 55, 14, 28, 65, 66, 17, 73, 93, 31, 87, 73, 95, 82, 11, 7, 33, 90, 28, 44, 100, 37, 26, 32, 100, 27, 48, 46, 45, 97, 81, 31, 13, 9, 85, 87, 93, 81, 82, 52, 32, 49, 56, 70, 93, 5, 46, 78, 0, 61, 4, 55, 29, 59, 49, 39, 60, 57, 83, 25, 52, 5, 59, 73, 75, 92, 76, 68, 50, 39, 99, 90, 9, 33, 73, 55, 96, 12, 81, 93, 40, 88, 37, 87, 21, 40, 22, 14, 42, 18, 1, 25, 96, 41, 58, 98, 95, 80, 0, 47, 59]
last_save: 706

Gen:2001
last_save: 706
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(sigmoid(x[index]),-663712.8492).all():
      return False
    else:
      return False
  def adf1(index):
    if np.equal(np.tanh(x[index]),-611706.8854).all():
      return True
    else:
      return False
  def adf2(index):
    if np.less(x[index],-559385.4694).all():
      return True
    else:
      return False
  def adf3(index):
    if np.greater(x[index],+173758.0211).all():
      return True
    else:
      return False
  def adf4(index):
    if np.less(x[index],+020285.2852).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(rlog(x[index]),+152567.1023).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-425.253, adf1(1)*-226.424, adf2(2)*-706.984, adf3(3)*+253.002, adf4(4)*-976.483, adf7(7)*+618.341], [0, 0, 1, 0, 0], 796.160)
result=p(); 0.8333333333333334
IndLenGenome:283
IndGenome:[77, 15, 29, 48, 84, 73, 17, 99, 81, 13, 57, 56, 79, 54, 71, 72, 55, 32, 13, 57, 77, 84, 8, 35, 56, 11, 14, 27, 76, 93, 87, 47, 10, 29, 59, 32, 28, 37, 65, 36, 80, 94, 71, 51, 96, 87, 72, 85, 85, 60, 86, 75, 74, 11, 32, 37, 44, 88, 38, 63, 65, 52, 58, 92, 74, 94, 82, 94, 31, 9, 53, 48, 74, 23, 90, 73, 9, 72, 15, 33, 19, 5, 46, 14, 91, 89, 63, 15, 12, 66, 18, 82, 98, 75, 48, 63, 71, 28, 91, 34, 21, 45, 40, 47, 37, 27, 35, 16, 82, 82, 61, 31, 11, 97, 77, 36, 80, 22, 18, 48, 13, 66, 36, 10, 42, 45, 69, 45, 11, 24, 19, 66, 13, 23, 89, 86, 76, 68, 87, 12, 75, 11, 98, 55, 57, 32, 92, 78, 23, 99, 86, 92, 44, 90, 87, 47, 70, 45, 52, 69, 32, 15, 57, 23, 14, 32, 77, 31, 62, 62, 32, 89, 90, 66, 15, 1, 55, 74, 29, 44, 80, 19, 82, 86, 38, 75, 85, 73, 80, 69, 46, 11, 60, 13, 80, 33, 66, 84, 48, 6, 34, 68, 2, 57, 11, 11, 4, 11, 87, 63, 74, 52, 37, 60, 29, 65, 64, 59, 20, 79, 43, 95, 91, 20, 68, 80, 6, 71, 83, 90, 52, 13, 54, 9, 73, 21, 30, 100, 95, 48, 85, 82, 46, 12, 80, 91, 9, 65, 71, 69, 38, 52, 37, 45, 85, 2, 65, 65, 3, 38, 96, 73, 32, 92, 62, 31, 55, 64, 79, 18, 45, 9, 64, 56, 20, 81, 89, 58, 41, 25, 45, 34, 78]
last_save: 707

Gen:2001
last_save: 707
Exit:FalseFalseTrue