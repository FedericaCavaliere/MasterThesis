Dataset:Spiral/Full.csv
FS:False
Seed:1234
Size:7

Gen:1
TrainFitness:0.7777777777777778
TestFitness:0.5555555555555556
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(np.cos(x[index]),+676857.0506).all():
      return False
    else:
      return True
  def adf1(index):
    if np.equal(rlog(x[index]),+757429.4005).all():
      return False
    else:
      return False
  def adf2(index):
    if np.less(x[index],-251398.5822).all():
      return False
    else:
      return False
  def adf3(index):
    if np.greater(x[index],-010404.3264).all():
      return True
    else:
      return True
  def adf4(index):
    if np.greater(np.cos(x[index]),-488043.7111).all():
      return False
    else:
      return False
  def adf5(index):
    if np.less(x[index],+962434.4289).all():
      return False
    else:
      return False
  def adf6(index):
    if np.less(np.sin(x[index]),-257728.5063).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(x[index],-563610.9841).all():
      return True
    else:
      return False
  def adf8(index):
    if np.equal(x[index],-935031.9536).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-302.524, adf1(1)*-475.192, adf2(2)*-292.689, adf3(3)*-782.410, adf4(4)*-655.888, adf5(5)*-943.152, adf6(6)*-216.925, adf7(7)*-558.650, adf8(8)*+851.005], [0, 1, 0, 0, 0, 0, 1, 1], 272.116)
result=p(); 0.7777777777777778
IndLenGenome:415
IndGenome:[17, 82, 97, 27, 20, 5, 51, 7, 86, 33, 31, 58, 25, 61, 97, 12, 80, 66, 7, 15, 31, 33, 95, 59, 34, 47, 69, 34, 77, 62, 17, 99, 46, 66, 51, 80, 32, 47, 76, 50, 73, 18, 84, 9, 75, 63, 95, 96, 21, 73, 56, 41, 99, 12, 80, 28, 90, 32, 15, 56, 92, 50, 58, 76, 62, 81, 37, 32, 79, 16, 60, 85, 91, 8, 97, 25, 35, 25, 21, 40, 58, 99, 32, 79, 41, 50, 39, 14, 71, 86, 48, 87, 17, 85, 31, 84, 67, 51, 45, 65, 20, 99, 47, 37, 47, 96, 80, 75, 55, 97, 59, 43, 67, 45, 52, 57, 21, 34, 11, 87, 52, 86, 78, 92, 12, 76, 35, 73, 52, 74, 23, 5, 66, 61, 18, 95, 2, 48, 9, 9, 40, 42, 57, 15, 50, 53, 36, 15, 15, 54, 65, 78, 67, 41, 81, 52, 90, 5, 93, 31, 8, 97, 53, 31, 38, 63, 11, 61, 30, 59, 38, 40, 16, 10, 45, 67, 89, 51, 45, 22, 88, 34, 56, 44, 15, 33, 44, 70, 69, 80, 50, 45, 75, 66, 42, 43, 52, 95, 33, 98, 77, 55, 70, 16, 100, 35, 61, 73, 16, 47, 18, 63, 16, 62, 29, 43, 74, 97, 89, 92, 64, 99, 51, 56, 33, 19, 24, 45, 81, 89, 52, 36, 74, 85, 45, 21, 14, 79, 66, 54, 43, 26, 57, 5, 12, 54, 10, 81, 25, 72, 79, 94, 94, 97, 33, 98, 62, 22, 80, 98, 85, 11, 99, 88, 70, 54, 21, 52, 75, 46, 29, 53, 62, 78, 91, 83, 32, 33, 90, 52, 91, 56, 58, 61, 4, 92, 47, 96, 77, 99, 49, 43, 37, 86, 60, 40, 7, 60, 5, 39, 69, 42, 25, 42, 85, 50, 10, 66, 0, 40, 53, 74, 13, 3, 86, 47, 16, 9, 95, 60, 67, 51, 4, 33, 71, 87, 0, 11, 79, 39, 0, 100, 76, 68, 4, 56, 2, 4, 39, 55, 79, 24, 18, 25, 80, 75, 39, 26, 64, 24, 51, 8, 28, 47, 34, 24, 49, 14, 89, 33, 69, 79, 34, 74, 28, 21, 46, 28, 0, 1, 47, 34, 83, 10, 79, 22, 12, 65, 35, 10, 48, 94, 76, 30, 90, 78, 67, 30, 82, 95, 35, 59, 0, 16, 9, 93, 14, 71, 2, 32, 19, 98, 87, 70, 43, 94, 13, 28, 81, 95, 93, 21, 74, 12, 57]
last_save: 701

Gen:2001
last_save: 701
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],+027700.5954).all():
      return False
    else:
      return True
  def adf1(index):
    if np.greater(x[index],-702124.6007).all():
      return True
    else:
      return True
  def adf2(index):
    if np.equal(sigmoid(x[index]),+806003.5415).all():
      return False
    else:
      return True
  def adf3(index):
    if np.equal(np.cos(x[index]),+422057.6116).all():
      return False
    else:
      return True
  def adf4(index):
    if np.greater(x[index],-782554.1636).all():
      return True
    else:
      return False
  def adf5(index):
    if np.greater(x[index],+756536.8359).all():
      return True
    else:
      return False
  def adf6(index):
    if np.greater(psqrt(x[index]),+935807.4763).all():
      return True
    else:
      return False
  def adf7(index):
    if np.less(x[index],-020898.3556).all():
      return False
    else:
      return False
  def adf8(index):
    if np.less(rlog(x[index]),-792675.7616).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*-395.988, adf1(1)*-411.317, adf2(2)*+088.098, adf3(3)*+220.456, adf4(4)*+985.571, adf5(5)*+061.279, adf6(6)*-990.128, adf7(7)*-091.440, adf8(8)*-259.719], [0, 0, 0, 1, 1, 0, 1, 1], 891.582)
result=p(); 0.6666666666666666
IndLenGenome:415
IndGenome:[73, 87, 23, 37, 87, 55, 71, 75, 96, 3, 52, 84, 63, 10, 93, 64, 48, 5, 86, 97, 76, 63, 12, 14, 90, 90, 75, 98, 98, 29, 61, 28, 39, 48, 70, 86, 5, 93, 82, 51, 66, 32, 95, 75, 78, 6, 81, 37, 81, 80, 84, 8, 35, 93, 35, 21, 100, 67, 79, 17, 81, 60, 87, 25, 35, 68, 9, 95, 86, 98, 16, 94, 78, 90, 10, 59, 51, 32, 55, 88, 38, 86, 27, 47, 2, 72, 24, 97, 69, 81, 58, 94, 40, 61, 1, 98, 11, 65, 92, 96, 97, 46, 66, 10, 20, 26, 31, 95, 90, 68, 95, 15, 53, 55, 11, 57, 89, 14, 73, 89, 9, 74, 15, 93, 65, 77, 8, 69, 35, 68, 31, 88, 46, 23, 80, 66, 62, 81, 32, 60, 24, 22, 55, 86, 37, 61, 90, 61, 59, 26, 38, 35, 16, 95, 97, 26, 20, 93, 69, 47, 78, 97, 15, 75, 10, 81, 12, 57, 34, 53, 85, 75, 93, 68, 86, 58, 88, 78, 65, 74, 53, 67, 99, 36, 59, 70, 99, 29, 77, 58, 67, 36, 55, 29, 48, 31, 52, 12, 25, 28, 81, 34, 52, 72, 96, 74, 35, 83, 92, 87, 56, 27, 55, 41, 16, 88, 20, 37, 25, 99, 55, 46, 97, 27, 23, 90, 49, 27, 68, 86, 10, 84, 21, 20, 63, 10, 66, 64, 61, 23, 12, 50, 19, 32, 70, 38, 89, 75, 47, 27, 61, 32, 39, 50, 58, 66, 21, 10, 56, 82, 84, 44, 42, 45, 71, 76, 97, 50, 36, 26, 78, 31, 45, 72, 29, 76, 67, 37, 22, 64, 24, 39, 15, 40, 37, 35, 37, 7, 60, 9, 21, 64, 77, 89, 16, 13, 0, 73, 17, 18, 91, 24, 69, 12, 19, 1, 26, 78, 17, 23, 39, 94, 28, 62, 34, 67, 51, 34, 35, 27, 81, 31, 0, 55, 45, 14, 66, 28, 35, 78, 25, 82, 79, 64, 77, 94, 49, 11, 25, 100, 69, 30, 31, 22, 32, 8, 41, 53, 79, 13, 93, 0, 87, 8, 3, 37, 73, 48, 4, 22, 90, 84, 78, 50, 76, 84, 60, 97, 64, 17, 52, 23, 51, 74, 32, 0, 65, 0, 68, 2, 3, 91, 39, 62, 85, 91, 1, 31, 57, 64, 57, 85, 22, 49, 17, 50, 65, 0, 64, 51, 22, 91, 81, 35, 66, 17, 97, 58, 89, 14, 80, 45, 76, 39, 66]
last_save: 702

Gen:67
TrainFitness:0.7777777777777778
TestFitness:0.5555555555555556
MaxGenLen:515
Individual: def p():
  def adf0(index):
    if np.less(x[index],+661629.9358).all():
      return False
    else:
      return True
  def adf1(index):
    if np.greater(x[index],-171466.7133).all():
      return True
    else:
      return True
  def adf2(index):
    if np.greater(x[index],-900841.2319).all():
      return True
    else:
      return False
  def adf3(index):
    if np.greater(x[index],+005704.3740).all():
      return False
    else:
      return True
  def adf4(index):
    if np.less(x[index],-371917.0433).all():
      return False
    else:
      return True
  def adf5(index):
    if np.less(x[index],+166423.1729).all():
      return False
    else:
      return False
  def adf6(index):
    if np.greater(sigmoid(x[index]),-564222.8199).all():
      return False
    else:
      return False
  def adf7(index):
    if np.greater(x[index],-417874.9347).all():
      return True
    else:
      return True
  def adf8(index):
    if np.greater(psqrt(x[index]),-029650.5567).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+228.199, adf1(1)*-901.270, adf2(2)*-270.939, adf3(3)*-856.086, adf4(4)*+073.400, adf5(5)*+246.035, adf6(6)*+213.996, adf7(7)*+253.105, adf8(8)*+226.892], [0, 1, 1, 1, 1, 1, 1, 1], 640.024)
result=p(); 0.7777777777777778
IndLenGenome:451
IndGenome:[10, 86, 88, 3, 97, 73, 28, 6, 98, 16, 36, 81, 86, 12, 89, 59, 43, 75, 58, 29, 46, 29, 37, 96, 13, 70, 69, 45, 91, 37, 91, 24, 76, 46, 17, 81, 63, 43, 52, 76, 52, 99, 99, 53, 70, 55, 62, 39, 30, 10, 28, 94, 81, 92, 93, 81, 19, 66, 31, 5, 9, 99, 7, 47, 26, 53, 90, 0, 85, 77, 60, 94, 33, 37, 64, 10, 49, 62, 27, 41, 97, 81, 44, 95, 23, 53, 47, 61, 39, 31, 37, 40, 14, 33, 43, 61, 52, 75, 83, 34, 97, 52, 80, 92, 81, 86, 46, 84, 32, 93, 71, 97, 22, 49, 25, 65, 90, 75, 15, 26, 15, 92, 79, 13, 45, 6, 34, 82, 82, 12, 8, 41, 69, 19, 93, 37, 56, 79, 60, 91, 62, 17, 60, 64, 91, 97, 18, 77, 24, 69, 83, 34, 97, 52, 80, 92, 81, 24, 46, 65, 32, 93, 71, 10, 22, 49, 36, 65, 90, 75, 55, 26, 17, 0, 16, 13, 92, 89, 34, 82, 82, 12, 8, 41, 69, 19, 93, 37, 56, 79, 60, 91, 62, 17, 60, 64, 91, 89, 32, 17, 60, 29, 53, 89, 32, 93, 65, 28, 95, 46, 20, 18, 36, 30, 26, 89, 30, 17, 53, 84, 40, 70, 74, 36, 13, 62, 84, 46, 20, 93, 95, 18, 80, 72, 92, 61, 63, 39, 29, 6, 84, 10, 30, 82, 55, 53, 71, 70, 75, 54, 86, 0, 92, 32, 36, 58, 19, 12, 71, 22, 57, 39, 13, 33, 51, 63, 39, 29, 6, 84, 10, 30, 82, 14, 53, 71, 70, 75, 48, 86, 54, 97, 86, 53, 91, 54, 20, 101, 14, 76, 40, 37, 35, 37, 7, 60, 9, 21, 23, 77, 89, 16, 13, 0, 73, 17, 23, 77, 89, 16, 47, 0, 73, 17, 18, 91, 24, 69, 12, 19, 1, 26, 78, 17, 23, 39, 92, 94, 46, 20, 93, 95, 18, 95, 72, 92, 61, 2, 69, 25, 88, 100, 96, 44, 86, 98, 62, 10, 82, 48, 48, 39, 5, 43, 85, 6, 39, 30, 65, 46, 42, 28, 66, 26, 48, 71, 35, 81, 21, 83, 67, 99, 98, 69, 31, 73, 55, 75, 18, 4, 54, 9, 66, 65, 82, 3, 77, 87, 19, 51, 88, 57, 0, 53, 94, 30, 9, 70, 37, 100, 70, 73, 71, 81, 61, 64, 37, 67, 7, 95, 82, 84, 65, 1, 11, 62, 6, 48, 51, 4, 50, 14, 52, 32, 42, 83, 3, 89, 23, 76, 65, 6, 42, 64, 80, 91, 84, 50, 3, 21, 91, 6, 29, 62, 59, 13, 7, 87, 98, 26, 34]
last_save: 702

Gen:2067
last_save: 702
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.5555555555555556
TestFitness:0.7777777777777778
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(np.cos(x[index]),+612672.0379).all():
      return True
    else:
      return True
  def adf1(index):
    if np.less(x[index],-225840.6091).all():
      return True
    else:
      return True
  def adf2(index):
    if np.equal(x[index],+945000.0985).all():
      return True
    else:
      return True
  def adf3(index):
    if np.less(x[index],+927696.3749).all():
      return False
    else:
      return False
  def adf4(index):
    if np.equal(x[index],+953569.1026).all():
      return True
    else:
      return True
  def adf5(index):
    if np.less(rlog(x[index]),-761894.6950).all():
      return False
    else:
      return False
  def adf6(index):
    if np.equal(x[index],-869000.9124).all():
      return False
    else:
      return True
  def adf7(index):
    if np.greater(x[index],+424135.6343).all():
      return False
    else:
      return False
  def adf8(index):
    if np.less(sigmoid(x[index]),+895495.2073).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*-035.843, adf1(1)*-479.944, adf2(2)*+871.752, adf3(3)*-888.254, adf4(4)*+195.103, adf5(5)*-475.434, adf6(6)*-501.218, adf7(7)*-275.496, adf8(8)*+390.182], [1, 1, 1, 1, 0, 1, 1, 0], 366.203)
result=p(); 0.5555555555555556
IndLenGenome:414
IndGenome:[31, 76, 75, 88, 70, 69, 73, 31, 33, 56, 35, 73, 72, 54, 22, 61, 45, 73, 6, 99, 98, 75, 35, 98, 95, 86, 35, 12, 98, 14, 33, 37, 80, 37, 37, 65, 88, 19, 29, 17, 2, 15, 59, 92, 33, 29, 59, 15, 10, 48, 87, 47, 50, 52, 95, 22, 59, 71, 30, 23, 8, 16, 90, 35, 23, 83, 37, 86, 32, 57, 12, 30, 74, 51, 31, 60, 18, 80, 74, 93, 26, 62, 26, 33, 5, 21, 46, 35, 49, 63, 69, 72, 86, 11, 13, 10, 53, 40, 55, 71, 43, 47, 99, 35, 45, 13, 39, 64, 21, 3, 82, 19, 70, 55, 69, 25, 59, 98, 37, 16, 32, 19, 18, 93, 83, 85, 17, 34, 44, 81, 13, 71, 34, 79, 37, 56, 82, 32, 96, 78, 84, 53, 26, 61, 48, 28, 52, 38, 22, 61, 25, 75, 37, 40, 91, 78, 20, 28, 19, 66, 71, 59, 24, 83, 99, 62, 80, 22, 19, 87, 59, 27, 90, 51, 71, 79, 20, 90, 58, 79, 1, 57, 20, 61, 79, 74, 98, 23, 61, 78, 10, 52, 38, 58, 76, 65, 30, 51, 12, 28, 52, 22, 29, 43, 14, 53, 86, 37, 73, 99, 18, 35, 97, 63, 94, 79, 44, 72, 69, 73, 40, 64, 24, 82, 84, 55, 46, 87, 71, 92, 18, 62, 14, 39, 61, 38, 75, 77, 99, 22, 74, 26, 80, 63, 46, 36, 35, 50, 66, 95, 31, 29, 92, 11, 19, 66, 24, 30, 75, 42, 81, 60, 55, 70, 20, 27, 89, 99, 98, 70, 37, 64, 60, 71, 69, 95, 49, 12, 21, 38, 2, 84, 27, 1, 66, 74, 23, 52, 86, 5, 59, 25, 41, 10, 86, 52, 53, 78, 48, 81, 71, 38, 12, 17, 50, 57, 84, 71, 36, 87, 52, 99, 8, 64, 9, 72, 55, 9, 42, 49, 13, 73, 33, 70, 73, 2, 21, 64, 13, 29, 43, 44, 68, 72, 72, 55, 74, 39, 84, 23, 26, 24, 14, 9, 6, 94, 100, 95, 83, 53, 49, 79, 31, 81, 96, 76, 72, 39, 31, 89, 41, 47, 17, 71, 5, 37, 21, 53, 23, 77, 2, 17, 9, 95, 97, 54, 55, 8, 2, 45, 98, 80, 43, 62, 66, 22, 54, 6, 5, 21, 83, 27, 35, 33, 11, 100, 92, 43, 45, 23, 5, 44, 1, 73, 82, 18, 1, 54, 55, 39, 70, 100, 91, 17]
last_save: 703

Gen:20
TrainFitness:0.6666666666666666
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],+358390.6713).all():
      return True
    else:
      return True
  def adf1(index):
    if np.greater(x[index],-653316.6366).all():
      return True
    else:
      return False
  def adf2(index):
    if np.less(x[index],+030823.4491).all():
      if np.greater(x[index],-339078.2875).all():
        return False
      else:
        return True
      return True
    else:
      if np.less(x[index],-142676.3787).all():
        return False
      else:
        return True
      return False
  def adf3(index):
    if np.greater(x[index],+141652.6593).all():
      return True
    else:
      return True
  def adf4(index):
    if np.equal(x[index],+146004.8554).all():
      return True
    else:
      return False
  def adf5(index):
    if np.equal(x[index],-926508.5740).all():
      return False
    else:
      return True
  def adf6(index):
    if np.equal(x[index],-277043.0335).all():
      return False
    else:
      return False
  def adf7(index):
    if np.equal(psqrt(x[index]),-808131.8269).all():
      return False
    else:
      return True
  def adf8(index):
    if np.greater(np.tanh(x[index]),+574556.8035).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*-631.993, adf1(1)*-670.330, adf2(2)*+337.320, adf3(3)*+793.569, adf4(4)*-535.923, adf5(5)*-323.732, adf6(6)*+313.935, adf7(7)*-703.307, adf8(8)*-087.193], [0, 1, 1, 1, 1, 1, 1, 0], 212.928)
result=p(); 0.6666666666666666
IndLenGenome:439
IndGenome:[16, 48, 3, 91, 48, 63, 20, 18, 43, 93, 75, 8, 73, 89, 90, 56, 47, 31, 43, 14, 82, 95, 69, 75, 49, 79, 69, 44, 96, 75, 93, 93, 41, 6, 36, 13, 36, 96, 12, 39, 10, 98, 67, 82, 89, 85, 90, 50, 40, 33, 30, 78, 52, 63, 44, 64, 99, 31, 45, 18, 49, 61, 17, 50, 73, 93, 99, 80, 67, 68, 52, 48, 7, 15, 25, 76, 30, 59, 88, 79, 28, 41, 12, 31, 74, 42, 86, 17, 26, 53, 37, 78, 17, 43, 14, 57, 77, 87, 78, 97, 89, 10, 14, 61, 34, 41, 26, 55, 82, 16, 95, 39, 13, 20, 4, 76, 35, 74, 77, 75, 58, 26, 71, 34, 56, 40, 60, 74, 48, 35, 25, 14, 64, 33, 39, 61, 11, 13, 11, 61, 64, 49, 62, 36, 25, 10, 98, 35, 37, 4, 90, 55, 24, 91, 77, 14, 73, 73, 77, 48, 52, 57, 67, 30, 14, 83, 40, 33, 13, 35, 19, 87, 57, 93, 23, 16, 41, 60, 31, 78, 18, 30, 88, 61, 53, 1, 38, 12, 86, 39, 79, 64, 41, 75, 33, 66, 86, 77, 50, 19, 25, 97, 54, 55, 65, 56, 48, 10, 53, 45, 48, 34, 96, 72, 62, 87, 4, 86, 53, 31, 69, 69, 33, 38, 53, 41, 36, 77, 20, 33, 43, 80, 35, 48, 43, 13, 23, 17, 63, 22, 30, 4, 86, 18, 87, 79, 63, 75, 36, 89, 74, 71, 28, 55, 23, 15, 29, 22, 43, 99, 35, 48, 43, 12, 23, 17, 63, 22, 30, 4, 86, 53, 31, 43, 69, 33, 25, 53, 41, 36, 77, 20, 33, 43, 80, 77, 23, 9, 21, 10, 8, 77, 91, 89, 43, 66, 80, 83, 65, 17, 91, 39, 59, 10, 30, 22, 31, 62, 89, 32, 18, 45, 56, 83, 54, 85, 78, 35, 15, 51, 71, 34, 27, 51, 16, 98, 60, 62, 53, 98, 81, 61, 62, 37, 85, 97, 25, 54, 34, 93, 65, 13, 61, 73, 94, 53, 87, 27, 25, 45, 97, 18, 74, 60, 2, 73, 32, 96, 89, 23, 76, 20, 57, 0, 0, 99, 42, 18, 0, 83, 82, 38, 69, 58, 39, 14, 25, 77, 4, 90, 35, 26, 3, 19, 74, 72, 53, 62, 74, 95, 36, 42, 78, 86, 3, 77, 87, 48, 32, 83, 5, 41, 64, 63, 13, 68, 27, 13, 33, 80, 66, 94, 73, 58, 45, 92, 91, 7, 93, 57, 32, 33, 34, 5, 94, 75, 30, 89, 44, 40, 10, 13, 90, 85, 4, 8, 10, 45, 0]
last_save: 703

Gen:171
TrainFitness:0.7777777777777778
TestFitness:0.4444444444444444
MaxGenLen:545
Individual: def p():
  def adf0(index):
    if np.greater(x[index],+308390.6713).all():
      return True
    else:
      return True
  def adf1(index):
    if np.greater(x[index],-653716.6366).all():
      return True
    else:
      return False
  def adf2(index):
    if np.less(x[index],+030823.4491).all():
      if np.greater(x[index],-339078.2875).all():
        return False
      else:
        return True
      return True
    else:
      if np.less(x[index],-142676.3787).all():
        return False
      else:
        return True
      return False
  def adf3(index):
    if np.greater(x[index],+141652.6593).all():
      return True
    else:
      return True
  def adf4(index):
    if np.equal(x[index],+142004.8554).all():
      return True
    else:
      return False
  def adf5(index):
    if np.equal(x[index],-926508.1740).all():
      return False
    else:
      return True
  def adf6(index):
    if np.less(rlog(x[index]),+098554.4391).all():
      return True
    else:
      return False
  def adf7(index):
    if np.less(x[index],+005140.5417).all():
      return True
    else:
      return False
  def adf8(index):
    if np.equal(np.tanh(x[index]),-831910.1149).all():
      if np.less(x[index],+418993.7535).all():
        return False
      else:
        return True
      return False
    else:
      if np.equal(np.cos(x[index]),-320463.1393).all():
        return False
      else:
        return False
      return False
  return multiple_operation([adf0(0)*-073.910, adf1(1)*-936.035, adf2(2)*-900.212, adf3(3)*+563.458, adf4(4)*-147.168, adf5(5)*+811.275, adf6(6)*-435.313, adf7(7)*-755.784, adf8(8)*+269.360], [0, 0, 1, 0, 0, 0, 1, 0], 989.457)
result=p(); 0.7777777777777778
IndLenGenome:410
IndGenome:[16, 48, 3, 91, 48, 63, 20, 18, 43, 93, 80, 8, 73, 89, 90, 56, 47, 31, 43, 14, 82, 95, 69, 75, 49, 79, 69, 44, 96, 75, 93, 97, 41, 6, 36, 13, 36, 96, 12, 39, 10, 98, 67, 82, 89, 85, 90, 50, 40, 33, 30, 78, 52, 63, 44, 64, 99, 31, 83, 18, 49, 61, 17, 50, 73, 93, 99, 80, 67, 68, 52, 48, 7, 15, 25, 76, 30, 59, 88, 79, 28, 41, 12, 31, 74, 42, 86, 17, 26, 53, 37, 78, 17, 43, 14, 57, 77, 87, 78, 97, 89, 10, 14, 61, 34, 41, 26, 55, 82, 16, 95, 39, 13, 20, 4, 76, 35, 74, 77, 75, 58, 26, 71, 34, 72, 40, 60, 74, 48, 35, 25, 14, 64, 33, 39, 61, 11, 13, 11, 61, 64, 49, 62, 36, 25, 10, 98, 91, 37, 4, 90, 55, 24, 91, 77, 58, 26, 70, 6, 56, 26, 60, 79, 48, 35, 25, 14, 64, 33, 39, 61, 42, 13, 11, 61, 64, 49, 18, 36, 78, 10, 20, 35, 21, 4, 90, 45, 24, 91, 77, 78, 43, 73, 58, 26, 71, 34, 56, 36, 83, 33, 38, 53, 41, 69, 21, 20, 11, 61, 64, 49, 63, 79, 63, 75, 36, 89, 74, 71, 28, 19, 89, 43, 37, 55, 23, 15, 29, 22, 43, 99, 35, 48, 43, 12, 23, 17, 63, 22, 30, 4, 86, 53, 31, 43, 69, 33, 25, 53, 41, 36, 77, 20, 33, 43, 80, 77, 23, 9, 21, 10, 8, 77, 91, 89, 43, 66, 80, 83, 65, 17, 91, 39, 59, 10, 30, 22, 31, 62, 89, 32, 18, 45, 56, 83, 54, 85, 78, 35, 15, 51, 71, 34, 27, 51, 16, 98, 60, 62, 53, 98, 81, 61, 62, 37, 85, 97, 25, 54, 34, 93, 65, 13, 61, 73, 94, 53, 87, 27, 25, 45, 97, 18, 74, 60, 2, 73, 32, 96, 89, 23, 76, 20, 57, 0, 0, 99, 42, 18, 0, 83, 82, 38, 69, 58, 39, 14, 25, 77, 4, 90, 35, 26, 3, 19, 74, 72, 53, 62, 74, 95, 36, 42, 78, 86, 3, 77, 87, 48, 32, 83, 5, 41, 64, 63, 13, 68, 27, 13, 33, 80, 66, 94, 73, 58, 45, 92, 91, 7, 93, 57, 32, 33, 34, 5, 94, 75, 30, 89, 44, 40, 10, 13, 90, 85, 4, 8, 10, 45, 0]
last_save: 703

Gen:2171
last_save: 703
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.5555555555555556
TestFitness:0.5555555555555556
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(sigmoid(x[index]),-987980.5838).all():
      return False
    else:
      return True
  def adf1(index):
    if np.equal(x[index],+220101.9323).all():
      return False
    else:
      return True
  def adf2(index):
    if np.less(x[index],-015354.8047).all():
      return False
    else:
      return False
  def adf3(index):
    if np.equal(x[index],-358504.4716).all():
      return True
    else:
      return True
  def adf4(index):
    if np.greater(psqrt(x[index]),+591872.7477).all():
      return False
    else:
      return True
  def adf5(index):
    if np.less(x[index],+205160.6496).all():
      return False
    else:
      return False
  def adf6(index):
    if np.equal(np.tanh(x[index]),+125013.7151).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(sigmoid(x[index]),-025061.4586).all():
      return False
    else:
      return False
  def adf8(index):
    if np.greater(np.cos(x[index]),-972819.4991).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*-858.267, adf1(1)*-253.393, adf2(2)*+299.941, adf3(3)*+060.074, adf4(4)*+374.834, adf5(5)*+044.811, adf6(6)*-305.022, adf7(7)*+642.270, adf8(8)*-941.341], [1, 0, 0, 1, 1, 0, 1, 1], 810.104)
result=p(); 0.5555555555555556
IndLenGenome:417
IndGenome:[8, 19, 34, 60, 50, 99, 57, 98, 72, 83, 21, 37, 78, 13, 63, 75, 84, 96, 22, 98, 10, 38, 37, 32, 87, 12, 28, 81, 19, 40, 75, 25, 73, 88, 54, 51, 75, 37, 16, 96, 73, 50, 31, 20, 18, 25, 22, 83, 84, 69, 71, 9, 96, 33, 44, 90, 71, 65, 96, 39, 89, 84, 73, 81, 61, 42, 17, 64, 77, 23, 60, 94, 33, 72, 3, 23, 39, 16, 22, 84, 40, 80, 12, 19, 25, 96, 80, 51, 79, 18, 28, 66, 70, 82, 80, 95, 63, 11, 65, 47, 58, 94, 50, 64, 91, 47, 59, 13, 45, 20, 78, 73, 84, 32, 91, 33, 87, 70, 37, 85, 90, 63, 6, 75, 33, 33, 35, 67, 68, 33, 17, 9, 94, 74, 11, 41, 2, 73, 81, 49, 14, 15, 90, 47, 91, 91, 62, 63, 70, 44, 36, 46, 8, 48, 37, 88, 82, 73, 66, 17, 51, 74, 66, 28, 74, 76, 24, 60, 47, 18, 47, 10, 27, 82, 79, 51, 65, 19, 80, 27, 99, 69, 53, 54, 18, 85, 10, 20, 99, 81, 16, 71, 26, 57, 85, 86, 73, 53, 27, 22, 30, 84, 84, 65, 31, 18, 56, 99, 64, 34, 45, 71, 10, 87, 59, 93, 69, 61, 31, 70, 89, 69, 95, 25, 59, 88, 60, 13, 32, 42, 47, 39, 40, 61, 13, 67, 83, 30, 30, 75, 82, 16, 32, 64, 45, 16, 94, 16, 73, 37, 33, 68, 23, 80, 52, 50, 31, 55, 80, 59, 94, 49, 19, 55, 98, 3, 45, 69, 50, 91, 57, 53, 9, 42, 35, 18, 88, 43, 23, 47, 53, 17, 67, 86, 41, 32, 71, 78, 1, 64, 73, 94, 67, 26, 40, 13, 17, 99, 48, 53, 97, 65, 79, 38, 63, 78, 81, 14, 93, 0, 96, 21, 21, 16, 52, 3, 29, 100, 39, 10, 41, 62, 56, 79, 79, 100, 42, 23, 58, 29, 71, 74, 96, 35, 48, 53, 0, 80, 76, 37, 54, 63, 75, 17, 18, 81, 88, 36, 0, 74, 26, 58, 85, 34, 67, 51, 14, 21, 59, 63, 40, 1, 40, 0, 97, 46, 24, 0, 82, 67, 93, 98, 36, 75, 54, 31, 31, 7, 39, 57, 2, 58, 87, 83, 6, 100, 55, 64, 78, 13, 65, 34, 70, 66, 89, 76, 24, 46, 21, 82, 21, 90, 41, 99, 17, 91, 51, 20, 77, 96, 1, 38, 28, 15, 92, 21, 12]
last_save: 704

Gen:53
TrainFitness:0.6666666666666666
TestFitness:0.5555555555555556
MaxGenLen:515
Individual: def p():
  def adf0(index):
    if np.greater(sigmoid(x[index]),+436740.3776).all():
      return False
    else:
      return True
  def adf1(index):
    if np.greater(psqrt(x[index]),-818647.6573).all():
      return True
    else:
      return True
  def adf2(index):
    if np.less(x[index],-957031.3680).all():
      return False
    else:
      return True
  def adf3(index):
    if np.greater(rlog(x[index]),+645456.4609).all():
      return False
    else:
      return True
  def adf4(index):
    if np.equal(np.cos(x[index]),-296528.7888).all():
      return True
    else:
      return False
  def adf5(index):
    if np.greater(sigmoid(x[index]),+474298.1581).all():
      return False
    else:
      return False
  def adf6(index):
    if np.less(sigmoid(x[index]),+695623.2035).all():
      if np.less(np.cos(x[index]),+646095.6232).all():
        return True
      else:
        return False
      return True
    else:
      if np.less(psqrt(x[index]),+887198.3856).all():
        return False
      else:
        return False
      return False
  def adf7(index):
    if np.greater(x[index],+039239.6312).all():
      return True
    else:
      return False
  def adf8(index):
    if np.equal(np.cos(x[index]),-342039.4333).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+376.425, adf1(1)*+146.590, adf2(2)*+059.598, adf3(3)*-715.089, adf4(4)*+297.625, adf5(5)*+955.441, adf6(6)*+460.684, adf7(7)*+244.293, adf8(8)*+465.542], [0, 1, 0, 0, 1, 0, 1, 0], 165.561)
result=p(); 0.6666666666666666
IndLenGenome:370
IndGenome:[22, 67, 6, 77, 63, 50, 27, 89, 34, 92, 24, 3, 36, 17, 24, 80, 13, 87, 77, 16, 11, 32, 60, 49, 21, 20, 17, 53, 89, 44, 38, 91, 68, 96, 94, 67, 26, 55, 57, 33, 14, 52, 87, 85, 34, 53, 26, 7, 77, 9, 65, 87, 30, 73, 81, 63, 96, 18, 60, 87, 48, 41, 11, 75, 32, 16, 48, 42, 16, 46, 44, 85, 74, 15, 36, 44, 56, 40, 59, 95, 46, 72, 93, 2, 24, 61, 55, 61, 1, 32, 89, 86, 35, 32, 68, 87, 18, 58, 88, 54, 83, 25, 57, 72, 56, 99, 71, 66, 18, 54, 77, 14, 92, 29, 68, 11, 75, 98, 91, 79, 85, 48, 46, 55, 85, 92, 15, 16, 44, 56, 36, 59, 95, 46, 72, 93, 2, 90, 33, 35, 61, 1, 32, 55, 85, 92, 15, 36, 44, 56, 40, 59, 95, 46, 72, 93, 2, 24, 33, 36, 61, 1, 32, 89, 97, 86, 92, 8, 78, 77, 11, 39, 68, 53, 98, 75, 26, 31, 57, 75, 38, 23, 30, 69, 43, 88, 62, 40, 53, 99, 32, 83, 69, 86, 53, 81, 12, 86, 95, 76, 49, 26, 98, 91, 90, 85, 48, 83, 34, 42, 90, 93, 39, 44, 73, 33, 53, 34, 42, 90, 44, 39, 16, 30, 33, 37, 36, 14, 92, 45, 97, 72, 94, 21, 44, 56, 75, 89, 50, 99, 22, 71, 80, 55, 69, 25, 69, 68, 97, 55, 64, 27, 71, 85, 20, 28, 79, 34, 92, 15, 42, 49, 97, 36, 42, 95, 18, 28, 17, 49, 85, 35, 24, 4, 81, 29, 96, 36, 34, 66, 60, 26, 98, 64, 62, 62, 35, 62, 24, 24, 32, 79, 13, 11, 74, 10, 94, 16, 25, 45, 14, 92, 13, 24, 13, 78, 54, 91, 14, 65, 38, 75, 81, 76, 35, 45, 76, 81, 54, 77, 33, 42, 90, 17, 84, 94, 72, 38, 27, 66, 4, 30, 62, 61, 43, 79, 40, 10, 42, 83, 97, 84, 6, 58, 41, 75, 97, 37, 30, 44, 70, 1, 1, 88, 97, 25, 68, 33, 4, 17, 67, 98, 59, 77, 76, 65, 53, 75, 13, 80]
last_save: 704

Gen:593
TrainFitness:0.7777777777777778
TestFitness:0.2222222222222222
MaxGenLen:665
Individual: def p():
  def adf0(index):
    if np.greater(sigmoid(x[index]),-436740.3776).all():
      return False
    else:
      return True
  def adf1(index):
    if np.greater(psqrt(x[index]),+812627.6571).all():
      return True
    else:
      return True
  def adf2(index):
    if np.less(x[index],-917038.3684).all():
      return False
    else:
      return True
  def adf3(index):
    if np.greater(rlog(x[index]),+645454.4207).all():
      return False
    else:
      return True
  def adf4(index):
    if np.equal(np.cos(x[index]),-796528.7888).all():
      return True
    else:
      return False
  def adf5(index):
    if np.greater(sigmoid(x[index]),+474298.1283).all():
      return False
    else:
      return False
  def adf6(index):
    if np.less(sigmoid(x[index]),+695623.6035).all():
      if np.less(np.tanh(x[index]),+626092.6232).all():
        return True
      else:
        return False
      return True
    else:
      if np.less(psqrt(x[index]),+887198.3854).all():
        return False
      else:
        return False
      return False
  def adf7(index):
    if np.greater(x[index],+004871.9838).all():
      return False
    else:
      return True
  def adf8(index):
    if np.greater(psqrt(x[index]),-820392.3963).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*-435.342, adf1(1)*+003.764, adf2(2)*-894.252, adf3(3)*-258.868, adf4(4)*+569.681, adf5(5)*-342.039, adf6(6)*-342.044, adf7(7)*+764.257, adf8(8)*+465.909], [1, 0, 1, 1, 1, 1, 0, 1], 471.508)
result=p(); 0.7777777777777778
IndLenGenome:574
IndGenome:[22, 67, 6, 77, 63, 50, 27, 89, 7, 74, 24, 3, 36, 17, 24, 80, 13, 87, 77, 16, 11, 32, 60, 49, 21, 20, 17, 53, 42, 44, 38, 91, 92, 96, 82, 67, 26, 55, 57, 91, 14, 52, 87, 85, 34, 53, 26, 7, 98, 9, 11, 87, 30, 43, 98, 63, 96, 18, 24, 87, 48, 41, 11, 75, 32, 16, 48, 42, 16, 46, 44, 85, 74, 15, 64, 44, 12, 40, 27, 95, 46, 72, 93, 2, 24, 61, 55, 61, 1, 57, 89, 86, 35, 32, 68, 87, 18, 58, 88, 54, 83, 25, 57, 72, 56, 99, 99, 66, 18, 54, 77, 14, 92, 29, 68, 11, 12, 98, 13, 79, 85, 48, 46, 55, 85, 92, 15, 16, 44, 56, 36, 59, 95, 46, 72, 93, 86, 90, 33, 35, 61, 1, 32, 2, 85, 92, 15, 36, 52, 56, 40, 59, 22, 46, 72, 93, 2, 24, 33, 36, 61, 1, 32, 89, 97, 86, 92, 8, 78, 77, 11, 39, 68, 53, 98, 75, 94, 31, 57, 75, 38, 23, 30, 69, 43, 88, 62, 40, 10, 44, 78, 77, 11, 39, 68, 53, 98, 75, 26, 31, 57, 60, 38, 23, 30, 69, 43, 88, 62, 40, 53, 99, 32, 83, 69, 86, 53, 96, 30, 86, 95, 76, 49, 80, 44, 73, 95, 53, 34, 42, 90, 44, 39, 0, 30, 33, 37, 36, 14, 92, 45, 97, 28, 79, 34, 92, 15, 42, 49, 97, 36, 42, 95, 18, 28, 86, 28, 81, 12, 86, 95, 26, 49, 26, 98, 91, 90, 85, 48, 83, 34, 42, 90, 93, 39, 44, 73, 1, 53, 34, 42, 90, 44, 14, 16, 30, 33, 37, 36, 14, 92, 45, 97, 72, 94, 21, 44, 56, 75, 89, 50, 99, 22, 71, 80, 55, 69, 25, 69, 68, 97, 55, 64, 17, 71, 85, 20, 28, 79, 34, 92, 15, 42, 49, 97, 36, 42, 95, 18, 28, 17, 49, 85, 35, 24, 4, 81, 29, 96, 36, 34, 66, 60, 26, 98, 64, 62, 62, 35, 62, 24, 24, 32, 79, 13, 11, 74, 10, 94, 16, 25, 45, 14, 92, 13, 88, 13, 78, 54, 91, 14, 65, 38, 75, 81, 76, 35, 45, 47, 71, 12, 97, 77, 13, 15, 60, 54, 51, 12, 61, 98, 34, 62, 12, 76, 72, 77, 72, 27, 60, 91, 92, 56, 47, 53, 71, 12, 60, 28, 50, 69, 36, 47, 77, 53, 98, 75, 26, 30, 57, 37, 38, 18, 30, 92, 43, 88, 83, 40, 6, 99, 14, 83, 69, 86, 89, 81, 12, 86, 95, 50, 49, 75, 98, 91, 49, 85, 48, 83, 34, 42, 29, 86, 95, 59, 35, 75, 79, 64, 32, 32, 64, 5, 71, 94, 35, 24, 20, 81, 29, 96, 40, 34, 66, 60, 26, 2, 64, 62, 62, 35, 49, 75, 98, 91, 90, 85, 48, 83, 34, 42, 90, 93, 68, 90, 6, 78, 75, 97, 63, 78, 81, 14, 93, 0, 63, 21, 21, 16, 52, 3, 29, 100, 39, 10, 41, 76, 56, 79, 4, 100, 42, 65, 76, 21, 80, 60, 11, 35, 30, 75, 28, 65, 91, 16, 81, 41, 41, 41, 37, 23, 54, 29, 27, 69, 20, 44, 86, 16, 100, 26, 32, 89, 5, 4, 99, 45, 55, 60, 52, 79, 46, 39, 43, 15, 49, 87, 33, 41, 81, 14, 56, 96, 96]
last_save: 704

Gen:2593
last_save: 704
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.5555555555555556
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],-604490.3699).all():
      return False
    else:
      return True
  def adf1(index):
    if np.greater(np.sin(x[index]),+869308.9041).all():
      return True
    else:
      return False
  def adf2(index):
    if np.less(x[index],-117503.4853).all():
      return False
    else:
      return False
  def adf3(index):
    if np.less(sigmoid(x[index]),-241605.6164).all():
      return False
    else:
      return True
  def adf4(index):
    if np.equal(sigmoid(x[index]),-383102.5012).all():
      return True
    else:
      return True
  def adf5(index):
    if np.greater(np.cos(x[index]),-942974.2272).all():
      return True
    else:
      return True
  def adf6(index):
    if np.greater(sigmoid(x[index]),-150242.0121).all():
      return True
    else:
      return True
  def adf7(index):
    if np.equal(psqrt(x[index]),-475708.0384).all():
      return False
    else:
      return True
  def adf8(index):
    if np.greater(sigmoid(x[index]),+403653.4710).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*-323.808, adf1(1)*-011.782, adf2(2)*-891.714, adf3(3)*+263.630, adf4(4)*+248.237, adf5(5)*+557.864, adf6(6)*-682.247, adf7(7)*-322.594, adf8(8)*-178.727], [0, 1, 1, 1, 0, 1, 0, 0], 601.038)
result=p(); 0.5555555555555556
IndLenGenome:420
IndGenome:[40, 37, 52, 88, 67, 42, 94, 52, 93, 22, 23, 6, 34, 71, 18, 19, 52, 95, 11, 40, 56, 63, 36, 29, 22, 37, 38, 30, 78, 51, 98, 7, 32, 10, 12, 21, 53, 39, 7, 47, 9, 27, 17, 35, 69, 84, 23, 44, 62, 11, 13, 72, 96, 87, 77, 88, 49, 91, 85, 11, 34, 62, 83, 56, 91, 47, 98, 89, 65, 87, 35, 55, 56, 82, 35, 69, 51, 4, 51, 44, 48, 78, 54, 20, 94, 70, 70, 47, 87, 86, 94, 41, 63, 7, 75, 25, 34, 65, 48, 85, 12, 20, 48, 71, 92, 60, 90, 22, 62, 10, 54, 88, 92, 81, 67, 41, 13, 49, 95, 95, 53, 14, 22, 18, 66, 51, 27, 68, 85, 63, 39, 89, 97, 42, 42, 95, 43, 7, 19, 32, 82, 10, 94, 74, 26, 46, 76, 93, 51, 83, 12, 27, 21, 40, 68, 90, 82, 83, 84, 91, 7, 90, 87, 31, 8, 91, 86, 94, 13, 67, 34, 56, 17, 92, 48, 48, 77, 69, 87, 31, 19, 50, 82, 48, 63, 78, 30, 57, 61, 26, 13, 64, 74, 17, 16, 48, 57, 55, 70, 9, 24, 26, 71, 13, 98, 16, 35, 25, 84, 49, 12, 40, 21, 45, 45, 60, 84, 73, 54, 87, 53, 19, 58, 65, 57, 89, 61, 70, 15, 18, 58, 21, 66, 15, 94, 48, 9, 60, 48, 27, 39, 49, 37, 90, 72, 24, 98, 68, 79, 93, 50, 81, 30, 91, 48, 39, 33, 38, 71, 52, 5, 10, 92, 61, 61, 29, 82, 75, 85, 11, 70, 42, 84, 82, 41, 24, 30, 50, 12, 36, 18, 31, 71, 60, 86, 35, 16, 38, 48, 2, 36, 22, 48, 34, 35, 65, 99, 87, 39, 11, 24, 1, 2, 31, 62, 23, 66, 32, 31, 50, 11, 85, 25, 28, 72, 3, 5, 86, 58, 38, 62, 26, 38, 87, 56, 38, 7, 96, 81, 57, 91, 8, 97, 63, 20, 6, 92, 28, 52, 97, 2, 49, 66, 26, 99, 98, 99, 52, 1, 72, 5, 17, 83, 65, 92, 29, 34, 24, 75, 75, 76, 21, 39, 31, 42, 23, 76, 81, 1, 31, 77, 98, 25, 49, 92, 40, 58, 33, 50, 6, 99, 18, 40, 90, 83, 23, 59, 3, 86, 45, 3, 10, 82, 3, 2, 36, 50, 35, 40, 47, 98, 54, 56, 20, 43, 78, 60, 73, 28, 15, 41, 51, 1, 54, 94, 77, 97, 33, 96, 54]
last_save: 705

Gen:55
TrainFitness:0.6666666666666666
TestFitness:0.5555555555555556
MaxGenLen:515
Individual: def p():
  def adf0(index):
    if np.equal(x[index],-251771.0649).all():
      return True
    else:
      return False
  def adf1(index):
    if np.equal(sigmoid(x[index]),+575883.4012).all():
      return False
    else:
      return True
  def adf2(index):
    if np.greater(x[index],-780775.3766).all():
      if np.less(np.cos(x[index]),-855863.4407).all():
        return True
      else:
        return False
      return True
    else:
      if np.greater(rlog(x[index]),+134851.2254).all():
        return False
      else:
        return False
      return True
  def adf3(index):
    if np.less(np.tanh(x[index]),+521983.1278).all():
      return False
    else:
      return False
  def adf4(index):
    if np.less(x[index],-323765.9998).all():
      return True
    else:
      return False
  def adf5(index):
    if np.less(x[index],-378852.8740).all():
      return True
    else:
      return False
  def adf6(index):
    if np.less(rlog(x[index]),-109688.7094).all():
      return False
    else:
      return False
  def adf7(index):
    if np.greater(np.tanh(x[index]),-767305.5627).all():
      return True
    else:
      return True
  def adf8(index):
    if np.greater(x[index],+023833.9816).all():
      if np.equal(x[index],+216270.0987).all():
        return False
      else:
        return True
      return True
    else:
      if np.equal(x[index],-997762.1252).all():
        if np.less(x[index],+815712.9874).all():
          return True
        else:
          return False
        return False
      else:
        if np.equal(x[index],-067315.2917).all():
          return False
        else:
          return False
        return True
      return False
  return multiple_operation([adf0(0)*+384.871, adf1(1)*+359.120, adf2(2)*-619.217, adf3(3)*-655.876, adf4(4)*-840.926, adf5(5)*+918.217, adf6(6)*+754.220, adf7(7)*-139.179, adf8(8)*-807.165], [1, 1, 0, 1, 1, 1, 1, 0], 684.678)
result=p(); 0.6666666666666666
IndLenGenome:473
IndGenome:[12, 94, 41, 3, 80, 37, 62, 45, 40, 72, 25, 91, 17, 87, 41, 90, 46, 64, 29, 84, 43, 35, 33, 77, 82, 69, 89, 58, 31, 95, 97, 45, 78, 8, 23, 34, 40, 91, 12, 97, 84, 80, 38, 49, 6, 75, 13, 15, 24, 57, 48, 80, 97, 67, 95, 33, 17, 86, 66, 99, 82, 98, 49, 88, 99, 24, 98, 15, 95, 88, 86, 73, 54, 74, 30, 77, 90, 79, 14, 97, 24, 28, 70, 50, 56, 65, 41, 43, 84, 18, 55, 11, 32, 2, 25, 94, 83, 25, 52, 24, 45, 91, 24, 14, 88, 38, 72, 35, 72, 11, 89, 78, 43, 51, 52, 87, 68, 29, 17, 62, 73, 97, 19, 13, 23, 70, 93, 52, 13, 57, 16, 85, 19, 59, 39, 68, 38, 97, 50, 59, 94, 17, 95, 67, 67, 73, 97, 88, 68, 15, 92, 88, 87, 64, 60, 72, 19, 13, 23, 70, 44, 52, 94, 57, 56, 11, 70, 59, 76, 68, 38, 97, 50, 59, 94, 17, 95, 67, 49, 84, 62, 44, 41, 31, 38, 27, 26, 97, 93, 30, 85, 45, 66, 62, 57, 86, 16, 41, 34, 52, 60, 79, 85, 78, 21, 20, 42, 13, 68, 93, 53, 9, 68, 71, 76, 91, 56, 93, 81, 88, 5, 62, 11, 86, 62, 27, 50, 70, 69, 38, 87, 27, 28, 100, 34, 3, 23, 53, 48, 83, 70, 39, 49, 87, 87, 56, 72, 31, 72, 85, 32, 77, 16, 35, 41, 76, 76, 68, 61, 15, 67, 71, 52, 9, 68, 47, 14, 58, 47, 39, 69, 80, 27, 2, 97, 32, 90, 96, 57, 93, 41, 65, 52, 29, 31, 57, 71, 37, 12, 91, 41, 86, 21, 28, 42, 93, 18, 24, 28, 67, 21, 45, 96, 89, 33, 15, 59, 71, 22, 90, 59, 47, 62, 46, 21, 49, 72, 41, 27, 63, 39, 93, 96, 95, 85, 28, 77, 16, 12, 65, 83, 58, 14, 70, 9, 12, 16, 17, 30, 77, 29, 61, 58, 12, 11, 77, 38, 18, 28, 67, 35, 24, 42, 82, 50, 26, 97, 94, 61, 53, 59, 31, 17, 19, 97, 19, 90, 28, 40, 37, 61, 6, 25, 86, 9, 89, 24, 25, 83, 99, 11, 24, 27, 86, 68, 34, 46, 37, 78, 42, 31, 74, 14, 81, 30, 47, 9, 41, 51, 79, 88, 76, 59, 81, 88, 7, 27, 78, 62, 99, 51, 63, 62, 64, 19, 91, 64, 49, 89, 2, 34, 90, 8, 4, 74, 82, 65, 27, 17, 49, 16, 67, 90, 51, 24, 4, 94, 1, 95, 75, 98, 60, 82, 47, 29, 100, 92, 37, 12, 5, 24, 96, 39, 18, 51, 5, 44, 70, 65, 4, 79, 52, 86, 68, 28, 33, 87, 52, 40, 1, 98, 86, 81]
last_save: 705

Gen:123
TrainFitness:0.7777777777777778
TestFitness:0.5555555555555556
MaxGenLen:530
Individual: def p():
  def adf0(index):
    if np.equal(x[index],-251771.0349).all():
      return True
    else:
      return False
  def adf1(index):
    if np.equal(np.sin(x[index]),+575483.4012).all():
      return False
    else:
      return True
  def adf2(index):
    if np.greater(x[index],-780675.3766).all():
      if np.less(np.cos(x[index]),-853863.4480).all():
        return True
      else:
        return True
      return False
    else:
      if np.less(np.sin(x[index]),-294352.4514).all():
        return True
      else:
        return True
      return True
  def adf3(index):
    if np.greater(x[index],+127697.1379).all():
      return False
    else:
      return False
  def adf4(index):
    if np.less(x[index],+999877.2147).all():
      return True
    else:
      return False
  def adf5(index):
    if np.less(np.tanh(x[index]),+840293.3042).all():
      return True
    else:
      return False
  def adf6(index):
    if np.less(x[index],+006475.7942).all():
      return False
    else:
      return True
  def adf7(index):
    if np.equal(sigmoid(x[index]),-627966.4309).all():
      if np.greater(np.tanh(x[index]),-339817.1633).all():
        return True
      else:
        return False
      return True
    else:
      if np.equal(sigmoid(x[index]),+187804.3354).all():
        return False
      else:
        return True
      return False
  def adf8(index):
    if np.greater(np.sin(x[index]),+276516.6815).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+879.907, adf1(1)*+027.391, adf2(2)*-717.211, adf3(3)*-238.487, adf4(4)*-905.912, adf5(5)*-264.921, adf6(6)*-365.587, adf7(7)*+384.692, adf8(8)*-691.127], [0, 0, 0, 1, 0, 0, 1, 0], 604.139)
result=p(); 0.7777777777777778
IndLenGenome:483
IndGenome:[39, 94, 41, 3, 80, 37, 19, 45, 82, 72, 25, 91, 17, 87, 41, 90, 63, 64, 29, 100, 43, 35, 33, 77, 82, 12, 89, 58, 17, 95, 97, 45, 24, 8, 23, 34, 40, 91, 12, 97, 84, 17, 38, 49, 6, 75, 13, 15, 24, 57, 48, 80, 6, 67, 95, 33, 17, 86, 66, 99, 82, 98, 49, 88, 99, 24, 98, 15, 63, 88, 86, 73, 54, 24, 28, 70, 50, 0, 65, 41, 43, 84, 18, 55, 11, 32, 2, 39, 54, 83, 25, 52, 24, 45, 91, 24, 14, 88, 38, 72, 35, 72, 11, 89, 78, 43, 51, 52, 87, 6, 29, 17, 61, 73, 97, 19, 13, 23, 70, 93, 52, 13, 57, 16, 100, 19, 59, 39, 68, 47, 97, 42, 21, 94, 17, 74, 67, 67, 73, 97, 88, 68, 15, 92, 88, 28, 64, 60, 72, 19, 13, 23, 70, 44, 52, 94, 57, 56, 11, 70, 59, 76, 68, 38, 70, 50, 6, 94, 17, 95, 67, 49, 84, 62, 83, 16, 31, 38, 27, 26, 2, 93, 30, 85, 45, 66, 62, 57, 29, 16, 46, 34, 3, 60, 79, 85, 78, 74, 20, 42, 13, 68, 93, 53, 9, 68, 71, 27, 91, 56, 93, 3, 22, 5, 50, 11, 86, 62, 27, 50, 70, 69, 21, 28, 27, 28, 100, 34, 3, 23, 25, 44, 83, 70, 39, 49, 87, 87, 56, 72, 31, 72, 18, 32, 77, 16, 35, 41, 76, 76, 68, 61, 15, 67, 71, 7, 42, 68, 88, 14, 58, 47, 39, 69, 80, 27, 2, 50, 94, 90, 82, 57, 93, 39, 41, 52, 29, 31, 57, 71, 67, 12, 91, 41, 33, 53, 28, 42, 93, 18, 24, 28, 67, 21, 45, 96, 89, 10, 15, 59, 71, 22, 90, 59, 47, 62, 46, 4, 49, 72, 41, 27, 63, 39, 93, 96, 95, 85, 28, 77, 16, 12, 82, 83, 58, 14, 26, 9, 12, 16, 17, 30, 76, 29, 61, 41, 12, 17, 77, 38, 8, 0, 67, 26, 24, 55, 82, 50, 26, 60, 94, 61, 53, 59, 31, 17, 19, 97, 19, 90, 28, 24, 37, 61, 6, 25, 86, 9, 89, 24, 25, 83, 99, 7, 24, 19, 90, 28, 24, 37, 61, 6, 25, 86, 9, 89, 24, 25, 83, 99, 7, 24, 27, 86, 68, 89, 26, 37, 78, 42, 31, 74, 14, 81, 30, 47, 9, 41, 51, 79, 88, 76, 59, 81, 88, 7, 27, 78, 62, 99, 51, 63, 62, 64, 19, 91, 64, 49, 89, 2, 34, 90, 8, 4, 74, 82, 65, 27, 17, 49, 16, 67, 90, 51, 24, 4, 94, 1, 95, 75, 98, 60, 82, 47, 29, 100, 92, 37, 12, 5, 24, 96, 39, 18, 51, 5, 44, 70, 65, 4, 79, 52, 86, 68, 28, 33, 87, 52, 40, 1, 98, 86, 81]
last_save: 705

Gen:2123
last_save: 705
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.3333333333333333
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(np.sin(x[index]),+832065.4793).all():
      return True
    else:
      return False
  def adf1(index):
    if np.equal(x[index],-579059.1733).all():
      return True
    else:
      return True
  def adf2(index):
    if np.less(x[index],-572807.0877).all():
      return True
    else:
      return False
  def adf3(index):
    if np.equal(x[index],+673226.4019).all():
      return True
    else:
      return False
  def adf4(index):
    if np.equal(rlog(x[index]),-705912.0565).all():
      return True
    else:
      return False
  def adf5(index):
    if np.less(x[index],+033615.8916).all():
      return True
    else:
      return False
  def adf6(index):
    if np.less(rlog(x[index]),-048617.4593).all():
      return False
    else:
      return True
  def adf7(index):
    if np.less(x[index],-478953.3931).all():
      return False
    else:
      return True
  def adf8(index):
    if np.less(x[index],+996525.9306).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+377.570, adf1(1)*-405.983, adf2(2)*-570.309, adf3(3)*-038.198, adf4(4)*+988.201, adf5(5)*-671.414, adf6(6)*+948.497, adf7(7)*+644.888, adf8(8)*-597.704], [0, 1, 1, 1, 1, 0, 1, 0], 042.560)
result=p(); 0.6666666666666666
IndLenGenome:414
IndGenome:[52, 35, 64, 18, 5, 96, 80, 2, 65, 47, 59, 75, 87, 21, 12, 73, 34, 42, 62, 48, 20, 87, 76, 70, 58, 67, 27, 49, 73, 7, 3, 90, 51, 13, 98, 11, 60, 55, 33, 13, 73, 76, 59, 35, 14, 90, 6, 48, 12, 47, 22, 48, 17, 56, 81, 64, 49, 97, 29, 55, 24, 30, 72, 99, 32, 78, 41, 47, 58, 49, 85, 59, 24, 88, 11, 37, 30, 57, 84, 45, 43, 69, 52, 91, 47, 97, 75, 38, 28, 46, 91, 75, 20, 84, 71, 82, 70, 62, 27, 18, 42, 90, 71, 89, 51, 10, 11, 50, 73, 63, 56, 73, 15, 81, 50, 50, 98, 96, 83, 14, 29, 34, 76, 94, 55, 88, 66, 84, 20, 58, 73, 32, 36, 98, 66, 37, 14, 99, 82, 28, 38, 80, 70, 70, 49, 78, 44, 13, 73, 21, 53, 33, 86, 5, 87, 77, 97, 40, 51, 74, 94, 76, 36, 26, 49, 87, 59, 86, 61, 32, 93, 90, 39, 66, 25, 99, 93, 43, 65, 87, 16, 79, 44, 96, 17, 47, 17, 32, 81, 77, 97, 79, 48, 39, 45, 35, 85, 45, 70, 58, 72, 41, 34, 44, 39, 59, 95, 55, 60, 47, 58, 53, 10, 93, 53, 52, 56, 37, 32, 62, 88, 18, 89, 65, 60, 49, 60, 53, 21, 41, 76, 74, 30, 73, 60, 36, 49, 43, 20, 27, 57, 96, 54, 95, 51, 69, 14, 57, 25, 21, 57, 16, 88, 97, 69, 87, 97, 41, 93, 77, 45, 69, 32, 43, 13, 25, 29, 21, 84, 27, 45, 32, 25, 20, 70, 85, 25, 99, 50, 49, 46, 97, 62, 59, 72, 96, 86, 95, 53, 48, 67, 80, 10, 12, 34, 72, 49, 76, 7, 62, 53, 52, 79, 40, 84, 47, 75, 92, 56, 82, 73, 22, 63, 75, 47, 33, 19, 79, 99, 34, 14, 33, 29, 39, 32, 14, 30, 29, 22, 10, 80, 20, 3, 85, 34, 53, 42, 57, 80, 81, 54, 65, 58, 44, 79, 3, 38, 2, 54, 65, 13, 3, 11, 84, 37, 62, 4, 62, 28, 30, 33, 27, 70, 63, 89, 15, 2, 77, 40, 44, 26, 15, 28, 28, 87, 82, 85, 52, 88, 77, 7, 95, 14, 12, 81, 84, 36, 10, 64, 72, 27, 44, 42, 41, 33, 32, 10, 53, 19, 30, 30, 75, 85, 75, 14, 24, 6, 94, 17, 4, 83, 53, 27, 22]
last_save: 706

Gen:435
TrainFitness:0.7777777777777778
TestFitness:0.3333333333333333
MaxGenLen:620
Individual: def p():
  def adf0(index):
    if np.less(psqrt(x[index]),-409272.8781).all():
      return False
    else:
      return False
  def adf1(index):
    if np.equal(x[index],+609924.4629).all():
      return True
    else:
      return False
  def adf2(index):
    if np.greater(x[index],+007455.5220).all():
      return True
    else:
      return False
  def adf3(index):
    if np.less(x[index],-941922.9611).all():
      if np.less(np.tanh(x[index]),-794929.2470).all():
        return False
      else:
        return False
      return False
    else:
      if np.equal(x[index],-674063.2563).all():
        if np.greater(x[index],-778992.0502).all():
          return False
        else:
          return False
        return False
      else:
        if np.less(x[index],-200335.3492).all():
          return True
        else:
          return True
        return False
      return True
  def adf4(index):
    if np.equal(psqrt(x[index]),+694194.6301).all():
      if np.equal(psqrt(x[index]),-347700.3525).all():
        return True
      else:
        return False
      return False
    else:
      if np.equal(x[index],-789120.5677).all():
        return True
      else:
        return True
      return True
  def adf5(index):
    if np.equal(np.tanh(x[index]),-392714.1809).all():
      return True
    else:
      return False
  def adf6(index):
    if np.equal(np.tanh(x[index]),+840992.3927).all():
      return False
    else:
      return False
  def adf7(index):
    if np.less(sigmoid(x[index]),+042384.3115).all():
      return False
    else:
      return False
  def adf8(index):
    if np.less(x[index],-507141.9821).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+803.971, adf1(1)*+076.077, adf2(2)*-968.006, adf3(3)*+450.477, adf4(4)*-205.577, adf5(5)*+498.409, adf6(6)*+927.140, adf7(7)*+843.113, adf8(8)*-651.378], [1, 0, 1, 1, 1, 0, 1, 1], 985.302)
result=p(); 0.7777777777777778
IndLenGenome:556
IndGenome:[42, 71, 33, 59, 61, 36, 23, 26, 63, 2, 74, 20, 69, 92, 47, 62, 98, 17, 78, 61, 47, 35, 65, 35, 41, 29, 90, 80, 86, 26, 30, 69, 39, 92, 4, 24, 86, 82, 29, 42, 71, 29, 11, 69, 85, 60, 78, 14, 0, 90, 27, 14, 95, 15, 65, 82, 62, 80, 30, 73, 87, 42, 91, 79, 51, 42, 65, 51, 9, 94, 91, 39, 2, 62, 39, 86, 51, 71, 73, 70, 74, 32, 35, 51, 52, 77, 39, 94, 99, 22, 19, 22, 64, 47, 50, 51, 87, 83, 40, 27, 47, 15, 57, 53, 54, 36, 77, 14, 70, 66, 63, 62, 45, 76, 23, 27, 57, 35, 71, 75, 9, 17, 27, 38, 39, 49, 2, 70, 45, 10, 82, 99, 51, 79, 31, 43, 15, 3, 21, 19, 62, 80, 30, 73, 43, 15, 3, 84, 19, 62, 80, 30, 73, 70, 33, 6, 50, 5, 62, 89, 8, 70, 65, 96, 9, 94, 91, 39, 44, 46, 3, 30, 51, 71, 80, 74, 65, 39, 99, 57, 53, 54, 27, 77, 50, 70, 63, 75, 62, 45, 8, 23, 21, 57, 35, 71, 35, 69, 17, 27, 38, 39, 31, 2, 70, 45, 86, 7, 47, 84, 38, 36, 4, 89, 68, 4, 50, 19, 49, 42, 13, 89, 32, 17, 1, 24, 91, 58, 40, 69, 70, 45, 86, 7, 47, 84, 38, 36, 4, 89, 68, 4, 50, 19, 49, 42, 13, 89, 32, 17, 41, 27, 87, 49, 28, 32, 93, 29, 66, 76, 0, 74, 82, 53, 28, 34, 73, 91, 71, 35, 85, 17, 79, 75, 55, 21, 65, 11, 33, 95, 50, 17, 1, 24, 91, 29, 68, 42, 91, 75, 51, 100, 25, 67, 86, 36, 28, 30, 93, 9, 17, 41, 69, 54, 33, 60, 17, 66, 70, 97, 87, 94, 27, 14, 99, 96, 8, 20, 30, 16, 71, 0, 70, 74, 95, 50, 64, 47, 27, 38, 39, 31, 2, 70, 45, 15, 7, 47, 84, 38, 36, 4, 89, 68, 4, 50, 19, 49, 42, 13, 89, 32, 17, 41, 24, 0, 74, 82, 53, 28, 34, 73, 91, 71, 73, 85, 17, 64, 16, 55, 61, 53, 77, 68, 40, 87, 64, 19, 75, 49, 82, 99, 51, 79, 69, 58, 15, 3, 80, 42, 75, 91, 21, 14, 78, 72, 69, 90, 24, 14, 25, 15, 15, 19, 62, 80, 30, 73, 87, 49, 28, 44, 93, 29, 66, 76, 51, 61, 32, 95, 55, 64, 88, 80, 27, 68, 42, 91, 75, 51, 74, 25, 67, 86, 36, 28, 30, 93, 9, 17, 41, 69, 54, 33, 60, 17, 66, 70, 97, 87, 94, 27, 16, 99, 96, 78, 70, 68, 34, 70, 52, 22, 74, 76, 42, 32, 84, 44, 25, 45, 79, 17, 79, 79, 55, 0, 49, 11, 33, 95, 50, 5, 62, 76, 98, 84, 65, 51, 9, 94, 91, 39, 44, 62, 20, 30, 51, 71, 16, 74, 86, 39, 94, 86, 39, 90, 32, 89, 41, 27, 44, 47, 55, 38, 36, 4, 89, 68, 4, 50, 19, 49, 77, 2, 2, 17, 41, 22, 21, 57, 3, 68, 97, 7, 32, 6, 92, 21, 38, 14, 39, 27, 44, 55, 20, 21, 0, 77, 53, 60, 58, 57, 55, 0, 74, 18]
last_save: 706

Gen:2435
last_save: 706
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.4444444444444444
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],-294783.9612).all():
      return True
    else:
      return True
  def adf1(index):
    if np.greater(x[index],+013700.4929).all():
      return False
    else:
      return True
  def adf2(index):
    if np.less(np.tanh(x[index]),-053402.1104).all():
      return True
    else:
      return True
  def adf3(index):
    if np.less(x[index],+156972.6439).all():
      return True
    else:
      return True
  def adf4(index):
    if np.less(rlog(x[index]),+097432.8849).all():
      return True
    else:
      return True
  def adf5(index):
    if np.greater(rlog(x[index]),-633614.3638).all():
      return True
    else:
      return True
  def adf6(index):
    if np.less(np.cos(x[index]),-517805.5085).all():
      return False
    else:
      return True
  def adf7(index):
    if np.less(x[index],-074207.9914).all():
      return False
    else:
      return True
  def adf8(index):
    if np.less(x[index],-509387.3458).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+680.246, adf1(1)*+451.775, adf2(2)*-431.298, adf3(3)*-284.511, adf4(4)*+686.977, adf5(5)*+708.234, adf6(6)*-711.607, adf7(7)*-696.107, adf8(8)*-953.155], [0, 1, 1, 1, 1, 1, 1, 0], 879.488)
result=p(); 0.6666666666666666
IndLenGenome:415
IndGenome:[74, 73, 23, 71, 10, 47, 39, 43, 77, 37, 95, 16, 96, 93, 15, 75, 37, 28, 82, 88, 57, 97, 62, 79, 37, 37, 59, 40, 59, 43, 92, 8, 55, 91, 83, 37, 13, 37, 14, 29, 11, 60, 86, 34, 93, 74, 62, 29, 50, 88, 77, 89, 63, 21, 54, 24, 40, 50, 46, 95, 40, 47, 90, 76, 59, 32, 71, 54, 64, 67, 60, 22, 86, 88, 20, 37, 58, 90, 35, 78, 25, 5, 5, 80, 46, 57, 87, 29, 63, 8, 58, 38, 92, 94, 81, 92, 83, 81, 14, 15, 14, 51, 83, 23, 61, 65, 86, 49, 51, 17, 98, 64, 44, 31, 51, 94, 57, 26, 26, 87, 59, 17, 99, 63, 93, 12, 79, 58, 32, 85, 68, 33, 71, 87, 54, 38, 85, 36, 66, 30, 46, 44, 48, 10, 53, 91, 11, 85, 55, 73, 39, 25, 15, 29, 20, 91, 45, 94, 83, 69, 79, 94, 95, 27, 23, 82, 87, 49, 14, 88, 21, 89, 53, 87, 93, 29, 72, 88, 38, 19, 21, 71, 60, 21, 26, 80, 95, 20, 90, 42, 96, 18, 10, 97, 36, 95, 56, 30, 78, 38, 66, 90, 35, 29, 15, 45, 30, 24, 79, 28, 21, 72, 20, 85, 26, 14, 66, 49, 18, 98, 90, 64, 35, 81, 42, 49, 46, 85, 9, 20, 12, 34, 89, 74, 49, 75, 41, 41, 20, 16, 43, 31, 17, 89, 68, 27, 80, 61, 91, 60, 27, 74, 47, 89, 67, 85, 30, 52, 44, 73, 23, 29, 92, 52, 54, 76, 37, 25, 53, 73, 43, 86, 65, 39, 64, 59, 89, 65, 68, 28, 81, 45, 95, 69, 76, 13, 48, 76, 31, 73, 79, 48, 72, 87, 8, 58, 84, 96, 69, 93, 34, 71, 62, 57, 85, 43, 78, 34, 16, 82, 94, 89, 44, 72, 72, 66, 67, 49, 56, 31, 70, 91, 9, 58, 80, 58, 98, 13, 4, 91, 59, 46, 4, 89, 68, 16, 52, 52, 96, 9, 87, 70, 6, 25, 0, 73, 10, 24, 2, 47, 21, 80, 39, 55, 92, 20, 71, 78, 14, 83, 60, 92, 33, 67, 62, 18, 37, 60, 69, 33, 59, 78, 77, 76, 6, 77, 40, 63, 97, 10, 88, 84, 31, 97, 24, 55, 26, 51, 63, 56, 24, 15, 34, 42, 87, 53, 91, 28, 18, 24, 70, 97, 66, 31, 19, 49, 59, 97, 31, 6, 37, 37, 46, 16, 56]
last_save: 707

Gen:498
TrainFitness:0.7777777777777778
TestFitness:0.4444444444444444
MaxGenLen:635
Individual: def p():
  def adf0(index):
    if np.equal(psqrt(x[index]),-451168.5365).all():
      return False
    else:
      return True
  def adf1(index):
    if np.equal(x[index],+504603.1716).all():
      return True
    else:
      return True
  def adf2(index):
    if np.equal(x[index],-586713.8408).all():
      if np.equal(x[index],+229300.1205).all():
        return True
      else:
        return True
      return False
    else:
      if np.greater(x[index],-427971.8547).all():
        return True
      else:
        return True
      return False
  def adf3(index):
    if np.equal(np.sin(x[index]),+129041.3611).all():
      return True
    else:
      return False
  def adf4(index):
    if np.less(x[index],+009765.9141).all():
      if np.greater(np.tanh(x[index]),+400217.1155).all():
        return True
      else:
        return False
      return True
    else:
      if np.less(x[index],-470699.9290).all():
        return True
      else:
        return True
      return True
  def adf5(index):
    if np.less(sigmoid(x[index]),-060436.9812).all():
      return True
    else:
      return False
  def adf6(index):
    if np.equal(psqrt(x[index]),+942771.6141).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(x[index],+020329.9328).all():
      return True
    else:
      return False
  def adf8(index):
    if np.equal(sigmoid(x[index]),-739656.1598).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+306.039, adf1(1)*+206.422, adf2(2)*-181.601, adf3(3)*-836.541, adf4(4)*-889.020, adf5(5)*-932.863, adf6(6)*-016.737, adf7(7)*-561.598, adf8(8)*+139.130], [0, 1, 1, 0, 1, 0, 0, 1], 422.917)
result=p(); 0.7777777777777778
IndLenGenome:599
IndGenome:[89, 24, 26, 45, 2, 98, 65, 34, 23, 15, 54, 35, 51, 71, 56, 78, 65, 23, 96, 45, 63, 98, 49, 35, 95, 95, 83, 64, 58, 5, 20, 14, 56, 50, 23, 51, 7, 31, 86, 76, 30, 65, 90, 75, 20, 31, 87, 15, 62, 15, 28, 86, 87, 61, 3, 78, 74, 20, 98, 37, 86, 31, 17, 56, 85, 12, 72, 69, 23, 30, 20, 21, 12, 30, 45, 98, 50, 83, 89, 69, 45, 94, 63, 2, 54, 22, 77, 19, 57, 81, 58, 55, 54, 27, 16, 24, 35, 86, 71, 29, 60, 42, 9, 22, 49, 21, 42, 29, 60, 24, 41, 23, 36, 21, 71, 30, 41, 60, 68, 8, 82, 89, 49, 30, 69, 80, 30, 39, 87, 66, 45, 19, 21, 84, 91, 85, 96, 68, 38, 75, 42, 87, 74, 70, 20, 72, 21, 87, 11, 31, 45, 75, 32, 13, 70, 99, 22, 27, 24, 71, 24, 24, 17, 10, 86, 19, 79, 29, 92, 29, 10, 26, 40, 48, 68, 81, 25, 26, 63, 66, 69, 41, 30, 66, 90, 44, 13, 96, 99, 68, 21, 12, 72, 9, 80, 31, 62, 16, 89, 92, 16, 22, 99, 24, 92, 47, 47, 51, 36, 61, 44, 51, 22, 19, 52, 65, 87, 89, 82, 28, 49, 30, 32, 10, 83, 82, 89, 29, 33, 12, 48, 36, 13, 33, 83, 35, 30, 21, 4, 37, 83, 27, 93, 79, 86, 15, 76, 61, 15, 79, 28, 52, 46, 85, 51, 15, 66, 11, 93, 30, 26, 30, 63, 39, 18, 16, 68, 12, 0, 76, 84, 72, 42, 29, 51, 27, 81, 18, 91, 96, 70, 81, 57, 55, 37, 38, 83, 86, 95, 74, 51, 88, 87, 89, 28, 28, 49, 30, 32, 10, 83, 21, 89, 29, 33, 12, 48, 36, 13, 33, 83, 35, 30, 21, 46, 37, 83, 17, 93, 79, 52, 15, 76, 61, 15, 79, 28, 52, 46, 85, 51, 53, 49, 11, 93, 30, 26, 30, 63, 39, 18, 35, 68, 12, 69, 76, 84, 72, 42, 29, 51, 27, 81, 18, 91, 40, 70, 81, 57, 55, 37, 38, 83, 86, 95, 74, 51, 88, 43, 84, 95, 73, 29, 54, 11, 85, 24, 24, 4, 76, 87, 20, 17, 53, 37, 53, 49, 17, 79, 97, 54, 20, 94, 97, 65, 44, 57, 4, 42, 31, 66, 0, 11, 25, 88, 65, 61, 15, 79, 5, 52, 46, 85, 51, 15, 77, 11, 93, 30, 26, 30, 18, 39, 18, 5, 68, 12, 69, 26, 84, 4, 42, 29, 51, 27, 81, 39, 91, 7, 70, 81, 57, 55, 37, 38, 83, 86, 95, 84, 95, 74, 51, 88, 43, 77, 95, 73, 29, 54, 11, 85, 24, 24, 4, 76, 20, 80, 17, 53, 37, 91, 49, 17, 79, 97, 76, 20, 94, 97, 65, 44, 57, 71, 42, 31, 0, 0, 11, 25, 88, 65, 49, 4, 71, 62, 30, 52, 88, 66, 90, 25, 53, 2, 47, 71, 63, 54, 35, 8, 39, 14, 63, 50, 8, 10, 64, 8, 0, 30, 96, 58, 1, 38, 99, 92, 9, 70, 42, 34, 63, 49, 94, 7, 12, 55, 51, 4, 93, 51, 64, 8, 16, 47, 5, 29, 71, 63, 17, 5, 53, 59, 76, 54, 4, 71, 58, 80, 73, 61, 30, 57, 55, 72, 67, 18, 27, 25, 54, 85, 61, 58, 10, 9, 76, 54, 21, 75, 55, 77, 54, 56, 37, 55, 56, 37, 100, 100, 46, 34, 48, 39, 98, 4, 56, 97, 83, 11, 30, 8]
last_save: 707

Gen:2498
last_save: 707
Exit:FalseFalseTrue