Dataset:Meander/Full.csv
FS:False
Seed:1238
Size:3

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(psqrt(x[index]),-171307.5602).all():
      return False
    else:
      return True
  def adf1(index):
    if np.less(x[index],-921317.1983).all():
      return True
    else:
      return True
  def adf2(index):
    if np.greater(psqrt(x[index]),-166691.6359).all():
      return True
    else:
      return False
  def adf3(index):
    if np.greater(x[index],+227677.9558).all():
      return False
    else:
      return True
  def adf4(index):
    if np.greater(x[index],+664233.4645).all():
      return True
    else:
      return False
  def adf5(index):
    if np.greater(x[index],-012683.2649).all():
      return True
    else:
      return True
  def adf6(index):
    if np.greater(x[index],-400401.5864).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(x[index],-200970.9162).all():
      return True
    else:
      return False
  def adf8(index):
    if np.equal(np.sin(x[index]),-561429.4089).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+791.376, adf1(1)*-860.091, adf2(2)*+297.546, adf3(3)*-009.680, adf4(4)*-678.287, adf5(5)*-211.583, adf6(6)*+621.425, adf7(7)*-093.668, adf8(8)*-952.051], [0, 1, 0, 0, 1, 1, 0, 1], 104.365)
result=p(); 0.6666666666666666
IndLenGenome:414
IndGenome:[14, 37, 94, 8, 93, 47, 23, 67, 7, 15, 13, 20, 97, 82, 45, 78, 88, 61, 47, 19, 2, 53, 24, 79, 97, 92, 83, 47, 57, 91, 59, 56, 76, 89, 53, 26, 86, 79, 43, 10, 57, 83, 92, 68, 33, 40, 21, 87, 6, 13, 40, 99, 58, 28, 4, 41, 93, 27, 98, 41, 73, 46, 29, 32, 73, 65, 84, 16, 83, 70, 55, 23, 65, 47, 22, 74, 43, 32, 59, 17, 86, 80, 78, 40, 50, 15, 61, 63, 80, 86, 73, 53, 53, 14, 12, 63, 32, 58, 80, 92, 75, 61, 95, 88, 58, 36, 59, 32, 49, 5, 27, 56, 46, 35, 42, 20, 70, 91, 10, 31, 61, 19, 41, 42, 16, 32, 50, 4, 46, 81, 51, 31, 37, 39, 63, 72, 86, 29, 27, 61, 38, 31, 92, 87, 14, 19, 36, 91, 59, 61, 11, 40, 64, 79, 50, 61, 78, 52, 40, 85, 21, 69, 61, 27, 88, 63, 47, 71, 93, 13, 86, 32, 87, 74, 41, 13, 70, 47, 39, 89, 51, 54, 60, 74, 9, 26, 83, 49, 82, 35, 42, 85, 72, 54, 78, 58, 45, 22, 21, 70, 12, 95, 52, 24, 33, 51, 9, 77, 49, 82, 93, 91, 83, 90, 78, 34, 84, 50, 56, 76, 25, 70, 39, 69, 36, 11, 76, 14, 11, 56, 36, 38, 44, 78, 81, 45, 56, 52, 74, 41, 43, 82, 60, 39, 34, 24, 76, 39, 46, 92, 34, 71, 85, 66, 50, 26, 68, 59, 67, 35, 92, 22, 18, 66, 27, 2, 10, 77, 33, 89, 15, 33, 45, 93, 76, 40, 9, 91, 34, 69, 29, 18, 92, 43, 97, 18, 26, 12, 98, 1, 44, 33, 7, 94, 92, 38, 28, 76, 89, 53, 33, 47, 10, 44, 26, 82, 87, 76, 47, 20, 22, 41, 43, 57, 81, 8, 98, 3, 28, 97, 90, 21, 60, 90, 47, 75, 75, 34, 98, 70, 20, 30, 23, 59, 61, 94, 20, 69, 7, 24, 75, 15, 70, 14, 37, 3, 90, 13, 48, 7, 29, 30, 47, 14, 80, 69, 97, 67, 1, 85, 68, 1, 79, 14, 84, 3, 90, 31, 70, 85, 32, 94, 29, 83, 16, 79, 13, 42, 10, 37, 7, 88, 92, 28, 40, 100, 80, 84, 79, 42, 33, 65, 83, 97, 4, 75, 67, 11, 60, 79, 19, 6, 29, 99, 33, 76, 79, 66, 50, 93, 31, 7, 21, 11]
last_save: 341

Gen:2001
last_save: 341
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],-978545.0844).all():
      return False
    else:
      return True
  def adf1(index):
    if np.greater(x[index],+191591.7438).all():
      return True
    else:
      return False
  def adf2(index):
    if np.less(sigmoid(x[index]),+820805.6864).all():
      return False
    else:
      return False
  def adf3(index):
    if np.less(x[index],+692102.4239).all():
      return False
    else:
      return False
  def adf4(index):
    if np.less(x[index],+281510.9812).all():
      return False
    else:
      return False
  def adf5(index):
    if np.equal(psqrt(x[index]),-625635.0692).all():
      return False
    else:
      return False
  def adf6(index):
    if np.greater(np.cos(x[index]),+498505.7243).all():
      return True
    else:
      return True
  def adf7(index):
    if np.greater(np.tanh(x[index]),+990230.4634).all():
      return True
    else:
      return True
  def adf8(index):
    if np.less(sigmoid(x[index]),+742577.2718).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+387.224, adf1(1)*-096.405, adf2(2)*-679.715, adf3(3)*+136.090, adf4(4)*+287.222, adf5(5)*-499.646, adf6(6)*+709.963, adf7(7)*-577.578, adf8(8)*-925.947], [1, 1, 1, 1, 1, 1, 0, 1], 223.096)
result=p(); 0.6666666666666666
IndLenGenome:417
IndGenome:[25, 19, 76, 54, 78, 33, 18, 39, 39, 83, 45, 2, 90, 70, 8, 70, 37, 87, 42, 26, 54, 59, 42, 44, 71, 76, 5, 32, 90, 17, 69, 4, 77, 71, 51, 53, 56, 7, 78, 66, 59, 33, 61, 27, 97, 97, 24, 77, 15, 32, 21, 68, 61, 37, 73, 45, 93, 79, 59, 32, 37, 85, 63, 82, 46, 86, 69, 75, 97, 61, 51, 49, 91, 85, 24, 88, 47, 86, 30, 11, 42, 70, 84, 69, 89, 41, 40, 18, 50, 34, 12, 87, 87, 35, 35, 21, 79, 56, 38, 69, 87, 16, 9, 35, 39, 30, 44, 49, 82, 61, 63, 77, 42, 52, 60, 40, 36, 95, 34, 67, 45, 23, 76, 36, 15, 37, 79, 25, 94, 20, 69, 49, 35, 54, 45, 10, 22, 23, 56, 46, 62, 27, 37, 91, 79, 61, 79, 10, 49, 16, 70, 71, 28, 29, 59, 41, 52, 41, 33, 63, 90, 61, 39, 43, 29, 82, 59, 92, 26, 43, 3, 69, 87, 22, 18, 92, 65, 59, 64, 98, 62, 11, 10, 8, 70, 39, 14, 61, 73, 25, 52, 44, 9, 34, 82, 98, 77, 58, 40, 94, 43, 85, 47, 39, 18, 37, 27, 46, 69, 10, 79, 53, 2, 82, 94, 14, 63, 36, 52, 51, 57, 71, 76, 72, 94, 90, 56, 35, 44, 19, 95, 91, 88, 24, 8, 54, 57, 58, 71, 93, 30, 50, 83, 56, 23, 42, 88, 55, 48, 80, 66, 42, 12, 98, 76, 60, 58, 45, 72, 88, 27, 40, 62, 38, 74, 85, 82, 64, 89, 18, 36, 26, 63, 15, 69, 32, 32, 29, 86, 99, 2, 45, 57, 87, 50, 70, 19, 30, 12, 21, 70, 20, 14, 81, 65, 54, 85, 3, 48, 50, 34, 34, 25, 19, 8, 94, 11, 86, 36, 33, 7, 68, 68, 32, 46, 76, 98, 75, 13, 39, 99, 98, 73, 85, 54, 11, 42, 85, 66, 61, 8, 92, 55, 95, 65, 48, 16, 18, 55, 92, 33, 39, 97, 70, 99, 76, 26, 73, 58, 68, 67, 25, 87, 17, 13, 35, 35, 4, 77, 38, 75, 88, 90, 21, 67, 52, 17, 0, 45, 25, 93, 38, 44, 91, 11, 24, 41, 2, 95, 50, 62, 48, 74, 95, 62, 1, 39, 50, 4, 18, 89, 21, 38, 96, 54, 99, 45, 74, 81, 21, 18, 17, 33, 56, 2, 85, 61, 31, 12, 35, 8, 28, 20, 1, 35, 82, 2]
last_save: 342

Gen:23
TrainFitness:0.7777777777777778
TestFitness:0.4444444444444444
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],-077961.9887).all():
      return False
    else:
      return True
  def adf1(index):
    if np.less(sigmoid(x[index]),+636529.9559).all():
      return True
    else:
      return False
  def adf2(index):
    if np.greater(x[index],+700365.5110).all():
      return False
    else:
      return False
  def adf3(index):
    if np.greater(x[index],+007586.8303).all():
      return False
    else:
      return True
  def adf4(index):
    if np.greater(sigmoid(x[index]),-486680.8901).all():
      return True
    else:
      return False
  def adf5(index):
    if np.greater(np.tanh(x[index]),+024128.7916).all():
      return True
    else:
      return True
  def adf6(index):
    if np.less(sigmoid(x[index]),+385238.6515).all():
      return True
    else:
      return True
  def adf7(index):
    if np.less(sigmoid(x[index]),-250579.5132).all():
      return True
    else:
      return False
  def adf8(index):
    if np.equal(psqrt(x[index]),+809858.5362).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+960.401, adf1(1)*-707.298, adf2(2)*+111.622, adf3(3)*+373.720, adf4(4)*-536.740, adf5(5)*-436.432, adf6(6)*-009.807, adf7(7)*+103.147, adf8(8)*+148.034], [1, 1, 1, 1, 0, 1, 1, 0], 018.325)
result=p(); 0.7777777777777778
IndLenGenome:490
IndGenome:[92, 60, 65, 23, 44, 67, 45, 53, 24, 60, 47, 57, 89, 6, 31, 9, 98, 28, 57, 61, 16, 16, 29, 61, 46, 99, 18, 4, 30, 46, 33, 16, 25, 22, 49, 39, 35, 15, 49, 4, 53, 95, 53, 36, 95, 17, 28, 41, 47, 40, 80, 43, 16, 45, 95, 31, 61, 50, 11, 51, 93, 73, 75, 69, 66, 82, 55, 0, 70, 27, 45, 18, 96, 38, 93, 30, 13, 75, 22, 50, 53, 90, 10, 21, 52, 7, 63, 74, 18, 56, 66, 28, 50, 88, 39, 50, 41, 60, 69, 63, 91, 99, 54, 62, 91, 86, 43, 60, 82, 34, 51, 92, 8, 47, 29, 21, 16, 40, 54, 17, 69, 34, 20, 87, 88, 94, 20, 43, 98, 65, 62, 13, 98, 66, 85, 91, 95, 90, 84, 28, 43, 7, 68, 51, 15, 47, 91, 72, 45, 30, 15, 87, 59, 5, 21, 63, 52, 76, 87, 11, 75, 17, 4, 65, 37, 48, 50, 28, 80, 89, 48, 65, 48, 5, 63, 96, 12, 56, 98, 74, 54, 62, 10, 47, 39, 46, 20, 74, 20, 81, 93, 23, 88, 7, 60, 47, 2, 79, 78, 24, 12, 78, 11, 91, 31, 76, 92, 72, 69, 60, 68, 93, 37, 43, 17, 42, 30, 26, 83, 86, 35, 83, 16, 47, 24, 30, 25, 69, 42, 14, 63, 16, 44, 63, 12, 55, 15, 19, 30, 70, 89, 28, 30, 77, 25, 90, 67, 91, 30, 83, 91, 34, 77, 20, 16, 98, 71, 84, 98, 90, 53, 14, 13, 79, 13, 13, 19, 28, 99, 79, 72, 95, 10, 71, 28, 13, 72, 25, 52, 54, 83, 43, 16, 20, 69, 23, 22, 41, 52, 38, 85, 12, 13, 27, 25, 20, 32, 23, 61, 77, 4, 34, 68, 83, 83, 9, 100, 4, 73, 58, 43, 51, 73, 80, 78, 30, 64, 86, 88, 88, 1, 51, 70, 56, 78, 29, 14, 12, 65, 82, 98, 60, 77, 72, 26, 22, 94, 61, 86, 76, 56, 56, 92, 88, 29, 75, 79, 97, 51, 36, 19, 70, 56, 34, 55, 44, 72, 58, 78, 20, 79, 68, 5, 22, 25, 14, 84, 29, 88, 13, 84, 39, 21, 41, 88, 80, 32, 72, 3, 44, 16, 94, 58, 82, 33, 100, 71, 41, 48, 21, 33, 15, 10, 49, 19, 45, 29, 79, 71, 22, 25, 22, 74, 71, 18, 96, 53, 4, 87, 93, 36, 15, 64, 7, 17, 61, 51, 24, 48, 77, 2, 49, 79, 29, 33, 43, 29, 39, 86, 79, 67, 98, 87, 31, 89, 96, 1, 73, 25, 33, 26, 9, 98, 7, 44, 91, 47, 82, 58, 47, 82, 19, 75, 13, 31, 76, 44, 86, 92, 73, 33, 53, 62, 75, 49, 97, 9, 67, 27, 46, 10, 99, 43, 43, 3, 37, 5, 81, 38, 83, 30, 90, 25, 7, 13, 63, 2, 86, 99, 46]
last_save: 342

Gen:2023
last_save: 342
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.7777777777777778
TestFitness:0.8888888888888888
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],+393533.8919).all():
      return True
    else:
      return False
  def adf1(index):
    if np.equal(sigmoid(x[index]),+392348.9186).all():
      return True
    else:
      return False
  def adf2(index):
    if np.less(x[index],+015751.6841).all():
      return True
    else:
      return False
  def adf3(index):
    if np.equal(np.cos(x[index]),+682770.3426).all():
      return True
    else:
      return False
  def adf4(index):
    if np.equal(np.cos(x[index]),+398364.3166).all():
      return False
    else:
      return False
  def adf5(index):
    if np.equal(rlog(x[index]),+579989.7107).all():
      return True
    else:
      return False
  def adf6(index):
    if np.equal(x[index],+070738.1507).all():
      return True
    else:
      return True
  def adf7(index):
    if np.greater(x[index],-007791.3958).all():
      return True
    else:
      return False
  def adf8(index):
    if np.equal(psqrt(x[index]),-166834.4456).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-717.350, adf1(1)*-236.886, adf2(2)*-772.533, adf3(3)*-122.590, adf4(4)*-533.053, adf5(5)*-988.384, adf6(6)*+836.606, adf7(7)*-835.872, adf8(8)*+292.749], [0, 0, 1, 0, 1, 1, 1, 1], 576.163)
result=p(); 0.7777777777777778
IndLenGenome:417
IndGenome:[65, 5, 61, 2, 79, 63, 71, 40, 5, 24, 23, 62, 83, 59, 57, 48, 61, 75, 63, 57, 67, 79, 18, 72, 3, 85, 99, 77, 67, 70, 20, 56, 95, 77, 8, 16, 85, 46, 91, 79, 49, 7, 39, 74, 49, 11, 68, 41, 27, 61, 11, 79, 67, 60, 94, 81, 89, 65, 49, 18, 99, 22, 23, 75, 18, 77, 32, 39, 15, 49, 71, 43, 39, 67, 20, 26, 72, 39, 91, 43, 79, 99, 65, 86, 50, 83, 72, 73, 43, 63, 55, 86, 57, 61, 95, 61, 87, 33, 19, 27, 77, 61, 2, 13, 29, 36, 38, 87, 61, 54, 81, 50, 14, 85, 71, 34, 66, 84, 14, 58, 53, 64, 47, 18, 65, 98, 13, 26, 29, 89, 56, 23, 98, 30, 26, 70, 72, 52, 88, 42, 8, 65, 19, 25, 68, 97, 90, 95, 98, 30, 40, 48, 45, 26, 11, 58, 2, 72, 59, 16, 17, 60, 25, 17, 31, 63, 46, 47, 65, 45, 36, 63, 42, 87, 8, 42, 58, 68, 92, 99, 88, 17, 49, 12, 63, 97, 53, 80, 73, 55, 72, 55, 91, 77, 20, 70, 26, 94, 67, 13, 57, 40, 35, 34, 93, 44, 68, 84, 22, 22, 49, 33, 96, 73, 13, 53, 73, 34, 78, 19, 49, 46, 49, 14, 79, 99, 27, 71, 99, 79, 46, 22, 98, 83, 59, 88, 53, 48, 85, 77, 67, 88, 90, 8, 46, 85, 69, 21, 74, 25, 30, 44, 91, 50, 56, 65, 57, 12, 91, 68, 45, 11, 60, 42, 81, 82, 83, 98, 26, 49, 63, 66, 97, 13, 94, 83, 51, 46, 20, 96, 18, 76, 54, 87, 91, 17, 62, 6, 72, 56, 19, 1, 88, 16, 86, 31, 75, 100, 82, 68, 86, 93, 44, 76, 85, 38, 79, 12, 84, 29, 1, 4, 41, 73, 19, 12, 17, 81, 77, 26, 88, 95, 81, 52, 89, 20, 78, 59, 24, 72, 37, 34, 20, 94, 72, 62, 97, 83, 23, 57, 28, 60, 47, 6, 42, 52, 13, 40, 26, 65, 96, 63, 77, 76, 92, 3, 60, 98, 35, 88, 78, 85, 61, 53, 49, 46, 95, 8, 7, 41, 72, 75, 15, 95, 88, 13, 86, 41, 64, 84, 36, 24, 19, 84, 41, 58, 99, 35, 17, 57, 41, 84, 93, 88, 100, 25, 92, 1, 3, 45, 2, 14, 42, 67, 72, 8, 64, 21, 54, 80, 100, 90, 43, 62, 98, 84, 40]
last_save: 343

Gen:2001
last_save: 343
Exit:FalseFalseTrue