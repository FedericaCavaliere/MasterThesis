Dataset:Meander/Full.csv
FS:True
Seed:1235
Size:7

Gen:1
TrainFitness:1.0
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(np.sin(x[index]),+152336.9418).all():
      return False
    else:
      return True
  def adf1(index):
    if np.less(x[index],-673240.1519).all():
      return False
    else:
      return True
  def adf2(index):
    if np.less(psqrt(x[index]),+937152.6165).all():
      return False
    else:
      return True
  def adf3(index):
    if np.greater(psqrt(x[index]),+329608.2087).all():
      return True
    else:
      return True
  def adf4(index):
    if np.greater(np.cos(x[index]),-397710.8792).all():
      return False
    else:
      return True
  def adf7(index):
    if np.greater(x[index],-335792.0295).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+861.725, adf1(1)*+659.501, adf2(2)*-884.431, adf3(3)*-301.296, adf4(4)*-159.780, adf7(7)*+097.408], [1, 1, 1, 0, 1], 378.176)
result=p(); 1.0
IndLenGenome:285
IndGenome:[14, 6, 89, 57, 37, 18, 41, 25, 88, 13, 70, 60, 27, 66, 8, 64, 10, 62, 73, 80, 90, 45, 32, 27, 55, 45, 49, 56, 69, 18, 39, 73, 97, 22, 97, 79, 88, 43, 25, 17, 18, 56, 32, 31, 97, 89, 99, 31, 61, 25, 46, 39, 68, 53, 20, 69, 91, 94, 91, 28, 72, 96, 73, 75, 46, 60, 42, 92, 46, 37, 7, 31, 29, 10, 65, 71, 40, 44, 45, 83, 88, 76, 79, 47, 71, 90, 67, 67, 15, 31, 44, 19, 45, 61, 11, 6, 17, 56, 91, 68, 25, 28, 22, 38, 87, 77, 17, 65, 60, 56, 96, 60, 50, 18, 24, 99, 57, 30, 62, 41, 57, 39, 95, 59, 44, 66, 77, 43, 20, 40, 83, 30, 62, 37, 24, 49, 41, 94, 38, 90, 57, 42, 76, 51, 78, 46, 11, 39, 19, 40, 53, 21, 63, 19, 14, 65, 80, 16, 53, 34, 83, 82, 88, 98, 32, 67, 82, 51, 15, 71, 30, 29, 67, 3, 57, 51, 51, 31, 48, 23, 26, 21, 13, 55, 68, 73, 99, 29, 84, 92, 100, 39, 95, 69, 19, 82, 42, 92, 3, 99, 80, 32, 85, 65, 1, 23, 69, 48, 22, 62, 51, 35, 47, 67, 79, 59, 44, 54, 33, 11, 61, 81, 71, 79, 0, 35, 77, 15, 69, 6, 88, 39, 4, 56, 18, 90, 31, 68, 63, 54, 15, 59, 32, 40, 10, 53, 74, 81, 67, 52, 38, 35, 95, 50, 19, 66, 6, 88, 67, 38, 73, 47, 3, 1, 53, 94, 73, 77, 51, 7, 69, 44, 74, 96, 31, 0, 51, 24, 24, 61, 91, 8, 98, 84, 2]
last_save: 711

Gen:1
last_save: 711
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.8333333333333334
TestFitness:1.0
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],+275341.7609).all():
      return False
    else:
      return True
  def adf1(index):
    if np.less(x[index],+267641.1106).all():
      return True
    else:
      return False
  def adf2(index):
    if np.equal(np.tanh(x[index]),+438088.4935).all():
      return True
    else:
      return False
  def adf3(index):
    if np.less(x[index],+038259.4924).all():
      return True
    else:
      return False
  def adf4(index):
    if np.equal(np.sin(x[index]),-110953.2682).all():
      return True
    else:
      return True
  def adf7(index):
    if np.greater(psqrt(x[index]),-327129.4208).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+524.434, adf1(1)*-150.000, adf2(2)*+312.733, adf3(3)*+657.900, adf4(4)*-706.612, adf7(7)*-023.381], [1, 0, 1, 1, 0], 250.928)
result=p(); 0.8333333333333334
IndLenGenome:283
IndGenome:[81, 86, 12, 73, 92, 5, 61, 45, 7, 51, 72, 85, 40, 3, 56, 71, 52, 68, 28, 80, 79, 70, 61, 10, 57, 76, 73, 49, 47, 50, 39, 93, 38, 89, 75, 39, 72, 26, 26, 24, 40, 19, 43, 80, 33, 14, 90, 40, 13, 14, 35, 89, 40, 15, 16, 93, 53, 22, 97, 83, 7, 48, 54, 41, 22, 77, 36, 61, 97, 51, 13, 92, 63, 23, 82, 14, 20, 71, 21, 85, 2, 62, 12, 68, 16, 97, 8, 73, 48, 29, 44, 83, 28, 86, 74, 65, 59, 92, 33, 85, 79, 64, 3, 10, 60, 57, 94, 74, 62, 90, 90, 82, 81, 71, 74, 98, 72, 19, 73, 11, 49, 86, 70, 81, 96, 99, 20, 12, 66, 79, 96, 19, 68, 94, 45, 10, 64, 30, 43, 28, 95, 30, 77, 76, 28, 52, 53, 18, 67, 77, 48, 54, 22, 86, 10, 81, 95, 10, 51, 26, 10, 32, 13, 11, 19, 55, 56, 36, 71, 13, 43, 6, 15, 31, 64, 17, 86, 17, 69, 7, 58, 31, 50, 34, 71, 17, 42, 90, 42, 40, 57, 22, 65, 61, 88, 24, 93, 45, 49, 26, 79, 87, 70, 91, 75, 66, 82, 12, 91, 2, 9, 94, 45, 13, 69, 1, 56, 25, 0, 47, 32, 53, 14, 20, 34, 67, 98, 12, 22, 46, 11, 5, 23, 11, 76, 81, 95, 0, 70, 53, 38, 62, 93, 66, 78, 66, 73, 56, 42, 8, 8, 66, 5, 8, 63, 67, 7, 32, 67, 50, 75, 41, 43, 39, 57, 60, 35, 97, 91, 82, 73, 37, 54, 56, 100, 100, 62, 3, 97, 7, 39, 75, 90]
last_save: 712

Gen:2001
last_save: 712
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],-998062.8615).all():
      return True
    else:
      return True
  def adf1(index):
    if np.greater(x[index],-411151.6250).all():
      return True
    else:
      return True
  def adf2(index):
    if np.equal(x[index],-913159.0860).all():
      return True
    else:
      return True
  def adf3(index):
    if np.greater(x[index],+022672.4776).all():
      return True
    else:
      return False
  def adf4(index):
    if np.less(np.sin(x[index]),+279639.3710).all():
      return False
    else:
      return True
  def adf7(index):
    if np.less(x[index],-726252.0082).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*-750.632, adf1(1)*+978.691, adf2(2)*-385.776, adf3(3)*-865.292, adf4(4)*+600.032, adf7(7)*+427.067], [1, 0, 1, 1, 1], 249.360)
result=p(); 0.8333333333333334
IndLenGenome:280
IndGenome:[44, 70, 65, 4, 1, 8, 30, 23, 56, 39, 60, 92, 26, 69, 76, 17, 45, 97, 1, 72, 74, 74, 15, 87, 5, 59, 82, 37, 57, 35, 6, 50, 38, 4, 48, 71, 51, 95, 93, 94, 75, 59, 29, 71, 15, 59, 60, 79, 86, 56, 97, 81, 66, 73, 83, 70, 12, 12, 51, 96, 50, 26, 58, 47, 66, 82, 28, 56, 45, 60, 47, 9, 70, 38, 5, 42, 70, 47, 83, 52, 83, 46, 71, 40, 62, 30, 26, 77, 67, 56, 78, 17, 68, 40, 62, 94, 25, 15, 57, 57, 77, 10, 46, 46, 89, 78, 70, 12, 72, 25, 14, 67, 80, 70, 88, 55, 60, 91, 99, 30, 33, 82, 60, 75, 93, 81, 86, 47, 59, 51, 55, 11, 64, 25, 1, 37, 39, 14, 95, 31, 20, 12, 85, 10, 78, 63, 95, 25, 22, 72, 55, 6, 31, 71, 65, 76, 64, 36, 59, 27, 26, 52, 76, 90, 58, 29, 56, 99, 23, 98, 27, 81, 66, 28, 18, 43, 36, 67, 52, 62, 70, 25, 86, 58, 19, 99, 32, 41, 13, 79, 49, 26, 20, 48, 49, 15, 9, 81, 94, 59, 48, 15, 23, 57, 85, 2, 8, 15, 33, 44, 10, 9, 86, 73, 0, 4, 59, 97, 76, 21, 89, 70, 64, 42, 56, 85, 23, 31, 64, 69, 45, 48, 78, 91, 16, 66, 35, 98, 15, 80, 48, 4, 25, 75, 72, 92, 7, 16, 15, 26, 22, 34, 0, 12, 9, 89, 69, 18, 54, 97, 86, 1, 30, 62, 46, 13, 64, 52, 41, 15, 97, 95, 29, 89, 36, 87, 61, 44, 8, 98]
last_save: 713

Gen:2001
last_save: 713
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],+266642.7232).all():
      return True
    else:
      return True
  def adf1(index):
    if np.equal(np.sin(x[index]),+515283.6950).all():
      return True
    else:
      return True
  def adf2(index):
    if np.greater(psqrt(x[index]),-069862.2305).all():
      return False
    else:
      return False
  def adf3(index):
    if np.greater(sigmoid(x[index]),+265018.3743).all():
      return False
    else:
      return True
  def adf4(index):
    if np.greater(x[index],+124590.2608).all():
      return False
    else:
      return False
  def adf7(index):
    if np.equal(np.tanh(x[index]),+982949.8090).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+169.219, adf1(1)*-694.543, adf2(2)*+713.587, adf3(3)*-435.394, adf4(4)*-834.677, adf7(7)*+613.434], [0, 1, 0, 0, 0], 850.174)
result=p(); 0.6666666666666666
IndLenGenome:285
IndGenome:[62, 10, 10, 93, 8, 76, 57, 43, 54, 97, 35, 19, 57, 61, 84, 94, 19, 25, 21, 82, 24, 57, 37, 80, 10, 48, 92, 55, 19, 53, 30, 47, 69, 48, 23, 13, 98, 40, 79, 20, 19, 54, 90, 23, 49, 66, 24, 74, 28, 17, 68, 23, 92, 7, 16, 51, 67, 71, 33, 22, 92, 34, 32, 80, 22, 48, 57, 93, 94, 21, 54, 22, 11, 97, 68, 37, 21, 92, 66, 95, 3, 93, 66, 89, 15, 39, 18, 24, 65, 59, 13, 12, 94, 18, 72, 22, 94, 36, 30, 89, 71, 92, 20, 67, 83, 71, 10, 88, 99, 74, 36, 67, 70, 29, 38, 34, 58, 62, 46, 43, 70, 91, 49, 69, 46, 18, 32, 99, 7, 18, 11, 40, 10, 96, 16, 85, 39, 87, 8, 95, 13, 84, 81, 29, 73, 84, 35, 24, 45, 21, 75, 56, 33, 70, 29, 46, 80, 43, 46, 23, 61, 45, 95, 78, 67, 89, 84, 34, 42, 72, 6, 25, 13, 42, 21, 43, 20, 67, 87, 11, 33, 94, 82, 65, 36, 94, 38, 13, 80, 80, 51, 76, 79, 96, 48, 2, 25, 63, 34, 81, 62, 77, 80, 0, 10, 84, 40, 58, 5, 77, 26, 84, 36, 42, 12, 8, 39, 60, 34, 81, 30, 73, 71, 13, 5, 6, 88, 35, 12, 95, 23, 43, 37, 25, 80, 3, 2, 13, 0, 100, 9, 81, 80, 91, 34, 28, 33, 12, 5, 20, 66, 45, 52, 97, 82, 19, 63, 10, 99, 92, 79, 96, 87, 100, 24, 75, 9, 87, 12, 11, 1, 60, 75, 22, 36, 25, 0, 45, 87, 26, 96, 26, 69, 27, 48]
last_save: 714

Gen:7
TrainFitness:0.8333333333333334
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(np.cos(x[index]),+782899.9973).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(x[index],-813343.8323).all():
      return True
    else:
      return False
  def adf2(index):
    if np.less(x[index],+300984.4281).all():
      return False
    else:
      return False
  def adf3(index):
    if np.greater(x[index],+603868.7233).all():
      return True
    else:
      return False
  def adf4(index):
    if np.greater(psqrt(x[index]),-390022.6472).all():
      return True
    else:
      return True
  def adf7(index):
    if np.greater(x[index],+023894.7036).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*-137.438, adf1(1)*-580.908, adf2(2)*+283.352, adf3(3)*+926.765, adf4(4)*-108.832, adf7(7)*+932.449], [1, 1, 0, 0, 1], 296.568)
result=p(); 0.8333333333333334
IndLenGenome:469
IndGenome:[63, 64, 56, 99, 39, 58, 7, 38, 84, 5, 57, 68, 82, 48, 19, 49, 89, 59, 67, 3, 31, 61, 71, 41, 73, 73, 99, 41, 33, 98, 61, 93, 23, 4, 93, 88, 23, 22, 53, 90, 65, 27, 13, 55, 97, 68, 64, 30, 53, 30, 20, 59, 58, 14, 14, 22, 68, 11, 71, 93, 43, 93, 57, 81, 30, 10, 61, 6, 50, 63, 78, 16, 48, 77, 42, 53, 23, 80, 67, 77, 69, 57, 4, 35, 32, 71, 54, 53, 79, 60, 40, 22, 12, 86, 84, 57, 2, 22, 82, 51, 5, 78, 41, 60, 40, 45, 80, 72, 3, 88, 39, 94, 57, 90, 83, 76, 77, 48, 15, 18, 79, 67, 25, 21, 93, 17, 44, 43, 8, 69, 7, 22, 35, 18, 40, 79, 90, 58, 60, 20, 49, 62, 8, 83, 63, 85, 22, 95, 50, 74, 89, 22, 76, 27, 36, 85, 66, 11, 87, 71, 20, 68, 18, 3, 12, 39, 66, 65, 19, 23, 62, 84, 4, 69, 17, 11, 77, 72, 48, 61, 92, 12, 99, 66, 25, 26, 38, 81, 11, 40, 18, 41, 61, 93, 32, 91, 11, 11, 53, 70, 52, 81, 68, 90, 73, 29, 45, 6, 27, 10, 98, 99, 44, 54, 43, 62, 24, 13, 19, 37, 33, 51, 87, 24, 15, 49, 46, 32, 55, 17, 73, 66, 40, 54, 44, 26, 80, 20, 12, 58, 72, 17, 10, 95, 15, 35, 20, 51, 30, 89, 65, 11, 86, 43, 62, 37, 19, 28, 53, 39, 49, 77, 90, 76, 57, 15, 83, 81, 57, 47, 41, 92, 65, 52, 54, 58, 45, 18, 13, 37, 73, 55, 98, 23, 64, 47, 94, 78, 55, 72, 39, 92, 77, 92, 85, 51, 20, 76, 83, 78, 36, 41, 29, 48, 31, 59, 54, 20, 81, 29, 65, 46, 60, 44, 44, 58, 32, 59, 77, 61, 37, 39, 77, 38, 20, 74, 68, 63, 42, 75, 34, 36, 91, 58, 61, 31, 78, 15, 55, 26, 88, 29, 44, 72, 50, 68, 78, 74, 67, 76, 60, 86, 41, 64, 49, 40, 35, 99, 24, 67, 53, 67, 43, 25, 27, 45, 62, 56, 64, 81, 18, 70, 79, 85, 87, 69, 82, 97, 15, 58, 24, 47, 28, 43, 37, 53, 77, 44, 61, 16, 48, 32, 78, 73, 13, 42, 13, 66, 38, 90, 6, 6, 82, 17, 86, 99, 62, 64, 33, 52, 1, 34, 6, 58, 22, 86, 35, 97, 3, 18, 48, 21, 39, 80, 67, 97, 4, 68, 7, 66, 99, 33, 49, 56, 100, 64, 38, 79, 0, 5, 93, 29, 92, 92, 57, 45, 33, 39, 32, 77, 71, 68, 34, 64, 100, 91, 7, 5, 74, 77, 42, 94, 44, 96, 48, 11, 22, 34, 3]
last_save: 714

Gen:2007
last_save: 714
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(np.tanh(x[index]),-454942.5924).all():
      return True
    else:
      return False
  def adf1(index):
    if np.less(x[index],-415052.7048).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(x[index],+964502.2931).all():
      return True
    else:
      return True
  def adf3(index):
    if np.greater(x[index],+030977.8633).all():
      return False
    else:
      return True
  def adf4(index):
    if np.equal(x[index],+242449.9955).all():
      return True
    else:
      return True
  def adf7(index):
    if np.less(x[index],-342405.9148).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+581.361, adf1(1)*+433.939, adf2(2)*-213.128, adf3(3)*+539.007, adf4(4)*+269.074, adf7(7)*+046.551], [0, 0, 1, 1, 1], 690.870)
result=p(); 0.8333333333333334
IndLenGenome:280
IndGenome:[47, 57, 29, 52, 2, 81, 24, 74, 70, 93, 43, 99, 97, 74, 23, 97, 12, 40, 87, 42, 12, 33, 3, 81, 69, 68, 84, 57, 89, 92, 70, 41, 67, 88, 60, 79, 14, 98, 55, 66, 1, 55, 84, 2, 95, 75, 14, 29, 80, 73, 4, 90, 70, 37, 9, 44, 65, 24, 51, 75, 42, 52, 99, 69, 43, 84, 95, 30, 65, 61, 53, 28, 38, 51, 11, 83, 79, 35, 56, 95, 14, 72, 33, 44, 97, 86, 49, 95, 87, 56, 13, 19, 26, 99, 63, 11, 78, 64, 59, 74, 34, 68, 42, 49, 38, 90, 57, 87, 10, 58, 39, 83, 98, 18, 70, 81, 86, 63, 42, 71, 22, 24, 37, 57, 63, 90, 59, 85, 15, 72, 52, 95, 24, 10, 13, 70, 55, 9, 24, 17, 56, 95, 35, 40, 44, 40, 29, 22, 34, 14, 27, 59, 85, 87, 69, 72, 88, 81, 12, 52, 89, 26, 6, 54, 59, 25, 71, 10, 10, 65, 73, 40, 44, 80, 92, 89, 45, 79, 14, 44, 35, 95, 42, 42, 34, 35, 34, 72, 73, 51, 65, 49, 33, 25, 9, 85, 37, 58, 64, 48, 70, 6, 51, 31, 30, 57, 66, 62, 7, 34, 28, 38, 24, 2, 51, 7, 78, 2, 74, 65, 37, 93, 62, 47, 93, 79, 25, 88, 39, 70, 23, 77, 24, 44, 64, 65, 53, 48, 39, 44, 36, 32, 82, 52, 40, 35, 65, 0, 3, 69, 91, 19, 87, 53, 95, 91, 100, 19, 73, 75, 18, 14, 23, 75, 40, 93, 64, 21, 63, 24, 40, 10, 65, 94, 11, 6, 91, 24, 4, 86]
last_save: 715

Gen:2001
last_save: 715
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:1.0
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(sigmoid(x[index]),+127016.4300).all():
      return True
    else:
      return True
  def adf1(index):
    if np.less(x[index],-043607.0420).all():
      return False
    else:
      return False
  def adf2(index):
    if np.less(rlog(x[index]),+696399.0364).all():
      return True
    else:
      return True
  def adf3(index):
    if np.greater(psqrt(x[index]),-433159.6728).all():
      return False
    else:
      return True
  def adf4(index):
    if np.greater(np.cos(x[index]),+739567.7534).all():
      return False
    else:
      return False
  def adf7(index):
    if np.less(np.cos(x[index]),+048180.9296).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+251.947, adf1(1)*+389.508, adf2(2)*+360.608, adf3(3)*+500.487, adf4(4)*-311.202, adf7(7)*+605.745], [1, 1, 0, 0, 1], 021.881)
result=p(); 0.6666666666666666
IndLenGenome:286
IndGenome:[55, 39, 58, 51, 57, 80, 31, 9, 31, 30, 73, 61, 13, 54, 87, 83, 84, 22, 22, 73, 9, 82, 62, 33, 61, 57, 50, 61, 85, 40, 17, 64, 38, 41, 28, 56, 96, 40, 41, 53, 81, 30, 55, 85, 30, 57, 99, 84, 10, 70, 44, 43, 79, 84, 80, 9, 67, 95, 9, 62, 38, 80, 37, 13, 71, 89, 71, 72, 36, 99, 50, 97, 56, 97, 34, 36, 40, 23, 83, 90, 92, 69, 44, 55, 57, 40, 28, 87, 69, 68, 58, 59, 85, 80, 83, 71, 17, 60, 56, 34, 101, 37, 52, 66, 92, 73, 95, 72, 58, 41, 91, 94, 99, 24, 61, 32, 8, 56, 29, 82, 57, 86, 33, 34, 70, 40, 25, 84, 76, 71, 70, 92, 91, 86, 28, 30, 92, 61, 48, 75, 48, 20, 42, 82, 70, 65, 65, 35, 66, 39, 19, 10, 86, 66, 84, 58, 50, 86, 29, 23, 27, 63, 60, 3, 56, 14, 22, 66, 40, 45, 74, 48, 54, 30, 86, 49, 69, 13, 90, 45, 27, 63, 38, 31, 24, 36, 68, 49, 85, 69, 93, 71, 69, 31, 50, 85, 95, 14, 5, 34, 60, 39, 68, 97, 73, 91, 94, 42, 38, 100, 42, 30, 33, 52, 40, 0, 15, 6, 54, 3, 4, 18, 93, 79, 58, 6, 9, 98, 73, 5, 73, 86, 59, 86, 27, 49, 4, 39, 59, 73, 89, 4, 3, 100, 36, 13, 68, 36, 9, 12, 13, 59, 28, 66, 9, 18, 95, 60, 7, 67, 0, 11, 95, 93, 63, 42, 13, 24, 76, 57, 81, 18, 7, 42, 92, 61, 7, 62, 64, 14, 94, 69, 18, 66, 81, 87]
last_save: 716

Gen:4
TrainFitness:0.8333333333333334
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(np.cos(x[index]),-396337.2176).all():
      return True
    else:
      return False
  def adf1(index):
    if np.less(x[index],+551971.8152).all():
      return True
    else:
      return False
  def adf2(index):
    if np.less(np.cos(x[index]),-865486.0254).all():
      return True
    else:
      return True
  def adf3(index):
    if np.less(x[index],+013787.0788).all():
      if np.equal(np.sin(x[index]),-198392.8217).all():
        return True
      else:
        return True
      return False
    else:
      if np.less(x[index],-030762.4779).all():
        return True
      else:
        return False
      return False
  def adf4(index):
    if np.greater(np.tanh(x[index]),+948924.2848).all():
      if np.less(x[index],+219839.2891).all():
        return False
      else:
        return True
      return True
    else:
      if np.greater(np.cos(x[index]),-030763.4605).all():
        return False
      else:
        return True
      return False
  def adf7(index):
    if np.greater(x[index],-848536.1895).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*-212.868, adf1(1)*-433.571, adf2(2)*+724.804, adf3(3)*-820.703, adf4(4)*-926.117, adf7(7)*+510.442], [1, 1, 0, 1, 1], 929.311)
result=p(); 0.8333333333333334
IndLenGenome:411
IndGenome:[28, 4, 99, 51, 38, 28, 61, 53, 23, 81, 33, 19, 16, 63, 3, 47, 32, 31, 37, 66, 46, 27, 24, 87, 16, 25, 68, 92, 50, 35, 45, 61, 19, 97, 61, 8, 21, 25, 52, 24, 75, 1, 37, 13, 68, 79, 83, 21, 76, 28, 56, 45, 54, 78, 96, 50, 92, 85, 4, 98, 48, 70, 40, 80, 82, 33, 79, 86, 54, 50, 91, 13, 67, 68, 77, 30, 37, 38, 48, 95, 101, 22, 12, 99, 7, 12, 41, 99, 48, 53, 99, 82, 88, 32, 41, 47, 62, 62, 89, 87, 34, 49, 30, 61, 55, 20, 23, 10, 47, 6, 62, 34, 97, 47, 69, 32, 83, 13, 95, 70, 25, 69, 86, 14, 42, 20, 64, 29, 24, 8, 99, 72, 54, 72, 48, 84, 68, 45, 73, 23, 99, 88, 16, 12, 41, 99, 48, 53, 99, 82, 88, 59, 41, 47, 62, 62, 89, 87, 34, 49, 30, 61, 55, 20, 23, 10, 47, 6, 43, 4, 16, 70, 95, 57, 74, 1, 89, 71, 57, 5, 97, 23, 68, 58, 84, 68, 75, 93, 76, 51, 28, 89, 65, 8, 96, 55, 96, 52, 83, 25, 62, 51, 72, 48, 56, 58, 81, 43, 75, 44, 83, 43, 25, 17, 81, 16, 24, 40, 87, 82, 84, 98, 50, 34, 43, 57, 45, 58, 82, 40, 47, 90, 33, 72, 9, 93, 79, 22, 26, 81, 41, 17, 29, 80, 27, 25, 41, 60, 14, 94, 72, 94, 7, 93, 58, 13, 65, 34, 29, 32, 39, 33, 61, 61, 93, 95, 79, 68, 22, 82, 61, 91, 39, 40, 28, 14, 21, 44, 32, 96, 36, 91, 94, 10, 49, 18, 43, 31, 76, 95, 51, 65, 50, 55, 29, 69, 67, 69, 4, 52, 40, 95, 86, 11, 99, 32, 56, 91, 48, 47, 43, 92, 31, 50, 45, 84, 63, 20, 28, 65, 98, 97, 19, 6, 61, 47, 86, 96, 100, 92, 35, 53, 48, 3, 87, 61, 73, 23, 62, 62, 49, 25, 21, 81, 3, 61, 67, 54, 93, 72, 84, 10, 84, 96, 37, 56, 52, 56, 38, 25, 26, 50, 73, 80, 78, 68, 76, 83, 13, 37, 83, 16, 20, 89, 8, 80, 33, 74, 44, 97, 46, 68, 89, 37, 83, 42, 47, 38, 97, 79, 86, 10, 10, 33, 67, 51, 61, 87, 60, 1, 52, 99, 58, 14, 37, 14, 10, 16, 21, 50, 6]
last_save: 716

Gen:2004
last_save: 716
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(np.cos(x[index]),-664530.7388).all():
      return False
    else:
      return True
  def adf1(index):
    if np.less(x[index],+332396.8504).all():
      return True
    else:
      return True
  def adf2(index):
    if np.greater(x[index],+226560.8590).all():
      return False
    else:
      return False
  def adf3(index):
    if np.less(x[index],+820590.8189).all():
      return True
    else:
      return False
  def adf4(index):
    if np.equal(np.sin(x[index]),+444772.0545).all():
      return True
    else:
      return True
  def adf7(index):
    if np.greater(sigmoid(x[index]),+738324.2004).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-368.697, adf1(1)*+740.538, adf2(2)*+789.868, adf3(3)*+601.502, adf4(4)*+390.312, adf7(7)*-223.249], [1, 0, 1, 1, 1], 938.765)
result=p(); 0.6666666666666666
IndLenGenome:283
IndGenome:[45, 90, 53, 63, 86, 77, 35, 36, 82, 57, 11, 76, 7, 27, 84, 37, 59, 56, 48, 17, 63, 13, 94, 44, 78, 73, 12, 3, 81, 76, 70, 16, 70, 88, 82, 64, 72, 52, 29, 63, 87, 18, 34, 2, 9, 74, 40, 27, 23, 31, 15, 59, 98, 12, 33, 48, 22, 77, 32, 66, 50, 12, 42, 98, 81, 79, 36, 99, 75, 43, 59, 79, 90, 42, 59, 35, 26, 10, 12, 58, 50, 61, 92, 10, 21, 18, 24, 55, 13, 48, 55, 36, 44, 16, 44, 67, 94, 44, 97, 17, 69, 55, 63, 31, 43, 59, 78, 35, 31, 15, 52, 45, 10, 53, 23, 43, 44, 35, 6, 83, 66, 97, 96, 73, 85, 79, 43, 13, 92, 10, 62, 93, 76, 11, 38, 46, 30, 49, 80, 19, 68, 18, 20, 18, 99, 63, 64, 92, 45, 82, 43, 77, 78, 18, 71, 16, 77, 27, 82, 23, 23, 70, 10, 58, 47, 76, 88, 53, 89, 91, 77, 56, 86, 54, 35, 95, 32, 58, 99, 77, 78, 59, 93, 52, 23, 32, 62, 39, 14, 45, 73, 19, 19, 3, 42, 39, 37, 61, 50, 93, 94, 68, 87, 88, 97, 20, 84, 54, 68, 29, 92, 45, 92, 84, 36, 79, 74, 79, 32, 20, 100, 56, 99, 64, 85, 43, 85, 22, 36, 42, 28, 70, 18, 95, 2, 80, 40, 17, 65, 14, 33, 43, 74, 46, 35, 32, 56, 14, 52, 43, 68, 3, 61, 2, 25, 69, 99, 56, 77, 82, 55, 10, 30, 84, 28, 78, 73, 26, 4, 79, 17, 83, 66, 93, 20, 4, 47, 73, 28, 95, 55, 64, 52]
last_save: 717

Gen:3
TrainFitness:0.8333333333333334
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],-629835.6099).all():
      return True
    else:
      return False
  def adf1(index):
    if np.greater(x[index],+371111.4501).all():
      return True
    else:
      return False
  def adf2(index):
    if np.greater(x[index],-116844.8132).all():
      if np.equal(x[index],+843063.7768).all():
        return False
      else:
        return True
      return False
    else:
      if np.equal(psqrt(x[index]),+719060.5442).all():
        if np.greater(x[index],+273380.4062).all():
          return False
        else:
          return False
        return False
      else:
        if np.greater(np.tanh(x[index]),-391861.9937).all():
          return True
        else:
          return True
        return True
      return True
  def adf3(index):
    if np.less(np.sin(x[index]),-923774.3999).all():
      if np.greater(x[index],+549534.9524).all():
        return False
      else:
        return True
      return False
    else:
      if np.less(x[index],+036206.7233).all():
        return True
      else:
        return False
      return False
  def adf4(index):
    if np.greater(x[index],-954211.4332).all():
      return True
    else:
      return True
  def adf7(index):
    if np.equal(x[index],-397506.6931).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*-271.278, adf1(1)*-995.875, adf2(2)*-482.912, adf3(3)*-548.450, adf4(4)*-140.052, adf7(7)*-298.072], [0, 0, 0, 1, 1], 556.064)
result=p(); 0.8333333333333334
IndLenGenome:333
IndGenome:[59, 7, 85, 47, 18, 15, 7, 91, 16, 26, 22, 19, 78, 63, 5, 56, 70, 49, 99, 60, 9, 15, 41, 69, 49, 43, 28, 88, 83, 57, 81, 51, 91, 41, 34, 25, 20, 31, 20, 55, 47, 26, 38, 33, 15, 42, 37, 76, 91, 51, 46, 38, 4, 94, 58, 61, 63, 32, 87, 26, 43, 39, 8, 90, 18, 44, 33, 50, 66, 53, 47, 87, 76, 48, 17, 72, 49, 94, 39, 59, 24, 35, 71, 28, 34, 97, 21, 99, 20, 56, 30, 25, 94, 34, 92, 71, 75, 69, 51, 56, 90, 62, 57, 83, 93, 58, 20, 74, 40, 76, 22, 55, 77, 61, 95, 57, 70, 92, 59, 41, 13, 13, 79, 71, 48, 16, 91, 59, 59, 93, 7, 12, 96, 62, 74, 20, 72, 76, 25, 32, 90, 81, 39, 75, 79, 82, 23, 27, 87, 14, 33, 19, 99, 79, 79, 36, 97, 83, 38, 79, 85, 34, 89, 55, 43, 54, 79, 95, 32, 14, 45, 16, 41, 91, 7, 73, 65, 32, 38, 20, 73, 86, 62, 80, 56, 67, 12, 63, 63, 68, 27, 75, 86, 67, 87, 37, 84, 9, 51, 59, 85, 64, 52, 91, 81, 64, 23, 73, 22, 44, 52, 99, 67, 83, 11, 46, 39, 44, 63, 79, 57, 55, 20, 16, 86, 29, 13, 41, 63, 31, 47, 87, 23, 69, 98, 62, 17, 71, 62, 37, 28, 84, 41, 27, 89, 99, 65, 98, 47, 45, 36, 67, 81, 94, 8, 92, 89, 41, 2, 25, 97, 13, 45, 44, 28, 34, 15, 40, 57, 47, 68, 51, 54, 100, 90, 85, 52, 41, 87, 12, 92, 49, 28, 50, 17, 22, 0, 10, 14, 54, 25, 97, 73, 85, 85, 56, 40, 86, 34, 83, 98, 94, 21, 40, 80, 29, 66, 92, 93, 87, 17, 3, 46, 32, 19, 95, 72, 4, 51, 20, 51, 83, 100, 84, 62, 99, 62, 17, 93, 79, 93, 62, 68]
last_save: 717

Gen:2003
last_save: 717
Exit:FalseFalseTrue