Dataset:Meander/Full.csv
FS:False
Seed:1234
Size:7

Gen:1
TrainFitness:0.8888888888888888
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(np.sin(x[index]),+429370.2979).all():
      return False
    else:
      return False
  def adf1(index):
    if np.equal(np.cos(x[index]),+895507.8221).all():
      return True
    else:
      return False
  def adf2(index):
    if np.equal(rlog(x[index]),-621869.8790).all():
      return True
    else:
      return True
  def adf3(index):
    if np.less(x[index],-013509.8292).all():
      return False
    else:
      return True
  def adf4(index):
    if np.greater(np.tanh(x[index]),+272555.6087).all():
      return True
    else:
      return False
  def adf5(index):
    if np.less(x[index],+249513.4566).all():
      return False
    else:
      return False
  def adf6(index):
    if np.equal(x[index],-602764.5329).all():
      return False
    else:
      return False
  def adf7(index):
    if np.less(np.cos(x[index]),+311718.3620).all():
      return False
    else:
      return False
  def adf8(index):
    if np.equal(x[index],-753322.8148).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+067.409, adf1(1)*+246.460, adf2(2)*-340.741, adf3(3)*+007.499, adf4(4)*-952.643, adf5(5)*-221.093, adf6(6)*+010.726, adf7(7)*+849.723, adf8(8)*+520.218], [0, 0, 0, 0, 0, 1, 1, 0], 269.295)
result=p(); 0.8888888888888888
IndLenGenome:417
IndGenome:[69, 1, 56, 13, 46, 2, 88, 14, 11, 99, 76, 91, 75, 86, 97, 98, 48, 11, 59, 65, 90, 40, 29, 59, 37, 92, 23, 17, 74, 48, 68, 10, 32, 7, 78, 73, 78, 94, 5, 18, 50, 98, 99, 22, 77, 42, 15, 62, 18, 71, 2, 46, 79, 30, 88, 61, 82, 79, 82, 86, 91, 43, 93, 65, 91, 20, 61, 77, 38, 85, 39, 56, 52, 7, 12, 22, 18, 54, 88, 88, 75, 32, 41, 89, 97, 47, 35, 65, 40, 61, 55, 14, 6, 43, 14, 14, 42, 72, 63, 89, 70, 51, 53, 27, 10, 89, 82, 22, 44, 97, 77, 92, 60, 45, 27, 44, 10, 49, 40, 85, 94, 22, 46, 16, 56, 83, 2, 48, 87, 5, 82, 86, 88, 81, 96, 31, 70, 79, 99, 80, 58, 30, 12, 27, 14, 48, 39, 73, 16, 82, 73, 20, 12, 33, 49, 15, 60, 39, 45, 34, 49, 73, 74, 40, 62, 76, 69, 70, 87, 86, 12, 78, 66, 35, 36, 35, 35, 81, 86, 79, 21, 32, 72, 32, 39, 72, 27, 88, 66, 75, 95, 97, 80, 57, 58, 64, 13, 48, 83, 35, 35, 81, 29, 24, 44, 49, 83, 77, 38, 90, 41, 68, 92, 25, 85, 74, 90, 92, 85, 88, 97, 67, 60, 67, 85, 96, 60, 66, 31, 47, 52, 72, 92, 58, 14, 30, 80, 51, 12, 91, 57, 88, 86, 85, 63, 65, 39, 61, 86, 31, 99, 43, 71, 20, 46, 51, 96, 50, 23, 87, 19, 31, 55, 25, 42, 39, 43, 64, 64, 85, 87, 82, 88, 66, 72, 84, 87, 12, 77, 31, 65, 67, 16, 100, 39, 22, 40, 62, 58, 92, 86, 64, 41, 37, 84, 58, 3, 1, 70, 62, 10, 56, 8, 7, 94, 93, 18, 14, 56, 88, 77, 22, 16, 26, 97, 52, 13, 37, 23, 42, 19, 51, 31, 91, 96, 86, 13, 77, 99, 29, 81, 13, 89, 0, 3, 80, 26, 69, 17, 6, 17, 15, 17, 39, 15, 6, 88, 60, 0, 46, 94, 7, 7, 62, 12, 52, 23, 44, 16, 10, 96, 13, 80, 78, 76, 23, 31, 70, 44, 56, 50, 60, 16, 30, 96, 30, 79, 97, 82, 66, 75, 16, 67, 68, 57, 51, 23, 89, 63, 33, 35, 32, 64, 72, 24, 53, 19, 46, 42, 83, 73, 59, 2, 82, 65, 32, 4, 98, 68, 84, 81, 6, 2, 8, 75, 24, 11]
last_save: 701

Gen:2001
last_save: 701
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.8888888888888888
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(sigmoid(x[index]),+902457.7656).all():
      return True
    else:
      return True
  def adf1(index):
    if np.greater(x[index],+727053.1073).all():
      return True
    else:
      return True
  def adf2(index):
    if np.equal(np.tanh(x[index]),+511531.5861).all():
      return True
    else:
      return True
  def adf3(index):
    if np.equal(x[index],-303767.1121).all():
      return False
    else:
      return False
  def adf4(index):
    if np.equal(x[index],-703459.7204).all():
      return True
    else:
      return True
  def adf5(index):
    if np.greater(x[index],+245005.3298).all():
      return True
    else:
      return False
  def adf6(index):
    if np.less(x[index],-402554.3071).all():
      return False
    else:
      return True
  def adf7(index):
    if np.greater(np.sin(x[index]),+470098.4537).all():
      return True
    else:
      return False
  def adf8(index):
    if np.equal(x[index],-793040.9714).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+339.630, adf1(1)*+592.295, adf2(2)*-558.402, adf3(3)*+234.989, adf4(4)*+293.264, adf5(5)*+603.031, adf6(6)*-698.416, adf7(7)*-241.928, adf8(8)*-183.913], [1, 1, 1, 1, 1, 0, 0, 0], 990.340)
result=p(); 0.6666666666666666
IndLenGenome:414
IndGenome:[74, 18, 89, 93, 28, 56, 14, 56, 79, 46, 90, 3, 94, 64, 56, 11, 93, 89, 38, 17, 5, 48, 17, 37, 35, 4, 45, 76, 85, 50, 54, 29, 95, 33, 66, 51, 63, 70, 58, 15, 18, 11, 66, 64, 79, 46, 30, 25, 50, 50, 27, 69, 89, 76, 68, 86, 12, 59, 6, 19, 59, 34, 49, 94, 80, 59, 75, 16, 34, 72, 97, 44, 92, 30, 79, 10, 10, 14, 9, 51, 95, 50, 51, 59, 43, 48, 83, 77, 37, 89, 17, 23, 94, 98, 92, 47, 50, 22, 46, 47, 47, 22, 99, 15, 52, 88, 79, 31, 81, 12, 61, 66, 47, 31, 97, 78, 62, 85, 46, 46, 84, 59, 12, 29, 46, 31, 43, 56, 12, 76, 88, 18, 34, 35, 74, 97, 95, 15, 53, 60, 42, 25, 34, 64, 39, 42, 23, 45, 49, 45, 21, 5, 19, 74, 99, 55, 10, 70, 34, 24, 30, 99, 28, 58, 59, 57, 64, 44, 89, 49, 35, 90, 22, 54, 54, 95, 84, 17, 12, 86, 86, 60, 94, 85, 12, 63, 10, 77, 49, 48, 12, 85, 60, 60, 11, 23, 75, 61, 45, 63, 84, 90, 52, 17, 25, 32, 81, 70, 38, 79, 53, 76, 93, 28, 34, 97, 31, 70, 84, 85, 17, 67, 95, 33, 19, 57, 91, 82, 93, 70, 69, 52, 62, 82, 58, 56, 33, 98, 43, 21, 79, 93, 54, 15, 90, 66, 53, 76, 66, 52, 40, 20, 47, 70, 79, 53, 10, 14, 20, 90, 11, 24, 41, 51, 61, 30, 42, 63, 71, 41, 13, 35, 31, 13, 20, 83, 82, 30, 47, 34, 2, 5, 28, 47, 47, 81, 27, 12, 48, 22, 42, 15, 60, 13, 0, 14, 22, 42, 72, 19, 47, 14, 34, 63, 74, 86, 71, 39, 97, 0, 42, 32, 92, 21, 36, 26, 28, 100, 60, 39, 18, 15, 74, 75, 58, 73, 39, 95, 17, 69, 58, 24, 9, 24, 58, 51, 32, 0, 62, 97, 51, 45, 52, 60, 20, 51, 22, 97, 9, 71, 77, 99, 29, 16, 31, 33, 5, 19, 63, 79, 26, 41, 83, 17, 92, 33, 91, 72, 47, 85, 78, 0, 66, 74, 31, 84, 69, 59, 7, 10, 60, 37, 89, 80, 90, 98, 71, 27, 17, 24, 22, 85, 13, 52, 46, 49, 37, 24, 65, 51, 26, 69, 16, 73, 75, 66, 51, 61, 38, 15, 26, 29, 69, 76]
last_save: 702

Gen:10
TrainFitness:0.7777777777777778
TestFitness:0.7777777777777778
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(sigmoid(x[index]),-563073.2714).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(psqrt(x[index]),+455064.3515).all():
      return False
    else:
      return True
  def adf2(index):
    if np.less(rlog(x[index]),-956056.8620).all():
      return True
    else:
      return False
  def adf3(index):
    if np.greater(np.sin(x[index]),+119533.7114).all():
      return False
    else:
      return False
  def adf4(index):
    if np.equal(sigmoid(x[index]),+062679.5068).all():
      return True
    else:
      return False
  def adf5(index):
    if np.less(np.sin(x[index]),-469507.7957).all():
      return False
    else:
      return False
  def adf6(index):
    if np.greater(np.tanh(x[index]),+119879.8332).all():
      return True
    else:
      return True
  def adf7(index):
    if np.less(x[index],-908504.3175).all():
      if np.greater(x[index],+527996.8468).all():
        return True
      else:
        return False
      return True
    else:
      if np.greater(x[index],-148181.9049).all():
        return False
      else:
        return False
      return False
  def adf8(index):
    if np.equal(rlog(x[index]),+064652.8657).all():
      if np.greater(np.cos(x[index]),-843580.8953).all():
        return True
      else:
        return True
      return True
    else:
      if np.greater(x[index],+261888.6763).all():
        if np.less(x[index],-209478.2695).all():
          return True
        else:
          return False
        return True
      else:
        if np.greater(x[index],+016049.3251).all():
          return True
        else:
          return False
        return False
      return True
  return multiple_operation([adf0(0)*+788.699, adf1(1)*-247.199, adf2(2)*-729.456, adf3(3)*-191.701, adf4(4)*+202.211, adf5(5)*+003.426, adf6(6)*-445.438, adf7(7)*-269.232, adf8(8)*-355.790], [1, 1, 1, 1, 0, 0, 1, 1], 303.176)
result=p(); 0.7777777777777778
IndLenGenome:495
IndGenome:[71, 45, 79, 5, 14, 50, 57, 91, 81, 8, 5, 26, 93, 70, 37, 23, 2, 47, 31, 44, 97, 79, 97, 3, 85, 30, 59, 17, 58, 22, 94, 55, 35, 60, 16, 4, 43, 45, 31, 75, 11, 52, 99, 65, 46, 86, 94, 13, 45, 78, 29, 85, 56, 90, 35, 66, 98, 16, 52, 80, 94, 17, 51, 11, 48, 16, 66, 94, 56, 86, 61, 61, 79, 95, 53, 23, 37, 31, 91, 84, 45, 61, 31, 99, 32, 34, 9, 94, 86, 88, 40, 16, 52, 26, 27, 99, 85, 50, 26, 38, 50, 19, 49, 89, 91, 94, 12, 82, 61, 63, 24, 36, 29, 5, 40, 37, 77, 49, 35, 27, 7, 91, 39, 19, 90, 82, 44, 62, 56, 23, 81, 41, 79, 18, 77, 39, 98, 53, 3, 32, 12, 94, 10, 66, 46, 19, 1, 35, 77, 82, 59, 50, 28, 65, 50, 84, 43, 81, 47, 55, 35, 66, 53, 23, 10, 45, 95, 12, 7, 99, 69, 36, 38, 54, 66, 38, 32, 61, 36, 99, 36, 87, 38, 77, 85, 81, 54, 88, 41, 48, 51, 9, 40, 14, 29, 75, 31, 77, 29, 64, 13, 62, 76, 28, 31, 82, 81, 50, 36, 64, 96, 65, 2, 58, 96, 75, 57, 69, 84, 76, 19, 89, 25, 42, 48, 74, 53, 35, 28, 50, 58, 49, 5, 13, 24, 64, 78, 14, 17, 66, 67, 28, 66, 34, 22, 86, 51, 38, 28, 78, 76, 57, 36, 43, 73, 79, 25, 46, 63, 68, 72, 70, 99, 4, 47, 98, 52, 26, 99, 15, 60, 77, 98, 57, 21, 13, 41, 18, 19, 70, 11, 66, 10, 34, 39, 93, 32, 25, 91, 18, 21, 23, 84, 12, 84, 66, 92, 25, 37, 38, 28, 36, 99, 79, 74, 87, 57, 32, 54, 57, 91, 89, 59, 79, 91, 42, 97, 82, 69, 24, 55, 16, 28, 81, 98, 21, 59, 61, 17, 40, 21, 89, 82, 71, 82, 70, 62, 42, 11, 21, 97, 36, 22, 20, 70, 23, 34, 52, 66, 92, 87, 60, 24, 24, 15, 44, 73, 98, 22, 75, 64, 12, 86, 39, 22, 73, 82, 54, 77, 2, 43, 25, 35, 27, 69, 60, 77, 35, 23, 63, 5, 44, 24, 29, 11, 100, 13, 50, 43, 91, 87, 6, 57, 16, 29, 29, 14, 30, 40, 3, 4, 1, 46, 92, 84, 0, 30, 98, 95, 100, 46, 10, 42, 65, 28, 86, 61, 62, 64, 86, 35, 2, 100, 84, 0, 64, 37, 65, 61, 17, 34, 76, 90, 82, 39, 71, 2, 31, 18, 93, 9, 64, 31, 83, 10, 31, 21, 100, 73, 56, 69, 73, 1, 76, 43, 32, 65, 65, 12, 76, 42, 28, 89, 13, 39, 61, 75, 59, 87, 81, 65, 82, 85, 82, 84, 71, 14, 12, 40, 36, 52, 38, 71, 32, 85, 4, 89, 90, 97, 18, 71, 62, 20, 73, 96]
last_save: 702

Gen:2010
last_save: 702
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.7777777777777778
TestFitness:0.8888888888888888
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(rlog(x[index]),+913348.0559).all():
      return True
    else:
      return True
  def adf1(index):
    if np.less(x[index],+010420.4086).all():
      return True
    else:
      return False
  def adf2(index):
    if np.equal(x[index],-052835.7632).all():
      return True
    else:
      return True
  def adf3(index):
    if np.less(x[index],+520467.1222).all():
      return True
    else:
      return False
  def adf4(index):
    if np.equal(x[index],+909766.6029).all():
      return True
    else:
      return True
  def adf5(index):
    if np.less(np.sin(x[index]),+675037.5572).all():
      return True
    else:
      return False
  def adf6(index):
    if np.greater(x[index],-774723.2464).all():
      return False
    else:
      return False
  def adf7(index):
    if np.less(x[index],-353623.3470).all():
      return False
    else:
      return False
  def adf8(index):
    if np.greater(rlog(x[index]),-994432.6401).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-778.547, adf1(1)*+486.019, adf2(2)*-079.825, adf3(3)*-861.346, adf4(4)*-136.486, adf5(5)*+078.224, adf6(6)*+586.223, adf7(7)*+386.669, adf8(8)*+575.443], [1, 0, 0, 0, 1, 0, 1, 1], 965.176)
result=p(); 0.7777777777777778
IndLenGenome:414
IndGenome:[8, 23, 63, 35, 74, 57, 51, 24, 41, 96, 67, 17, 87, 96, 79, 54, 50, 88, 76, 45, 49, 86, 90, 50, 100, 68, 46, 29, 71, 92, 88, 24, 86, 21, 85, 80, 77, 25, 96, 87, 22, 42, 51, 5, 25, 41, 91, 4, 81, 90, 16, 91, 33, 78, 29, 24, 82, 86, 51, 17, 62, 46, 43, 52, 50, 83, 7, 99, 54, 10, 21, 31, 44, 58, 61, 63, 78, 65, 47, 20, 16, 78, 84, 83, 34, 96, 98, 20, 87, 65, 29, 75, 76, 53, 92, 55, 81, 86, 92, 21, 19, 60, 25, 37, 60, 60, 42, 68, 93, 74, 97, 61, 7, 24, 44, 88, 25, 51, 76, 76, 92, 30, 25, 32, 44, 24, 99, 16, 99, 5, 37, 96, 88, 49, 55, 85, 63, 43, 76, 40, 84, 60, 97, 7, 19, 24, 42, 82, 77, 72, 42, 28, 15, 19, 64, 73, 48, 96, 90, 38, 74, 19, 55, 30, 14, 60, 52, 26, 59, 64, 85, 82, 14, 42, 93, 21, 51, 90, 53, 29, 85, 74, 18, 42, 49, 37, 63, 29, 99, 6, 95, 60, 24, 55, 99, 78, 38, 18, 15, 76, 70, 59, 93, 91, 25, 34, 97, 92, 75, 65, 36, 65, 30, 54, 47, 33, 69, 97, 95, 77, 91, 93, 34, 73, 79, 37, 18, 33, 27, 57, 96, 33, 22, 13, 94, 84, 29, 35, 17, 6, 32, 66, 85, 26, 74, 3, 80, 38, 50, 35, 10, 79, 32, 16, 55, 57, 93, 56, 67, 45, 73, 10, 53, 24, 16, 70, 52, 83, 56, 37, 64, 59, 97, 32, 29, 22, 71, 58, 68, 81, 87, 47, 13, 54, 25, 31, 26, 22, 82, 5, 3, 56, 67, 51, 32, 100, 27, 69, 86, 89, 29, 82, 62, 31, 6, 9, 73, 28, 99, 45, 27, 15, 74, 37, 62, 50, 89, 30, 60, 18, 88, 42, 45, 22, 91, 48, 22, 45, 57, 79, 27, 70, 30, 96, 81, 77, 66, 90, 77, 42, 20, 70, 20, 69, 2, 58, 10, 19, 0, 97, 50, 33, 42, 32, 18, 2, 92, 64, 58, 83, 85, 7, 37, 86, 82, 83, 11, 21, 19, 47, 84, 5, 44, 11, 56, 73, 56, 57, 5, 27, 20, 86, 93, 97, 93, 19, 65, 18, 24, 82, 63, 100, 3, 87, 44, 31, 59, 86, 67, 29, 100, 10, 41, 54, 38, 84, 12, 81, 8, 95, 67, 88, 70, 70]
last_save: 703

Gen:2001
last_save: 703
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.7777777777777778
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],+749039.9480).all():
      return False
    else:
      return True
  def adf1(index):
    if np.less(x[index],-265964.1713).all():
      return False
    else:
      return False
  def adf2(index):
    if np.equal(np.cos(x[index]),-450665.8506).all():
      return False
    else:
      return True
  def adf3(index):
    if np.equal(x[index],-684989.5613).all():
      return True
    else:
      return True
  def adf4(index):
    if np.equal(sigmoid(x[index]),+481199.8092).all():
      return True
    else:
      return False
  def adf5(index):
    if np.equal(x[index],+678399.7687).all():
      return True
    else:
      return True
  def adf6(index):
    if np.less(x[index],-576504.8993).all():
      return False
    else:
      return False
  def adf7(index):
    if np.equal(x[index],-749952.5261).all():
      return True
    else:
      return True
  def adf8(index):
    if np.equal(x[index],+369142.4494).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+240.907, adf1(1)*-423.575, adf2(2)*-038.285, adf3(3)*-458.220, adf4(4)*-362.051, adf5(5)*-629.001, adf6(6)*+328.616, adf7(7)*+446.493, adf8(8)*-519.503], [0, 0, 0, 1, 0, 1, 1, 1], 075.750)
result=p(); 0.6666666666666666
IndLenGenome:412
IndGenome:[63, 54, 73, 28, 91, 35, 65, 16, 41, 1, 20, 93, 11, 67, 53, 67, 64, 46, 78, 60, 65, 7, 75, 44, 22, 82, 3, 55, 20, 85, 48, 31, 22, 38, 49, 23, 47, 98, 43, 65, 26, 57, 59, 70, 84, 95, 92, 88, 71, 80, 62, 80, 90, 85, 76, 40, 40, 56, 32, 50, 71, 21, 27, 15, 66, 14, 76, 66, 11, 90, 77, 79, 93, 67, 35, 37, 27, 61, 62, 95, 14, 55, 93, 71, 79, 82, 91, 17, 97, 85, 53, 90, 45, 86, 40, 72, 65, 19, 68, 55, 88, 99, 2, 49, 78, 79, 56, 53, 11, 90, 87, 65, 24, 24, 84, 33, 94, 54, 65, 52, 30, 17, 85, 59, 13, 44, 60, 77, 77, 74, 12, 50, 66, 41, 61, 89, 23, 65, 22, 49, 91, 86, 78, 71, 57, 16, 43, 48, 39, 58, 68, 30, 71, 64, 44, 11, 57, 61, 50, 92, 16, 28, 84, 76, 85, 13, 50, 70, 22, 64, 69, 54, 40, 98, 46, 49, 60, 86, 67, 40, 21, 14, 23, 70, 78, 29, 95, 59, 89, 42, 24, 85, 24, 99, 83, 38, 69, 35, 18, 14, 29, 72, 27, 89, 42, 52, 59, 54, 78, 70, 65, 74, 85, 36, 41, 89, 61, 16, 39, 95, 13, 19, 76, 16, 86, 71, 36, 48, 72, 85, 40, 50, 5, 63, 5, 11, 15, 43, 59, 69, 13, 72, 33, 67, 28, 33, 13, 27, 66, 39, 87, 96, 18, 56, 95, 18, 18, 85, 56, 79, 24, 42, 57, 67, 61, 93, 64, 35, 87, 89, 19, 15, 56, 48, 60, 49, 16, 14, 78, 85, 42, 26, 81, 34, 58, 82, 22, 8, 88, 84, 2, 96, 91, 51, 89, 39, 16, 99, 7, 42, 88, 28, 25, 32, 15, 9, 71, 7, 11, 50, 27, 19, 97, 11, 86, 71, 8, 21, 61, 56, 8, 32, 45, 87, 2, 73, 42, 13, 100, 37, 13, 55, 30, 95, 28, 50, 40, 57, 56, 45, 70, 41, 22, 32, 25, 28, 37, 99, 90, 5, 16, 41, 66, 59, 70, 58, 19, 60, 53, 14, 4, 62, 12, 5, 91, 17, 73, 46, 90, 59, 23, 37, 89, 23, 72, 43, 73, 48, 99, 83, 31, 24, 28, 90, 59, 24, 86, 49, 98, 44, 59, 29, 40, 57, 77, 16, 53, 35, 70, 40, 84, 51, 3, 65, 89, 82, 27, 18, 71, 25, 21, 68]
last_save: 704

Gen:5
TrainFitness:0.7777777777777778
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(np.tanh(x[index]),-521365.7435).all():
      return False
    else:
      return True
  def adf1(index):
    if np.greater(sigmoid(x[index]),-103186.2206).all():
      if np.less(np.cos(x[index]),+241496.7441).all():
        if np.equal(np.cos(x[index]),-987671.8782).all():
          return False
        else:
          return True
        return True
      else:
        if np.greater(sigmoid(x[index]),+901891.6911).all():
          return True
        else:
          return False
        return True
      return False
    else:
      if np.greater(rlog(x[index]),-103998.3073).all():
        return True
      else:
        return True
      return True
  def adf2(index):
    if np.greater(x[index],-409231.2883).all():
      return True
    else:
      return False
  def adf3(index):
    if np.equal(rlog(x[index]),-149956.4567).all():
      return False
    else:
      return True
  def adf4(index):
    if np.greater(np.tanh(x[index]),-311051.7697).all():
      return False
    else:
      return True
  def adf5(index):
    if np.greater(np.cos(x[index]),+780362.1931).all():
      return False
    else:
      return False
  def adf6(index):
    if np.equal(np.tanh(x[index]),+011516.8301).all():
      return True
    else:
      return False
  def adf7(index):
    if np.equal(np.cos(x[index]),+046516.6351).all():
      if np.less(x[index],-920791.4736).all():
        return False
      else:
        return True
      return True
    else:
      if np.greater(x[index],-963320.9236).all():
        return False
      else:
        return True
      return True
  def adf8(index):
    if np.greater(x[index],+032992.3127).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*-408.793, adf1(1)*+501.977, adf2(2)*+475.951, adf3(3)*+508.568, adf4(4)*+445.264, adf5(5)*+217.738, adf6(6)*-415.192, adf7(7)*-288.794, adf8(8)*-893.227], [1, 1, 0, 0, 1, 0, 0, 0], 846.873)
result=p(); 0.7777777777777778
IndLenGenome:401
IndGenome:[72, 78, 73, 89, 33, 68, 68, 67, 85, 37, 25, 52, 11, 3, 36, 75, 7, 34, 73, 15, 9, 84, 56, 42, 76, 24, 62, 51, 39, 51, 18, 11, 50, 73, 41, 68, 56, 82, 82, 20, 76, 60, 10, 43, 4, 97, 72, 56, 53, 92, 64, 1, 14, 59, 56, 87, 44, 24, 11, 47, 86, 80, 79, 2, 63, 57, 39, 8, 97, 16, 27, 61, 58, 57, 8, 2, 49, 58, 54, 19, 57, 48, 99, 70, 80, 68, 9, 50, 31, 18, 39, 51, 76, 49, 61, 41, 24, 31, 58, 35, 91, 12, 20, 28, 40, 73, 75, 31, 50, 73, 29, 89, 28, 63, 70, 87, 93, 30, 46, 22, 56, 61, 15, 77, 67, 7, 14, 84, 90, 59, 82, 93, 11, 2, 18, 78, 3, 56, 87, 94, 97, 98, 76, 70, 89, 61, 41, 41, 24, 89, 79, 5, 86, 44, 85, 56, 47, 39, 34, 24, 13, 18, 46, 14, 40, 25, 54, 73, 91, 61, 10, 75, 81, 37, 66, 69, 97, 93, 58, 16, 61, 96, 98, 19, 72, 14, 70, 97, 78, 10, 33, 16, 12, 31, 49, 13, 81, 11, 59, 57, 45, 47, 92, 74, 96, 44, 72, 70, 31, 31, 35, 11, 46, 78, 33, 60, 61, 62, 95, 64, 66, 67, 62, 68, 67, 83, 16, 86, 70, 4, 26, 25, 11, 56, 86, 53, 95, 71, 67, 49, 57, 21, 31, 98, 29, 42, 50, 87, 99, 61, 54, 97, 93, 86, 41, 28, 52, 69, 27, 17, 99, 53, 89, 29, 86, 33, 73, 92, 70, 79, 82, 53, 46, 11, 16, 2, 35, 93, 96, 25, 74, 70, 81, 20, 23, 82, 9, 19, 72, 13, 41, 2, 7, 59, 50, 38, 21, 4, 81, 19, 14, 40, 48, 97, 69, 53, 81, 54, 93, 45, 100, 1, 39, 97, 87, 68, 12, 10, 64, 27, 55, 9, 55, 51, 72, 96, 38, 45, 60, 48, 85, 76, 8, 67, 94, 31, 84, 24, 75, 82, 96, 84, 57, 34, 47, 32, 51, 67, 7, 93, 8, 93, 89, 48, 74, 11, 15, 11, 39, 62, 7, 1, 94, 22, 48, 28, 47, 69, 44, 65, 11, 9, 8, 39, 83, 72, 52, 57, 81, 51, 61, 94, 90, 5, 12, 84, 14, 6, 68, 94, 16, 18, 47, 73, 48, 21, 96, 83, 64, 77, 12]
last_save: 704

Gen:2005
last_save: 704
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.7777777777777778
TestFitness:0.8888888888888888
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],+952418.4056).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(np.tanh(x[index]),-658563.8015).all():
      return False
    else:
      return True
  def adf2(index):
    if np.less(x[index],+017126.6620).all():
      return False
    else:
      return True
  def adf3(index):
    if np.greater(x[index],-031984.9943).all():
      return True
    else:
      return False
  def adf4(index):
    if np.greater(np.sin(x[index]),+946497.1687).all():
      return False
    else:
      return False
  def adf5(index):
    if np.less(x[index],-754192.4072).all():
      return False
    else:
      return False
  def adf6(index):
    if np.less(x[index],-951562.3728).all():
      return True
    else:
      return True
  def adf7(index):
    if np.greater(x[index],+691427.2557).all():
      return False
    else:
      return False
  def adf8(index):
    if np.less(x[index],+779404.4551).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*-556.580, adf1(1)*-003.019, adf2(2)*-770.481, adf3(3)*-152.039, adf4(4)*-375.793, adf5(5)*-471.166, adf6(6)*-985.686, adf7(7)*+423.259, adf8(8)*+861.371], [0, 1, 1, 1, 0, 0, 1, 0], 142.092)
result=p(); 0.7777777777777778
IndLenGenome:412
IndGenome:[28, 24, 15, 98, 69, 96, 69, 71, 41, 60, 46, 62, 76, 27, 95, 19, 46, 82, 41, 45, 81, 86, 84, 69, 52, 45, 47, 65, 45, 28, 62, 40, 22, 10, 51, 3, 21, 7, 72, 14, 56, 61, 27, 90, 7, 10, 31, 27, 47, 43, 98, 45, 99, 27, 69, 23, 96, 22, 65, 16, 93, 31, 68, 70, 23, 89, 7, 17, 95, 44, 45, 61, 87, 31, 37, 82, 39, 25, 47, 91, 17, 6, 54, 86, 65, 30, 47, 19, 87, 36, 13, 99, 94, 73, 72, 42, 74, 22, 76, 6, 39, 44, 46, 92, 85, 90, 83, 88, 95, 14, 99, 71, 95, 7, 85, 73, 76, 49, 14, 1, 53, 93, 96, 21, 81, 22, 89, 78, 74, 53, 60, 88, 46, 44, 38, 30, 57, 7, 86, 26, 26, 51, 71, 11, 18, 59, 29, 51, 52, 82, 88, 31, 40, 70, 92, 46, 93, 14, 48, 57, 61, 57, 77, 20, 37, 41, 28, 61, 52, 17, 58, 74, 72, 64, 54, 23, 37, 63, 54, 59, 55, 92, 79, 11, 56, 73, 79, 98, 45, 15, 96, 21, 52, 80, 60, 71, 7, 2, 89, 7, 83, 25, 90, 61, 62, 36, 35, 49, 51, 15, 97, 20, 77, 50, 16, 80, 66, 21, 71, 63, 68, 65, 77, 34, 28, 43, 71, 38, 27, 66, 53, 74, 59, 99, 15, 98, 35, 97, 91, 26, 57, 71, 33, 49, 37, 81, 58, 76, 56, 84, 89, 70, 11, 8, 16, 33, 27, 40, 63, 78, 89, 63, 95, 7, 24, 45, 55, 98, 73, 39, 48, 12, 52, 74, 49, 28, 35, 24, 55, 22, 18, 1, 55, 63, 45, 46, 69, 97, 33, 97, 49, 15, 10, 98, 19, 7, 91, 29, 94, 86, 84, 58, 52, 11, 10, 35, 42, 26, 0, 44, 73, 95, 10, 25, 65, 41, 22, 15, 83, 78, 29, 43, 65, 71, 93, 18, 92, 34, 0, 80, 70, 94, 9, 61, 14, 0, 93, 24, 38, 64, 68, 47, 90, 98, 90, 16, 71, 1, 52, 71, 51, 68, 35, 72, 60, 1, 71, 73, 64, 3, 13, 48, 23, 28, 99, 71, 79, 65, 40, 70, 67, 61, 9, 10, 91, 84, 4, 27, 30, 82, 70, 92, 84, 90, 0, 29, 62, 15, 62, 46, 94, 13, 9, 7, 82, 30, 68, 35, 78, 34, 28, 64, 8, 35, 82, 92, 13, 10, 70, 73, 21, 18]
last_save: 705

Gen:29
TrainFitness:0.7777777777777778
TestFitness:1.0
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],-968258.8807).all():
      return False
    else:
      return True
  def adf1(index):
    if np.greater(x[index],-924597.5544).all():
      if np.greater(x[index],-979276.0795).all():
        return False
      else:
        return True
      return True
    else:
      if np.greater(sigmoid(x[index]),+007133.0781).all():
        return False
      else:
        return False
      return True
  def adf2(index):
    if np.greater(x[index],-452634.5749).all():
      if np.equal(np.sin(x[index]),+226008.5839).all():
        return True
      else:
        return False
      return True
    else:
      if np.greater(x[index],-397509.0689).all():
        return False
      else:
        return True
      return True
  def adf3(index):
    if np.greater(x[index],+035196.0736).all():
      return False
    else:
      return True
  def adf4(index):
    if np.greater(np.sin(x[index]),-669412.3267).all():
      return False
    else:
      return False
  def adf5(index):
    if np.equal(x[index],-265216.2708).all():
      return False
    else:
      return False
  def adf6(index):
    if np.less(sigmoid(x[index]),+061158.6835).all():
      return False
    else:
      return False
  def adf7(index):
    if np.less(x[index],-989355.5567).all():
      if np.equal(x[index],+800577.7799).all():
        return True
      else:
        return False
      return False
    else:
      if np.equal(psqrt(x[index]),+042616.6507).all():
        return True
      else:
        return False
      return True
  def adf8(index):
    if np.less(x[index],-320763.4367).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+394.591, adf1(1)*-983.400, adf2(2)*-680.816, adf3(3)*-675.363, adf4(4)*-611.498, adf5(5)*+082.420, adf6(6)*-308.989, adf7(7)*+991.216, adf8(8)*-205.533], [1, 1, 0, 1, 0, 1, 1, 0], 602.323)
result=p(); 0.7777777777777778
IndLenGenome:485
IndGenome:[5, 63, 83, 5, 28, 3, 66, 83, 22, 89, 26, 18, 62, 35, 88, 38, 88, 70, 37, 19, 16, 26, 56, 71, 81, 79, 81, 69, 13, 59, 92, 54, 65, 59, 47, 35, 45, 64, 34, 31, 99, 83, 55, 65, 49, 99, 97, 69, 62, 57, 96, 50, 77, 89, 15, 81, 40, 84, 63, 21, 32, 93, 83, 54, 74, 80, 70, 7, 91, 73, 73, 30, 87, 68, 81, 49, 33, 46, 55, 98, 58, 84, 35, 64, 19, 28, 74, 25, 42, 46, 53, 34, 65, 67, 4, 99, 19, 77, 52, 18, 93, 14, 62, 2, 22, 36, 30, 60, 8, 45, 38, 63, 79, 36, 97, 70, 85, 24, 59, 28, 89, 38, 73, 99, 57, 65, 80, 49, 50, 6, 28, 99, 53, 46, 32, 76, 41, 45, 13, 26, 16, 34, 50, 43, 45, 71, 79, 66, 80, 57, 13, 76, 57, 32, 87, 51, 24, 46, 18, 61, 17, 61, 56, 96, 39, 24, 51, 52, 33, 72, 26, 97, 47, 7, 20, 51, 35, 61, 82, 59, 45, 92, 86, 55, 42, 31, 86, 72, 77, 90, 98, 57, 27, 38, 41, 67, 32, 69, 36, 24, 64, 40, 36, 61, 61, 65, 38, 76, 88, 53, 85, 93, 55, 81, 52, 38, 70, 75, 69, 53, 33, 79, 48, 79, 43, 55, 55, 15, 25, 96, 77, 3, 14, 37, 49, 22, 71, 98, 10, 30, 75, 67, 37, 37, 47, 29, 89, 18, 33, 51, 93, 92, 30, 101, 83, 30, 59, 30, 84, 32, 86, 11, 26, 46, 15, 30, 37, 52, 43, 60, 99, 13, 55, 15, 24, 27, 51, 63, 32, 20, 57, 16, 13, 24, 93, 16, 47, 28, 62, 91, 84, 62, 44, 97, 73, 89, 44, 95, 39, 31, 28, 43, 45, 69, 78, 33, 24, 70, 50, 68, 81, 52, 46, 98, 10, 38, 11, 96, 95, 63, 62, 46, 17, 95, 63, 76, 73, 90, 39, 83, 86, 81, 21, 54, 19, 98, 18, 66, 78, 80, 48, 92, 34, 62, 40, 95, 41, 49, 53, 10, 18, 39, 98, 99, 27, 98, 93, 9, 49, 81, 82, 71, 16, 16, 33, 21, 82, 90, 75, 45, 23, 43, 14, 23, 63, 42, 65, 10, 85, 63, 32, 75, 16, 40, 82, 23, 2, 83, 2, 62, 37, 61, 9, 59, 41, 76, 61, 42, 0, 16, 95, 76, 94, 14, 54, 76, 79, 1, 40, 84, 42, 92, 21, 16, 44, 17, 63, 24, 2, 54, 17, 86, 99, 20, 86, 24, 5, 50, 59, 100, 79, 78, 77, 56, 69, 63, 96, 41, 81, 52, 39, 3, 92, 6, 82, 15, 80, 23, 88, 52, 96, 87, 66, 25, 4, 37, 38, 71, 44, 84, 19, 91, 82, 59, 85, 62, 3, 45, 3, 45, 91, 63, 58, 68, 19, 93, 92, 22, 52, 59, 62, 23, 2, 36, 44]
last_save: 705

Gen:2029
last_save: 705
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.7777777777777778
TestFitness:0.8888888888888888
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],+106229.5950).all():
      return False
    else:
      return True
  def adf1(index):
    if np.less(psqrt(x[index]),-436827.8372).all():
      return True
    else:
      return False
  def adf2(index):
    if np.greater(x[index],+909598.2729).all():
      return True
    else:
      return False
  def adf3(index):
    if np.less(x[index],-051882.6432).all():
      return True
    else:
      return False
  def adf4(index):
    if np.greater(sigmoid(x[index]),+915396.9590).all():
      return False
    else:
      return False
  def adf5(index):
    if np.less(psqrt(x[index]),-307545.1165).all():
      return True
    else:
      return True
  def adf6(index):
    if np.greater(x[index],+023618.8974).all():
      return False
    else:
      return True
  def adf7(index):
    if np.greater(x[index],-489378.7375).all():
      return False
    else:
      return False
  def adf8(index):
    if np.equal(x[index],-544008.8852).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+890.031, adf1(1)*-381.455, adf2(2)*-204.271, adf3(3)*-504.756, adf4(4)*+259.038, adf5(5)*+294.021, adf6(6)*-895.640, adf7(7)*-471.885, adf8(8)*-772.591], [0, 0, 1, 0, 1, 0, 1, 0], 523.787)
result=p(); 0.7777777777777778
IndLenGenome:414
IndGenome:[67, 43, 31, 57, 27, 14, 83, 56, 63, 91, 90, 88, 27, 83, 85, 61, 58, 46, 20, 83, 6, 94, 18, 28, 5, 79, 95, 69, 91, 83, 19, 22, 53, 40, 63, 49, 79, 59, 89, 75, 53, 13, 66, 42, 10, 98, 75, 27, 12, 41, 46, 56, 44, 20, 25, 7, 20, 84, 90, 6, 79, 61, 12, 12, 65, 9, 70, 38, 34, 58, 43, 51, 61, 38, 89, 44, 12, 98, 58, 38, 69, 23, 47, 13, 56, 93, 7, 53, 48, 64, 93, 99, 62, 43, 52, 65, 84, 17, 62, 32, 32, 17, 59, 14, 16, 22, 58, 68, 33, 95, 86, 5, 61, 84, 93, 95, 24, 68, 77, 95, 75, 10, 12, 27, 39, 82, 79, 78, 5, 19, 47, 35, 52, 55, 64, 44, 85, 47, 35, 39, 81, 28, 15, 95, 35, 7, 78, 43, 92, 69, 79, 55, 45, 14, 90, 63, 83, 78, 87, 21, 80, 20, 66, 26, 60, 44, 88, 10, 39, 42, 61, 95, 48, 10, 75, 45, 11, 18, 50, 27, 88, 15, 85, 57, 76, 33, 65, 68, 81, 41, 18, 11, 20, 15, 63, 78, 61, 71, 36, 19, 81, 96, 97, 86, 53, 82, 20, 39, 87, 3, 11, 71, 43, 41, 19, 38, 18, 70, 37, 81, 56, 73, 93, 62, 14, 99, 74, 33, 98, 84, 97, 64, 52, 42, 88, 47, 97, 51, 90, 37, 80, 67, 28, 99, 34, 93, 25, 62, 39, 98, 59, 91, 58, 57, 32, 61, 84, 25, 63, 10, 39, 17, 61, 35, 65, 29, 90, 97, 79, 88, 59, 72, 86, 32, 76, 99, 43, 79, 87, 98, 51, 36, 91, 94, 2, 18, 27, 40, 68, 99, 65, 67, 20, 77, 75, 72, 33, 10, 25, 90, 66, 8, 20, 54, 7, 40, 11, 0, 49, 54, 34, 83, 60, 73, 13, 10, 18, 38, 30, 36, 93, 10, 40, 70, 9, 50, 90, 4, 72, 18, 28, 49, 39, 82, 6, 51, 6, 3, 79, 5, 71, 17, 66, 89, 59, 20, 2, 84, 2, 70, 85, 41, 41, 46, 22, 61, 44, 75, 83, 7, 9, 70, 55, 87, 36, 94, 100, 77, 59, 50, 62, 59, 100, 76, 31, 26, 9, 100, 28, 70, 22, 72, 92, 7, 100, 50, 48, 89, 13, 1, 55, 50, 33, 89, 24, 82, 88, 71, 34, 24, 20, 57, 52, 72, 49, 65, 77, 40, 26, 76, 80, 79, 92, 82]
last_save: 706

Gen:2001
last_save: 706
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.7777777777777778
TestFitness:0.7777777777777778
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(psqrt(x[index]),+103770.7877).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(x[index],+333545.4838).all():
      return True
    else:
      return False
  def adf2(index):
    if np.equal(sigmoid(x[index]),-307655.9034).all():
      return True
    else:
      return False
  def adf3(index):
    if np.greater(psqrt(x[index]),-198933.2571).all():
      return True
    else:
      return False
  def adf4(index):
    if np.less(psqrt(x[index]),-913135.9691).all():
      return False
    else:
      return True
  def adf5(index):
    if np.greater(x[index],+020598.2285).all():
      return False
    else:
      return True
  def adf6(index):
    if np.greater(rlog(x[index]),-351742.7736).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(rlog(x[index]),-517438.4822).all():
      return True
    else:
      return False
  def adf8(index):
    if np.greater(sigmoid(x[index]),+054756.5928).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*-047.553, adf1(1)*-274.717, adf2(2)*+344.583, adf3(3)*-302.873, adf4(4)*-513.808, adf5(5)*+631.140, adf6(6)*-145.606, adf7(7)*+735.116, adf8(8)*-631.957], [1, 1, 0, 1, 1, 1, 1, 1], 426.960)
result=p(); 0.7777777777777778
IndLenGenome:420
IndGenome:[88, 89, 11, 75, 57, 61, 17, 9, 24, 55, 44, 87, 13, 42, 15, 15, 3, 79, 92, 9, 47, 9, 81, 20, 65, 53, 15, 39, 29, 83, 13, 23, 69, 6, 71, 15, 24, 34, 21, 95, 19, 97, 70, 31, 60, 37, 36, 29, 67, 16, 57, 81, 12, 19, 36, 73, 71, 46, 86, 79, 75, 11, 82, 76, 91, 60, 48, 60, 74, 31, 70, 96, 10, 43, 13, 97, 2, 82, 38, 61, 67, 40, 43, 70, 83, 98, 51, 21, 65, 20, 10, 31, 30, 76, 21, 50, 84, 39, 42, 11, 87, 23, 63, 19, 41, 43, 94, 89, 69, 64, 85, 65, 48, 48, 36, 34, 7, 87, 37, 36, 99, 91, 31, 39, 97, 69, 51, 48, 12, 49, 95, 87, 96, 91, 82, 95, 50, 42, 57, 33, 32, 82, 16, 79, 53, 15, 64, 99, 39, 58, 94, 83, 86, 77, 15, 83, 87, 59, 23, 72, 67, 77, 67, 24, 93, 96, 45, 53, 70, 59, 23, 57, 58, 43, 6, 92, 67, 73, 82, 43, 37, 35, 96, 84, 97, 95, 55, 84, 70, 38, 87, 14, 2, 36, 64, 12, 36, 28, 61, 14, 76, 43, 65, 70, 62, 19, 85, 39, 95, 39, 77, 10, 33, 41, 27, 83, 97, 57, 99, 87, 38, 41, 41, 29, 21, 33, 45, 83, 38, 13, 67, 53, 62, 25, 92, 40, 83, 54, 51, 16, 59, 93, 98, 84, 90, 88, 20, 87, 66, 95, 77, 23, 73, 44, 37, 31, 28, 64, 64, 15, 45, 43, 64, 86, 72, 71, 59, 18, 33, 18, 61, 80, 83, 65, 45, 20, 12, 68, 92, 96, 26, 1, 35, 73, 12, 21, 12, 6, 84, 100, 55, 81, 12, 41, 93, 76, 74, 37, 64, 93, 35, 51, 75, 42, 11, 47, 67, 28, 0, 39, 75, 96, 84, 14, 77, 94, 18, 79, 100, 23, 52, 17, 66, 4, 90, 28, 15, 36, 53, 76, 46, 20, 39, 11, 58, 55, 31, 28, 27, 67, 10, 26, 74, 63, 42, 53, 7, 61, 77, 61, 3, 45, 66, 54, 70, 54, 10, 89, 30, 100, 7, 95, 87, 70, 38, 58, 85, 31, 65, 32, 93, 43, 41, 4, 26, 29, 22, 82, 81, 36, 0, 32, 27, 86, 14, 18, 8, 38, 37, 20, 86, 43, 33, 90, 76, 16, 44, 81, 2, 76, 56, 56, 26, 90, 65, 55, 48, 71, 91, 75, 47, 64, 88, 0, 50, 79, 77, 25, 25, 89]
last_save: 707

Gen:2001
last_save: 707
Exit:FalseFalseTrue