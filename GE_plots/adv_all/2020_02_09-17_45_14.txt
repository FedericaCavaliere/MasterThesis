Dataset:Meander/Full.csv
FS:True
Seed:1236
Size:7

Gen:1
TrainFitness:1.0
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],-764318.8680).all():
      return False
    else:
      return True
  def adf1(index):
    if np.equal(rlog(x[index]),+832558.4765).all():
      return True
    else:
      return False
  def adf2(index):
    if np.equal(np.cos(x[index]),+057443.1520).all():
      return False
    else:
      return True
  def adf3(index):
    if np.less(np.cos(x[index]),+186793.4810).all():
      return True
    else:
      return True
  def adf4(index):
    if np.equal(x[index],-808633.4823).all():
      return True
    else:
      return False
  def adf7(index):
    if np.less(rlog(x[index]),-236362.7778).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*-507.126, adf1(1)*-710.074, adf2(2)*-229.036, adf3(3)*+121.263, adf4(4)*+296.180, adf7(7)*+749.027], [0, 1, 0, 0, 1], 252.746)
result=p(); 1.0
IndLenGenome:285
IndGenome:[3, 57, 82, 60, 70, 41, 11, 98, 34, 69, 27, 86, 75, 77, 92, 93, 5, 14, 36, 64, 65, 86, 12, 54, 87, 29, 7, 57, 55, 12, 82, 59, 36, 96, 81, 31, 95, 72, 63, 81, 67, 10, 62, 54, 83, 27, 88, 57, 37, 42, 64, 18, 16, 10, 67, 63, 62, 8, 38, 28, 32, 96, 61, 42, 70, 89, 88, 73, 81, 89, 24, 14, 74, 23, 99, 46, 72, 82, 67, 33, 10, 14, 8, 17, 89, 34, 9, 89, 28, 60, 3, 56, 83, 39, 11, 47, 72, 14, 51, 96, 70, 86, 43, 26, 98, 91, 30, 72, 77, 21, 51, 36, 12, 26, 47, 19, 84, 65, 7, 55, 71, 84, 92, 93, 30, 39, 78, 30, 78, 58, 36, 80, 86, 63, 91, 38, 74, 76, 57, 17, 85, 11, 25, 73, 68, 53, 78, 58, 44, 90, 55, 36, 87, 48, 56, 58, 22, 87, 94, 27, 48, 54, 14, 11, 95, 20, 17, 72, 51, 46, 26, 64, 48, 43, 43, 25, 24, 83, 17, 93, 46, 87, 22, 42, 23, 88, 26, 10, 37, 15, 99, 29, 67, 4, 15, 55, 63, 100, 85, 65, 62, 6, 79, 93, 50, 38, 96, 76, 29, 50, 27, 94, 44, 71, 61, 87, 19, 29, 22, 6, 65, 37, 52, 78, 28, 67, 85, 49, 28, 93, 78, 7, 16, 96, 9, 34, 57, 93, 85, 87, 7, 98, 70, 41, 56, 47, 42, 43, 90, 36, 41, 7, 32, 46, 45, 86, 63, 92, 43, 41, 90, 9, 84, 2, 8, 13, 5, 49, 16, 86, 64, 5, 38, 27, 76, 53, 28, 11, 5, 88, 14, 61, 50, 23, 94]
last_save: 721

Gen:1
last_save: 721
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],+786846.9182).all():
      return False
    else:
      return True
  def adf1(index):
    if np.less(x[index],+851513.3398).all():
      return False
    else:
      return True
  def adf2(index):
    if np.less(x[index],+333747.4635).all():
      return True
    else:
      return True
  def adf3(index):
    if np.equal(x[index],+103238.1590).all():
      return False
    else:
      return False
  def adf4(index):
    if np.equal(np.tanh(x[index]),-702575.3740).all():
      return True
    else:
      return False
  def adf7(index):
    if np.less(x[index],+009529.6411).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+847.673, adf1(1)*+584.819, adf2(2)*-651.493, adf3(3)*+850.272, adf4(4)*+807.187, adf7(7)*-550.304], [1, 0, 0, 0, 1], 236.527)
result=p(); 0.8333333333333334
IndLenGenome:280
IndGenome:[35, 61, 33, 41, 37, 63, 1, 39, 99, 13, 59, 99, 9, 43, 53, 96, 85, 66, 82, 54, 16, 10, 80, 31, 7, 83, 79, 32, 31, 76, 96, 15, 73, 14, 56, 68, 72, 14, 37, 53, 52, 77, 29, 37, 45, 32, 31, 99, 47, 18, 58, 85, 25, 11, 35, 67, 60, 64, 16, 50, 24, 22, 57, 20, 62, 95, 66, 48, 20, 41, 47, 70, 27, 93, 76, 90, 92, 88, 45, 46, 27, 14, 66, 47, 40, 93, 73, 45, 83, 41, 83, 63, 18, 66, 46, 73, 29, 29, 83, 33, 59, 94, 82, 16, 20, 55, 77, 68, 45, 55, 94, 13, 69, 80, 27, 32, 51, 93, 70, 38, 61, 85, 51, 65, 70, 88, 25, 58, 57, 13, 55, 61, 65, 61, 73, 44, 74, 22, 41, 13, 92, 10, 43, 37, 92, 39, 45, 31, 91, 33, 40, 86, 91, 32, 29, 42, 67, 93, 66, 98, 86, 18, 39, 14, 60, 27, 73, 45, 81, 20, 16, 28, 44, 35, 91, 27, 49, 72, 71, 46, 36, 34, 48, 69, 18, 27, 58, 48, 42, 66, 52, 74, 66, 12, 80, 4, 41, 76, 40, 78, 83, 54, 87, 2, 6, 77, 80, 100, 45, 94, 75, 30, 47, 4, 55, 46, 61, 95, 70, 56, 54, 17, 13, 58, 55, 31, 25, 96, 21, 93, 9, 45, 93, 88, 68, 55, 43, 45, 82, 82, 79, 55, 68, 49, 77, 42, 31, 28, 46, 17, 60, 7, 49, 57, 79, 77, 40, 71, 32, 70, 54, 92, 84, 32, 14, 51, 14, 97, 69, 16, 12, 95, 78, 28, 59, 68, 66, 72, 96, 96]
last_save: 722

Gen:4
TrainFitness:0.8333333333333334
TestFitness:1.0
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(rlog(x[index]),+377511.6121).all():
      return True
    else:
      return True
  def adf1(index):
    if np.equal(x[index],-738193.2643).all():
      if np.less(x[index],-553357.8328).all():
        if np.greater(x[index],-484166.8521).all():
          return False
        else:
          return False
        return True
      else:
        if np.greater(x[index],+001722.7199).all():
          return True
        else:
          return True
        return False
      return True
    else:
      if np.less(x[index],+035665.1505).all():
        return True
      else:
        return False
      return True
  def adf2(index):
    if np.equal(np.cos(x[index]),-675863.1416).all():
      if np.less(np.tanh(x[index]),+507344.1998).all():
        return True
      else:
        return True
      return True
    else:
      if np.equal(x[index],-044793.7756).all():
        return False
      else:
        return False
      return False
  def adf3(index):
    if np.equal(x[index],-935361.2416).all():
      return True
    else:
      return True
  def adf4(index):
    if np.less(np.sin(x[index]),-725032.5985).all():
      return True
    else:
      return False
  def adf7(index):
    if np.equal(np.tanh(x[index]),-345210.3958).all():
      if np.less(x[index],-727055.2939).all():
        return False
      else:
        return False
      return True
    else:
      if np.equal(x[index],-224305.9312).all():
        return False
      else:
        return False
      return False
  return multiple_operation([adf0(0)*-434.876, adf1(1)*+472.265, adf2(2)*-640.843, adf3(3)*-369.347, adf4(4)*-004.027, adf7(7)*-719.404], [1, 1, 0, 1, 1], 049.170)
result=p(); 0.8333333333333334
IndLenGenome:410
IndGenome:[67, 52, 64, 49, 10, 46, 34, 5, 10, 19, 3, 97, 37, 85, 71, 81, 76, 61, 2, 71, 4, 84, 57, 52, 92, 26, 63, 41, 69, 15, 77, 63, 58, 11, 29, 73, 42, 66, 54, 53, 78, 7, 13, 91, 40, 95, 14, 15, 75, 53, 63, 15, 17, 18, 93, 42, 28, 17, 78, 17, 51, 7, 36, 44, 98, 34, 91, 66, 6, 68, 55, 62, 91, 99, 87, 72, 81, 54, 69, 48, 20, 77, 30, 10, 61, 7, 52, 92, 57, 11, 19, 69, 4, 20, 21, 58, 65, 76, 79, 17, 34, 54, 20, 43, 35, 46, 86, 95, 31, 55, 50, 35, 88, 19, 68, 89, 12, 82, 74, 90, 31, 67, 3, 44, 86, 67, 55, 78, 76, 83, 61, 34, 91, 6, 17, 64, 74, 92, 84, 42, 13, 15, 80, 47, 53, 64, 94, 71, 29, 19, 18, 54, 90, 78, 25, 32, 13, 74, 33, 72, 40, 54, 34, 77, 29, 13, 17, 27, 75, 16, 75, 81, 89, 45, 85, 68, 35, 85, 65, 90, 89, 13, 55, 83, 26, 41, 92, 24, 91, 26, 96, 18, 92, 9, 82, 40, 30, 33, 25, 33, 7, 82, 35, 50, 43, 22, 35, 49, 48, 55, 80, 65, 84, 86, 10, 68, 90, 56, 55, 89, 83, 83, 4, 25, 52, 21, 0, 13, 99, 35, 48, 69, 76, 89, 82, 71, 89, 37, 22, 77, 10, 25, 5, 12, 89, 43, 69, 99, 19, 70, 37, 86, 93, 22, 25, 78, 42, 22, 64, 63, 90, 35, 19, 43, 91, 32, 71, 23, 65, 72, 17, 70, 71, 67, 54, 53, 34, 38, 37, 16, 17, 70, 36, 34, 57, 92, 72, 86, 45, 83, 35, 53, 86, 64, 60, 78, 84, 83, 75, 11, 20, 83, 16, 19, 93, 74, 27, 98, 71, 16, 40, 20, 34, 20, 72, 37, 80, 39, 58, 27, 71, 29, 24, 20, 24, 32, 65, 91, 54, 59, 45, 68, 60, 74, 79, 71, 97, 30, 62, 65, 86, 43, 79, 48, 49, 90, 18, 88, 77, 91, 94, 33, 7, 39, 16, 17, 93, 54, 56, 17, 2, 19, 81, 25, 60, 82, 38, 60, 39, 94, 85, 68, 33, 82, 80, 28, 92, 35, 43, 3, 6, 62, 33, 8, 12, 16, 60, 39, 58, 66, 48, 10, 52, 36, 15, 70, 17, 40, 94, 40, 29, 11, 92, 37, 39, 91, 84, 97, 100, 57]
last_save: 722

Gen:2004
last_save: 722
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(np.sin(x[index]),-940189.7521).all():
      return False
    else:
      return True
  def adf1(index):
    if np.less(x[index],+019339.3002).all():
      return False
    else:
      return True
  def adf2(index):
    if np.equal(sigmoid(x[index]),-931176.1387).all():
      return True
    else:
      return False
  def adf3(index):
    if np.less(x[index],-351258.8693).all():
      return False
    else:
      return False
  def adf4(index):
    if np.equal(sigmoid(x[index]),+087562.2406).all():
      return False
    else:
      return True
  def adf7(index):
    if np.less(x[index],-948916.0745).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-521.095, adf1(1)*+693.965, adf2(2)*-781.445, adf3(3)*+120.601, adf4(4)*-335.639, adf7(7)*-262.421], [0, 0, 0, 0, 1], 335.100)
result=p(); 0.8333333333333334
IndLenGenome:283
IndGenome:[12, 5, 90, 37, 56, 23, 43, 23, 11, 35, 56, 73, 87, 9, 14, 22, 41, 56, 49, 13, 29, 21, 98, 22, 54, 71, 73, 79, 55, 35, 15, 39, 10, 74, 82, 1, 58, 93, 57, 9, 98, 35, 30, 90, 63, 31, 66, 89, 9, 94, 11, 50, 67, 65, 90, 29, 82, 18, 22, 72, 37, 16, 36, 62, 97, 25, 96, 59, 69, 36, 59, 62, 53, 66, 91, 7, 51, 33, 73, 20, 49, 81, 86, 94, 74, 49, 27, 98, 74, 64, 18, 84, 62, 99, 55, 41, 76, 81, 75, 46, 98, 61, 31, 19, 69, 58, 86, 12, 71, 55, 56, 21, 25, 71, 95, 11, 90, 80, 16, 86, 55, 10, 19, 61, 55, 86, 40, 36, 63, 84, 33, 62, 97, 80, 1, 61, 88, 52, 33, 34, 64, 16, 80, 82, 37, 33, 68, 53, 85, 75, 39, 72, 10, 59, 10, 41, 91, 23, 46, 92, 32, 59, 55, 62, 15, 28, 60, 88, 23, 40, 45, 6, 37, 30, 46, 74, 53, 87, 47, 35, 55, 96, 71, 39, 73, 28, 38, 42, 33, 13, 41, 78, 62, 7, 52, 37, 45, 43, 68, 17, 87, 79, 10, 72, 1, 7, 19, 7, 75, 51, 18, 44, 69, 1, 29, 70, 63, 63, 23, 88, 49, 65, 73, 66, 67, 10, 12, 30, 64, 99, 76, 13, 89, 71, 5, 28, 66, 44, 37, 85, 43, 15, 41, 3, 76, 57, 50, 80, 28, 47, 29, 42, 95, 92, 9, 27, 5, 55, 10, 59, 73, 85, 65, 31, 3, 38, 5, 12, 70, 60, 0, 90, 70, 79, 84, 29, 66, 68, 43, 10, 46, 11, 71]
last_save: 723

Gen:2001
last_save: 723
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(sigmoid(x[index]),+856354.3864).all():
      return True
    else:
      return False
  def adf1(index):
    if np.greater(x[index],+723251.1617).all():
      return False
    else:
      return False
  def adf2(index):
    if np.less(x[index],+031135.8256).all():
      return True
    else:
      return False
  def adf3(index):
    if np.less(x[index],+514523.9049).all():
      return True
    else:
      return False
  def adf4(index):
    if np.greater(rlog(x[index]),-034912.4465).all():
      return False
    else:
      return True
  def adf7(index):
    if np.equal(x[index],+334227.8059).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-400.035, adf1(1)*-671.848, adf2(2)*+288.995, adf3(3)*-897.751, adf4(4)*+524.332, adf7(7)*-319.630], [1, 1, 0, 1, 1], 972.461)
result=p(); 0.8333333333333334
IndLenGenome:282
IndGenome:[25, 59, 74, 63, 58, 52, 86, 27, 18, 86, 61, 92, 33, 65, 17, 63, 25, 72, 89, 29, 30, 20, 76, 11, 69, 75, 83, 19, 29, 79, 79, 45, 13, 74, 23, 57, 55, 2, 19, 22, 72, 59, 6, 76, 13, 47, 92, 44, 11, 28, 61, 45, 91, 82, 97, 57, 97, 27, 35, 31, 58, 16, 54, 27, 39, 34, 88, 29, 45, 68, 12, 80, 65, 54, 11, 48, 85, 66, 10, 15, 92, 81, 78, 17, 48, 72, 31, 53, 79, 69, 35, 21, 82, 83, 82, 21, 52, 97, 73, 20, 48, 90, 12, 33, 50, 96, 37, 25, 17, 67, 55, 17, 95, 78, 90, 27, 72, 35, 86, 59, 99, 81, 30, 53, 44, 11, 47, 62, 97, 76, 55, 14, 7, 29, 39, 51, 44, 94, 22, 65, 43, 94, 33, 73, 12, 84, 38, 54, 60, 62, 60, 84, 15, 91, 76, 28, 99, 44, 85, 32, 32, 53, 60, 98, 63, 90, 58, 26, 78, 44, 75, 56, 23, 75, 51, 43, 80, 26, 64, 63, 44, 41, 13, 70, 33, 34, 45, 50, 14, 29, 46, 59, 71, 48, 69, 0, 11, 87, 54, 70, 98, 26, 76, 77, 48, 9, 33, 29, 50, 10, 64, 87, 41, 30, 91, 97, 33, 55, 94, 30, 40, 100, 38, 10, 45, 31, 65, 51, 93, 39, 56, 40, 18, 26, 84, 52, 43, 57, 44, 68, 20, 1, 96, 32, 51, 49, 15, 14, 34, 52, 64, 6, 36, 16, 12, 97, 62, 32, 11, 60, 46, 47, 72, 70, 26, 70, 68, 5, 16, 38, 36, 77, 64, 77, 52, 5, 56, 17, 23, 45, 84, 45]
last_save: 724

Gen:2001
last_save: 724
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(sigmoid(x[index]),+802586.7110).all():
      return False
    else:
      return False
  def adf1(index):
    if np.greater(x[index],+017396.4901).all():
      return False
    else:
      return True
  def adf2(index):
    if np.equal(np.cos(x[index]),-464441.9096).all():
      return False
    else:
      return True
  def adf3(index):
    if np.greater(x[index],+936643.8465).all():
      return False
    else:
      return False
  def adf4(index):
    if np.greater(x[index],-399951.5265).all():
      return False
    else:
      return False
  def adf7(index):
    if np.less(psqrt(x[index]),+571212.2224).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+540.640, adf1(1)*+911.087, adf2(2)*+218.028, adf3(3)*+946.624, adf4(4)*-863.534, adf7(7)*+820.283], [1, 0, 0, 1, 1], 662.428)
result=p(); 0.8333333333333334
IndLenGenome:283
IndGenome:[95, 21, 65, 14, 96, 11, 7, 50, 60, 54, 44, 3, 31, 63, 94, 42, 26, 3, 46, 76, 58, 6, 97, 46, 95, 73, 8, 41, 13, 97, 55, 23, 61, 65, 58, 65, 11, 26, 79, 49, 94, 40, 12, 79, 37, 19, 60, 11, 31, 16, 12, 84, 79, 66, 95, 37, 67, 47, 4, 17, 38, 22, 82, 73, 7, 88, 49, 60, 66, 78, 34, 28, 73, 44, 56, 48, 19, 86, 35, 39, 93, 36, 3, 54, 67, 50, 19, 42, 101, 85, 81, 20, 15, 38, 87, 36, 88, 85, 34, 73, 83, 24, 62, 9, 6, 49, 82, 18, 69, 42, 54, 86, 61, 44, 54, 12, 58, 11, 52, 12, 79, 64, 72, 56, 43, 13, 13, 77, 34, 22, 94, 55, 43, 60, 23, 31, 36, 60, 18, 71, 99, 95, 16, 87, 69, 25, 46, 71, 62, 39, 47, 89, 24, 19, 11, 64, 26, 23, 86, 89, 89, 43, 44, 46, 30, 17, 56, 30, 36, 38, 65, 35, 30, 80, 11, 81, 54, 55, 66, 15, 63, 11, 88, 62, 20, 72, 32, 92, 80, 64, 65, 43, 59, 90, 85, 25, 43, 9, 41, 48, 67, 33, 13, 81, 60, 41, 26, 91, 9, 90, 21, 17, 37, 42, 23, 19, 2, 35, 30, 63, 68, 1, 0, 97, 89, 17, 11, 50, 69, 43, 67, 90, 87, 16, 28, 82, 0, 5, 76, 78, 25, 53, 54, 46, 20, 92, 84, 54, 30, 13, 1, 0, 61, 41, 64, 11, 65, 8, 4, 1, 3, 72, 11, 14, 22, 26, 43, 53, 93, 6, 35, 5, 53, 92, 75, 38, 66, 22, 17, 99, 33, 82, 98]
last_save: 725

Gen:2001
last_save: 725
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:1.0
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(rlog(x[index]),-167158.8999).all():
      return False
    else:
      return True
  def adf1(index):
    if np.greater(rlog(x[index]),-476910.9779).all():
      return True
    else:
      return True
  def adf2(index):
    if np.greater(sigmoid(x[index]),+388904.2651).all():
      return False
    else:
      return False
  def adf3(index):
    if np.equal(np.sin(x[index]),+985167.0011).all():
      return True
    else:
      return True
  def adf4(index):
    if np.equal(x[index],+963542.8894).all():
      return True
    else:
      return True
  def adf7(index):
    if np.less(sigmoid(x[index]),+538544.7551).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+950.143, adf1(1)*+915.844, adf2(2)*-249.606, adf3(3)*+692.831, adf4(4)*-130.814, adf7(7)*-435.840], [1, 1, 0, 1, 0], 517.861)
result=p(); 0.6666666666666666
IndLenGenome:286
IndGenome:[86, 10, 72, 47, 31, 11, 79, 82, 64, 63, 15, 87, 63, 16, 41, 63, 31, 48, 95, 12, 85, 5, 48, 40, 27, 91, 80, 63, 81, 81, 98, 82, 49, 38, 38, 52, 33, 86, 11, 99, 94, 26, 7, 64, 66, 97, 39, 54, 26, 42, 12, 63, 86, 51, 70, 99, 87, 50, 78, 54, 18, 35, 98, 46, 44, 86, 68, 25, 95, 68, 54, 80, 6, 30, 95, 39, 96, 23, 53, 66, 33, 74, 53, 75, 15, 73, 33, 36, 56, 95, 21, 39, 16, 69, 54, 30, 33, 3, 81, 88, 49, 52, 54, 94, 70, 73, 61, 85, 9, 76, 28, 99, 59, 46, 62, 97, 40, 89, 21, 51, 64, 36, 32, 41, 18, 76, 77, 11, 40, 91, 13, 39, 21, 70, 51, 43, 86, 15, 98, 10, 39, 81, 65, 29, 63, 69, 18, 44, 15, 95, 69, 37, 68, 75, 77, 57, 54, 31, 52, 39, 22, 74, 48, 64, 70, 38, 80, 33, 11, 59, 62, 77, 58, 91, 2, 87, 65, 24, 68, 36, 80, 49, 70, 79, 68, 19, 42, 19, 85, 54, 43, 53, 98, 78, 99, 88, 75, 26, 89, 2, 71, 35, 56, 76, 66, 4, 33, 18, 40, 96, 19, 50, 38, 99, 16, 74, 21, 59, 88, 65, 89, 92, 57, 92, 25, 97, 44, 87, 1, 52, 64, 79, 67, 2, 53, 16, 14, 74, 44, 4, 8, 31, 56, 16, 88, 54, 53, 88, 56, 8, 2, 5, 54, 98, 14, 93, 67, 38, 66, 98, 55, 2, 100, 85, 70, 60, 53, 55, 29, 44, 58, 100, 23, 3, 62, 92, 86, 77, 91, 99, 78, 72, 33, 6, 61, 53]
last_save: 726

Gen:33
TrainFitness:0.8333333333333334
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(np.sin(x[index]),-240521.3115).all():
      return False
    else:
      return False
  def adf1(index):
    if np.greater(np.sin(x[index]),-147720.3649).all():
      return True
    else:
      return True
  def adf2(index):
    if np.greater(x[index],+478458.9565).all():
      return True
    else:
      return True
  def adf3(index):
    if np.greater(x[index],+036545.4276).all():
      return True
    else:
      return False
  def adf4(index):
    if np.equal(x[index],-444281.3255).all():
      return True
    else:
      return True
  def adf7(index):
    if np.equal(rlog(x[index]),+907968.4478).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*-415.892, adf1(1)*+521.155, adf2(2)*+041.214, adf3(3)*+354.310, adf4(4)*-111.396, adf7(7)*-556.053], [1, 0, 0, 1, 0], 908.968)
result=p(); 0.8333333333333334
IndLenGenome:432
IndGenome:[30, 75, 16, 45, 15, 82, 60, 45, 51, 42, 72, 4, 20, 35, 32, 81, 3, 81, 51, 85, 23, 17, 60, 91, 18, 94, 54, 89, 63, 62, 21, 14, 37, 47, 12, 90, 53, 56, 34, 29, 34, 10, 9, 43, 69, 89, 66, 28, 74, 34, 97, 38, 84, 75, 18, 99, 55, 16, 15, 62, 22, 22, 35, 51, 61, 46, 66, 87, 50, 93, 96, 95, 24, 95, 74, 42, 97, 86, 18, 23, 88, 73, 80, 51, 76, 5, 87, 34, 14, 44, 22, 68, 31, 63, 12, 65, 65, 40, 46, 45, 23, 53, 56, 34, 29, 34, 10, 9, 50, 77, 89, 66, 28, 74, 34, 97, 38, 38, 82, 68, 35, 8, 17, 61, 24, 31, 25, 88, 49, 22, 52, 54, 89, 25, 82, 21, 1, 15, 25, 76, 38, 59, 50, 74, 91, 42, 61, 14, 87, 40, 40, 23, 25, 84, 83, 91, 80, 43, 31, 79, 51, 11, 51, 43, 99, 16, 10, 15, 16, 5, 75, 86, 40, 75, 93, 90, 53, 56, 62, 29, 34, 10, 9, 50, 8, 89, 66, 28, 74, 34, 97, 54, 69, 46, 29, 29, 57, 20, 95, 86, 17, 43, 78, 66, 44, 2, 65, 99, 24, 36, 33, 37, 81, 12, 90, 53, 40, 40, 23, 25, 84, 83, 79, 74, 43, 31, 79, 51, 49, 25, 65, 98, 88, 42, 34, 17, 82, 63, 62, 95, 64, 20, 39, 63, 83, 46, 83, 20, 69, 8, 71, 11, 49, 13, 53, 30, 58, 10, 45, 75, 64, 66, 13, 40, 29, 69, 39, 30, 39, 40, 60, 10, 58, 40, 17, 23, 39, 88, 41, 62, 37, 87, 44, 0, 44, 31, 93, 40, 63, 31, 84, 13, 65, 93, 49, 46, 33, 97, 67, 41, 23, 31, 47, 20, 70, 77, 70, 30, 79, 87, 72, 49, 14, 23, 95, 24, 89, 58, 66, 97, 51, 22, 15, 88, 20, 18, 34, 53, 19, 28, 32, 34, 10, 32, 44, 57, 75, 99, 33, 21, 85, 45, 69, 65, 49, 63, 7, 23, 66, 25, 70, 35, 66, 88, 59, 15, 73, 49, 91, 22, 51, 100, 10, 36, 22, 60, 9, 38, 76, 89, 18, 73, 79, 27, 45, 27, 62, 19, 12, 2, 53, 4, 78, 84, 29, 71, 93, 19, 44, 42, 81, 84, 83, 2, 83, 99, 34, 2, 29, 19, 41, 11, 84, 23, 58, 48, 41, 0, 92, 6, 88, 21, 82, 51, 51, 12, 63, 92, 79, 8, 98, 43, 100, 96, 20, 17, 47, 78, 96, 28, 9, 22]
last_save: 726

Gen:2033
last_save: 726
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(rlog(x[index]),+080510.7510).all():
      return False
    else:
      return False
  def adf1(index):
    if np.equal(psqrt(x[index]),-930631.5769).all():
      return False
    else:
      return True
  def adf2(index):
    if np.equal(x[index],-045789.3900).all():
      return True
    else:
      return False
  def adf3(index):
    if np.less(np.sin(x[index]),+202697.3081).all():
      return True
    else:
      return True
  def adf4(index):
    if np.equal(psqrt(x[index]),+031608.5603).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(x[index],-866536.9161).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+658.142, adf1(1)*-200.984, adf2(2)*-881.098, adf3(3)*+210.753, adf4(4)*-211.533, adf7(7)*+785.710], [0, 0, 1, 0, 1], 131.478)
result=p(); 0.6666666666666666
IndLenGenome:285
IndGenome:[24, 86, 75, 46, 30, 29, 81, 62, 13, 95, 54, 4, 51, 77, 12, 2, 26, 11, 50, 63, 58, 18, 77, 57, 63, 21, 31, 33, 5, 24, 14, 82, 13, 30, 81, 24, 20, 43, 54, 15, 83, 1, 15, 75, 12, 16, 30, 68, 57, 99, 57, 17, 32, 50, 4, 60, 6, 83, 97, 70, 3, 4, 53, 55, 49, 28, 4, 88, 86, 71, 24, 84, 83, 41, 84, 55, 84, 25, 88, 14, 79, 52, 81, 45, 33, 31, 60, 60, 23, 55, 62, 19, 98, 34, 61, 77, 45, 95, 38, 94, 3, 7, 15, 67, 87, 70, 14, 45, 16, 97, 64, 78, 25, 10, 64, 56, 11, 50, 53, 40, 72, 57, 90, 63, 38, 30, 91, 79, 98, 98, 90, 89, 80, 76, 90, 95, 21, 71, 69, 6, 39, 91, 96, 30, 86, 32, 55, 53, 70, 86, 55, 40, 18, 42, 41, 83, 80, 38, 24, 72, 63, 77, 93, 78, 99, 70, 81, 23, 36, 65, 56, 23, 30, 53, 25, 32, 53, 59, 79, 25, 91, 66, 91, 63, 56, 75, 16, 76, 88, 69, 24, 100, 16, 80, 51, 67, 81, 46, 78, 4, 3, 24, 11, 12, 4, 71, 20, 49, 82, 4, 30, 58, 36, 74, 80, 48, 19, 64, 26, 94, 37, 31, 74, 64, 97, 50, 74, 99, 53, 48, 69, 53, 91, 100, 3, 2, 13, 56, 6, 2, 20, 31, 76, 51, 4, 90, 15, 6, 41, 73, 26, 31, 28, 39, 6, 51, 29, 92, 94, 51, 30, 89, 19, 21, 84, 39, 83, 3, 64, 74, 54, 47, 25, 21, 66, 30, 27, 95, 69, 87, 13, 80, 94, 32, 3]
last_save: 727

Gen:10
TrainFitness:0.8333333333333334
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],-441722.6103).all():
      if np.greater(rlog(x[index]),-477799.1127).all():
        return False
      else:
        return True
      return True
    else:
      if np.less(x[index],-648360.5471).all():
        return True
      else:
        return False
      return True
  def adf1(index):
    if np.less(x[index],-709374.5504).all():
      if np.less(np.cos(x[index]),-788977.4899).all():
        return True
      else:
        return False
      return False
    else:
      if np.less(x[index],+759757.7860).all():
        return False
      else:
        return True
      return True
  def adf2(index):
    if np.less(x[index],-226794.6194).all():
      return True
    else:
      return True
  def adf3(index):
    if np.greater(x[index],-676626.1817).all():
      return True
    else:
      return True
  def adf4(index):
    if np.less(x[index],+010135.8156).all():
      return True
    else:
      return False
  def adf7(index):
    if np.equal(sigmoid(x[index]),+377461.3349).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-777.255, adf1(1)*+597.577, adf2(2)*+366.932, adf3(3)*+622.679, adf4(4)*+946.413, adf7(7)*-116.766], [0, 1, 0, 1, 1], 657.352)
result=p(); 0.8333333333333334
IndLenGenome:365
IndGenome:[24, 86, 75, 46, 30, 29, 81, 62, 13, 95, 54, 4, 51, 77, 12, 2, 26, 11, 50, 63, 77, 93, 40, 76, 25, 25, 68, 24, 7, 7, 57, 99, 99, 51, 31, 22, 27, 27, 28, 72, 83, 13, 17, 68, 37, 67, 86, 14, 48, 13, 96, 20, 75, 74, 37, 11, 82, 61, 14, 16, 90, 80, 16, 5, 34, 27, 9, 17, 90, 49, 23, 57, 4, 75, 5, 80, 94, 13, 52, 66, 31, 85, 93, 92, 37, 58, 98, 79, 77, 67, 14, 28, 39, 19, 8, 97, 97, 67, 22, 95, 45, 36, 34, 97, 85, 69, 97, 35, 57, 87, 68, 66, 40, 93, 56, 96, 79, 13, 52, 39, 98, 87, 26, 82, 92, 76, 17, 59, 34, 56, 81, 59, 94, 16, 34, 61, 73, 57, 93, 99, 11, 1, 46, 37, 56, 56, 12, 66, 31, 58, 91, 77, 40, 56, 85, 97, 43, 65, 12, 86, 33, 90, 51, 40, 21, 53, 75, 58, 41, 55, 56, 82, 15, 20, 75, 56, 86, 99, 33, 94, 26, 93, 37, 57, 54, 26, 91, 93, 3, 54, 19, 12, 33, 14, 28, 39, 19, 8, 97, 97, 67, 22, 95, 45, 36, 34, 97, 85, 69, 97, 35, 57, 87, 68, 66, 40, 93, 56, 96, 79, 13, 52, 39, 98, 87, 26, 82, 92, 76, 17, 59, 34, 56, 81, 59, 94, 16, 34, 61, 73, 57, 93, 99, 11, 1, 46, 37, 56, 56, 12, 66, 31, 58, 91, 77, 40, 56, 85, 97, 43, 65, 12, 86, 33, 90, 81, 63, 71, 24, 25, 77, 37, 37, 91, 49, 90, 28, 44, 27, 72, 11, 34, 59, 0, 51, 23, 45, 77, 21, 79, 7, 70, 21, 35, 89, 67, 40, 52, 73, 48, 61, 51, 15, 16, 99, 57, 98, 4, 64, 11, 29, 73, 64, 72, 0, 68, 77, 38, 75, 78, 51, 73, 36, 3, 98, 60, 16, 8, 86, 24, 82, 3, 28, 12, 98, 21, 63, 16, 29, 84, 67, 75, 63, 41, 100, 80, 38, 89, 96, 89, 92, 15, 31, 14, 11, 23, 7, 31, 59, 78, 57, 72, 56, 0, 44]
last_save: 727

Gen:2010
last_save: 727
Exit:FalseFalseTrue