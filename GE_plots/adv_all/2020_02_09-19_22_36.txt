Dataset:Spiral/Full.csv
FS:False
Seed:1235
Size:7

Gen:1
TrainFitness:0.7777777777777778
TestFitness:0.5555555555555556
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],+408819.8104).all():
      return True
    else:
      return True
  def adf1(index):
    if np.less(sigmoid(x[index]),-972220.8765).all():
      return False
    else:
      return False
  def adf2(index):
    if np.less(x[index],+688416.0243).all():
      return True
    else:
      return False
  def adf3(index):
    if np.equal(np.sin(x[index]),-278568.8004).all():
      return True
    else:
      return True
  def adf4(index):
    if np.equal(x[index],-708660.0527).all():
      return False
    else:
      return True
  def adf5(index):
    if np.greater(x[index],+774666.7256).all():
      return True
    else:
      return False
  def adf6(index):
    if np.less(x[index],-259793.4266).all():
      return True
    else:
      return True
  def adf7(index):
    if np.equal(psqrt(x[index]),-208580.5201).all():
      return True
    else:
      return False
  def adf8(index):
    if np.greater(np.cos(x[index]),-568723.8145).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+068.295, adf1(1)*-275.422, adf2(2)*-767.161, adf3(3)*-477.601, adf4(4)*+638.758, adf5(5)*-525.073, adf6(6)*-957.258, adf7(7)*+729.122, adf8(8)*+446.856], [1, 0, 1, 0, 0, 0, 1, 0], 737.546)
result=p(); 0.7777777777777778
IndLenGenome:415
IndGenome:[65, 62, 80, 14, 36, 67, 72, 69, 4, 17, 82, 53, 21, 45, 15, 68, 58, 58, 66, 21, 34, 78, 21, 50, 52, 85, 74, 31, 39, 25, 50, 83, 47, 30, 90, 28, 66, 21, 83, 2, 8, 3, 76, 73, 26, 76, 93, 36, 6, 94, 37, 72, 89, 12, 10, 55, 59, 21, 33, 93, 55, 60, 96, 81, 36, 63, 53, 15, 38, 54, 67, 69, 41, 74, 84, 94, 96, 97, 20, 48, 14, 41, 80, 97, 65, 37, 88, 65, 90, 82, 54, 23, 42, 87, 27, 64, 99, 98, 30, 58, 29, 97, 18, 56, 85, 32, 85, 30, 55, 17, 57, 58, 16, 61, 56, 31, 72, 61, 47, 75, 82, 75, 10, 12, 85, 81, 47, 11, 74, 20, 25, 85, 92, 80, 78, 51, 23, 14, 66, 42, 47, 73, 67, 89, 52, 47, 32, 46, 92, 25, 26, 50, 18, 74, 92, 16, 26, 96, 77, 57, 42, 14, 57, 2, 65, 44, 14, 74, 15, 47, 68, 74, 23, 60, 54, 93, 56, 50, 14, 55, 62, 38, 86, 91, 33, 65, 37, 19, 68, 50, 35, 60, 15, 15, 69, 43, 94, 78, 27, 68, 27, 66, 54, 67, 16, 90, 6, 35, 85, 31, 52, 86, 44, 89, 42, 13, 58, 40, 75, 72, 15, 46, 51, 88, 28, 25, 63, 50, 56, 60, 78, 65, 86, 99, 87, 78, 94, 54, 51, 52, 57, 18, 55, 98, 16, 20, 81, 18, 42, 93, 59, 77, 17, 55, 87, 92, 51, 33, 99, 99, 46, 24, 56, 88, 77, 49, 40, 29, 45, 94, 26, 86, 53, 87, 12, 54, 82, 42, 19, 89, 62, 68, 39, 62, 78, 85, 4, 79, 78, 75, 37, 57, 35, 55, 82, 5, 21, 0, 87, 92, 73, 81, 11, 72, 41, 65, 4, 14, 45, 41, 61, 44, 63, 66, 33, 12, 49, 22, 58, 47, 17, 81, 77, 4, 5, 23, 37, 50, 11, 11, 40, 74, 5, 29, 93, 40, 31, 66, 2, 80, 84, 55, 95, 56, 66, 87, 62, 82, 2, 78, 47, 7, 93, 21, 25, 60, 39, 48, 72, 85, 4, 72, 84, 70, 22, 36, 86, 100, 28, 11, 77, 92, 41, 9, 86, 64, 7, 72, 2, 94, 85, 48, 12, 83, 37, 53, 75, 49, 13, 12, 34, 44, 62, 25, 98, 30, 18, 26, 50, 88, 24, 78, 80, 40, 97, 5, 8, 54, 72, 55, 98, 40, 31, 72, 19]
last_save: 711

Gen:2001
last_save: 711
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],+761660.9528).all():
      return False
    else:
      return True
  def adf1(index):
    if np.greater(np.sin(x[index]),-178662.0641).all():
      return False
    else:
      return True
  def adf2(index):
    if np.less(x[index],-973781.9846).all():
      return True
    else:
      return False
  def adf3(index):
    if np.greater(rlog(x[index]),-896340.0037).all():
      return False
    else:
      return True
  def adf4(index):
    if np.greater(x[index],+021035.3630).all():
      return False
    else:
      return True
  def adf5(index):
    if np.equal(np.tanh(x[index]),+941601.3695).all():
      return False
    else:
      return True
  def adf6(index):
    if np.greater(np.cos(x[index]),+936469.6462).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(x[index],-513053.6903).all():
      return False
    else:
      return False
  def adf8(index):
    if np.equal(sigmoid(x[index]),+473233.7572).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*-142.052, adf1(1)*-398.020, adf2(2)*+908.108, adf3(3)*-438.934, adf4(4)*-645.231, adf5(5)*-779.472, adf6(6)*-669.355, adf7(7)*+009.684, adf8(8)*-444.129], [0, 1, 1, 1, 0, 0, 0, 0], 604.120)
result=p(); 0.6666666666666666
IndLenGenome:417
IndGenome:[43, 73, 96, 81, 27, 73, 80, 35, 77, 25, 50, 65, 81, 89, 3, 12, 17, 67, 61, 75, 48, 38, 93, 79, 15, 23, 27, 26, 87, 2, 65, 85, 82, 24, 43, 88, 24, 24, 24, 28, 86, 31, 51, 2, 29, 58, 93, 13, 36, 67, 20, 31, 81, 56, 57, 93, 49, 37, 63, 80, 74, 72, 76, 96, 46, 10, 30, 34, 30, 34, 14, 80, 70, 31, 92, 40, 61, 97, 95, 98, 69, 60, 35, 19, 67, 24, 85, 36, 98, 15, 86, 44, 57, 46, 70, 60, 72, 9, 11, 33, 16, 86, 52, 25, 49, 20, 21, 95, 68, 16, 81, 46, 93, 18, 46, 95, 75, 36, 16, 39, 33, 92, 69, 79, 57, 10, 79, 23, 23, 61, 94, 79, 89, 58, 19, 52, 70, 68, 86, 61, 2, 67, 67, 39, 70, 65, 50, 93, 91, 73, 51, 59, 16, 46, 37, 96, 20, 57, 87, 97, 30, 34, 67, 80, 82, 93, 13, 55, 88, 66, 90, 45, 89, 85, 56, 5, 86, 46, 66, 40, 22, 57, 23, 93, 92, 89, 17, 85, 42, 90, 66, 69, 56, 67, 18, 34, 33, 11, 40, 52, 65, 46, 54, 73, 36, 17, 11, 56, 34, 57, 72, 92, 69, 36, 94, 75, 21, 25, 94, 78, 99, 59, 56, 53, 71, 84, 82, 26, 10, 64, 41, 61, 38, 29, 23, 54, 14, 79, 94, 40, 56, 46, 82, 67, 49, 21, 18, 38, 15, 22, 93, 51, 99, 93, 64, 94, 44, 43, 67, 43, 50, 40, 72, 33, 76, 56, 69, 73, 12, 10, 48, 73, 40, 89, 32, 68, 44, 36, 33, 59, 29, 21, 24, 67, 82, 95, 21, 29, 24, 10, 24, 44, 25, 3, 87, 33, 73, 46, 90, 39, 41, 23, 27, 87, 98, 55, 69, 4, 0, 24, 39, 45, 64, 81, 37, 14, 82, 89, 87, 48, 21, 97, 77, 17, 71, 54, 66, 52, 57, 63, 70, 52, 12, 62, 62, 51, 57, 76, 91, 78, 93, 74, 96, 19, 51, 70, 94, 97, 33, 82, 95, 59, 11, 42, 84, 13, 75, 72, 2, 12, 65, 61, 26, 35, 50, 25, 96, 20, 42, 20, 34, 82, 58, 6, 89, 87, 78, 29, 82, 20, 57, 81, 42, 27, 22, 46, 34, 94, 1, 66, 94, 25, 56, 89, 4, 87, 93, 72, 76, 67, 90, 67, 96, 63, 90, 82, 68, 84, 83, 34, 82, 16, 66, 38, 27, 31, 2]
last_save: 712

Gen:260
TrainFitness:0.7777777777777778
TestFitness:0.4444444444444444
MaxGenLen:575
Individual: def p():
  def adf0(index):
    if np.equal(x[index],-516933.6958).all():
      return True
    else:
      return False
  def adf1(index):
    if np.greater(x[index],+934487.6285).all():
      return False
    else:
      return False
  def adf2(index):
    if np.equal(rlog(x[index]),+707503.9584).all():
      return False
    else:
      return False
  def adf3(index):
    if np.greater(np.sin(x[index]),+700702.3047).all():
      return True
    else:
      return False
  def adf4(index):
    if np.greater(x[index],+034932.2380).all():
      return True
    else:
      return False
  def adf5(index):
    if np.equal(np.tanh(x[index]),+057178.3490).all():
      return False
    else:
      return False
  def adf6(index):
    if np.less(x[index],+905727.7561).all():
      return False
    else:
      return False
  def adf7(index):
    if np.less(x[index],+005127.7561).all():
      return False
    else:
      return True
  def adf8(index):
    if np.greater(rlog(x[index]),+929013.3956).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-551.518, adf1(1)*-230.466, adf2(2)*+833.184, adf3(3)*+727.070, adf4(4)*-703.493, adf5(5)*+802.127, adf6(6)*+349.057, adf7(7)*-330.390, adf8(8)*-775.611], [1, 1, 1, 0, 0, 0, 0, 0], 131.719)
result=p(); 0.7777777777777778
IndLenGenome:561
IndGenome:[13, 28, 41, 73, 35, 19, 33, 71, 100, 45, 1, 96, 59, 43, 33, 56, 29, 25, 48, 22, 39, 11, 23, 66, 25, 28, 2, 72, 59, 23, 4, 64, 18, 27, 96, 52, 18, 15, 17, 47, 59, 91, 89, 30, 82, 13, 20, 57, 37, 20, 57, 25, 100, 73, 99, 75, 78, 64, 37, 33, 35, 59, 66, 38, 0, 26, 64, 50, 17, 70, 80, 37, 50, 82, 63, 90, 84, 77, 32, 77, 100, 37, 60, 93, 81, 70, 97, 10, 53, 94, 29, 43, 2, 22, 63, 28, 50, 94, 13, 87, 67, 38, 58, 38, 13, 74, 79, 90, 25, 57, 21, 87, 58, 83, 74, 79, 90, 25, 57, 21, 87, 58, 83, 3, 90, 3, 69, 20, 5, 47, 32, 97, 27, 65, 16, 71, 61, 41, 21, 87, 58, 83, 3, 64, 3, 100, 20, 5, 31, 32, 97, 27, 65, 16, 71, 61, 20, 61, 33, 75, 66, 28, 56, 38, 92, 69, 52, 29, 10, 41, 23, 73, 99, 75, 46, 98, 37, 27, 83, 71, 59, 4, 15, 95, 21, 55, 51, 18, 37, 37, 50, 82, 63, 90, 84, 36, 76, 77, 100, 37, 58, 23, 23, 31, 88, 84, 63, 90, 84, 77, 32, 77, 100, 37, 60, 93, 81, 70, 97, 10, 53, 94, 29, 43, 32, 22, 63, 28, 10, 72, 81, 72, 67, 38, 68, 63, 13, 74, 79, 90, 25, 57, 70, 87, 58, 83, 3, 90, 3, 69, 20, 5, 47, 32, 97, 27, 65, 16, 71, 61, 41, 61, 33, 75, 66, 28, 56, 38, 60, 69, 91, 23, 11, 57, 81, 89, 72, 18, 69, 52, 29, 84, 31, 23, 73, 99, 75, 46, 98, 37, 27, 83, 71, 13, 4, 15, 95, 21, 37, 48, 18, 37, 37, 50, 82, 63, 90, 84, 36, 32, 77, 100, 37, 58, 23, 23, 31, 88, 84, 50, 87, 15, 69, 61, 76, 69, 31, 62, 24, 31, 12, 1, 22, 87, 26, 96, 95, 99, 74, 43, 32, 89, 63, 41, 10, 6, 92, 86, 42, 55, 23, 50, 22, 32, 72, 18, 57, 75, 81, 27, 65, 16, 71, 61, 41, 81, 8, 30, 69, 51, 7, 59, 7, 97, 35, 78, 93, 15, 30, 87, 32, 51, 66, 19, 68, 17, 96, 12, 19, 19, 73, 93, 21, 20, 85, 39, 11, 30, 6, 69, 7, 95, 31, 39, 38, 12, 51, 37, 18, 73, 37, 34, 53, 28, 3, 99, 77, 43, 86, 90, 32, 70, 3, 73, 25, 12, 3, 87, 34, 45, 54, 95, 37, 48, 21, 70, 54, 0, 94, 5, 11, 10, 37, 50, 82, 63, 72, 47, 71, 85, 98, 86, 11, 10, 36, 25, 89, 81, 8, 85, 71, 76, 99, 3, 28, 47, 33, 66, 27, 34, 65, 77, 37, 67, 83, 20, 79, 10, 76, 44, 85, 15, 59, 59, 75, 6, 32, 54, 66, 27, 0, 29, 80, 27, 42, 18, 96, 62, 89, 35, 40, 60, 59, 86, 86, 36, 84, 93, 74, 42, 86, 94, 95, 24, 34, 31, 45, 39, 52, 53, 48, 49, 13, 45, 18, 29, 92, 83, 51, 47, 34, 93, 53, 16, 5, 27, 91, 7, 46, 40, 12, 39, 48, 9, 90, 0, 28, 81, 84, 51, 15, 75, 89, 82, 50, 68, 16, 85, 7, 10, 66]
last_save: 712

Gen:2260
last_save: 712
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(np.sin(x[index]),-681841.3341).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(np.sin(x[index]),-419203.9392).all():
      return True
    else:
      return True
  def adf2(index):
    if np.equal(x[index],+674029.1902).all():
      return True
    else:
      return False
  def adf3(index):
    if np.greater(sigmoid(x[index]),+287198.7193).all():
      return True
    else:
      return True
  def adf4(index):
    if np.less(psqrt(x[index]),+000064.2421).all():
      return False
    else:
      return False
  def adf5(index):
    if np.greater(np.tanh(x[index]),-002397.0368).all():
      return False
    else:
      return True
  def adf6(index):
    if np.greater(x[index],+017159.7743).all():
      return True
    else:
      return False
  def adf7(index):
    if np.less(x[index],+168586.2869).all():
      return True
    else:
      return True
  def adf8(index):
    if np.greater(x[index],+542406.2552).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*-122.694, adf1(1)*+220.975, adf2(2)*+331.838, adf3(3)*-252.591, adf4(4)*+939.766, adf5(5)*-677.865, adf6(6)*-737.443, adf7(7)*+332.534, adf8(8)*+633.532], [0, 1, 1, 0, 1, 0, 0, 1], 209.230)
result=p(); 0.6666666666666666
IndLenGenome:417
IndGenome:[75, 17, 84, 37, 45, 16, 18, 15, 93, 86, 51, 47, 37, 3, 88, 72, 60, 58, 94, 87, 13, 90, 77, 72, 52, 51, 45, 66, 29, 35, 27, 23, 54, 93, 88, 99, 32, 76, 67, 51, 34, 76, 73, 94, 60, 82, 2, 46, 92, 12, 64, 90, 60, 18, 92, 57, 95, 14, 18, 76, 72, 96, 76, 25, 77, 25, 47, 4, 21, 28, 22, 39, 90, 22, 67, 15, 83, 26, 17, 67, 20, 51, 12, 23, 58, 47, 18, 88, 84, 41, 43, 75, 24, 75, 8, 38, 11, 3, 15, 35, 55, 51, 80, 53, 29, 82, 43, 34, 37, 32, 20, 83, 55, 14, 75, 64, 72, 75, 85, 43, 43, 74, 82, 25, 12, 83, 65, 97, 12, 46, 46, 35, 67, 96, 10, 59, 89, 85, 68, 80, 76, 45, 43, 50, 63, 60, 39, 42, 87, 53, 73, 91, 37, 19, 50, 54, 79, 47, 66, 29, 52, 28, 84, 75, 47, 95, 29, 28, 51, 31, 87, 87, 28, 93, 26, 98, 27, 93, 40, 78, 63, 72, 97, 76, 64, 62, 61, 85, 65, 49, 82, 24, 15, 58, 91, 82, 3, 32, 52, 58, 98, 49, 46, 26, 19, 46, 11, 23, 33, 57, 7, 9, 32, 77, 74, 23, 86, 69, 73, 84, 82, 38, 68, 56, 69, 5, 41, 90, 62, 37, 29, 15, 58, 37, 61, 7, 80, 36, 89, 93, 71, 17, 90, 36, 38, 20, 74, 71, 73, 41, 12, 94, 26, 91, 33, 82, 66, 51, 54, 69, 43, 82, 71, 60, 39, 47, 44, 11, 24, 16, 50, 30, 61, 84, 90, 22, 92, 80, 6, 34, 76, 31, 70, 53, 42, 100, 20, 72, 70, 98, 50, 50, 19, 96, 39, 96, 35, 62, 43, 16, 73, 75, 94, 92, 15, 98, 18, 7, 51, 56, 98, 96, 43, 78, 88, 100, 96, 9, 78, 35, 80, 54, 9, 16, 31, 85, 59, 37, 65, 28, 47, 79, 53, 25, 26, 42, 69, 65, 74, 26, 37, 3, 36, 72, 30, 54, 70, 8, 58, 92, 21, 30, 72, 44, 48, 85, 96, 74, 45, 38, 0, 49, 40, 3, 57, 58, 88, 21, 60, 66, 88, 78, 92, 66, 30, 55, 56, 69, 89, 98, 63, 82, 48, 86, 65, 21, 38, 2, 100, 25, 79, 74, 25, 22, 22, 3, 15, 71, 90, 91, 22, 17, 91, 1, 11, 37, 6, 73, 34, 71, 20, 3, 44, 17, 3, 31, 80]
last_save: 713

Gen:27
TrainFitness:0.7777777777777778
TestFitness:0.5555555555555556
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],+659638.0378).all():
      return False
    else:
      return False
  def adf1(index):
    if np.equal(np.tanh(x[index]),-873031.1689).all():
      if np.greater(x[index],+927963.7535).all():
        return False
      else:
        return True
      return True
    else:
      if np.greater(x[index],+005071.5359).all():
        return True
      else:
        return False
      return False
  def adf2(index):
    if np.greater(x[index],+296216.1025).all():
      return False
    else:
      return False
  def adf3(index):
    if np.equal(np.tanh(x[index]),+965879.9438).all():
      return False
    else:
      return False
  def adf4(index):
    if np.equal(np.tanh(x[index]),+598704.4605).all():
      return False
    else:
      return True
  def adf5(index):
    if np.equal(x[index],+404157.5289).all():
      return False
    else:
      return False
  def adf6(index):
    if np.less(x[index],-936700.6816).all():
      return True
    else:
      return True
  def adf7(index):
    if np.greater(np.cos(x[index]),+717343.4713).all():
      return True
    else:
      return True
  def adf8(index):
    if np.less(x[index],+851041.7180).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+517.467, adf1(1)*+780.218, adf2(2)*+376.029, adf3(3)*-995.516, adf4(4)*-993.732, adf5(5)*-556.609, adf6(6)*+548.984, adf7(7)*-759.816, adf8(8)*-955.516], [1, 0, 1, 1, 0, 1, 0, 1], 634.253)
result=p(); 0.7777777777777778
IndLenGenome:432
IndGenome:[28, 5, 85, 9, 26, 67, 86, 38, 93, 46, 75, 79, 66, 63, 88, 20, 53, 87, 58, 67, 63, 31, 22, 23, 35, 76, 8, 92, 33, 97, 98, 97, 83, 90, 33, 91, 61, 6, 38, 89, 29, 45, 99, 15, 98, 7, 19, 72, 7, 19, 26, 73, 77, 55, 93, 15, 3, 46, 66, 23, 51, 89, 80, 20, 40, 70, 50, 85, 70, 77, 21, 75, 93, 15, 69, 10, 77, 27, 79, 11, 42, 49, 76, 20, 50, 12, 49, 86, 12, 11, 26, 51, 80, 62, 85, 45, 17, 49, 41, 29, 60, 44, 95, 88, 91, 69, 86, 45, 98, 67, 79, 39, 74, 43, 18, 31, 87, 50, 13, 14, 16, 38, 69, 50, 60, 35, 79, 48, 67, 30, 74, 74, 26, 10, 75, 1, 22, 42, 59, 17, 19, 48, 60, 85, 64, 90, 24, 71, 95, 47, 85, 12, 68, 39, 65, 91, 90, 79, 22, 35, 43, 37, 75, 79, 53, 96, 87, 50, 10, 86, 78, 81, 16, 78, 96, 67, 59, 18, 68, 97, 51, 50, 30, 57, 51, 27, 53, 14, 43, 64, 67, 61, 53, 78, 96, 94, 83, 82, 41, 94, 40, 45, 98, 75, 11, 30, 4, 91, 27, 81, 68, 60, 17, 48, 63, 36, 74, 10, 10, 85, 21, 47, 84, 56, 7, 35, 68, 36, 27, 38, 90, 32, 21, 38, 37, 54, 60, 93, 27, 36, 10, 32, 79, 79, 91, 34, 89, 49, 45, 15, 31, 96, 33, 33, 15, 29, 39, 33, 67, 63, 2, 55, 81, 31, 85, 75, 46, 66, 50, 19, 20, 36, 81, 75, 64, 28, 99, 28, 34, 52, 49, 40, 57, 85, 79, 58, 51, 86, 79, 91, 2, 89, 55, 45, 15, 31, 96, 33, 33, 42, 59, 45, 56, 99, 50, 97, 57, 96, 43, 44, 2, 45, 23, 79, 74, 96, 21, 80, 12, 8, 18, 86, 37, 36, 68, 80, 2, 66, 77, 81, 46, 82, 56, 9, 23, 46, 56, 80, 82, 53, 58, 50, 57, 51, 21, 45, 20, 91, 35, 31, 62, 50, 1, 80, 35, 3, 48, 97, 51, 7, 70, 20, 18, 25, 60, 36, 10, 86, 67, 89, 24, 79, 80, 24, 30, 94, 95, 1, 15, 19, 34, 7, 36, 83, 6, 40, 81, 21, 28, 72, 7, 74, 98, 27, 77, 15, 58, 89, 51, 37, 16, 60, 96, 81, 26, 48, 44, 59, 30, 23, 92, 35, 36, 42, 96, 35, 74, 75, 11, 77, 77, 42, 85, 75, 89, 25, 60, 58, 3, 41, 53, 3]
last_save: 713

Gen:1980
TrainFitness:0.8888888888888888
TestFitness:0.3333333333333333
MaxGenLen:1085
Individual: def p():
  def adf0(index):
    if np.equal(x[index],-659038.0378).all():
      return False
    else:
      return False
  def adf1(index):
    if np.equal(np.tanh(x[index]),-893031.1689).all():
      if np.greater(x[index],-927961.7535).all():
        return False
      else:
        return True
      return True
    else:
      if np.greater(x[index],+004071.5395).all():
        return True
      else:
        return False
      return False
  def adf2(index):
    if np.greater(x[index],+206216.1025).all():
      return False
    else:
      return False
  def adf3(index):
    if np.equal(x[index],-196587.9943).all():
      return True
    else:
      return False
  def adf4(index):
    if np.equal(np.tanh(x[index]),+598704.4605).all():
      if np.less(psqrt(x[index]),-056041.6752).all():
        return True
      else:
        return False
      return False
    else:
      if np.equal(rlog(x[index]),-715399.9913).all():
        return True
      else:
        return False
      return False
  def adf5(index):
    if np.greater(x[index],+937315.1512).all():
      return True
    else:
      return False
  def adf6(index):
    if np.greater(np.cos(x[index]),+168528.9594).all():
      return False
    else:
      return False
  def adf7(index):
    if np.less(x[index],+783787.3031).all():
      if np.greater(rlog(x[index]),-518927.9617).all():
        return False
      else:
        return False
      return False
    else:
      if np.greater(x[index],+710098.3600).all():
        return True
      else:
        return False
      return False
  def adf8(index):
    if np.less(x[index],+000040.7153).all():
      if np.less(psqrt(x[index]),+296002.9626).all():
        return True
      else:
        return False
      return True
    else:
      if np.greater(np.cos(x[index]),-458196.5879).all():
        if np.equal(x[index],-034689.0753).all():
          return True
        else:
          return False
        return True
      else:
        if np.less(sigmoid(x[index]),+979815.4845).all():
          if np.greater(x[index],+223357.3670).all():
            if np.equal(sigmoid(x[index]),+708871.0071).all():
              return True
            else:
              return False
            return True
          else:
            if np.greater(np.sin(x[index]),-593787.3031).all():
              if np.greater(psqrt(x[index]),-587927.9637).all():
                return False
              else:
                return False
              return False
            else:
              if np.less(psqrt(x[index]),-000050.7153).all():
                return True
              else:
                return False
              return True
            return False
          return False
        else:
          if np.equal(np.cos(x[index]),+296216.1025).all():
            return False
          else:
            return False
          return False
        return False
      return False
  return multiple_operation([adf0(0)*+965.879, adf1(1)*+817.034, adf2(2)*+051.510, adf3(3)*-685.163, adf4(4)*+937.315, adf5(5)*-566.010, adf6(6)*-689.842, adf7(7)*+904.581, adf8(8)*+879.943], [1, 1, 0, 1, 0, 0, 0, 1], 753.870)
result=p(); 0.8888888888888888
IndLenGenome:933
IndGenome:[28, 5, 85, 9, 8, 67, 86, 65, 93, 46, 75, 79, 0, 63, 88, 20, 53, 87, 58, 67, 63, 31, 22, 23, 35, 76, 8, 92, 33, 97, 98, 99, 83, 90, 33, 91, 61, 6, 38, 89, 29, 45, 99, 84, 81, 7, 19, 72, 7, 19, 26, 41, 77, 55, 93, 15, 3, 46, 66, 23, 51, 89, 80, 20, 40, 70, 50, 94, 70, 77, 21, 75, 93, 99, 25, 10, 77, 27, 43, 11, 42, 49, 76, 16, 50, 12, 40, 86, 12, 11, 26, 51, 80, 62, 85, 45, 17, 49, 41, 29, 3, 44, 95, 88, 91, 69, 86, 45, 98, 67, 79, 39, 74, 43, 18, 31, 87, 50, 13, 14, 16, 38, 69, 50, 77, 35, 79, 48, 67, 30, 74, 74, 26, 10, 75, 1, 22, 42, 59, 17, 19, 48, 60, 85, 96, 90, 24, 71, 16, 47, 85, 12, 68, 39, 65, 57, 20, 40, 70, 50, 85, 70, 77, 21, 75, 93, 69, 69, 79, 79, 91, 53, 84, 49, 45, 15, 31, 96, 33, 33, 42, 29, 39, 33, 67, 63, 11, 55, 81, 75, 1, 22, 42, 59, 17, 19, 48, 60, 85, 64, 90, 66, 71, 46, 18, 85, 12, 68, 39, 65, 39, 74, 43, 75, 11, 30, 4, 91, 27, 36, 68, 60, 17, 48, 33, 97, 98, 97, 83, 90, 33, 91, 61, 6, 38, 10, 29, 45, 99, 15, 81, 58, 19, 72, 7, 19, 26, 41, 77, 55, 93, 15, 3, 75, 11, 38, 4, 91, 27, 81, 40, 60, 49, 48, 63, 36, 70, 10, 10, 85, 21, 47, 84, 56, 7, 35, 70, 36, 27, 20, 40, 70, 50, 94, 70, 77, 21, 75, 93, 15, 25, 10, 77, 27, 100, 11, 42, 49, 76, 20, 50, 12, 49, 86, 12, 56, 26, 51, 80, 62, 85, 45, 10, 49, 41, 29, 60, 44, 95, 88, 91, 69, 86, 45, 98, 67, 79, 39, 74, 43, 18, 31, 87, 50, 13, 14, 16, 38, 69, 50, 77, 35, 93, 48, 67, 30, 74, 74, 73, 10, 75, 1, 22, 42, 59, 17, 19, 48, 91, 85, 64, 48, 24, 85, 12, 68, 39, 65, 29, 90, 79, 22, 22, 43, 43, 75, 27, 53, 96, 87, 50, 5, 86, 78, 81, 16, 78, 21, 67, 70, 18, 68, 97, 51, 50, 30, 57, 51, 68, 53, 14, 8, 79, 51, 68, 60, 4, 95, 1, 15, 19, 33, 97, 98, 97, 83, 90, 33, 91, 61, 6, 38, 89, 29, 45, 99, 15, 98, 7, 19, 72, 47, 19, 26, 73, 77, 55, 93, 15, 3, 46, 66, 23, 51, 89, 80, 20, 40, 70, 50, 85, 70, 77, 21, 75, 93, 66, 69, 10, 77, 27, 79, 11, 42, 49, 76, 20, 50, 12, 49, 86, 12, 11, 26, 51, 80, 62, 85, 45, 17, 49, 41, 29, 60, 44, 95, 88, 91, 69, 86, 45, 98, 67, 79, 39, 74, 43, 18, 31, 87, 50, 13, 14, 16, 38, 69, 40, 45, 71, 75, 11, 30, 4, 91, 27, 36, 68, 15, 31, 96, 33, 33, 42, 29, 39, 33, 67, 63, 11, 55, 81, 31, 52, 75, 46, 66, 50, 11, 20, 36, 81, 75, 76, 28, 99, 28, 34, 52, 49, 40, 41, 29, 60, 44, 95, 88, 91, 69, 86, 45, 98, 67, 79, 39, 74, 43, 18, 31, 87, 50, 13, 14, 16, 38, 69, 50, 77, 35, 93, 48, 67, 30, 74, 74, 73, 10, 75, 1, 22, 42, 59, 17, 19, 48, 91, 85, 64, 90, 24, 38, 95, 77, 85, 12, 68, 39, 65, 91, 90, 79, 91, 35, 43, 37, 75, 79, 53, 96, 87, 58, 33, 86, 78, 81, 16, 78, 96, 67, 59, 18, 68, 97, 51, 50, 30, 57, 48, 27, 53, 14, 43, 64, 67, 50, 53, 78, 96, 35, 83, 82, 41, 94, 40, 45, 71, 75, 11, 30, 4, 91, 27, 36, 68, 60, 17, 48, 63, 36, 74, 10, 10, 85, 21, 47, 84, 56, 7, 35, 70, 36, 27, 38, 90, 32, 21, 38, 61, 54, 60, 93, 27, 36, 10, 32, 79, 79, 91, 53, 89, 49, 45, 15, 31, 96, 33, 33, 42, 29, 39, 33, 67, 63, 11, 55, 81, 31, 85, 1, 46, 66, 50, 11, 20, 36, 81, 75, 76, 28, 99, 28, 34, 52, 49, 40, 57, 85, 79, 58, 35, 86, 79, 91, 2, 89, 55, 45, 15, 31, 96, 33, 63, 42, 59, 45, 55, 99, 50, 97, 64, 74, 74, 85, 17, 18, 28, 97, 50, 62, 70, 37, 39, 34, 69, 55, 29, 93, 24, 83, 45, 83, 59, 23, 31, 5, 88, 55, 25, 11, 73, 60, 95, 64, 43, 42, 71, 26, 74, 87, 90, 56, 18, 94, 48, 83, 65, 23, 88, 57, 96, 43, 44, 2, 45, 23, 79, 74, 96, 53, 80, 12, 8, 18, 86, 37, 36, 68, 80, 2, 66, 77, 81, 46, 82, 56, 9, 23, 46, 56, 80, 82, 53, 58, 50, 57, 51, 21, 45, 20, 91, 35, 31, 62, 50, 1, 80, 35, 3, 48, 97, 51, 7, 70, 20, 18, 25, 60, 36, 10, 86, 67, 89, 24, 79, 80, 24, 30, 94, 95, 1, 15, 19, 34, 7, 36, 83, 6, 40, 81, 21, 28, 72, 7, 74, 98, 27, 77, 15, 58, 89, 51, 37, 16, 60, 96, 81, 26, 48, 44, 59, 30, 23, 92, 35, 36, 42, 96, 35, 74, 75, 11, 77, 77, 42, 85, 75, 89, 25, 60, 58, 3, 41, 53, 3]
last_save: 713

Gen:3980
last_save: 713
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.4444444444444444
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],+012248.7881).all():
      return False
    else:
      return True
  def adf1(index):
    if np.equal(rlog(x[index]),+753457.8453).all():
      return True
    else:
      return False
  def adf2(index):
    if np.less(x[index],-382426.4186).all():
      return True
    else:
      return False
  def adf3(index):
    if np.greater(x[index],-495620.7918).all():
      return True
    else:
      return True
  def adf4(index):
    if np.greater(np.cos(x[index]),+501048.1199).all():
      return True
    else:
      return True
  def adf5(index):
    if np.greater(sigmoid(x[index]),-689562.6162).all():
      return False
    else:
      return True
  def adf6(index):
    if np.equal(rlog(x[index]),-212545.7688).all():
      return False
    else:
      return False
  def adf7(index):
    if np.less(rlog(x[index]),+549858.0121).all():
      return True
    else:
      return False
  def adf8(index):
    if np.greater(np.sin(x[index]),-783666.8688).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+415.253, adf1(1)*+235.107, adf2(2)*-460.515, adf3(3)*+439.284, adf4(4)*-557.632, adf5(5)*-099.696, adf6(6)*+365.896, adf7(7)*+581.427, adf8(8)*-499.287], [0, 0, 1, 0, 1, 0, 0, 1], 118.870)
result=p(); 0.6666666666666666
IndLenGenome:418
IndGenome:[76, 94, 38, 70, 23, 75, 51, 11, 34, 17, 70, 12, 17, 55, 16, 10, 68, 59, 2, 26, 86, 63, 97, 58, 92, 49, 34, 62, 73, 27, 9, 26, 3, 22, 86, 46, 47, 70, 6, 89, 15, 91, 64, 56, 60, 37, 74, 51, 48, 52, 8, 16, 21, 39, 26, 57, 15, 68, 92, 46, 47, 80, 82, 64, 88, 25, 96, 77, 41, 92, 60, 87, 80, 73, 10, 98, 38, 72, 18, 78, 58, 56, 71, 18, 26, 95, 49, 96, 45, 16, 70, 20, 91, 28, 43, 47, 57, 94, 6, 74, 26, 35, 85, 86, 92, 16, 12, 23, 52, 93, 98, 41, 32, 41, 54, 68, 16, 80, 52, 83, 66, 11, 12, 59, 5, 14, 75, 46, 93, 92, 47, 18, 34, 10, 70, 22, 58, 40, 49, 34, 35, 84, 84, 63, 96, 38, 55, 28, 68, 15, 57, 37, 33, 53, 99, 76, 70, 29, 44, 67, 76, 41, 45, 78, 93, 91, 36, 2, 46, 92, 29, 12, 14, 31, 93, 30, 80, 65, 70, 90, 39, 39, 51, 67, 38, 92, 46, 85, 86, 78, 60, 80, 47, 31, 59, 59, 71, 87, 75, 5, 77, 84, 76, 43, 22, 14, 37, 73, 25, 75, 71, 42, 49, 55, 39, 68, 63, 15, 25, 44, 30, 42, 86, 91, 58, 49, 35, 45, 71, 91, 30, 89, 90, 30, 59, 82, 96, 88, 15, 71, 48, 87, 80, 11, 4, 45, 39, 17, 19, 36, 40, 46, 84, 48, 11, 12, 15, 34, 34, 55, 40, 35, 32, 21, 91, 44, 88, 28, 45, 92, 55, 27, 10, 88, 16, 58, 61, 18, 72, 8, 9, 63, 9, 41, 19, 74, 50, 70, 21, 37, 82, 75, 15, 46, 68, 40, 52, 27, 26, 19, 0, 40, 41, 29, 84, 56, 80, 15, 82, 63, 69, 15, 5, 14, 90, 2, 72, 18, 16, 56, 98, 45, 81, 2, 32, 32, 63, 51, 56, 89, 55, 89, 20, 13, 80, 66, 6, 42, 66, 46, 82, 50, 65, 43, 30, 5, 74, 32, 60, 79, 75, 63, 75, 48, 18, 85, 87, 0, 75, 38, 36, 15, 37, 11, 58, 33, 98, 81, 67, 39, 55, 68, 21, 84, 83, 69, 95, 68, 7, 99, 31, 80, 93, 90, 14, 44, 11, 43, 8, 49, 65, 41, 91, 63, 59, 12, 26, 4, 90, 51, 88, 60, 16, 5, 81, 34, 50, 86, 49, 33, 73, 38, 29, 53, 81, 52, 39, 46]
last_save: 714

Gen:32
TrainFitness:0.6666666666666666
TestFitness:0.5555555555555556
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(np.sin(x[index]),+733770.3072).all():
      return False
    else:
      return True
  def adf1(index):
    if np.equal(x[index],+806902.6603).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(x[index],-590760.3994).all():
      return False
    else:
      return False
  def adf3(index):
    if np.equal(np.sin(x[index]),+329983.1889).all():
      return True
    else:
      return False
  def adf4(index):
    if np.less(np.tanh(x[index]),+265087.5536).all():
      return False
    else:
      return False
  def adf5(index):
    if np.equal(psqrt(x[index]),-579774.4907).all():
      return False
    else:
      return False
  def adf6(index):
    if np.greater(np.tanh(x[index]),+162179.6685).all():
      if np.equal(sigmoid(x[index]),+897507.5915).all():
        return True
      else:
        return True
      return True
    else:
      if np.less(x[index],-076361.2599).all():
        return False
      else:
        return True
      return True
  def adf7(index):
    if np.less(x[index],+036634.7510).all():
      return True
    else:
      return False
  def adf8(index):
    if np.equal(np.tanh(x[index]),+263718.6483).all():
      if np.greater(x[index],-194878.9770).all():
        return False
      else:
        return False
      return True
    else:
      if np.equal(np.tanh(x[index]),+668300.8674).all():
        return False
      else:
        return True
      return False
  return multiple_operation([adf0(0)*-220.087, adf1(1)*-264.495, adf2(2)*+463.575, adf3(3)*-889.069, adf4(4)*-422.898, adf5(5)*-446.163, adf6(6)*+503.036, adf7(7)*+586.147, adf8(8)*+709.113], [0, 1, 0, 0, 1, 0, 0, 1], 004.930)
result=p(); 0.6666666666666666
IndLenGenome:428
IndGenome:[60, 32, 70, 69, 40, 8, 30, 74, 10, 9, 87, 3, 53, 17, 57, 100, 23, 10, 47, 12, 35, 48, 39, 91, 59, 67, 60, 68, 86, 98, 70, 76, 9, 50, 32, 96, 86, 20, 73, 53, 91, 7, 93, 24, 85, 60, 29, 92, 5, 49, 100, 37, 76, 70, 63, 69, 29, 54, 79, 13, 41, 79, 77, 8, 36, 14, 66, 47, 83, 12, 9, 79, 78, 13, 21, 28, 78, 49, 30, 99, 89, 89, 82, 74, 98, 77, 84, 17, 62, 66, 25, 70, 78, 37, 75, 55, 53, 66, 63, 19, 63, 73, 20, 30, 53, 31, 87, 34, 25, 87, 29, 67, 87, 24, 14, 89, 70, 57, 97, 51, 31, 66, 64, 96, 82, 68, 50, 48, 18, 71, 66, 42, 71, 87, 79, 26, 66, 48, 15, 59, 71, 22, 39, 74, 68, 67, 38, 69, 37, 45, 70, 67, 65, 9, 31, 95, 24, 62, 66, 75, 79, 57, 33, 15, 14, 60, 67, 56, 73, 36, 1, 72, 15, 99, 99, 33, 18, 22, 43, 49, 76, 15, 92, 24, 84, 90, 3, 46, 36, 3, 84, 17, 15, 11, 40, 36, 87, 26, 100, 66, 35, 86, 14, 24, 82, 95, 52, 66, 43, 37, 1, 18, 36, 74, 88, 63, 35, 93, 25, 90, 75, 21, 71, 49, 74, 68, 67, 38, 69, 37, 97, 70, 67, 65, 72, 31, 59, 46, 68, 75, 10, 42, 36, 56, 18, 53, 20, 30, 38, 36, 77, 4, 43, 82, 93, 36, 93, 21, 37, 36, 32, 72, 90, 30, 58, 57, 1, 41, 66, 62, 46, 34, 94, 19, 15, 76, 84, 12, 84, 36, 83, 95, 17, 55, 87, 31, 12, 48, 58, 29, 50, 86, 59, 34, 35, 15, 64, 72, 82, 78, 89, 98, 80, 93, 38, 14, 24, 16, 71, 6, 53, 84, 44, 6, 45, 0, 73, 60, 3, 86, 81, 40, 48, 45, 58, 56, 91, 74, 67, 53, 22, 7, 77, 30, 99, 11, 51, 23, 96, 32, 59, 36, 68, 97, 94, 86, 49, 40, 30, 50, 94, 49, 83, 0, 42, 36, 66, 86, 18, 67, 48, 34, 50, 15, 27, 29, 99, 55, 94, 72, 84, 11, 14, 17, 39, 51, 3, 42, 69, 100, 74, 6, 37, 48, 45, 4, 2, 48, 21, 33, 3, 61, 38, 9, 29, 72, 16, 95, 96, 83, 94, 68, 14, 47, 54, 85, 68, 43, 73, 34, 74, 72, 82, 45, 88, 32, 48, 69, 95, 74, 80, 39, 100, 37, 17, 64, 19, 88]
last_save: 714

Gen:55
TrainFitness:0.7777777777777778
TestFitness:0.2222222222222222
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(np.sin(x[index]),+733770.3072).all():
      return False
    else:
      return True
  def adf1(index):
    if np.equal(x[index],+806902.6604).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(x[index],-590760.3994).all():
      return False
    else:
      return False
  def adf3(index):
    if np.equal(np.sin(x[index]),+329983.1889).all():
      return True
    else:
      return False
  def adf4(index):
    if np.less(np.tanh(x[index]),+265087.5536).all():
      return False
    else:
      return False
  def adf5(index):
    if np.equal(psqrt(x[index]),-579774.5907).all():
      return False
    else:
      return False
  def adf6(index):
    if np.greater(np.tanh(x[index]),+162179.6485).all():
      if np.equal(sigmoid(x[index]),+897507.5915).all():
        return True
      else:
        return True
      return True
    else:
      if np.less(x[index],-076361.2599).all():
        return False
      else:
        return True
      return True
  def adf7(index):
    if np.less(x[index],+006634.7510).all():
      return True
    else:
      return False
  def adf8(index):
    if np.equal(np.tanh(x[index]),+263718.6483).all():
      if np.greater(x[index],-194878.9770).all():
        return False
      else:
        return False
      return True
    else:
      if np.equal(np.tanh(x[index]),+668330.8674).all():
        return False
      else:
        return True
      return False
  return multiple_operation([adf0(0)*-220.087, adf1(1)*-264.495, adf2(2)*+263.575, adf3(3)*-889.069, adf4(4)*-422.898, adf5(5)*-446.163, adf6(6)*+503.036, adf7(7)*+586.147, adf8(8)*+709.113], [0, 1, 0, 0, 1, 0, 0, 1], 004.930)
result=p(); 0.7777777777777778
IndLenGenome:428
IndGenome:[60, 32, 70, 69, 40, 8, 30, 74, 10, 9, 87, 3, 53, 17, 57, 100, 23, 10, 47, 12, 35, 48, 39, 91, 59, 67, 60, 68, 86, 98, 70, 76, 9, 50, 32, 96, 86, 20, 44, 53, 91, 7, 93, 24, 85, 60, 29, 92, 5, 49, 100, 37, 76, 70, 63, 69, 29, 54, 79, 13, 41, 79, 77, 8, 36, 14, 66, 47, 83, 12, 9, 79, 78, 13, 21, 28, 78, 49, 30, 99, 89, 89, 82, 74, 98, 77, 84, 17, 52, 66, 25, 70, 78, 37, 75, 55, 53, 66, 63, 19, 63, 73, 20, 30, 53, 31, 87, 34, 25, 87, 29, 67, 87, 24, 35, 89, 70, 57, 97, 51, 31, 66, 64, 96, 82, 68, 50, 48, 18, 71, 66, 42, 71, 87, 79, 26, 64, 48, 15, 59, 71, 22, 39, 74, 68, 67, 38, 69, 37, 45, 70, 67, 65, 9, 31, 95, 24, 62, 66, 75, 79, 57, 33, 15, 14, 60, 67, 56, 73, 36, 1, 72, 15, 99, 99, 33, 18, 22, 43, 49, 76, 15, 92, 24, 84, 90, 40, 46, 36, 3, 84, 17, 15, 11, 40, 36, 87, 26, 100, 66, 35, 86, 14, 24, 82, 95, 52, 66, 43, 37, 1, 18, 36, 74, 88, 63, 35, 93, 25, 90, 75, 21, 71, 49, 74, 68, 67, 38, 69, 37, 97, 70, 67, 65, 72, 31, 59, 46, 68, 75, 10, 42, 36, 56, 18, 53, 23, 30, 38, 36, 77, 4, 43, 82, 93, 58, 93, 21, 37, 36, 32, 72, 90, 30, 58, 57, 1, 41, 66, 62, 46, 34, 94, 19, 15, 76, 84, 12, 42, 36, 83, 95, 17, 55, 87, 31, 32, 48, 58, 29, 50, 86, 59, 34, 35, 15, 64, 72, 82, 78, 89, 98, 80, 93, 38, 14, 24, 16, 71, 6, 53, 84, 44, 6, 45, 0, 73, 60, 3, 86, 81, 40, 48, 45, 58, 56, 91, 74, 67, 53, 22, 7, 77, 30, 99, 11, 51, 23, 96, 8, 59, 36, 68, 97, 94, 86, 49, 40, 30, 50, 94, 49, 83, 0, 42, 36, 66, 86, 18, 67, 48, 34, 50, 15, 27, 29, 99, 55, 94, 72, 84, 11, 14, 17, 39, 51, 3, 42, 69, 100, 74, 6, 37, 48, 45, 4, 2, 48, 21, 33, 3, 61, 38, 9, 29, 72, 16, 95, 96, 83, 94, 68, 14, 47, 54, 85, 68, 43, 73, 34, 74, 72, 82, 45, 88, 32, 48, 69, 95, 74, 80, 39, 100, 37, 17, 64, 19, 88]
last_save: 714

Gen:2055
last_save: 714
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.5555555555555556
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(psqrt(x[index]),+672153.8317).all():
      return True
    else:
      return True
  def adf1(index):
    if np.equal(x[index],-081764.0937).all():
      return False
    else:
      return True
  def adf2(index):
    if np.greater(x[index],+265523.4372).all():
      return False
    else:
      return True
  def adf3(index):
    if np.equal(x[index],+535334.3823).all():
      return False
    else:
      return True
  def adf4(index):
    if np.less(x[index],+774376.7882).all():
      return True
    else:
      return False
  def adf5(index):
    if np.greater(np.sin(x[index]),+397783.8593).all():
      return False
    else:
      return False
  def adf6(index):
    if np.equal(x[index],+914566.6908).all():
      return False
    else:
      return False
  def adf7(index):
    if np.equal(x[index],-244886.7504).all():
      return True
    else:
      return True
  def adf8(index):
    if np.equal(x[index],-449806.1941).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*-090.641, adf1(1)*+005.308, adf2(2)*+150.987, adf3(3)*+112.557, adf4(4)*-511.388, adf5(5)*+296.895, adf6(6)*-303.629, adf7(7)*+077.517, adf8(8)*-890.823], [1, 1, 0, 1, 1, 1, 0, 1], 285.695)
result=p(); 0.5555555555555556
IndLenGenome:412
IndGenome:[9, 57, 87, 74, 46, 3, 63, 52, 93, 94, 15, 82, 47, 11, 43, 95, 72, 14, 9, 10, 83, 30, 11, 66, 83, 2, 5, 75, 11, 81, 45, 29, 23, 61, 62, 46, 39, 28, 39, 90, 39, 41, 18, 74, 9, 41, 33, 55, 72, 57, 41, 58, 75, 67, 37, 38, 93, 16, 66, 9, 71, 61, 70, 45, 36, 83, 70, 19, 19, 43, 65, 32, 38, 81, 86, 6, 54, 45, 88, 48, 39, 81, 26, 64, 26, 55, 40, 65, 92, 68, 58, 95, 91, 44, 6, 32, 94, 94, 32, 27, 14, 11, 73, 58, 58, 44, 69, 71, 52, 49, 8, 62, 51, 28, 41, 55, 85, 58, 13, 32, 73, 11, 30, 70, 23, 76, 55, 25, 30, 27, 50, 79, 30, 85, 28, 72, 90, 24, 42, 86, 60, 53, 94, 90, 49, 58, 23, 20, 61, 32, 11, 99, 95, 79, 69, 62, 17, 18, 95, 65, 20, 6, 26, 25, 14, 74, 31, 82, 57, 21, 48, 16, 65, 31, 63, 58, 11, 65, 35, 46, 23, 35, 19, 30, 49, 49, 56, 93, 4, 32, 77, 90, 47, 93, 68, 79, 41, 78, 81, 57, 69, 10, 26, 42, 99, 24, 82, 18, 43, 23, 71, 61, 23, 70, 26, 14, 55, 83, 16, 91, 100, 87, 26, 24, 46, 73, 34, 21, 28, 12, 13, 35, 69, 24, 60, 16, 92, 96, 47, 33, 72, 34, 65, 98, 69, 18, 43, 83, 87, 21, 46, 90, 96, 49, 18, 99, 16, 95, 17, 7, 92, 22, 27, 78, 17, 63, 97, 21, 93, 22, 16, 97, 94, 18, 77, 29, 58, 20, 30, 99, 14, 45, 72, 91, 45, 5, 78, 75, 55, 80, 42, 47, 99, 99, 81, 61, 1, 23, 99, 44, 88, 70, 50, 19, 91, 91, 95, 66, 69, 57, 66, 53, 1, 45, 83, 67, 64, 72, 28, 64, 30, 82, 100, 91, 8, 38, 41, 20, 60, 24, 24, 26, 45, 82, 29, 77, 83, 2, 73, 46, 63, 14, 71, 74, 60, 99, 39, 22, 59, 86, 92, 32, 2, 78, 26, 55, 60, 37, 10, 41, 97, 48, 62, 13, 84, 8, 79, 62, 93, 51, 52, 44, 50, 13, 22, 4, 76, 98, 18, 74, 67, 97, 28, 51, 70, 76, 98, 51, 92, 88, 42, 77, 27, 78, 69, 63, 24, 9, 88, 73, 91, 86, 94, 34, 58, 82, 30, 46, 99, 48, 93, 19]
last_save: 715

Gen:3
TrainFitness:0.6666666666666666
TestFitness:0.5555555555555556
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],-017293.0487).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(sigmoid(x[index]),+680432.4931).all():
      return True
    else:
      return True
  def adf2(index):
    if np.equal(psqrt(x[index]),+629712.7461).all():
      return False
    else:
      return False
  def adf3(index):
    if np.less(np.sin(x[index]),+464328.7351).all():
      return True
    else:
      return False
  def adf4(index):
    if np.greater(x[index],+035167.3897).all():
      return False
    else:
      return True
  def adf5(index):
    if np.equal(rlog(x[index]),-583804.0875).all():
      return False
    else:
      return False
  def adf6(index):
    if np.less(x[index],-791791.0082).all():
      return False
    else:
      return False
  def adf7(index):
    if np.equal(x[index],+444365.3478).all():
      return False
    else:
      return False
  def adf8(index):
    if np.equal(sigmoid(x[index]),+858782.3618).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+256.531, adf1(1)*-334.067, adf2(2)*-447.794, adf3(3)*-088.106, adf4(4)*+833.554, adf5(5)*+993.179, adf6(6)*-300.849, adf7(7)*+837.400, adf8(8)*-263.575], [0, 0, 1, 0, 0, 1, 0, 0], 179.013)
result=p(); 0.6666666666666666
IndLenGenome:417
IndGenome:[16, 1, 30, 35, 24, 41, 40, 9, 83, 70, 21, 97, 52, 59, 63, 30, 14, 38, 27, 23, 95, 71, 75, 94, 26, 15, 55, 72, 39, 26, 58, 10, 64, 63, 32, 74, 19, 93, 91, 98, 34, 51, 71, 14, 60, 53, 59, 46, 93, 76, 72, 29, 27, 51, 82, 7, 34, 6, 1, 95, 11, 79, 97, 19, 64, 78, 89, 90, 87, 84, 66, 94, 3, 2, 98, 47, 23, 35, 61, 78, 95, 93, 75, 90, 23, 41, 78, 54, 80, 63, 45, 71, 86, 17, 3, 58, 39, 17, 77, 90, 41, 53, 29, 68, 22, 89, 59, 39, 45, 88, 73, 8, 80, 14, 90, 38, 87, 45, 17, 25, 73, 39, 73, 99, 7, 81, 67, 17, 99, 11, 47, 99, 71, 50, 80, 68, 42, 19, 81, 10, 13, 29, 5, 90, 98, 30, 14, 94, 44, 63, 66, 55, 73, 14, 37, 78, 69, 33, 23, 35, 5, 82, 15, 70, 28, 32, 58, 75, 58, 67, 68, 92, 13, 36, 61, 28, 84, 14, 88, 78, 43, 88, 34, 12, 25, 36, 75, 93, 31, 83, 55, 85, 43, 13, 94, 10, 56, 67, 96, 65, 37, 64, 54, 47, 27, 69, 44, 13, 49, 18, 40, 48, 38, 71, 100, 76, 66, 34, 52, 8, 93, 93, 75, 95, 34, 19, 92, 101, 99, 49, 83, 21, 37, 79, 32, 63, 9, 23, 10, 20, 98, 94, 59, 18, 54, 20, 38, 83, 97, 14, 90, 50, 50, 69, 57, 72, 36, 23, 85, 27, 35, 62, 38, 46, 91, 36, 74, 15, 78, 84, 10, 11, 47, 49, 40, 71, 93, 68, 96, 96, 31, 81, 44, 77, 43, 50, 16, 47, 88, 10, 28, 90, 98, 35, 53, 56, 70, 65, 36, 68, 95, 44, 10, 82, 51, 85, 95, 45, 9, 10, 66, 13, 67, 54, 15, 17, 69, 57, 93, 39, 54, 93, 23, 98, 66, 59, 90, 63, 19, 75, 60, 91, 27, 47, 80, 11, 11, 3, 76, 71, 50, 89, 12, 44, 86, 62, 95, 53, 17, 61, 35, 8, 48, 6, 83, 22, 7, 6, 18, 72, 20, 53, 98, 30, 46, 95, 8, 52, 36, 31, 88, 76, 66, 75, 88, 16, 91, 2, 36, 99, 68, 10, 37, 67, 64, 28, 32, 5, 41, 77, 3, 0, 72, 72, 97, 89, 22, 82, 93, 77, 36, 96, 0, 18, 31, 72, 100, 24, 73, 38, 64, 24, 28, 96, 80, 71, 4]
last_save: 715

Gen:568
TrainFitness:0.7777777777777778
TestFitness:0.3333333333333333
MaxGenLen:665
Individual: def p():
  def adf0(index):
    if np.greater(x[index],-017293.0487).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(sigmoid(x[index]),+680432.4931).all():
      return True
    else:
      return True
  def adf2(index):
    if np.equal(psqrt(x[index]),+629712.7469).all():
      return False
    else:
      return False
  def adf3(index):
    if np.equal(np.sin(x[index]),+464326.7351).all():
      return True
    else:
      return False
  def adf4(index):
    if np.greater(x[index],+035432.4931).all():
      return True
    else:
      return True
  def adf5(index):
    if np.equal(psqrt(x[index]),+629712.7469).all():
      return False
    else:
      return False
  def adf6(index):
    if np.equal(np.sin(x[index]),+464326.7351).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(x[index],+005667.3897).all():
      return False
    else:
      return True
  def adf8(index):
    if np.equal(rlog(x[index]),-583804.0875).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*-772.086, adf1(1)*-424.380, adf2(2)*+495.239, adf3(3)*-746.151, adf4(4)*-989.074, adf5(5)*-257.351, adf6(6)*-503.184, adf7(7)*+444.365, adf8(8)*+893.355], [1, 0, 0, 0, 0, 1, 0, 1], 236.184)
result=p(); 0.7777777777777778
IndLenGenome:620
IndGenome:[16, 1, 30, 35, 24, 41, 40, 9, 83, 70, 21, 97, 52, 59, 63, 30, 14, 38, 27, 23, 95, 29, 75, 94, 26, 15, 55, 72, 39, 26, 58, 10, 64, 63, 32, 74, 19, 93, 91, 98, 34, 51, 71, 14, 60, 53, 59, 46, 93, 76, 72, 29, 27, 51, 82, 7, 34, 6, 59, 95, 11, 79, 97, 86, 64, 78, 89, 90, 87, 84, 66, 94, 3, 2, 96, 47, 23, 35, 61, 78, 95, 93, 75, 90, 23, 41, 78, 54, 80, 63, 45, 64, 63, 32, 74, 19, 93, 91, 98, 34, 51, 71, 14, 60, 53, 59, 46, 93, 76, 72, 29, 27, 51, 82, 7, 34, 6, 59, 95, 11, 79, 97, 86, 64, 78, 89, 2, 87, 84, 66, 94, 3, 2, 96, 47, 23, 35, 61, 78, 95, 93, 75, 90, 23, 41, 78, 54, 80, 70, 45, 16, 86, 17, 3, 58, 39, 17, 77, 90, 41, 53, 29, 68, 22, 89, 59, 39, 45, 88, 73, 8, 80, 14, 90, 38, 87, 45, 17, 25, 73, 39, 73, 81, 10, 97, 97, 32, 20, 78, 36, 37, 83, 29, 64, 92, 14, 73, 38, 70, 66, 66, 27, 44, 19, 55, 12, 33, 29, 27, 51, 82, 7, 34, 6, 1, 95, 11, 79, 97, 19, 29, 78, 89, 90, 87, 84, 66, 81, 32, 2, 35, 47, 23, 35, 61, 78, 95, 93, 75, 90, 23, 41, 78, 54, 90, 98, 30, 14, 94, 44, 63, 66, 55, 73, 14, 37, 78, 69, 33, 23, 35, 5, 82, 15, 70, 28, 32, 58, 75, 58, 67, 68, 92, 13, 36, 61, 28, 84, 14, 88, 78, 43, 88, 34, 12, 25, 36, 75, 93, 31, 83, 55, 85, 43, 13, 94, 10, 56, 67, 96, 65, 37, 64, 54, 47, 27, 67, 90, 45, 64, 88, 73, 53, 64, 80, 14, 90, 38, 87, 45, 17, 25, 73, 37, 73, 70, 7, 63, 67, 17, 2, 11, 47, 99, 71, 50, 80, 68, 45, 19, 81, 10, 13, 29, 5, 90, 98, 30, 14, 94, 90, 38, 87, 45, 17, 25, 73, 39, 73, 99, 7, 81, 39, 59, 39, 45, 88, 73, 8, 80, 14, 90, 38, 87, 45, 17, 57, 73, 39, 78, 99, 42, 58, 75, 58, 67, 68, 92, 29, 36, 61, 91, 84, 14, 88, 78, 92, 88, 34, 12, 25, 36, 75, 93, 31, 83, 55, 85, 43, 13, 94, 10, 56, 67, 96, 65, 37, 64, 54, 47, 27, 67, 90, 46, 93, 52, 72, 29, 29, 68, 22, 89, 59, 39, 45, 88, 52, 8, 80, 14, 90, 38, 87, 45, 17, 25, 73, 39, 73, 34, 12, 25, 36, 75, 15, 31, 83, 55, 85, 43, 13, 94, 10, 56, 67, 96, 65, 7, 64, 54, 47, 27, 67, 90, 45, 64, 88, 73, 53, 64, 22, 27, 26, 98, 44, 94, 59, 77, 72, 44, 99, 35, 10, 70, 73, 85, 70, 57, 63, 60, 90, 64, 75, 24, 84, 85, 38, 59, 95, 79, 82, 44, 100, 100, 71, 9, 49, 9, 94, 60, 16, 93, 36, 45, 0, 21, 97, 76, 87, 93, 42, 11, 84, 51, 75, 42, 69, 49, 20, 15, 98, 55, 16, 52, 39, 41, 23, 7, 3, 10, 13, 4, 57, 0, 23, 72, 56, 89, 75, 36, 28, 75, 10, 59, 96, 100, 51, 29, 19, 4, 32, 3, 11, 23, 78, 20, 46, 54, 61, 78, 75, 71, 88, 17, 5, 54, 64, 93, 22, 5, 40, 22, 29, 78, 4, 25, 34, 99, 13, 49, 83, 62, 27, 21, 3, 73, 57, 65, 12, 85, 19, 13, 90, 53, 82, 66, 18, 40, 19, 61]
last_save: 715

Gen:2568
last_save: 715
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.5555555555555556
TestFitness:0.4444444444444444
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],-696294.4112).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(sigmoid(x[index]),-805015.2401).all():
      return False
    else:
      return False
  def adf2(index):
    if np.less(np.cos(x[index]),-574768.6473).all():
      return True
    else:
      return True
  def adf3(index):
    if np.greater(rlog(x[index]),-573624.6689).all():
      return True
    else:
      return False
  def adf4(index):
    if np.equal(np.tanh(x[index]),-325055.9308).all():
      return True
    else:
      return True
  def adf5(index):
    if np.less(x[index],-055673.0958).all():
      return False
    else:
      return True
  def adf6(index):
    if np.equal(x[index],+631630.1192).all():
      return True
    else:
      return True
  def adf7(index):
    if np.greater(np.sin(x[index]),-951615.8579).all():
      return False
    else:
      return False
  def adf8(index):
    if np.equal(x[index],-232136.5148).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+348.967, adf1(1)*+821.234, adf2(2)*+115.058, adf3(3)*-051.946, adf4(4)*-387.232, adf5(5)*-240.190, adf6(6)*-702.066, adf7(7)*-875.491, adf8(8)*+475.701], [0, 0, 0, 0, 0, 1, 1, 0], 052.459)
result=p(); 0.5555555555555556
IndLenGenome:417
IndGenome:[24, 34, 19, 81, 77, 73, 54, 59, 70, 73, 71, 57, 11, 55, 15, 92, 72, 9, 11, 16, 60, 38, 46, 46, 55, 37, 67, 24, 24, 96, 55, 64, 31, 40, 35, 69, 65, 89, 13, 71, 68, 7, 81, 72, 58, 78, 69, 74, 15, 29, 82, 70, 2, 60, 40, 38, 74, 24, 70, 56, 22, 28, 9, 90, 97, 32, 25, 91, 68, 37, 64, 12, 80, 69, 54, 49, 68, 26, 64, 55, 58, 35, 3, 98, 90, 9, 24, 6, 75, 6, 91, 81, 25, 23, 70, 97, 57, 79, 45, 33, 56, 87, 99, 75, 45, 95, 57, 47, 33, 80, 11, 89, 63, 38, 62, 34, 97, 56, 18, 83, 94, 22, 33, 70, 36, 96, 4, 24, 22, 95, 3, 40, 48, 10, 73, 23, 89, 70, 70, 52, 59, 27, 2, 18, 95, 55, 95, 3, 81, 33, 37, 22, 97, 7, 69, 92, 32, 1, 79, 92, 36, 78, 40, 86, 99, 34, 49, 26, 65, 84, 91, 32, 83, 58, 50, 75, 89, 91, 95, 73, 76, 76, 49, 36, 52, 78, 23, 52, 48, 88, 76, 25, 26, 99, 10, 50, 38, 60, 54, 98, 79, 20, 64, 74, 55, 34, 27, 16, 12, 23, 45, 61, 89, 71, 44, 61, 18, 40, 93, 61, 38, 81, 99, 47, 71, 44, 85, 45, 37, 42, 17, 97, 11, 83, 33, 55, 11, 31, 15, 34, 28, 17, 12, 27, 45, 17, 88, 66, 94, 70, 73, 55, 56, 64, 91, 64, 92, 69, 85, 66, 22, 31, 61, 21, 61, 59, 62, 30, 96, 17, 99, 93, 51, 96, 13, 19, 36, 29, 28, 91, 99, 41, 41, 22, 74, 27, 76, 69, 52, 75, 96, 84, 55, 51, 17, 45, 21, 11, 4, 49, 97, 34, 3, 84, 4, 49, 78, 95, 16, 29, 69, 30, 89, 61, 36, 55, 73, 0, 82, 33, 14, 37, 86, 47, 43, 72, 13, 100, 30, 55, 42, 29, 43, 91, 41, 96, 39, 73, 28, 59, 64, 41, 86, 39, 78, 10, 71, 92, 60, 48, 66, 3, 55, 22, 94, 88, 5, 7, 60, 100, 74, 2, 54, 47, 70, 27, 66, 36, 71, 71, 38, 82, 19, 55, 18, 81, 96, 84, 29, 30, 45, 14, 39, 14, 17, 17, 59, 40, 2, 62, 89, 37, 90, 0, 62, 77, 27, 10, 42, 79, 85, 69, 63, 83, 7, 39, 31, 33, 9, 92, 10, 65, 61, 84, 88, 85, 17]
last_save: 716

Gen:3
TrainFitness:0.6666666666666666
TestFitness:0.3333333333333333
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],-038213.9068).all():
      if np.greater(np.cos(x[index]),+778996.1841).all():
        return True
      else:
        return False
      return True
    else:
      if np.greater(x[index],-036817.4129).all():
        return True
      else:
        return False
      return False
  def adf1(index):
    if np.equal(sigmoid(x[index]),+390088.8481).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(x[index],+026482.9204).all():
      return False
    else:
      return True
  def adf3(index):
    if np.equal(np.sin(x[index]),+461810.5512).all():
      return False
    else:
      return False
  def adf4(index):
    if np.equal(x[index],+084333.7483).all():
      return False
    else:
      return False
  def adf5(index):
    if np.equal(np.tanh(x[index]),+361316.7951).all():
      return True
    else:
      return True
  def adf6(index):
    if np.equal(x[index],+555991.5285).all():
      return True
    else:
      return False
  def adf7(index):
    if np.less(np.sin(x[index]),+315397.0212).all():
      return True
    else:
      return False
  def adf8(index):
    if np.equal(sigmoid(x[index]),-961528.6867).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+260.214, adf1(1)*-562.762, adf2(2)*+905.214, adf3(3)*+119.448, adf4(4)*-389.621, adf5(5)*-792.723, adf6(6)*-187.625, adf7(7)*+190.747, adf8(8)*+557.609], [1, 0, 0, 0, 0, 0, 0, 0], 558.785)
result=p(); 0.6666666666666666
IndLenGenome:430
IndGenome:[19, 97, 85, 24, 66, 76, 53, 16, 89, 19, 20, 53, 98, 62, 71, 33, 49, 10, 26, 38, 21, 21, 98, 61, 50, 12, 37, 67, 77, 28, 89, 59, 16, 11, 8, 84, 81, 16, 31, 52, 53, 27, 7, 2, 35, 53, 70, 23, 56, 98, 11, 97, 84, 41, 72, 19, 62, 7, 91, 95, 49, 8, 66, 9, 58, 48, 31, 63, 89, 10, 70, 28, 88, 38, 34, 88, 81, 77, 95, 38, 35, 18, 89, 34, 64, 88, 40, 32, 16, 4, 8, 62, 79, 62, 10, 64, 35, 62, 59, 63, 35, 58, 30, 57, 96, 64, 74, 56, 91, 58, 81, 10, 45, 75, 41, 22, 63, 85, 72, 87, 95, 87, 23, 90, 18, 70, 68, 54, 23, 93, 23, 47, 34, 88, 83, 39, 71, 78, 11, 92, 12, 98, 45, 38, 76, 73, 26, 31, 43, 51, 36, 27, 39, 35, 41, 42, 88, 70, 97, 62, 53, 25, 92, 93, 45, 45, 75, 19, 99, 91, 75, 42, 28, 25, 66, 77, 3, 55, 82, 50, 66, 25, 78, 32, 23, 51, 25, 63, 29, 97, 20, 42, 21, 92, 48, 93, 44, 63, 11, 90, 21, 56, 23, 71, 39, 26, 81, 65, 92, 68, 86, 88, 36, 27, 87, 49, 51, 33, 41, 88, 84, 22, 36, 20, 52, 11, 34, 66, 33, 16, 75, 56, 52, 57, 86, 2, 74, 72, 11, 29, 40, 65, 12, 41, 54, 91, 88, 11, 51, 31, 39, 94, 24, 88, 95, 97, 56, 93, 98, 39, 86, 92, 71, 52, 97, 58, 67, 59, 82, 87, 92, 53, 49, 59, 10, 21, 18, 57, 56, 82, 45, 35, 72, 86, 21, 19, 40, 27, 14, 97, 18, 16, 90, 55, 95, 77, 36, 40, 29, 98, 87, 20, 50, 58, 74, 80, 74, 36, 60, 85, 5, 78, 27, 28, 85, 44, 67, 39, 60, 55, 53, 0, 19, 8, 3, 12, 16, 26, 92, 69, 64, 10, 35, 52, 95, 16, 42, 11, 15, 93, 52, 88, 67, 59, 60, 45, 46, 37, 12, 11, 46, 22, 49, 14, 41, 93, 27, 48, 56, 12, 27, 94, 17, 31, 23, 61, 31, 90, 27, 20, 1, 28, 39, 55, 56, 4, 4, 18, 18, 92, 15, 88, 66, 36, 33, 97, 88, 28, 60, 45, 9, 54, 39, 30, 51, 25, 92, 72, 91, 77, 11, 61, 79, 21, 88, 97, 31, 54, 26, 80, 33, 27, 56, 31, 32, 5, 60, 40, 3, 24, 5, 17, 91, 54, 52, 63, 35, 88, 46, 2]
last_save: 716

Gen:40
TrainFitness:0.7777777777777778
TestFitness:0.4444444444444444
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],-038213.5098).all():
      if np.less(np.cos(x[index]),+758996.1821).all():
        return True
      else:
        return False
      return True
    else:
      if np.greater(x[index],-036817.4129).all():
        return True
      else:
        return False
      return False
  def adf1(index):
    if np.equal(sigmoid(x[index]),+390088.8481).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(x[index],+006782.9204).all():
      return False
    else:
      return True
  def adf3(index):
    if np.equal(np.sin(x[index]),-461810.5512).all():
      return False
    else:
      return False
  def adf4(index):
    if np.equal(x[index],+088333.7483).all():
      return False
    else:
      return False
  def adf5(index):
    if np.equal(np.tanh(x[index]),+361316.0951).all():
      return False
    else:
      return True
  def adf6(index):
    if np.equal(x[index],+555991.5285).all():
      return True
    else:
      return False
  def adf7(index):
    if np.less(np.sin(x[index]),+884383.6725).all():
      return False
    else:
      return True
  def adf8(index):
    if np.less(psqrt(x[index]),-047852.0807).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+327.492, adf1(1)*-226.559, adf2(2)*-984.077, adf3(3)*+773.172, adf4(4)*+363.020, adf5(5)*+677.913, adf6(6)*+260.414, adf7(7)*-562.762, adf8(8)*+709.036], [0, 1, 0, 0, 1, 1, 0, 1], 607.570)
result=p(); 0.7777777777777778
IndLenGenome:425
IndGenome:[19, 97, 85, 24, 66, 76, 53, 16, 89, 19, 20, 53, 98, 62, 71, 33, 5, 10, 9, 38, 21, 46, 98, 61, 50, 12, 37, 67, 85, 28, 89, 59, 16, 11, 8, 62, 81, 16, 31, 52, 53, 27, 7, 2, 35, 17, 70, 23, 56, 98, 11, 97, 84, 41, 72, 19, 62, 7, 91, 95, 49, 8, 66, 9, 58, 48, 31, 63, 89, 10, 70, 28, 88, 38, 34, 88, 81, 77, 95, 38, 35, 18, 89, 34, 64, 88, 40, 30, 16, 27, 8, 62, 79, 62, 10, 64, 35, 40, 61, 63, 35, 58, 30, 57, 55, 64, 74, 56, 91, 58, 81, 10, 75, 75, 41, 22, 63, 85, 72, 87, 95, 87, 23, 90, 18, 70, 68, 48, 23, 93, 23, 47, 34, 88, 83, 39, 71, 78, 11, 92, 12, 98, 21, 38, 76, 73, 26, 31, 43, 51, 36, 100, 39, 35, 41, 47, 88, 70, 97, 62, 53, 25, 92, 93, 45, 45, 75, 19, 99, 91, 75, 42, 28, 25, 66, 77, 3, 55, 82, 50, 66, 25, 78, 14, 8, 98, 84, 73, 8, 63, 36, 87, 42, 95, 53, 30, 24, 25, 25, 2, 71, 23, 49, 49, 10, 54, 47, 58, 95, 2, 60, 8, 60, 97, 16, 27, 45, 67, 21, 54, 10, 73, 82, 17, 84, 19, 72, 50, 31, 37, 52, 92, 46, 55, 15, 29, 57, 91, 27, 99, 98, 54, 40, 77, 17, 11, 50, 47, 87, 37, 43, 71, 47, 32, 16, 18, 36, 53, 76, 53, 40, 32, 60, 24, 86, 88, 36, 27, 87, 49, 51, 33, 41, 88, 84, 22, 36, 20, 44, 11, 34, 66, 33, 16, 75, 56, 52, 57, 86, 2, 74, 72, 22, 47, 40, 29, 70, 43, 26, 36, 52, 65, 80, 88, 77, 59, 30, 85, 10, 16, 90, 37, 95, 37, 40, 19, 14, 6, 66, 6, 11, 11, 81, 17, 39, 21, 42, 7, 12, 35, 86, 80, 80, 37, 97, 84, 95, 100, 5, 13, 82, 8, 26, 64, 10, 39, 93, 48, 35, 97, 39, 40, 86, 97, 14, 56, 23, 1, 100, 93, 84, 60, 5, 34, 26, 27, 32, 48, 18, 95, 82, 87, 35, 57, 89, 42, 78, 7, 99, 90, 4, 70, 71, 48, 82, 72, 55, 50, 100, 2, 80, 56, 62, 79, 90, 46, 28, 7, 33, 78, 27, 78, 43, 77, 6, 47, 30, 36, 18, 51, 46, 72, 9, 68, 13, 32, 58, 72, 69, 40, 69, 39, 26, 18, 63]
last_save: 716

Gen:2040
last_save: 716
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.4444444444444444
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(rlog(x[index]),-939651.4308).all():
      return False
    else:
      return True
  def adf1(index):
    if np.equal(x[index],-620725.7134).all():
      return False
    else:
      return False
  def adf2(index):
    if np.equal(x[index],-337495.0875).all():
      return False
    else:
      return True
  def adf3(index):
    if np.greater(np.cos(x[index]),-665628.5808).all():
      return True
    else:
      return False
  def adf4(index):
    if np.less(psqrt(x[index]),+535588.3508).all():
      return True
    else:
      return True
  def adf5(index):
    if np.less(x[index],+018220.2692).all():
      return True
    else:
      return False
  def adf6(index):
    if np.greater(psqrt(x[index]),-886545.0160).all():
      return False
    else:
      return False
  def adf7(index):
    if np.equal(psqrt(x[index]),+958066.0271).all():
      return True
    else:
      return False
  def adf8(index):
    if np.less(sigmoid(x[index]),+481807.5270).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+928.526, adf1(1)*-528.224, adf2(2)*-430.674, adf3(3)*+177.147, adf4(4)*-702.952, adf5(5)*-570.323, adf6(6)*+183.407, adf7(7)*+542.380, adf8(8)*-667.730], [1, 0, 0, 1, 1, 1, 1, 0], 949.341)
result=p(); 0.6666666666666666
IndLenGenome:418
IndGenome:[47, 4, 75, 2, 70, 50, 4, 65, 54, 77, 59, 74, 63, 6, 79, 44, 55, 46, 50, 38, 78, 3, 4, 87, 68, 47, 4, 31, 26, 64, 42, 28, 59, 28, 88, 33, 98, 49, 10, 87, 21, 45, 31, 43, 45, 45, 13, 58, 92, 22, 41, 60, 51, 91, 52, 50, 26, 57, 93, 79, 63, 57, 37, 37, 23, 60, 91, 82, 59, 101, 40, 23, 35, 89, 88, 54, 18, 45, 66, 8, 39, 40, 31, 53, 82, 51, 86, 33, 9, 87, 60, 50, 99, 48, 36, 21, 24, 65, 73, 22, 42, 85, 16, 98, 85, 81, 62, 95, 11, 49, 28, 79, 95, 96, 10, 97, 90, 27, 98, 85, 75, 95, 67, 20, 78, 89, 22, 93, 67, 40, 85, 49, 92, 35, 40, 24, 21, 40, 78, 82, 34, 36, 54, 76, 77, 51, 94, 20, 94, 18, 97, 7, 98, 77, 74, 54, 80, 55, 3, 60, 20, 82, 78, 62, 81, 85, 90, 64, 54, 58, 54, 45, 89, 97, 56, 29, 65, 14, 34, 28, 76, 66, 75, 55, 67, 53, 50, 50, 72, 73, 19, 18, 91, 93, 23, 95, 13, 35, 94, 52, 43, 90, 20, 40, 88, 13, 84, 78, 72, 55, 76, 35, 45, 53, 56, 30, 35, 33, 51, 96, 15, 38, 96, 67, 52, 5, 42, 76, 77, 94, 66, 15, 90, 20, 27, 10, 41, 97, 97, 79, 87, 22, 65, 18, 69, 81, 48, 83, 21, 95, 34, 28, 29, 48, 42, 22, 55, 16, 67, 72, 51, 87, 22, 14, 46, 68, 41, 68, 81, 42, 89, 37, 17, 90, 33, 32, 26, 55, 44, 22, 26, 5, 73, 99, 43, 90, 79, 28, 12, 44, 83, 7, 13, 27, 19, 38, 58, 49, 19, 60, 15, 60, 92, 30, 74, 98, 57, 24, 28, 88, 47, 92, 11, 57, 92, 48, 47, 60, 37, 91, 85, 67, 41, 25, 6, 76, 100, 9, 19, 24, 22, 91, 57, 57, 2, 55, 49, 11, 100, 2, 58, 92, 1, 25, 97, 35, 55, 54, 80, 34, 0, 36, 100, 85, 4, 54, 55, 68, 98, 19, 58, 75, 99, 39, 99, 37, 100, 28, 71, 13, 71, 64, 0, 58, 17, 0, 63, 46, 87, 30, 43, 89, 18, 94, 51, 81, 37, 4, 81, 41, 85, 99, 0, 80, 76, 37, 99, 2, 86, 49, 30, 24, 100, 3, 4, 83, 34, 79, 76, 63, 12, 27, 81, 5, 34, 13, 33, 90]
last_save: 717

Gen:78
TrainFitness:0.7777777777777778
TestFitness:0.5555555555555556
MaxGenLen:515
Individual: def p():
  def adf0(index):
    if np.equal(x[index],-936123.6577).all():
      return True
    else:
      return False
  def adf1(index):
    if np.greater(x[index],-964450.4117).all():
      return False
    else:
      return True
  def adf2(index):
    if np.greater(np.tanh(x[index]),+153534.9705).all():
      return False
    else:
      return False
  def adf3(index):
    if np.equal(x[index],+378032.1389).all():
      return True
    else:
      return False
  def adf4(index):
    if np.less(x[index],-439490.1881).all():
      if np.greater(x[index],-677057.3315).all():
        return True
      else:
        return True
      return True
    else:
      if np.equal(x[index],+213868.2830).all():
        return False
      else:
        return False
      return False
  def adf5(index):
    if np.less(x[index],+005813.2922).all():
      return True
    else:
      return False
  def adf6(index):
    if np.equal(x[index],-237522.5147).all():
      if np.greater(np.cos(x[index]),+275805.0341).all():
        return True
      else:
        return False
      return True
    else:
      if np.greater(x[index],-235543.2054).all():
        return True
      else:
        return False
      return False
  def adf7(index):
    if np.equal(x[index],-945697.6721).all():
      return True
    else:
      return False
  def adf8(index):
    if np.less(x[index],+440054.6105).all():
      if np.less(psqrt(x[index]),+888602.9600).all():
        if np.greater(x[index],-477891.0177).all():
          return True
        else:
          return False
        return True
      else:
        if np.less(sigmoid(x[index]),-706056.5143).all():
          return False
        else:
          return True
        return False
      return True
    else:
      if np.greater(sigmoid(x[index]),+587586.7689).all():
        return False
      else:
        return False
      return False
  return multiple_operation([adf0(0)*-473.414, adf1(1)*+331.510, adf2(2)*+680.596, adf3(3)*+893.661, adf4(4)*-434.264, adf5(5)*+536.281, adf6(6)*+220.384, adf7(7)*-852.645, adf8(8)*-500.314], [0, 1, 1, 1, 0, 0, 0, 0], 010.495)
result=p(); 0.7777777777777778
IndLenGenome:491
IndGenome:[72, 6, 4, 41, 20, 51, 21, 27, 40, 9, 3, 16, 21, 22, 63, 56, 55, 57, 47, 34, 49, 70, 57, 6, 19, 48, 47, 29, 99, 16, 64, 84, 35, 60, 84, 21, 41, 67, 49, 70, 72, 15, 81, 26, 2, 44, 74, 29, 11, 45, 3, 25, 53, 24, 19, 87, 50, 75, 29, 93, 53, 91, 89, 33, 48, 42, 63, 53, 77, 78, 10, 63, 32, 61, 63, 68, 9, 98, 9, 28, 94, 70, 1, 57, 87, 79, 0, 94, 23, 39, 84, 99, 10, 21, 58, 38, 31, 67, 42, 45, 3, 67, 53, 36, 77, 87, 50, 75, 57, 93, 53, 91, 35, 60, 48, 42, 63, 53, 77, 78, 10, 63, 32, 61, 63, 68, 76, 98, 62, 28, 13, 70, 1, 57, 87, 79, 97, 94, 23, 43, 64, 31, 10, 80, 75, 38, 31, 73, 42, 9, 52, 12, 28, 49, 41, 30, 83, 11, 89, 44, 99, 22, 12, 93, 87, 25, 22, 62, 55, 31, 84, 87, 93, 18, 96, 91, 39, 70, 97, 82, 67, 65, 88, 50, 15, 50, 93, 84, 81, 80, 57, 34, 99, 57, 19, 93, 9, 87, 52, 43, 25, 35, 24, 83, 32, 50, 35, 74, 32, 29, 33, 79, 83, 20, 59, 70, 53, 73, 99, 24, 5, 26, 99, 17, 16, 97, 72, 91, 80, 31, 56, 30, 66, 76, 31, 55, 48, 35, 14, 44, 90, 70, 65, 54, 46, 91, 0, 65, 18, 31, 79, 100, 41, 22, 78, 100, 68, 8, 18, 66, 80, 72, 89, 46, 10, 50, 71, 90, 49, 25, 45, 61, 64, 37, 37, 48, 19, 41, 10, 91, 37, 77, 76, 101, 80, 21, 55, 32, 99, 14, 63, 71, 17, 20, 16, 90, 95, 46, 55, 91, 94, 93, 95, 90, 81, 94, 71, 27, 80, 93, 35, 22, 96, 45, 38, 97, 35, 78, 46, 27, 46, 18, 49, 43, 13, 89, 68, 70, 85, 35, 59, 94, 57, 73, 84, 11, 24, 85, 22, 50, 33, 63, 81, 55, 31, 70, 22, 6, 28, 96, 28, 90, 75, 39, 46, 51, 56, 89, 28, 19, 13, 56, 76, 21, 92, 75, 26, 44, 33, 44, 82, 96, 4, 98, 66, 88, 95, 63, 46, 92, 18, 81, 54, 80, 91, 12, 12, 0, 93, 28, 74, 48, 29, 97, 18, 95, 12, 86, 24, 65, 26, 99, 7, 55, 50, 100, 53, 91, 74, 6, 78, 13, 79, 59, 98, 66, 80, 74, 77, 90, 81, 40, 94, 79, 75, 5, 74, 42, 49, 15, 96, 92, 12, 81, 89, 87, 60, 49, 78, 81, 18, 19, 52, 33, 8, 49, 19, 43, 88, 60, 35, 67, 44, 56, 16, 25, 70, 27, 67, 50, 10, 29, 79, 70, 18, 17, 77, 24, 37, 49, 32, 8, 13, 89, 36, 5, 79, 52, 6, 88, 56, 28, 45, 100, 69, 91, 3, 22, 35, 87, 1]
last_save: 717

Gen:2078
last_save: 717
Exit:FalseFalseTrue