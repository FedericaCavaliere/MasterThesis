Dataset:Meander/Full.csv
FS:False
Seed:1235
Size:7

Gen:1
TrainFitness:0.8888888888888888
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],+227756.2970).all():
      return False
    else:
      return False
  def adf1(index):
    if np.greater(x[index],+969869.9476).all():
      return True
    else:
      return True
  def adf2(index):
    if np.equal(x[index],-606044.6523).all():
      return True
    else:
      return False
  def adf3(index):
    if np.equal(psqrt(x[index]),-057240.1876).all():
      return False
    else:
      return False
  def adf4(index):
    if np.equal(x[index],-736181.8177).all():
      return False
    else:
      return False
  def adf5(index):
    if np.less(rlog(x[index]),-176805.7685).all():
      return True
    else:
      return False
  def adf6(index):
    if np.equal(x[index],-334916.5560).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(psqrt(x[index]),-889643.9907).all():
      return False
    else:
      return False
  def adf8(index):
    if np.less(x[index],-885866.2017).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*-724.182, adf1(1)*-864.460, adf2(2)*+230.078, adf3(3)*-879.678, adf4(4)*-380.612, adf5(5)*-255.068, adf6(6)*-172.851, adf7(7)*+752.761, adf8(8)*+831.913], [0, 0, 0, 0, 0, 0, 1, 1], 207.219)
result=p(); 0.8888888888888888
IndLenGenome:414
IndGenome:[45, 37, 40, 64, 65, 2, 12, 69, 52, 57, 41, 67, 66, 72, 88, 44, 89, 6, 3, 37, 51, 25, 28, 95, 10, 57, 89, 77, 98, 98, 53, 32, 20, 48, 19, 55, 12, 55, 60, 75, 2, 78, 63, 26, 81, 60, 91, 16, 32, 22, 3, 47, 87, 63, 90, 97, 57, 28, 91, 17, 79, 32, 51, 35, 55, 13, 36, 61, 38, 83, 90, 77, 28, 91, 68, 3, 60, 41, 18, 83, 76, 82, 38, 38, 99, 13, 52, 69, 48, 85, 95, 97, 67, 97, 42, 18, 84, 23, 48, 49, 62, 9, 30, 63, 17, 22, 78, 77, 60, 28, 17, 96, 88, 56, 84, 50, 24, 97, 97, 67, 35, 66, 42, 57, 89, 16, 73, 27, 95, 62, 91, 24, 18, 56, 55, 76, 15, 26, 92, 40, 57, 62, 45, 40, 77, 24, 45, 2, 6, 36, 17, 12, 84, 29, 48, 7, 90, 39, 75, 89, 64, 38, 12, 11, 87, 23, 56, 76, 86, 93, 36, 46, 52, 68, 60, 90, 58, 98, 55, 7, 50, 11, 49, 42, 99, 55, 86, 63, 88, 67, 30, 16, 15, 18, 52, 17, 47, 66, 80, 88, 21, 63, 44, 81, 73, 74, 76, 39, 58, 87, 81, 57, 68, 85, 61, 27, 87, 29, 16, 8, 87, 19, 72, 52, 25, 71, 58, 64, 29, 55, 67, 73, 91, 75, 36, 29, 66, 94, 10, 30, 70, 11, 60, 59, 10, 76, 61, 96, 57, 57, 74, 50, 39, 38, 93, 16, 61, 22, 57, 38, 68, 71, 41, 72, 84, 58, 75, 73, 45, 36, 71, 13, 77, 86, 67, 43, 12, 78, 70, 70, 22, 62, 56, 33, 46, 81, 48, 84, 37, 1, 68, 46, 93, 33, 87, 23, 42, 16, 72, 73, 45, 88, 78, 19, 67, 61, 52, 32, 87, 4, 30, 15, 13, 4, 43, 16, 37, 90, 0, 27, 45, 7, 6, 54, 93, 60, 3, 67, 96, 60, 62, 0, 97, 36, 97, 24, 60, 36, 70, 33, 1, 72, 78, 24, 62, 54, 24, 10, 6, 82, 1, 38, 79, 56, 46, 54, 86, 24, 23, 30, 1, 36, 2, 92, 83, 19, 61, 45, 2, 85, 27, 49, 11, 88, 70, 30, 85, 28, 53, 30, 19, 78, 15, 87, 25, 36, 36, 37, 2, 34, 7, 62, 93, 28, 75, 92, 40, 77, 11, 60, 56, 0, 19, 15, 33, 8, 48, 4, 5, 21, 56, 44, 47, 77]
last_save: 711

Gen:2001
last_save: 711
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.7777777777777778
TestFitness:0.7777777777777778
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],+024573.3466).all():
      return True
    else:
      return False
  def adf1(index):
    if np.less(x[index],+752379.3049).all():
      return True
    else:
      return False
  def adf2(index):
    if np.less(x[index],+633429.6924).all():
      return False
    else:
      return True
  def adf3(index):
    if np.equal(x[index],+265944.6469).all():
      return True
    else:
      return False
  def adf4(index):
    if np.less(rlog(x[index]),-428727.3502).all():
      return False
    else:
      return False
  def adf5(index):
    if np.equal(np.tanh(x[index]),+639707.0231).all():
      return True
    else:
      return True
  def adf6(index):
    if np.equal(x[index],-964761.4953).all():
      return False
    else:
      return False
  def adf7(index):
    if np.less(x[index],-615883.6951).all():
      return False
    else:
      return False
  def adf8(index):
    if np.equal(x[index],+090766.2363).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*-610.811, adf1(1)*+716.139, adf2(2)*+560.717, adf3(3)*-613.418, adf4(4)*-613.728, adf5(5)*-943.618, adf6(6)*+427.952, adf7(7)*+398.605, adf8(8)*-696.779], [1, 1, 0, 1, 0, 0, 0, 1], 767.868)
result=p(); 0.7777777777777778
IndLenGenome:412
IndGenome:[1, 32, 35, 56, 96, 35, 9, 72, 45, 4, 52, 25, 91, 57, 95, 58, 69, 68, 79, 81, 15, 69, 70, 33, 79, 92, 66, 61, 81, 34, 81, 58, 98, 38, 63, 91, 5, 24, 13, 56, 49, 75, 1, 99, 37, 12, 95, 21, 43, 79, 87, 58, 87, 18, 99, 23, 26, 36, 9, 16, 25, 22, 35, 21, 59, 77, 70, 25, 29, 62, 63, 6, 25, 2, 51, 22, 37, 50, 40, 97, 20, 38, 19, 39, 58, 47, 67, 5, 29, 99, 41, 44, 54, 12, 25, 15, 66, 76, 92, 2, 57, 48, 72, 61, 93, 61, 46, 99, 85, 92, 53, 17, 55, 59, 37, 34, 38, 31, 82, 68, 42, 32, 73, 13, 24, 8, 16, 97, 42, 95, 14, 11, 87, 16, 25, 39, 9, 84, 16, 89, 92, 85, 36, 21, 16, 58, 62, 2, 56, 83, 84, 36, 46, 47, 79, 39, 34, 76, 20, 51, 13, 24, 38, 47, 29, 59, 86, 68, 88, 53, 79, 48, 29, 38, 40, 49, 22, 57, 61, 29, 19, 76, 92, 89, 93, 55, 98, 32, 3, 66, 35, 76, 19, 36, 49, 90, 41, 76, 34, 54, 33, 79, 76, 35, 63, 56, 41, 47, 26, 67, 78, 96, 92, 13, 86, 26, 61, 83, 18, 93, 27, 26, 34, 37, 75, 47, 18, 77, 35, 70, 66, 86, 75, 51, 17, 66, 44, 83, 75, 56, 49, 71, 39, 90, 76, 35, 83, 49, 83, 72, 16, 74, 30, 64, 83, 20, 70, 94, 74, 73, 27, 85, 82, 49, 39, 46, 73, 70, 83, 57, 78, 31, 78, 70, 77, 93, 19, 36, 31, 58, 63, 80, 15, 6, 77, 46, 65, 91, 72, 54, 24, 98, 1, 55, 21, 63, 49, 1, 62, 18, 31, 36, 78, 37, 76, 47, 36, 59, 12, 86, 54, 50, 44, 80, 61, 9, 49, 29, 49, 93, 88, 80, 36, 4, 52, 66, 39, 76, 9, 56, 98, 77, 60, 70, 23, 0, 34, 55, 66, 18, 11, 24, 78, 8, 45, 86, 14, 15, 25, 56, 6, 75, 32, 38, 100, 17, 22, 98, 4, 75, 88, 38, 79, 94, 53, 65, 25, 22, 54, 4, 77, 19, 0, 60, 8, 78, 90, 91, 24, 34, 69, 83, 65, 99, 92, 73, 80, 22, 13, 74, 16, 40, 76, 53, 0, 54, 12, 37, 52, 2, 49, 42, 73, 99, 72, 82, 13, 52, 83, 80, 17, 76]
last_save: 712

Gen:2001
last_save: 712
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:1.0
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(psqrt(x[index]),+849761.8901).all():
      return False
    else:
      return False
  def adf1(index):
    if np.equal(psqrt(x[index]),-078169.4606).all():
      return False
    else:
      return True
  def adf2(index):
    if np.less(x[index],+488081.8704).all():
      return True
    else:
      return True
  def adf3(index):
    if np.less(psqrt(x[index]),-085559.0647).all():
      return True
    else:
      return False
  def adf4(index):
    if np.less(x[index],-343020.4761).all():
      return False
    else:
      return True
  def adf5(index):
    if np.greater(x[index],-425646.8521).all():
      return False
    else:
      return True
  def adf6(index):
    if np.equal(np.tanh(x[index]),-846627.8594).all():
      return True
    else:
      return True
  def adf7(index):
    if np.greater(x[index],-121491.4687).all():
      return False
    else:
      return False
  def adf8(index):
    if np.equal(x[index],+636398.1320).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*-433.468, adf1(1)*+059.314, adf2(2)*+650.703, adf3(3)*-604.032, adf4(4)*+340.654, adf5(5)*-920.633, adf6(6)*-898.503, adf7(7)*-583.140, adf8(8)*+203.406], [0, 1, 1, 1, 0, 0, 0, 0], 926.656)
result=p(); 0.6666666666666666
IndLenGenome:415
IndGenome:[19, 99, 63, 78, 25, 39, 94, 82, 87, 70, 68, 64, 24, 84, 9, 38, 53, 39, 23, 94, 91, 56, 11, 75, 31, 76, 12, 8, 66, 50, 65, 69, 47, 68, 23, 39, 94, 77, 31, 27, 65, 89, 84, 41, 70, 44, 85, 91, 83, 61, 91, 23, 73, 17, 12, 90, 57, 83, 48, 72, 96, 31, 81, 40, 15, 19, 23, 38, 40, 31, 47, 62, 79, 10, 2, 45, 64, 65, 24, 11, 18, 29, 76, 31, 38, 22, 81, 19, 76, 92, 64, 13, 89, 63, 35, 74, 14, 95, 81, 97, 12, 24, 44, 17, 94, 61, 17, 22, 32, 43, 16, 13, 17, 96, 49, 17, 74, 41, 73, 62, 92, 82, 71, 34, 91, 66, 26, 10, 66, 54, 16, 99, 10, 45, 10, 70, 45, 24, 42, 33, 85, 25, 94, 73, 86, 77, 54, 60, 54, 67, 56, 73, 69, 14, 90, 91, 46, 91, 23, 88, 31, 84, 59, 29, 70, 55, 64, 80, 14, 43, 65, 38, 15, 73, 53, 91, 26, 27, 54, 14, 13, 2, 68, 58, 55, 14, 14, 67, 31, 58, 24, 78, 50, 30, 34, 55, 53, 27, 96, 21, 90, 31, 28, 72, 30, 83, 35, 58, 42, 89, 56, 70, 24, 87, 43, 58, 50, 64, 39, 50, 56, 78, 64, 29, 46, 86, 20, 67, 43, 28, 73, 32, 34, 36, 43, 98, 65, 43, 91, 65, 27, 18, 97, 84, 40, 69, 86, 46, 14, 68, 20, 10, 46, 50, 60, 48, 26, 73, 31, 78, 59, 81, 80, 15, 63, 71, 81, 48, 28, 14, 29, 36, 75, 72, 77, 54, 26, 84, 7, 38, 95, 5, 54, 33, 70, 72, 20, 15, 92, 27, 55, 55, 34, 12, 16, 70, 37, 23, 90, 33, 86, 73, 7, 85, 28, 28, 79, 55, 93, 9, 29, 7, 58, 30, 61, 39, 21, 94, 19, 67, 8, 26, 3, 8, 64, 69, 66, 71, 87, 67, 51, 100, 19, 86, 72, 92, 3, 9, 66, 67, 55, 63, 59, 85, 79, 22, 22, 84, 40, 77, 36, 57, 23, 7, 14, 47, 88, 37, 70, 78, 44, 26, 69, 22, 17, 84, 2, 40, 89, 81, 34, 44, 62, 44, 36, 67, 94, 1, 72, 80, 71, 36, 16, 63, 61, 78, 1, 89, 10, 26, 38, 55, 30, 10, 74, 26, 87, 56, 72, 44, 56, 5, 27, 83, 59, 12, 34, 56, 2, 65, 17, 12, 60, 96, 12]
last_save: 713

Gen:47
TrainFitness:0.7777777777777778
TestFitness:0.8888888888888888
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(np.sin(x[index]),-115149.4832).all():
      return True
    else:
      return False
  def adf1(index):
    if np.equal(x[index],+452820.3340).all():
      return True
    else:
      return True
  def adf2(index):
    if np.greater(x[index],-509451.0867).all():
      return False
    else:
      return False
  def adf3(index):
    if np.less(rlog(x[index]),+935533.8348).all():
      return False
    else:
      return False
  def adf4(index):
    if np.less(np.tanh(x[index]),-009475.7973).all():
      return True
    else:
      return True
  def adf5(index):
    if np.greater(np.tanh(x[index]),-732727.2368).all():
      if np.greater(x[index],-764176.5715).all():
        return False
      else:
        return False
      return True
    else:
      if np.less(x[index],+784766.9510).all():
        return True
      else:
        return False
      return False
  def adf6(index):
    if np.equal(x[index],-927541.5516).all():
      return False
    else:
      return False
  def adf7(index):
    if np.equal(x[index],+068961.3654).all():
      return False
    else:
      return False
  def adf8(index):
    if np.greater(x[index],+025272.9217).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*-367.876, adf1(1)*+432.579, adf2(2)*-927.540, adf3(3)*-289.551, adf4(4)*+445.528, adf5(5)*+954.131, adf6(6)*-224.320, adf7(7)*+546.002, adf8(8)*-952.756], [1, 0, 0, 1, 1, 1, 1, 0], 996.192)
result=p(); 0.7777777777777778
IndLenGenome:483
IndGenome:[13, 40, 38, 81, 14, 30, 48, 3, 11, 11, 11, 91, 35, 21, 44, 9, 94, 28, 13, 42, 2, 49, 44, 35, 77, 57, 96, 42, 45, 24, 55, 42, 18, 12, 70, 33, 13, 94, 10, 70, 2, 49, 87, 60, 21, 4, 29, 34, 25, 70, 99, 14, 25, 11, 90, 18, 36, 77, 37, 5, 95, 45, 100, 52, 34, 22, 82, 88, 99, 93, 25, 65, 93, 23, 28, 13, 54, 48, 47, 21, 14, 17, 67, 70, 44, 54, 55, 24, 30, 20, 39, 84, 57, 35, 57, 9, 77, 73, 90, 50, 65, 16, 82, 18, 42, 26, 46, 53, 55, 17, 23, 72, 87, 52, 17, 62, 43, 96, 98, 63, 51, 81, 72, 89, 88, 87, 26, 74, 11, 7, 96, 75, 87, 31, 25, 15, 11, 66, 49, 16, 73, 49, 44, 53, 17, 28, 54, 57, 56, 46, 49, 25, 11, 60, 60, 65, 85, 97, 55, 47, 79, 52, 75, 24, 79, 12, 7, 95, 84, 31, 25, 15, 11, 66, 49, 67, 73, 49, 44, 57, 43, 28, 54, 20, 56, 38, 49, 46, 11, 33, 66, 65, 44, 97, 19, 78, 89, 39, 49, 12, 62, 35, 80, 72, 75, 62, 37, 62, 89, 92, 41, 17, 27, 98, 21, 52, 69, 3, 66, 23, 46, 47, 78, 77, 86, 49, 80, 78, 94, 63, 32, 85, 47, 79, 52, 75, 24, 79, 12, 7, 95, 84, 20, 85, 33, 37, 22, 88, 79, 75, 45, 71, 14, 72, 91, 94, 44, 55, 45, 42, 18, 22, 88, 34, 39, 85, 84, 91, 63, 11, 32, 69, 73, 82, 12, 54, 83, 22, 40, 75, 12, 87, 85, 84, 16, 20, 70, 72, 72, 49, 63, 99, 55, 72, 97, 25, 86, 21, 33, 58, 90, 79, 45, 85, 23, 96, 6, 49, 29, 46, 91, 39, 82, 13, 96, 93, 57, 22, 77, 76, 41, 17, 27, 98, 21, 52, 69, 82, 38, 79, 67, 90, 28, 89, 96, 46, 24, 11, 44, 24, 43, 22, 37, 79, 79, 10, 69, 98, 52, 50, 40, 60, 32, 71, 86, 86, 66, 86, 61, 41, 58, 11, 3, 14, 60, 88, 1, 40, 7, 44, 52, 73, 32, 43, 55, 9, 58, 77, 23, 63, 68, 64, 83, 52, 36, 17, 28, 61, 4, 52, 50, 0, 59, 78, 99, 33, 36, 58, 11, 40, 66, 58, 27, 53, 94, 74, 52, 76, 92, 20, 29, 99, 19, 19, 2, 41, 48, 53, 19, 91, 62, 100, 1, 11, 28, 91, 71, 78, 71, 81, 32, 78, 47, 29, 28, 87, 62, 80, 84, 12, 39, 36, 23, 35, 71, 32, 13, 72, 92, 38, 64, 31, 35, 0, 19, 14, 37, 29, 77, 19, 80, 29, 72, 11, 79, 43, 33, 56, 30, 38, 68, 31, 16, 76, 9, 79, 16, 50, 12, 48, 65, 24, 67]
last_save: 713

Gen:2047
last_save: 713
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.7777777777777778
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],-462965.4300).all():
      return True
    else:
      return False
  def adf1(index):
    if np.equal(x[index],-860633.7144).all():
      return False
    else:
      return True
  def adf2(index):
    if np.equal(x[index],+938070.3358).all():
      return True
    else:
      return True
  def adf3(index):
    if np.greater(x[index],+123155.0659).all():
      return True
    else:
      return False
  def adf4(index):
    if np.equal(psqrt(x[index]),-349378.7763).all():
      return False
    else:
      return True
  def adf5(index):
    if np.greater(x[index],+015707.6800).all():
      return True
    else:
      return False
  def adf6(index):
    if np.less(rlog(x[index]),-824761.6392).all():
      return True
    else:
      return True
  def adf7(index):
    if np.greater(x[index],+624687.3588).all():
      return True
    else:
      return False
  def adf8(index):
    if np.equal(np.tanh(x[index]),-850673.9772).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*-047.694, adf1(1)*-639.864, adf2(2)*+924.638, adf3(3)*-224.211, adf4(4)*-400.666, adf5(5)*+452.639, adf6(6)*-652.907, adf7(7)*+185.722, adf8(8)*-909.429], [0, 1, 0, 1, 0, 0, 0, 1], 654.001)
result=p(); 0.7777777777777778
IndLenGenome:414
IndGenome:[76, 44, 81, 94, 14, 17, 44, 5, 93, 28, 59, 91, 95, 87, 35, 41, 38, 76, 93, 35, 77, 11, 46, 7, 32, 32, 34, 61, 71, 7, 7, 10, 47, 20, 31, 69, 42, 6, 85, 9, 8, 25, 24, 46, 79, 43, 2, 37, 13, 11, 22, 73, 60, 75, 67, 86, 3, 14, 67, 29, 92, 83, 1, 36, 41, 11, 17, 72, 36, 68, 89, 24, 75, 7, 73, 46, 16, 26, 87, 85, 77, 62, 16, 30, 92, 52, 69, 70, 13, 94, 12, 74, 29, 70, 95, 46, 26, 58, 56, 52, 67, 51, 18, 52, 14, 21, 85, 90, 69, 21, 86, 92, 33, 75, 27, 76, 11, 81, 20, 54, 71, 22, 30, 94, 66, 17, 28, 74, 67, 64, 28, 9, 50, 26, 48, 35, 82, 71, 25, 64, 77, 39, 83, 83, 41, 41, 34, 89, 92, 96, 23, 57, 79, 17, 15, 68, 99, 19, 93, 65, 77, 88, 2, 46, 56, 53, 73, 36, 47, 62, 23, 44, 22, 59, 93, 77, 46, 98, 78, 34, 88, 63, 13, 13, 89, 79, 23, 18, 56, 37, 17, 20, 16, 89, 28, 66, 68, 19, 72, 59, 86, 23, 91, 58, 87, 30, 52, 72, 52, 30, 14, 54, 27, 44, 44, 21, 46, 31, 51, 15, 101, 76, 47, 25, 64, 32, 64, 25, 89, 17, 70, 63, 70, 14, 62, 40, 43, 84, 79, 16, 17, 32, 64, 85, 80, 58, 30, 63, 81, 60, 90, 78, 17, 81, 41, 56, 55, 86, 29, 35, 17, 85, 10, 90, 43, 97, 36, 82, 45, 12, 76, 86, 52, 98, 39, 44, 97, 74, 74, 93, 35, 59, 76, 88, 26, 76, 88, 24, 97, 41, 88, 67, 5, 41, 61, 63, 38, 67, 8, 55, 3, 1, 76, 29, 72, 18, 62, 70, 66, 31, 6, 0, 80, 68, 78, 92, 21, 77, 10, 86, 49, 49, 38, 80, 63, 55, 76, 21, 18, 24, 8, 63, 92, 62, 86, 32, 36, 73, 46, 90, 27, 61, 63, 12, 1, 48, 100, 7, 64, 41, 29, 0, 56, 94, 54, 32, 62, 83, 85, 100, 17, 94, 74, 41, 22, 3, 53, 96, 39, 95, 30, 71, 48, 42, 54, 34, 100, 28, 28, 87, 68, 61, 21, 85, 64, 19, 30, 17, 68, 1, 38, 26, 9, 39, 66, 71, 52, 1, 31, 60, 96, 21, 82, 37, 32, 48, 77, 60, 53, 35, 83, 43, 47, 10]
last_save: 714

Gen:4
TrainFitness:0.7777777777777778
TestFitness:0.7777777777777778
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],+310644.1734).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(x[index],-297195.0293).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(x[index],+033297.1904).all():
      return False
    else:
      return True
  def adf3(index):
    if np.greater(sigmoid(x[index]),+604691.0465).all():
      if np.less(np.tanh(x[index]),-258567.4024).all():
        return True
      else:
        return False
      return True
    else:
      if np.equal(rlog(x[index]),-346445.2276).all():
        return True
      else:
        return False
      return False
  def adf4(index):
    if np.less(x[index],-882135.4077).all():
      if np.equal(np.cos(x[index]),+271652.4577).all():
        return False
      else:
        return True
      return False
    else:
      if np.less(x[index],+051584.4050).all():
        return True
      else:
        return True
      return False
  def adf5(index):
    if np.greater(rlog(x[index]),-239353.8111).all():
      return False
    else:
      return True
  def adf6(index):
    if np.less(x[index],-100813.5225).all():
      return True
    else:
      return False
  def adf7(index):
    if np.equal(np.tanh(x[index]),-371918.3197).all():
      return True
    else:
      return False
  def adf8(index):
    if np.less(x[index],+259219.6727).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+901.231, adf1(1)*-225.009, adf2(2)*+700.180, adf3(3)*-352.483, adf4(4)*+495.574, adf5(5)*-011.085, adf6(6)*-053.457, adf7(7)*+639.165, adf8(8)*+866.371], [0, 1, 0, 0, 0, 1, 1, 1], 397.397)
result=p(); 0.7777777777777778
IndLenGenome:403
IndGenome:[65, 46, 65, 45, 70, 49, 43, 8, 29, 33, 11, 60, 76, 84, 14, 71, 47, 3, 84, 61, 7, 21, 19, 46, 59, 84, 77, 65, 72, 69, 47, 51, 59, 45, 60, 92, 49, 83, 39, 21, 65, 35, 93, 19, 40, 18, 92, 10, 33, 53, 82, 29, 57, 91, 9, 10, 74, 23, 40, 44, 82, 6, 84, 56, 15, 29, 10, 34, 96, 40, 14, 46, 19, 71, 50, 24, 96, 95, 53, 34, 48, 98, 67, 79, 77, 12, 35, 18, 15, 76, 97, 74, 90, 32, 64, 74, 39, 14, 29, 50, 66, 40, 78, 89, 72, 33, 24, 76, 44, 84, 15, 32, 62, 37, 96, 62, 79, 73, 16, 54, 87, 34, 93, 89, 69, 71, 48, 78, 42, 51, 23, 65, 84, 80, 7, 57, 93, 95, 30, 25, 1, 42, 93, 82, 77, 31, 66, 85, 32, 84, 65, 47, 27, 1, 74, 39, 33, 52, 19, 43, 66, 53, 20, 85, 91, 15, 98, 64, 64, 80, 35, 60, 14, 94, 95, 50, 87, 66, 64, 28, 93, 27, 42, 82, 13, 89, 63, 55, 23, 68, 91, 91, 11, 89, 60, 24, 59, 79, 79, 45, 99, 97, 61, 20, 70, 78, 31, 33, 15, 52, 12, 95, 70, 57, 23, 15, 74, 70, 68, 56, 33, 31, 53, 77, 81, 79, 21, 18, 23, 61, 89, 37, 56, 31, 85, 43, 22, 99, 8, 26, 22, 62, 45, 89, 92, 71, 9, 86, 57, 62, 27, 78, 57, 22, 56, 17, 54, 47, 79, 50, 11, 32, 83, 71, 55, 89, 28, 42, 52, 35, 80, 50, 19, 38, 92, 60, 77, 100, 40, 31, 8, 40, 7, 37, 75, 43, 35, 62, 44, 28, 53, 20, 20, 75, 14, 9, 45, 55, 7, 54, 45, 15, 34, 40, 61, 61, 40, 58, 5, 15, 55, 96, 30, 75, 33, 14, 45, 17, 73, 66, 100, 26, 53, 89, 1, 26, 65, 75, 22, 99, 98, 86, 76, 13, 7, 41, 15, 10, 37, 58, 68, 38, 49, 55, 15, 57, 23, 89, 57, 33, 39, 7, 41, 6, 7, 28, 59, 81, 74, 67, 99, 94, 91, 31, 36, 86, 100, 39, 35, 54, 27, 69, 17, 56, 79, 86, 57, 57, 55, 74, 73, 81, 77, 7, 71, 94, 14, 58, 20, 42, 8, 53, 52, 77, 15, 35, 71, 48, 80, 73, 50, 67, 55]
last_save: 714

Gen:2004
last_save: 714
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.7777777777777778
TestFitness:0.8888888888888888
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(np.tanh(x[index]),-516287.7944).all():
      return False
    else:
      return True
  def adf1(index):
    if np.less(x[index],+022854.9100).all():
      return True
    else:
      return False
  def adf2(index):
    if np.equal(x[index],+084858.8817).all():
      return False
    else:
      return False
  def adf3(index):
    if np.less(x[index],+841694.6453).all():
      return True
    else:
      return True
  def adf4(index):
    if np.greater(x[index],+618799.0931).all():
      return False
    else:
      return True
  def adf5(index):
    if np.equal(x[index],+999781.3919).all():
      return True
    else:
      return False
  def adf6(index):
    if np.less(rlog(x[index]),+448749.8246).all():
      return True
    else:
      return True
  def adf7(index):
    if np.greater(sigmoid(x[index]),-251742.4070).all():
      return True
    else:
      return False
  def adf8(index):
    if np.greater(x[index],+651971.2753).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+517.400, adf1(1)*+209.363, adf2(2)*+568.955, adf3(3)*-273.536, adf4(4)*+870.670, adf5(5)*+264.195, adf6(6)*-503.741, adf7(7)*+062.298, adf8(8)*-710.957], [1, 1, 1, 1, 0, 1, 0, 1], 632.033)
result=p(); 0.7777777777777778
IndLenGenome:414
IndGenome:[18, 13, 20, 26, 2, 4, 23, 76, 81, 98, 53, 61, 17, 41, 58, 65, 48, 84, 67, 85, 46, 15, 45, 77, 32, 93, 86, 33, 45, 71, 97, 79, 84, 4, 67, 90, 54, 24, 94, 93, 70, 20, 75, 28, 82, 35, 48, 61, 45, 80, 92, 7, 48, 29, 19, 42, 60, 82, 20, 45, 64, 51, 93, 73, 23, 80, 86, 50, 94, 15, 37, 80, 31, 72, 85, 97, 33, 11, 45, 55, 83, 96, 94, 30, 34, 47, 70, 71, 23, 14, 77, 77, 50, 11, 76, 27, 39, 6, 7, 52, 20, 38, 80, 92, 63, 82, 19, 95, 68, 51, 24, 74, 32, 87, 67, 79, 2, 87, 53, 59, 22, 83, 93, 49, 84, 45, 29, 82, 16, 34, 57, 29, 73, 15, 77, 97, 25, 26, 41, 58, 40, 64, 19, 61, 91, 95, 12, 89, 60, 33, 80, 56, 33, 72, 52, 65, 73, 19, 65, 75, 44, 34, 57, 56, 90, 38, 54, 51, 40, 35, 93, 86, 74, 48, 94, 58, 76, 30, 38, 23, 20, 8, 95, 29, 7, 68, 29, 77, 27, 46, 70, 24, 63, 79, 81, 95, 68, 38, 20, 69, 38, 84, 66, 64, 6, 69, 84, 98, 50, 68, 57, 72, 34, 82, 61, 54, 17, 84, 93, 93, 37, 85, 76, 99, 98, 86, 31, 81, 66, 88, 77, 38, 59, 42, 23, 37, 36, 70, 26, 76, 12, 84, 99, 63, 37, 74, 77, 88, 45, 86, 59, 19, 32, 40, 24, 78, 11, 66, 29, 19, 64, 51, 37, 83, 91, 83, 15, 51, 21, 48, 40, 51, 17, 55, 20, 18, 39, 64, 32, 29, 7, 10, 27, 54, 18, 58, 71, 49, 9, 9, 78, 26, 59, 23, 74, 67, 11, 17, 31, 75, 57, 80, 11, 25, 11, 81, 91, 50, 33, 43, 100, 98, 78, 49, 60, 69, 42, 32, 55, 39, 58, 69, 58, 27, 57, 56, 45, 73, 40, 47, 18, 35, 45, 14, 87, 37, 2, 28, 40, 68, 6, 37, 47, 9, 71, 84, 98, 60, 24, 90, 42, 47, 59, 54, 53, 100, 92, 58, 96, 85, 88, 41, 76, 1, 74, 84, 63, 69, 64, 85, 99, 51, 84, 15, 38, 67, 0, 78, 97, 43, 54, 27, 99, 52, 0, 98, 27, 74, 92, 78, 87, 9, 17, 99, 79, 54, 67, 58, 23, 56, 28, 15, 17, 17, 53, 12, 55, 4, 98, 10, 41, 78, 51, 71]
last_save: 715

Gen:2001
last_save: 715
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:1.0
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],-963934.5953).all():
      return False
    else:
      return False
  def adf1(index):
    if np.equal(x[index],-553253.4763).all():
      return False
    else:
      return False
  def adf2(index):
    if np.less(np.sin(x[index]),+374945.6200).all():
      return False
    else:
      return False
  def adf3(index):
    if np.greater(x[index],+083908.0422).all():
      return True
    else:
      return False
  def adf4(index):
    if np.greater(sigmoid(x[index]),+859790.7458).all():
      return True
    else:
      return False
  def adf5(index):
    if np.greater(x[index],-362054.9409).all():
      return False
    else:
      return False
  def adf6(index):
    if np.greater(x[index],-583476.4536).all():
      return True
    else:
      return True
  def adf7(index):
    if np.less(x[index],+370196.1491).all():
      return False
    else:
      return True
  def adf8(index):
    if np.equal(np.tanh(x[index]),-186404.6993).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-214.995, adf1(1)*-256.306, adf2(2)*+637.595, adf3(3)*-400.479, adf4(4)*+236.460, adf5(5)*+462.945, adf6(6)*+945.220, adf7(7)*+965.204, adf8(8)*-925.671], [1, 0, 1, 1, 0, 1, 1, 0], 760.058)
result=p(); 0.6666666666666666
IndLenGenome:414
IndGenome:[75, 77, 6, 98, 71, 37, 64, 17, 7, 57, 42, 5, 20, 53, 71, 52, 48, 43, 5, 89, 94, 11, 80, 67, 20, 82, 97, 44, 13, 29, 61, 43, 62, 27, 44, 33, 31, 26, 18, 6, 10, 18, 89, 74, 15, 28, 45, 28, 76, 80, 22, 77, 12, 69, 31, 18, 50, 87, 40, 19, 97, 47, 30, 47, 34, 39, 87, 54, 68, 70, 38, 20, 71, 68, 65, 32, 74, 84, 66, 14, 85, 10, 86, 46, 17, 16, 27, 19, 96, 90, 88, 63, 49, 30, 40, 60, 10, 77, 61, 65, 71, 59, 49, 77, 63, 91, 86, 59, 73, 54, 24, 48, 31, 67, 33, 69, 72, 90, 96, 15, 32, 10, 98, 94, 27, 9, 85, 19, 76, 63, 49, 75, 70, 41, 92, 15, 38, 69, 80, 95, 46, 22, 23, 76, 32, 51, 53, 76, 29, 62, 19, 92, 66, 15, 32, 14, 1, 52, 42, 5, 23, 98, 77, 48, 74, 5, 80, 33, 93, 54, 65, 99, 33, 54, 85, 94, 32, 57, 39, 90, 65, 13, 45, 32, 20, 69, 75, 93, 75, 90, 84, 77, 29, 89, 35, 5, 69, 34, 14, 33, 31, 99, 21, 75, 67, 15, 13, 93, 94, 41, 94, 66, 93, 45, 93, 54, 25, 29, 96, 52, 94, 82, 29, 73, 17, 35, 84, 15, 70, 50, 70, 46, 53, 15, 38, 96, 43, 86, 51, 39, 25, 57, 88, 14, 78, 19, 47, 10, 84, 97, 48, 83, 44, 96, 59, 27, 96, 42, 94, 90, 59, 96, 68, 39, 16, 60, 29, 60, 93, 73, 64, 64, 12, 41, 53, 65, 22, 29, 75, 33, 28, 34, 63, 17, 11, 99, 17, 73, 96, 83, 85, 29, 13, 4, 46, 64, 99, 9, 8, 11, 64, 18, 95, 34, 58, 33, 75, 25, 57, 81, 16, 100, 8, 44, 68, 4, 26, 59, 21, 36, 10, 29, 14, 89, 21, 87, 24, 42, 0, 67, 20, 55, 56, 21, 46, 24, 75, 18, 78, 11, 22, 47, 95, 43, 34, 90, 34, 31, 7, 13, 6, 20, 40, 31, 12, 13, 7, 26, 51, 98, 73, 65, 5, 42, 14, 31, 39, 47, 43, 63, 72, 54, 79, 55, 8, 49, 7, 74, 49, 35, 25, 57, 83, 56, 67, 52, 26, 89, 63, 5, 92, 19, 13, 51, 31, 22, 52, 96, 11, 33, 74, 96, 62, 9, 75, 26, 78, 64, 44, 36, 24, 12, 38, 39]
last_save: 716

Gen:7
TrainFitness:0.7777777777777778
TestFitness:0.8888888888888888
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],-511776.9374).all():
      return False
    else:
      return True
  def adf1(index):
    if np.equal(x[index],+765349.9209).all():
      return True
    else:
      return True
  def adf2(index):
    if np.equal(x[index],+752562.1909).all():
      return False
    else:
      return False
  def adf3(index):
    if np.greater(x[index],+010356.2193).all():
      return False
    else:
      return False
  def adf4(index):
    if np.greater(x[index],-805357.0138).all():
      return True
    else:
      return False
  def adf5(index):
    if np.less(rlog(x[index]),+932525.7965).all():
      return False
    else:
      return False
  def adf6(index):
    if np.less(x[index],+017690.4749).all():
      if np.greater(psqrt(x[index]),+203257.8502).all():
        return True
      else:
        return False
      return True
    else:
      if np.greater(x[index],-212860.7149).all():
        return True
      else:
        return False
      return False
  def adf7(index):
    if np.greater(x[index],-796685.7379).all():
      return False
    else:
      return False
  def adf8(index):
    if np.less(x[index],-205466.1350).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+657.025, adf1(1)*-444.339, adf2(2)*-922.547, adf3(3)*-327.298, adf4(4)*+480.914, adf5(5)*+194.297, adf6(6)*-956.149, adf7(7)*-920.665, adf8(8)*-458.135], [1, 0, 0, 1, 0, 1, 0, 0], 458.031)
result=p(); 0.7777777777777778
IndLenGenome:459
IndGenome:[41, 3, 51, 83, 99, 13, 25, 43, 56, 95, 11, 71, 7, 17, 6, 29, 13, 27, 34, 57, 36, 15, 63, 74, 79, 9, 42, 10, 57, 36, 15, 63, 74, 79, 9, 42, 10, 29, 6, 4, 70, 63, 89, 37, 37, 40, 67, 57, 55, 42, 15, 6, 82, 21, 9, 50, 89, 61, 43, 59, 93, 81, 19, 58, 20, 34, 80, 71, 40, 63, 15, 36, 62, 71, 49, 93, 17, 63, 40, 59, 27, 49, 78, 31, 75, 28, 70, 65, 63, 5, 47, 60, 11, 43, 98, 60, 95, 52, 75, 49, 56, 58, 62, 4, 59, 19, 93, 92, 55, 12, 65, 67, 19, 16, 25, 23, 17, 93, 10, 76, 40, 97, 76, 94, 89, 40, 51, 27, 66, 69, 60, 84, 97, 74, 99, 13, 60, 54, 89, 97, 76, 85, 12, 50, 33, 12, 45, 97, 18, 95, 10, 32, 90, 91, 48, 49, 33, 81, 67, 13, 59, 22, 81, 82, 88, 36, 20, 47, 81, 54, 69, 98, 45, 41, 29, 21, 39, 77, 46, 23, 22, 67, 59, 36, 66, 28, 95, 17, 23, 17, 69, 39, 57, 18, 63, 91, 89, 98, 37, 10, 32, 10, 85, 44, 86, 26, 31, 43, 35, 80, 87, 58, 62, 39, 34, 74, 25, 56, 5, 57, 20, 92, 85, 98, 41, 93, 54, 24, 64, 63, 43, 29, 36, 41, 24, 29, 32, 32, 15, 4, 37, 63, 95, 68, 53, 92, 77, 22, 19, 58, 44, 78, 63, 44, 58, 60, 39, 41, 14, 92, 94, 4, 51, 39, 34, 12, 59, 17, 38, 99, 55, 69, 35, 56, 61, 4, 59, 11, 3, 95, 89, 12, 20, 6, 16, 95, 78, 55, 74, 54, 65, 8, 81, 83, 75, 67, 71, 86, 46, 77, 44, 45, 90, 54, 80, 94, 45, 28, 20, 63, 11, 94, 55, 82, 71, 20, 94, 80, 35, 55, 8, 30, 27, 0, 74, 2, 56, 97, 86, 52, 100, 24, 2, 27, 45, 45, 73, 48, 25, 90, 44, 92, 59, 48, 4, 28, 55, 74, 75, 57, 14, 48, 6, 86, 92, 75, 1, 12, 7, 24, 10, 66, 94, 26, 7, 42, 7, 71, 94, 31, 40, 39, 37, 68, 31, 46, 57, 87, 89, 39, 69, 67, 96, 71, 50, 28, 84, 5, 54, 21, 54, 93, 32, 33, 0, 8, 81, 59, 82, 22, 23, 41, 70, 23, 74, 37, 66, 62, 90, 45, 34, 86, 86, 51, 47, 48, 58, 78, 38, 52, 68, 89, 21, 28, 11, 34, 82, 94, 5, 83, 99, 15, 6, 45, 55, 60, 84, 89, 44, 93, 12, 81, 33, 18, 51, 85, 61, 9, 26, 22, 98, 79, 97, 5, 12, 37, 98, 98, 74]
last_save: 716

Gen:2007
last_save: 716
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.8888888888888888
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],-639917.1217).all():
      return True
    else:
      return True
  def adf1(index):
    if np.less(x[index],+643260.3042).all():
      return True
    else:
      return True
  def adf2(index):
    if np.less(x[index],-723009.7007).all():
      return True
    else:
      return True
  def adf3(index):
    if np.less(psqrt(x[index]),+796132.4752).all():
      return True
    else:
      return False
  def adf4(index):
    if np.less(x[index],+547892.5389).all():
      return False
    else:
      return True
  def adf5(index):
    if np.greater(x[index],+437257.7472).all():
      return False
    else:
      return True
  def adf6(index):
    if np.greater(x[index],+928550.8521).all():
      return False
    else:
      return False
  def adf7(index):
    if np.greater(np.tanh(x[index]),+619489.5823).all():
      return False
    else:
      return True
  def adf8(index):
    if np.equal(np.cos(x[index]),+482438.7586).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+754.124, adf1(1)*-152.606, adf2(2)*-392.042, adf3(3)*+818.208, adf4(4)*-942.295, adf5(5)*-383.146, adf6(6)*+167.630, adf7(7)*+914.012, adf8(8)*+088.946], [1, 0, 1, 0, 0, 0, 1, 0], 132.838)
result=p(); 0.6666666666666666
IndLenGenome:414
IndGenome:[67, 79, 77, 45, 96, 89, 37, 40, 75, 23, 59, 77, 85, 44, 11, 47, 49, 37, 12, 91, 52, 99, 51, 29, 7, 93, 68, 85, 60, 93, 50, 61, 37, 44, 25, 80, 96, 10, 45, 10, 74, 35, 48, 66, 3, 98, 55, 65, 94, 53, 15, 31, 2, 31, 46, 94, 96, 68, 82, 37, 38, 52, 91, 59, 2, 19, 44, 58, 18, 51, 70, 18, 93, 37, 75, 76, 95, 36, 78, 97, 62, 16, 20, 94, 26, 58, 35, 25, 62, 76, 32, 34, 87, 81, 13, 31, 28, 36, 32, 20, 88, 88, 19, 19, 95, 47, 12, 9, 52, 67, 51, 21, 47, 74, 16, 51, 23, 52, 66, 70, 89, 71, 85, 41, 38, 32, 63, 58, 83, 76, 29, 51, 87, 49, 79, 21, 39, 64, 44, 21, 98, 31, 82, 10, 77, 45, 65, 98, 68, 31, 24, 79, 58, 93, 28, 32, 24, 62, 10, 75, 67, 42, 89, 86, 80, 14, 15, 44, 8, 48, 59, 29, 54, 59, 49, 47, 4, 14, 77, 87, 24, 81, 99, 70, 78, 71, 61, 23, 51, 56, 38, 79, 83, 30, 69, 97, 34, 62, 13, 18, 54, 77, 88, 24, 37, 80, 27, 95, 90, 17, 65, 50, 62, 47, 40, 72, 22, 27, 66, 86, 13, 43, 73, 44, 79, 92, 25, 77, 11, 29, 33, 14, 60, 47, 82, 62, 22, 65, 72, 44, 22, 95, 80, 5, 89, 97, 24, 13, 39, 96, 16, 74, 79, 16, 26, 15, 71, 23, 39, 26, 62, 53, 48, 12, 72, 34, 19, 64, 94, 70, 71, 72, 40, 73, 88, 24, 55, 50, 59, 11, 99, 51, 43, 81, 79, 94, 12, 82, 28, 52, 10, 82, 98, 22, 23, 80, 42, 86, 11, 61, 63, 72, 30, 46, 78, 31, 68, 80, 67, 90, 79, 96, 32, 5, 4, 71, 60, 77, 85, 88, 97, 14, 93, 66, 81, 28, 48, 24, 57, 82, 70, 47, 46, 93, 20, 65, 76, 29, 59, 18, 42, 88, 72, 100, 68, 16, 78, 36, 2, 47, 15, 91, 15, 69, 90, 19, 47, 98, 85, 75, 41, 84, 95, 40, 3, 30, 56, 44, 97, 64, 85, 26, 48, 2, 89, 20, 52, 8, 32, 12, 45, 48, 54, 89, 85, 83, 24, 11, 23, 53, 19, 50, 13, 72, 88, 14, 49, 13, 57, 47, 67, 39, 37, 84, 22, 22, 67, 62, 37, 100, 50, 94, 75, 46]
last_save: 717

Gen:3
TrainFitness:0.7777777777777778
TestFitness:0.7777777777777778
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(rlog(x[index]),-636715.4620).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(x[index],+023892.7311).all():
      return True
    else:
      return False
  def adf2(index):
    if np.greater(x[index],+613550.7158).all():
      return True
    else:
      return False
  def adf3(index):
    if np.less(x[index],-998135.8818).all():
      return True
    else:
      return True
  def adf4(index):
    if np.equal(psqrt(x[index]),+138884.0576).all():
      if np.less(x[index],+380334.3271).all():
        return False
      else:
        return False
      return True
    else:
      if np.equal(rlog(x[index]),-155365.9035).all():
        return True
      else:
        return False
      return True
  def adf5(index):
    if np.equal(psqrt(x[index]),-739970.5372).all():
      return True
    else:
      return True
  def adf6(index):
    if np.less(x[index],-633734.7416).all():
      return True
    else:
      return True
  def adf7(index):
    if np.greater(x[index],+096005.0505).all():
      return True
    else:
      return False
  def adf8(index):
    if np.greater(x[index],+661103.6784).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+754.929, adf1(1)*-873.429, adf2(2)*-920.454, adf3(3)*+319.615, adf4(4)*+352.912, adf5(5)*-283.453, adf6(6)*-063.316, adf7(7)*-249.890, adf8(8)*-012.519], [0, 0, 1, 1, 0, 0, 1, 1], 704.939)
result=p(); 0.7777777777777778
IndLenGenome:491
IndGenome:[31, 11, 10, 7, 83, 32, 70, 81, 51, 58, 46, 43, 66, 87, 51, 65, 54, 26, 12, 90, 31, 5, 76, 91, 19, 7, 48, 72, 36, 20, 42, 73, 68, 49, 72, 57, 13, 61, 81, 80, 33, 19, 45, 12, 61, 80, 68, 68, 16, 81, 73, 25, 15, 90, 77, 41, 5, 48, 30, 5, 33, 91, 31, 69, 69, 63, 73, 39, 89, 98, 91, 63, 95, 88, 88, 31, 78, 76, 82, 95, 40, 67, 11, 12, 29, 99, 16, 34, 31, 63, 88, 8, 18, 44, 80, 45, 17, 36, 87, 82, 59, 76, 70, 34, 43, 28, 30, 93, 83, 94, 3, 52, 17, 51, 79, 25, 14, 61, 53, 22, 10, 29, 43, 29, 11, 35, 65, 43, 56, 45, 29, 100, 13, 35, 64, 87, 78, 12, 67, 71, 32, 29, 69, 61, 28, 67, 83, 39, 49, 37, 70, 65, 83, 37, 62, 46, 66, 33, 73, 4, 45, 74, 97, 52, 76, 3, 43, 17, 93, 24, 47, 84, 31, 66, 78, 62, 43, 33, 15, 95, 85, 18, 41, 70, 59, 6, 10, 30, 5, 40, 95, 30, 75, 36, 59, 33, 29, 81, 47, 90, 12, 74, 46, 46, 21, 91, 10, 53, 66, 27, 98, 74, 64, 61, 67, 45, 74, 96, 49, 47, 75, 74, 79, 52, 59, 19, 83, 70, 18, 17, 53, 54, 12, 19, 94, 93, 42, 69, 22, 90, 94, 35, 34, 4, 42, 62, 93, 61, 39, 86, 41, 5, 61, 74, 11, 73, 95, 72, 29, 81, 52, 77, 63, 26, 52, 48, 93, 94, 75, 83, 46, 39, 11, 70, 46, 23, 83, 51, 86, 70, 69, 64, 42, 54, 89, 88, 69, 10, 32, 25, 18, 30, 61, 32, 45, 91, 99, 85, 74, 60, 15, 17, 66, 76, 89, 81, 59, 97, 80, 34, 99, 33, 89, 76, 90, 86, 9, 77, 68, 95, 41, 67, 26, 86, 81, 54, 26, 93, 41, 46, 56, 86, 20, 98, 97, 46, 74, 27, 73, 59, 95, 22, 80, 98, 16, 97, 51, 53, 82, 93, 58, 57, 37, 41, 58, 23, 22, 89, 7, 84, 97, 18, 27, 59, 97, 31, 20, 91, 60, 17, 47, 44, 80, 96, 35, 63, 45, 68, 91, 82, 73, 41, 21, 69, 52, 35, 72, 12, 91, 37, 19, 42, 14, 84, 50, 71, 36, 86, 87, 37, 79, 4, 12, 26, 13, 100, 7, 7, 45, 89, 30, 10, 40, 7, 66, 57, 22, 0, 35, 90, 11, 87, 95, 69, 28, 59, 77, 50, 80, 13, 75, 18, 34, 3, 15, 96, 68, 36, 38, 34, 81, 7, 85, 8, 58, 60, 19, 19, 70, 81, 83, 20, 25, 68, 27, 87, 78, 18, 69, 57, 48, 75, 29, 65, 5, 11, 86, 46, 92, 20, 15, 71, 54, 21, 31, 23, 89, 15, 36, 75, 4, 4, 100, 53, 25, 47, 13, 44, 26, 98, 90]
last_save: 717

Gen:2003
last_save: 717
Exit:FalseFalseTrue