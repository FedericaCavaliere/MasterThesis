Dataset:Meander/Full.csv
FS:True
Seed:1237
Size:7

Gen:1
TrainFitness:1.0
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(np.sin(x[index]),-490545.1365).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(x[index],+197000.5849).all():
      return True
    else:
      return False
  def adf2(index):
    if np.less(x[index],+344357.5528).all():
      return True
    else:
      return False
  def adf3(index):
    if np.greater(x[index],+372492.2620).all():
      return True
    else:
      return False
  def adf4(index):
    if np.equal(x[index],+612158.1526).all():
      return True
    else:
      return True
  def adf7(index):
    if np.equal(x[index],+806652.5722).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+548.043, adf1(1)*+903.995, adf2(2)*+057.677, adf3(3)*-056.384, adf4(4)*-592.320, adf7(7)*-747.072], [1, 0, 1, 1, 1], 004.959)
result=p(); 1.0
IndLenGenome:280
IndGenome:[10, 12, 71, 48, 82, 13, 76, 76, 13, 25, 78, 11, 5, 25, 73, 23, 65, 9, 9, 11, 93, 93, 26, 64, 7, 36, 47, 94, 12, 50, 9, 23, 59, 25, 26, 60, 57, 19, 70, 83, 75, 19, 12, 53, 34, 59, 11, 60, 95, 84, 24, 24, 83, 95, 66, 48, 22, 95, 35, 80, 11, 17, 85, 99, 69, 86, 30, 25, 43, 15, 17, 57, 85, 27, 62, 88, 72, 72, 47, 36, 45, 34, 24, 82, 90, 43, 25, 40, 70, 10, 17, 40, 46, 37, 10, 10, 84, 58, 34, 39, 76, 41, 78, 87, 3, 58, 39, 9, 44, 37, 65, 37, 80, 65, 69, 39, 13, 70, 82, 92, 10, 17, 65, 26, 91, 72, 25, 75, 58, 18, 86, 74, 14, 87, 73, 45, 80, 48, 18, 83, 85, 55, 26, 38, 79, 65, 92, 49, 56, 61, 63, 55, 36, 10, 17, 9, 57, 30, 72, 30, 93, 59, 7, 72, 70, 82, 52, 40, 43, 54, 62, 81, 21, 52, 6, 65, 37, 43, 34, 58, 78, 66, 81, 15, 96, 54, 85, 95, 18, 65, 70, 12, 9, 98, 79, 14, 76, 30, 65, 50, 69, 97, 33, 8, 98, 38, 36, 79, 86, 75, 42, 22, 39, 13, 96, 35, 82, 69, 20, 52, 28, 34, 82, 5, 28, 43, 55, 11, 35, 12, 29, 91, 70, 4, 58, 97, 60, 18, 22, 91, 97, 23, 39, 38, 3, 70, 47, 11, 51, 76, 48, 46, 6, 18, 11, 24, 14, 60, 14, 0, 46, 71, 95, 73, 64, 93, 5, 67, 92, 72, 53, 21, 20, 52, 34, 22, 27, 69, 86, 99]
last_save: 731

Gen:1
last_save: 731
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.6666666666666666
TestFitness:1.0
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(np.cos(x[index]),-435113.3064).all():
      return False
    else:
      return False
  def adf1(index):
    if np.greater(np.sin(x[index]),+607367.6231).all():
      return True
    else:
      return True
  def adf2(index):
    if np.less(np.sin(x[index]),+836378.6211).all():
      return True
    else:
      return True
  def adf3(index):
    if np.greater(x[index],-318012.6311).all():
      return True
    else:
      return True
  def adf4(index):
    if np.less(np.sin(x[index]),-481785.5535).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(np.tanh(x[index]),+361339.2193).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+431.714, adf1(1)*+591.928, adf2(2)*+425.957, adf3(3)*-997.305, adf4(4)*+958.720, adf7(7)*+667.122], [0, 1, 0, 1, 0], 121.775)
result=p(); 0.6666666666666666
IndLenGenome:286
IndGenome:[96, 82, 23, 22, 7, 91, 31, 93, 29, 89, 39, 87, 89, 88, 62, 9, 75, 60, 22, 79, 24, 19, 65, 21, 2, 39, 27, 38, 89, 20, 5, 83, 33, 3, 55, 17, 90, 23, 41, 97, 38, 64, 97, 98, 80, 7, 24, 27, 59, 28, 75, 33, 11, 74, 46, 33, 58, 60, 54, 48, 80, 37, 95, 65, 21, 59, 56, 70, 31, 25, 22, 98, 66, 10, 66, 62, 11, 19, 21, 5, 77, 91, 38, 21, 53, 53, 31, 71, 46, 13, 19, 83, 77, 75, 39, 33, 90, 81, 54, 48, 28, 66, 51, 45, 11, 87, 22, 1, 43, 64, 96, 94, 93, 64, 44, 78, 41, 42, 17, 15, 33, 47, 23, 37, 51, 95, 46, 99, 32, 79, 59, 72, 12, 35, 38, 6, 83, 62, 74, 92, 93, 46, 88, 23, 6, 51, 16, 24, 10, 63, 14, 58, 12, 14, 62, 48, 47, 89, 45, 61, 87, 42, 18, 50, 75, 39, 44, 31, 92, 73, 21, 16, 61, 43, 70, 31, 23, 42, 63, 51, 73, 66, 57, 35, 38, 50, 59, 72, 17, 86, 26, 64, 54, 92, 97, 76, 37, 8, 30, 15, 57, 23, 84, 90, 65, 62, 66, 21, 74, 86, 33, 2, 24, 62, 81, 68, 90, 9, 59, 6, 7, 48, 77, 33, 54, 93, 23, 75, 12, 28, 47, 72, 74, 48, 92, 11, 37, 64, 97, 31, 55, 72, 99, 53, 80, 68, 50, 34, 19, 1, 83, 58, 94, 76, 46, 96, 88, 17, 55, 11, 12, 66, 45, 43, 89, 93, 48, 70, 60, 48, 70, 79, 88, 31, 69, 34, 65, 21, 99, 72, 75, 96, 61, 19, 9, 26]
last_save: 732

Gen:15
TrainFitness:0.8333333333333334
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],+350979.7197).all():
      return False
    else:
      return False
  def adf1(index):
    if np.greater(x[index],+183019.0146).all():
      return False
    else:
      return False
  def adf2(index):
    if np.less(x[index],-191130.1431).all():
      if np.greater(x[index],+200775.8437).all():
        return True
      else:
        return False
      return True
    else:
      if np.less(x[index],-146839.9435).all():
        return False
      else:
        return False
      return True
  def adf3(index):
    if np.equal(np.tanh(x[index]),-240082.1641).all():
      return True
    else:
      return True
  def adf4(index):
    if np.greater(x[index],+016949.5612).all():
      return True
    else:
      return False
  def adf7(index):
    if np.equal(x[index],-240744.8180).all():
      if np.greater(psqrt(x[index]),-131587.0843).all():
        if np.equal(rlog(x[index]),-942286.8330).all():
          return False
        else:
          return True
        return False
      else:
        if np.less(psqrt(x[index]),-724868.1842).all():
          return False
        else:
          return True
        return False
      return False
    else:
      if np.less(psqrt(x[index]),+305838.5427).all():
        if np.greater(np.sin(x[index]),+584713.4198).all():
          return True
        else:
          return True
        return False
      else:
        if np.equal(x[index],-617396.5478).all():
          return False
        else:
          return True
        return False
      return True
  return multiple_operation([adf0(0)*-925.695, adf1(1)*-996.870, adf2(2)*-192.773, adf3(3)*-590.888, adf4(4)*-827.389, adf7(7)*-107.706], [1, 1, 0, 1, 1], 331.124)
result=p(); 0.8333333333333334
IndLenGenome:452
IndGenome:[96, 37, 96, 53, 97, 29, 40, 62, 35, 83, 25, 20, 59, 47, 59, 77, 91, 29, 97, 43, 39, 10, 83, 84, 29, 1, 46, 73, 11, 18, 43, 60, 91, 79, 70, 91, 4, 16, 85, 73, 87, 52, 70, 46, 15, 27, 13, 43, 41, 49, 71, 51, 53, 90, 81, 94, 93, 31, 41, 96, 77, 92, 48, 1, 22, 10, 80, 77, 67, 15, 38, 14, 53, 77, 6, 25, 44, 89, 67, 93, 21, 77, 52, 11, 54, 76, 78, 43, 19, 29, 84, 83, 85, 81, 97, 14, 84, 23, 95, 64, 62, 58, 51, 20, 42, 44, 70, 50, 18, 32, 91, 26, 84, 21, 20, 76, 81, 27, 57, 95, 10, 100, 50, 60, 61, 66, 79, 14, 29, 75, 86, 31, 82, 18, 99, 81, 50, 75, 20, 45, 88, 55, 7, 32, 34, 40, 57, 44, 4, 88, 81, 18, 30, 16, 91, 48, 2, 35, 19, 85, 76, 1, 73, 51, 85, 18, 77, 30, 88, 64, 23, 49, 35, 20, 10, 23, 29, 11, 59, 74, 52, 22, 38, 76, 8, 83, 43, 60, 85, 98, 29, 59, 52, 76, 83, 20, 77, 32, 17, 52, 14, 58, 86, 68, 41, 18, 24, 52, 85, 96, 35, 17, 82, 95, 52, 24, 35, 15, 8, 12, 3, 60, 45, 18, 23, 38, 65, 44, 42, 27, 43, 57, 52, 30, 94, 16, 61, 35, 48, 94, 37, 31, 63, 64, 51, 79, 88, 32, 60, 47, 95, 41, 39, 38, 97, 54, 66, 21, 47, 83, 89, 86, 75, 24, 37, 58, 5, 50, 69, 84, 38, 2, 79, 29, 77, 79, 42, 25, 66, 29, 15, 19, 65, 54, 99, 19, 86, 98, 47, 60, 13, 63, 93, 91, 59, 82, 17, 97, 63, 88, 55, 83, 95, 39, 40, 28, 18, 68, 75, 79, 62, 38, 42, 77, 13, 18, 49, 14, 71, 77, 31, 10, 47, 87, 50, 16, 46, 99, 27, 20, 57, 41, 81, 33, 3, 61, 31, 92, 34, 78, 48, 53, 40, 35, 37, 33, 31, 60, 20, 96, 30, 39, 89, 33, 67, 93, 63, 30, 31, 16, 48, 51, 54, 76, 83, 44, 14, 75, 43, 91, 67, 66, 32, 0, 41, 94, 21, 90, 57, 43, 63, 70, 17, 18, 63, 56, 77, 43, 56, 57, 77, 40, 14, 74, 19, 90, 4, 92, 2, 82, 58, 14, 99, 58, 40, 83, 28, 2, 67, 18, 23, 78, 31, 29, 76, 31, 42, 10, 13, 26, 42, 39, 59, 47, 5, 90, 61, 38, 24, 84, 72, 6, 46, 42, 66, 1, 78, 51, 1, 89, 1, 98, 21, 8, 66, 86, 56, 7, 81, 9, 20, 54]
last_save: 732

Gen:2015
last_save: 732
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:1.0
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(rlog(x[index]),-941691.7419).all():
      return True
    else:
      return True
  def adf1(index):
    if np.greater(rlog(x[index]),+020110.9578).all():
      return False
    else:
      return True
  def adf2(index):
    if np.greater(x[index],-836852.2927).all():
      return False
    else:
      return False
  def adf3(index):
    if np.equal(x[index],-338796.2636).all():
      return False
    else:
      return True
  def adf4(index):
    if np.less(x[index],+383995.7765).all():
      return True
    else:
      return False
  def adf7(index):
    if np.equal(np.cos(x[index]),+961717.6932).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+676.857, adf1(1)*-144.205, adf2(2)*+734.224, adf3(3)*-572.462, adf4(4)*-532.456, adf7(7)*-206.133], [0, 1, 1, 0, 1], 278.994)
result=p(); 0.6666666666666666
IndLenGenome:283
IndGenome:[97, 82, 7, 68, 93, 32, 39, 19, 65, 99, 54, 15, 21, 17, 59, 21, 82, 89, 13, 86, 73, 42, 63, 55, 81, 63, 81, 22, 87, 59, 69, 77, 65, 78, 76, 63, 48, 21, 18, 18, 18, 14, 96, 76, 65, 13, 82, 58, 28, 86, 27, 26, 45, 11, 73, 5, 66, 58, 71, 42, 79, 90, 56, 24, 98, 92, 89, 81, 78, 101, 73, 41, 84, 44, 57, 24, 99, 18, 50, 68, 40, 63, 67, 87, 98, 73, 82, 26, 19, 57, 72, 1, 86, 80, 93, 23, 76, 17, 83, 36, 71, 37, 17, 28, 98, 17, 79, 92, 57, 96, 43, 15, 88, 27, 69, 47, 92, 67, 23, 35, 41, 16, 18, 45, 40, 77, 17, 13, 41, 78, 52, 13, 95, 42, 43, 51, 15, 22, 26, 66, 29, 52, 81, 88, 56, 68, 39, 91, 70, 37, 59, 17, 94, 72, 29, 15, 89, 86, 14, 46, 61, 56, 37, 61, 59, 52, 12, 87, 54, 79, 31, 87, 74, 24, 11, 68, 64, 32, 69, 24, 94, 10, 46, 45, 53, 41, 12, 85, 92, 80, 92, 61, 62, 56, 69, 69, 13, 85, 90, 39, 77, 97, 0, 85, 8, 83, 79, 1, 14, 57, 11, 97, 48, 35, 57, 77, 61, 80, 44, 54, 34, 54, 91, 70, 52, 12, 0, 35, 13, 94, 51, 33, 79, 82, 27, 70, 60, 25, 84, 85, 4, 19, 76, 26, 25, 13, 77, 19, 29, 12, 9, 97, 23, 56, 8, 36, 58, 23, 20, 46, 37, 20, 27, 53, 21, 74, 55, 85, 53, 76, 66, 31, 38, 57, 43, 35, 80, 38, 15, 88, 67, 52, 79]
last_save: 733

Gen:4
TrainFitness:0.8333333333333334
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],+422891.8885).all():
      return False
    else:
      return True
  def adf1(index):
    if np.less(x[index],+032314.6531).all():
      return True
    else:
      return False
  def adf2(index):
    if np.less(x[index],+591257.7395).all():
      if np.equal(x[index],+271938.3891).all():
        return True
      else:
        return True
      return True
    else:
      if np.equal(x[index],-224074.7820).all():
        return True
      else:
        return False
      return False
  def adf3(index):
    if np.equal(np.sin(x[index]),+837251.7940).all():
      if np.equal(x[index],-507716.7708).all():
        if np.equal(rlog(x[index]),-703197.9879).all():
          return False
        else:
          return False
        return False
      else:
        if np.greater(np.cos(x[index]),-382540.1265).all():
          if np.less(x[index],+882248.4740).all():
            if np.less(x[index],-281444.7060).all():
              return False
            else:
              return False
            return False
          else:
            if np.greater(np.cos(x[index]),-040408.5156).all():
              return False
            else:
              return True
            return False
          return False
        else:
          if np.greater(rlog(x[index]),-129288.9885).all():
            return True
          else:
            return False
          return True
        return False
      return True
    else:
      if np.less(x[index],-899663.1086).all():
        return True
      else:
        return False
      return True
  def adf4(index):
    if np.less(x[index],+961754.5776).all():
      return False
    else:
      return False
  def adf7(index):
    if np.greater(psqrt(x[index]),+952976.8621).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*-143.265, adf1(1)*-131.244, adf2(2)*+889.218, adf3(3)*+924.092, adf4(4)*-458.860, adf7(7)*-299.044], [0, 1, 1, 0, 1], 559.843)
result=p(); 0.8333333333333334
IndLenGenome:385
IndGenome:[99, 60, 88, 55, 3, 47, 63, 64, 99, 44, 92, 32, 48, 79, 61, 68, 28, 68, 95, 15, 48, 93, 57, 58, 57, 12, 4, 75, 90, 13, 42, 33, 11, 64, 46, 35, 93, 81, 54, 29, 10, 56, 56, 58, 43, 17, 12, 96, 45, 19, 101, 62, 45, 27, 67, 3, 19, 25, 87, 53, 3, 67, 36, 48, 72, 67, 81, 69, 23, 18, 73, 38, 99, 51, 68, 16, 22, 97, 47, 63, 72, 67, 68, 12, 22, 44, 30, 87, 54, 77, 28, 62, 90, 66, 33, 85, 94, 76, 43, 98, 38, 48, 73, 80, 58, 98, 43, 97, 72, 45, 31, 67, 39, 14, 50, 58, 43, 44, 11, 52, 83, 64, 55, 100, 67, 37, 1, 76, 87, 47, 50, 68, 5, 77, 64, 64, 96, 27, 96, 7, 40, 13, 31, 9, 17, 9, 78, 67, 9, 31, 9, 83, 62, 61, 75, 44, 79, 26, 87, 29, 33, 58, 72, 75, 94, 70, 41, 32, 16, 25, 6, 27, 52, 63, 87, 46, 50, 78, 78, 92, 62, 94, 28, 24, 87, 54, 60, 89, 46, 57, 44, 67, 49, 32, 88, 11, 44, 4, 84, 97, 30, 76, 70, 55, 61, 89, 93, 51, 90, 91, 54, 57, 43, 60, 94, 60, 34, 80, 78, 35, 21, 25, 86, 15, 64, 77, 39, 59, 6, 20, 58, 44, 19, 75, 41, 12, 59, 92, 48, 18, 79, 78, 58, 35, 24, 63, 16, 73, 48, 75, 1, 37, 64, 51, 54, 58, 69, 79, 76, 66, 13, 21, 70, 68, 46, 48, 15, 78, 25, 77, 34, 87, 92, 12, 18, 79, 76, 21, 57, 75, 84, 75, 67, 17, 36, 57, 27, 32, 79, 39, 86, 11, 68, 14, 99, 39, 5, 42, 19, 67, 16, 38, 26, 82, 81, 86, 78, 35, 12, 51, 1, 6, 41, 24, 53, 12, 56, 45, 5, 83, 53, 41, 63, 21, 32, 84, 64, 61, 68, 7, 98, 8, 19, 32, 51, 58, 32, 94, 79, 99, 72, 24, 70, 9, 82, 40, 45, 24, 14, 25, 68, 8, 56, 70, 45, 61, 43, 42, 9, 19, 20, 94, 14, 37, 78, 45, 51, 12, 3, 69, 35, 65, 69, 28, 54, 93, 41, 29, 3, 22, 22, 14, 83, 36, 8]
last_save: 733

Gen:2004
last_save: 733
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],+069475.4750).all():
      return True
    else:
      return False
  def adf1(index):
    if np.equal(np.sin(x[index]),-726866.3051).all():
      return True
    else:
      return True
  def adf2(index):
    if np.less(x[index],+025552.5465).all():
      return False
    else:
      return True
  def adf3(index):
    if np.equal(x[index],-665737.5799).all():
      return False
    else:
      return True
  def adf4(index):
    if np.greater(psqrt(x[index]),-555800.3709).all():
      return False
    else:
      return False
  def adf7(index):
    if np.equal(psqrt(x[index]),-251907.1441).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+222.461, adf1(1)*-052.156, adf2(2)*+179.507, adf3(3)*-294.915, adf4(4)*+252.053, adf7(7)*-783.899], [1, 0, 0, 1, 0], 308.963)
result=p(); 0.8333333333333334
IndLenGenome:283
IndGenome:[50, 70, 54, 86, 25, 46, 37, 39, 45, 5, 33, 92, 37, 56, 95, 48, 29, 56, 48, 99, 20, 33, 5, 48, 77, 71, 34, 48, 44, 44, 13, 84, 13, 20, 21, 90, 70, 91, 64, 17, 29, 79, 76, 37, 36, 84, 86, 93, 53, 46, 95, 28, 34, 35, 35, 57, 56, 22, 57, 66, 79, 47, 91, 12, 20, 84, 21, 58, 71, 29, 37, 11, 83, 27, 89, 83, 24, 88, 19, 35, 19, 1, 10, 69, 99, 63, 80, 23, 76, 42, 16, 84, 45, 84, 17, 86, 34, 59, 27, 59, 57, 20, 68, 82, 70, 48, 93, 21, 98, 35, 77, 96, 62, 12, 16, 73, 37, 81, 64, 85, 19, 90, 61, 43, 90, 71, 95, 75, 95, 67, 12, 85, 60, 68, 72, 97, 21, 95, 42, 56, 74, 94, 29, 85, 73, 20, 60, 97, 33, 50, 77, 40, 85, 25, 16, 83, 65, 38, 67, 35, 55, 33, 70, 20, 6, 67, 91, 30, 35, 49, 29, 94, 5, 20, 42, 40, 31, 21, 82, 45, 55, 45, 66, 14, 95, 80, 42, 25, 42, 21, 13, 43, 41, 19, 51, 27, 78, 48, 33, 74, 49, 59, 6, 16, 4, 11, 76, 95, 62, 21, 69, 18, 47, 63, 95, 27, 5, 90, 97, 69, 96, 16, 17, 46, 4, 50, 67, 64, 92, 20, 96, 66, 62, 93, 57, 61, 96, 27, 93, 17, 84, 82, 94, 3, 29, 63, 43, 31, 40, 64, 69, 66, 24, 65, 77, 17, 66, 64, 28, 22, 73, 26, 73, 3, 64, 49, 72, 22, 27, 17, 99, 56, 72, 59, 7, 40, 36, 86, 91, 50, 31, 80, 18]
last_save: 734

Gen:2001
last_save: 734
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:1.0
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],-139068.5217).all():
      return False
    else:
      return True
  def adf1(index):
    if np.less(x[index],+956085.6125).all():
      return True
    else:
      return False
  def adf2(index):
    if np.greater(x[index],-123120.1822).all():
      return True
    else:
      return True
  def adf3(index):
    if np.less(x[index],-609025.2810).all():
      return True
    else:
      return True
  def adf4(index):
    if np.less(psqrt(x[index]),-305832.1315).all():
      return True
    else:
      return False
  def adf7(index):
    if np.equal(rlog(x[index]),-855290.1909).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+571.007, adf1(1)*-910.457, adf2(2)*+296.444, adf3(3)*-074.243, adf4(4)*+186.837, adf7(7)*+525.014], [0, 1, 0, 0, 0], 981.025)
result=p(); 0.6666666666666666
IndLenGenome:282
IndGenome:[18, 64, 37, 6, 29, 61, 4, 8, 35, 1, 15, 37, 48, 54, 21, 39, 76, 58, 50, 52, 79, 5, 18, 18, 77, 2, 36, 26, 5, 60, 64, 12, 76, 83, 85, 24, 95, 15, 72, 41, 69, 80, 77, 58, 91, 19, 71, 88, 55, 88, 10, 59, 70, 63, 55, 35, 58, 2, 89, 16, 85, 16, 54, 57, 85, 99, 22, 45, 57, 17, 72, 77, 42, 81, 91, 13, 96, 75, 54, 37, 49, 9, 80, 34, 15, 79, 95, 16, 94, 39, 88, 21, 80, 10, 91, 80, 65, 30, 51, 62, 29, 11, 61, 90, 35, 62, 14, 71, 49, 68, 63, 55, 47, 24, 42, 77, 40, 45, 1, 53, 31, 76, 35, 70, 45, 16, 18, 2, 73, 72, 12, 55, 15, 76, 33, 90, 56, 31, 58, 48, 27, 71, 49, 92, 40, 52, 69, 97, 53, 58, 59, 42, 95, 15, 90, 54, 23, 85, 42, 22, 91, 23, 28, 13, 91, 70, 13, 90, 56, 11, 60, 6, 30, 11, 75, 68, 71, 12, 11, 83, 61, 21, 95, 62, 62, 52, 84, 17, 71, 53, 1, 18, 70, 62, 16, 57, 38, 19, 6, 18, 39, 8, 61, 37, 6, 43, 72, 50, 5, 3, 21, 15, 41, 89, 67, 50, 88, 75, 68, 68, 0, 80, 10, 86, 52, 47, 15, 42, 3, 52, 51, 7, 18, 78, 74, 13, 4, 6, 1, 80, 32, 26, 68, 5, 41, 85, 65, 25, 77, 93, 22, 100, 83, 63, 39, 57, 57, 33, 0, 25, 55, 83, 88, 18, 35, 24, 12, 23, 31, 60, 66, 79, 68, 11, 73, 9, 69, 9, 97, 6, 94, 60]
last_save: 735

Gen:10
TrainFitness:0.8333333333333334
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],-225015.5677).all():
      return False
    else:
      return True
  def adf1(index):
    if np.equal(sigmoid(x[index]),+318694.4996).all():
      return False
    else:
      return False
  def adf2(index):
    if np.less(x[index],-230061.1805).all():
      return True
    else:
      return False
  def adf3(index):
    if np.less(x[index],+016243.7967).all():
      return True
    else:
      return False
  def adf4(index):
    if np.equal(x[index],-595251.8623).all():
      return False
    else:
      return False
  def adf7(index):
    if np.greater(sigmoid(x[index]),+975847.9904).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*-100.105, adf1(1)*-991.794, adf2(2)*+133.449, adf3(3)*-967.938, adf4(4)*+592.591, adf7(7)*-876.180], [1, 1, 0, 1, 1], 457.107)
result=p(); 0.8333333333333334
IndLenGenome:399
IndGenome:[8, 51, 82, 27, 86, 79, 23, 59, 55, 2, 42, 25, 30, 11, 5, 65, 36, 7, 17, 93, 10, 79, 89, 29, 16, 39, 83, 50, 48, 73, 81, 18, 16, 59, 74, 14, 29, 69, 86, 79, 95, 51, 87, 85, 93, 74, 93, 69, 22, 63, 70, 80, 86, 61, 71, 28, 20, 95, 22, 27, 23, 5, 64, 83, 74, 12, 31, 80, 91, 56, 52, 74, 93, 17, 79, 36, 87, 16, 13, 18, 49, 20, 25, 34, 29, 83, 85, 89, 55, 42, 85, 61, 98, 86, 32, 53, 59, 73, 96, 51, 42, 68, 21, 57, 80, 52, 19, 87, 45, 88, 64, 37, 49, 9, 80, 34, 15, 79, 95, 16, 94, 39, 88, 21, 80, 10, 91, 80, 65, 30, 51, 62, 29, 29, 51, 27, 39, 94, 18, 90, 47, 31, 33, 23, 74, 74, 59, 92, 51, 96, 59, 46, 27, 79, 53, 38, 99, 24, 34, 15, 69, 62, 15, 79, 51, 64, 63, 56, 18, 87, 86, 91, 18, 60, 16, 3, 95, 78, 39, 25, 61, 14, 85, 17, 81, 40, 77, 19, 85, 94, 71, 84, 93, 56, 70, 17, 79, 10, 19, 89, 9, 61, 50, 17, 91, 93, 53, 59, 73, 66, 51, 42, 68, 21, 66, 74, 100, 78, 70, 73, 23, 29, 22, 13, 57, 99, 23, 40, 57, 57, 19, 56, 29, 74, 23, 92, 13, 88, 3, 61, 86, 54, 67, 19, 27, 77, 57, 87, 57, 35, 57, 85, 21, 19, 77, 99, 63, 4, 68, 50, 33, 92, 37, 13, 23, 75, 73, 88, 98, 38, 47, 90, 89, 29, 39, 27, 31, 18, 58, 89, 5, 32, 41, 54, 54, 43, 21, 45, 84, 37, 59, 60, 57, 74, 10, 27, 36, 57, 67, 72, 58, 76, 42, 95, 91, 99, 89, 34, 40, 10, 9, 43, 8, 43, 17, 100, 83, 33, 50, 97, 68, 61, 55, 44, 45, 62, 19, 48, 36, 99, 28, 20, 33, 35, 59, 56, 94, 82, 34, 33, 69, 33, 19, 70, 84, 78, 87, 30, 1, 0, 95, 15, 6, 8, 31, 31, 52, 85, 65, 90, 81, 94, 56, 33, 57, 25, 4, 99, 51, 68, 83, 52, 47, 34, 2, 45, 61, 91, 18, 4, 90, 63, 86, 50, 0, 55, 65, 94, 77, 62, 27, 40, 45, 89, 2, 35, 77, 18, 91]
last_save: 735

Gen:2010
last_save: 735
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:1.0
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],-331723.6417).all():
      return False
    else:
      return False
  def adf1(index):
    if np.greater(np.cos(x[index]),+641978.6402).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(x[index],-985346.1094).all():
      return False
    else:
      return False
  def adf3(index):
    if np.less(x[index],+054901.8548).all():
      return True
    else:
      return False
  def adf4(index):
    if np.greater(x[index],-140776.7776).all():
      return False
    else:
      return True
  def adf7(index):
    if np.less(x[index],-223613.6687).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+171.964, adf1(1)*-970.924, adf2(2)*-647.617, adf3(3)*-792.007, adf4(4)*-203.157, adf7(7)*-874.204], [0, 0, 0, 0, 0], 056.736)
result=p(); 0.6666666666666666
IndLenGenome:280
IndGenome:[38, 94, 53, 83, 21, 52, 22, 21, 41, 9, 57, 7, 86, 60, 67, 20, 77, 55, 17, 83, 47, 24, 13, 45, 12, 17, 37, 73, 41, 70, 97, 33, 3, 63, 45, 88, 31, 6, 80, 53, 28, 36, 50, 85, 76, 17, 75, 84, 52, 21, 37, 81, 53, 74, 39, 98, 43, 8, 87, 48, 49, 48, 32, 2, 67, 67, 44, 97, 94, 63, 33, 21, 93, 45, 17, 69, 16, 5, 29, 77, 97, 71, 20, 49, 60, 99, 21, 22, 22, 14, 25, 35, 71, 25, 65, 77, 27, 60, 50, 84, 79, 60, 16, 70, 14, 54, 53, 73, 64, 99, 10, 23, 9, 39, 98, 42, 20, 21, 81, 26, 18, 48, 24, 13, 91, 74, 68, 41, 42, 78, 39, 20, 32, 47, 71, 87, 86, 86, 95, 66, 87, 66, 21, 56, 67, 22, 28, 63, 77, 27, 92, 56, 13, 66, 51, 21, 39, 26, 83, 83, 50, 88, 83, 66, 71, 99, 50, 94, 50, 33, 76, 54, 57, 37, 97, 6, 76, 24, 87, 42, 86, 37, 91, 47, 54, 12, 59, 90, 50, 23, 45, 33, 45, 60, 96, 11, 45, 12, 19, 11, 0, 27, 54, 22, 97, 17, 35, 95, 27, 71, 57, 74, 37, 88, 44, 10, 36, 28, 41, 1, 64, 99, 56, 85, 3, 92, 83, 10, 91, 49, 59, 48, 31, 65, 59, 4, 73, 43, 43, 95, 47, 51, 53, 48, 58, 1, 39, 25, 97, 47, 22, 96, 35, 1, 47, 5, 4, 44, 5, 27, 66, 35, 11, 84, 71, 23, 57, 52, 6, 94, 69, 68, 46, 46, 56, 47, 88, 4, 56, 51]
last_save: 736

Gen:55
TrainFitness:0.8333333333333334
TestFitness:0.8333333333333334
MaxGenLen:515
Individual: def p():
  def adf0(index):
    if np.less(x[index],+936090.5844).all():
      return True
    else:
      return False
  def adf1(index):
    if np.less(x[index],+016201.8631).all():
      return True
    else:
      return False
  def adf2(index):
    if np.equal(sigmoid(x[index]),+548982.7575).all():
      return False
    else:
      return True
  def adf3(index):
    if np.less(psqrt(x[index]),+847931.8099).all():
      return False
    else:
      return False
  def adf4(index):
    if np.less(rlog(x[index]),-388874.9197).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(rlog(x[index]),+801391.9501).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*-958.338, adf1(1)*+717.661, adf2(2)*-147.318, adf3(3)*-566.810, adf4(4)*+393.154, adf7(7)*+796.597], [1, 0, 1, 0, 1], 224.051)
result=p(); 0.8333333333333334
IndLenGenome:413
IndGenome:[7, 11, 19, 93, 43, 43, 83, 2, 13, 9, 93, 66, 70, 29, 40, 65, 78, 94, 64, 84, 53, 76, 63, 76, 47, 70, 70, 34, 20, 41, 26, 52, 10, 31, 18, 36, 63, 51, 38, 13, 74, 97, 29, 6, 87, 87, 12, 67, 25, 74, 8, 89, 28, 52, 77, 65, 87, 45, 13, 74, 18, 61, 49, 66, 95, 59, 46, 98, 68, 24, 47, 89, 93, 21, 88, 30, 59, 69, 77, 47, 90, 95, 76, 38, 82, 57, 41, 91, 23, 18, 28, 48, 17, 14, 49, 51, 99, 87, 68, 91, 86, 33, 21, 28, 64, 57, 64, 37, 18, 90, 81, 63, 39, 71, 39, 55, 70, 41, 57, 18, 22, 28, 62, 47, 44, 49, 15, 88, 13, 53, 78, 39, 20, 99, 47, 71, 87, 86, 86, 31, 66, 87, 66, 21, 24, 67, 13, 1, 18, 61, 49, 66, 95, 86, 46, 78, 11, 90, 72, 44, 93, 33, 99, 83, 61, 55, 74, 8, 94, 35, 17, 69, 16, 5, 29, 77, 97, 71, 20, 39, 60, 71, 21, 22, 22, 14, 30, 35, 71, 25, 55, 79, 27, 60, 50, 84, 79, 60, 16, 70, 99, 87, 20, 38, 60, 36, 59, 48, 85, 76, 94, 64, 62, 73, 8, 56, 38, 93, 37, 44, 58, 34, 61, 38, 34, 25, 70, 37, 57, 43, 96, 5, 84, 39, 30, 5, 28, 91, 76, 26, 81, 77, 79, 50, 85, 76, 17, 75, 84, 52, 21, 37, 81, 53, 74, 37, 98, 43, 73, 87, 48, 49, 48, 63, 2, 67, 67, 65, 97, 94, 34, 33, 21, 93, 45, 17, 36, 16, 5, 97, 33, 3, 63, 45, 88, 95, 6, 80, 53, 28, 36, 50, 20, 76, 17, 75, 84, 77, 21, 37, 81, 53, 74, 39, 98, 43, 96, 4, 99, 87, 20, 23, 89, 36, 59, 48, 26, 71, 42, 64, 62, 73, 44, 22, 15, 93, 63, 44, 58, 53, 27, 38, 40, 63, 61, 17, 49, 50, 60, 39, 84, 65, 97, 66, 28, 86, 45, 10, 86, 6, 48, 85, 35, 55, 33, 86, 63, 58, 88, 41, 62, 16, 24, 85, 30, 6, 93, 74, 71, 78, 71, 37, 87, 15, 36, 15, 91, 45, 56, 66, 75, 19, 43, 44, 65, 35, 13, 31, 83, 29, 81, 63, 36, 13, 54, 33, 24, 51, 45, 89, 42, 47, 90, 81, 9, 5, 20, 52, 51, 48, 93, 25, 22]
last_save: 736

Gen:2055
last_save: 736
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(psqrt(x[index]),+696734.3981).all():
      return False
    else:
      return False
  def adf1(index):
    if np.greater(x[index],+769663.0547).all():
      return False
    else:
      return False
  def adf2(index):
    if np.less(x[index],-103096.7554).all():
      return True
    else:
      return True
  def adf3(index):
    if np.less(psqrt(x[index]),-343665.1785).all():
      return True
    else:
      return False
  def adf4(index):
    if np.equal(np.tanh(x[index]),-283841.2161).all():
      return False
    else:
      return True
  def adf7(index):
    if np.less(x[index],+900339.2689).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-455.826, adf1(1)*+651.633, adf2(2)*-341.919, adf3(3)*-214.576, adf4(4)*-281.620, adf7(7)*+330.822], [1, 0, 1, 0, 0], 249.228)
result=p(); 0.6666666666666666
IndLenGenome:283
IndGenome:[53, 3, 67, 73, 33, 89, 55, 65, 62, 12, 47, 46, 29, 8, 73, 3, 55, 37, 56, 17, 8, 35, 64, 72, 45, 23, 20, 46, 57, 87, 34, 78, 35, 4, 17, 37, 98, 75, 61, 75, 35, 60, 21, 33, 68, 43, 45, 19, 78, 38, 99, 12, 99, 73, 21, 17, 87, 59, 26, 39, 23, 20, 22, 33, 28, 14, 72, 83, 74, 81, 71, 14, 98, 76, 76, 38, 98, 83, 50, 13, 94, 17, 17, 70, 46, 63, 43, 11, 94, 41, 72, 88, 81, 36, 82, 88, 59, 74, 56, 93, 11, 43, 82, 53, 25, 78, 49, 96, 30, 26, 47, 12, 19, 10, 13, 66, 52, 15, 93, 51, 11, 64, 36, 98, 47, 99, 93, 86, 83, 76, 18, 56, 38, 47, 75, 16, 81, 11, 19, 37, 90, 97, 53, 1, 25, 85, 52, 23, 28, 54, 86, 76, 44, 36, 31, 62, 22, 50, 66, 35, 46, 43, 80, 44, 68, 11, 10, 21, 23, 82, 28, 53, 82, 53, 54, 17, 43, 84, 39, 51, 91, 15, 69, 97, 71, 26, 91, 42, 24, 81, 21, 96, 80, 2, 16, 79, 55, 84, 62, 96, 24, 62, 85, 32, 20, 40, 20, 100, 47, 39, 61, 0, 85, 76, 75, 94, 93, 50, 28, 92, 18, 97, 85, 69, 88, 68, 53, 88, 85, 62, 65, 17, 84, 49, 19, 36, 56, 50, 14, 17, 97, 51, 37, 97, 67, 92, 91, 5, 95, 95, 59, 64, 74, 44, 55, 60, 7, 75, 83, 36, 12, 88, 60, 22, 58, 84, 67, 83, 6, 41, 80, 100, 28, 17, 12, 48, 43, 41, 89, 69, 31, 18, 28]
last_save: 737

Gen:22
TrainFitness:0.8333333333333334
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(np.sin(x[index]),+925413.7594).all():
      return False
    else:
      return False
  def adf1(index):
    if np.greater(np.cos(x[index]),+757373.0215).all():
      return True
    else:
      return False
  def adf2(index):
    if np.equal(psqrt(x[index]),-438869.6643).all():
      return False
    else:
      return False
  def adf3(index):
    if np.greater(rlog(x[index]),+497706.5921).all():
      return True
    else:
      return True
  def adf4(index):
    if np.greater(sigmoid(x[index]),+407481.0491).all():
      return False
    else:
      return True
  def adf7(index):
    if np.equal(psqrt(x[index]),+162198.5940).all():
      if np.greater(x[index],-883520.0463).all():
        if np.greater(x[index],-316922.1939).all():
          if np.less(x[index],-952701.1574).all():
            return True
          else:
            return False
          return True
        else:
          if np.greater(x[index],-796281.5010).all():
            if np.equal(rlog(x[index]),+737931.4793).all():
              return True
            else:
              return True
            return False
          else:
            if np.less(x[index],+786408.5961).all():
              return False
            else:
              return True
            return False
          return True
        return True
      else:
        if np.equal(rlog(x[index]),+620169.1752).all():
          return True
        else:
          return True
        return False
      return True
    else:
      if np.greater(x[index],+032481.8987).all():
        return True
      else:
        return False
      return True
  return multiple_operation([adf0(0)*-683.122, adf1(1)*+550.239, adf2(2)*+977.248, adf3(3)*+097.521, adf4(4)*-265.056, adf7(7)*+240.717], [0, 0, 1, 0, 0], 344.666)
result=p(); 0.8333333333333334
IndLenGenome:390
IndGenome:[19, 5, 62, 81, 62, 4, 18, 70, 78, 30, 49, 22, 95, 44, 91, 83, 27, 45, 69, 94, 71, 87, 38, 53, 21, 12, 85, 79, 70, 54, 87, 75, 27, 53, 97, 43, 50, 2, 21, 65, 20, 3, 57, 83, 23, 84, 5, 93, 11, 83, 44, 93, 68, 88, 46, 39, 16, 36, 94, 73, 77, 65, 86, 93, 30, 58, 28, 62, 18, 36, 54, 29, 27, 37, 30, 26, 45, 79, 42, 41, 62, 4, 89, 93, 45, 62, 63, 23, 80, 15, 54, 70, 37, 34, 28, 51, 80, 84, 79, 91, 95, 36, 98, 62, 60, 50, 46, 71, 46, 34, 28, 31, 86, 62, 31, 89, 78, 25, 9, 84, 10, 82, 67, 36, 49, 38, 45, 86, 48, 98, 83, 15, 82, 20, 10, 34, 36, 73, 74, 10, 24, 5, 70, 53, 97, 23, 91, 26, 99, 22, 82, 21, 49, 93, 19, 55, 43, 95, 23, 27, 38, 79, 65, 32, 77, 60, 11, 71, 45, 37, 14, 34, 53, 52, 50, 19, 96, 81, 96, 63, 64, 47, 59, 86, 12, 8, 51, 35, 90, 91, 40, 85, 77, 28, 100, 33, 6, 90, 77, 33, 57, 19, 43, 101, 54, 87, 79, 53, 96, 74, 73, 91, 31, 19, 69, 86, 16, 27, 98, 86, 94, 90, 48, 95, 99, 76, 61, 67, 48, 69, 62, 70, 13, 59, 78, 76, 21, 72, 93, 16, 42, 60, 61, 56, 79, 41, 67, 75, 12, 28, 92, 69, 40, 45, 60, 15, 27, 30, 55, 50, 13, 42, 84, 58, 21, 18, 39, 88, 17, 64, 87, 38, 72, 37, 21, 63, 30, 66, 38, 23, 91, 32, 72, 44, 68, 41, 65, 45, 30, 72, 13, 59, 78, 76, 21, 19, 27, 57, 82, 84, 8, 38, 52, 71, 50, 89, 17, 95, 92, 71, 43, 87, 39, 62, 86, 35, 90, 45, 36, 62, 84, 17, 82, 54, 100, 87, 51, 77, 67, 62, 76, 45, 32, 54, 76, 33, 94, 44, 66, 46, 6, 68, 49, 72, 64, 23, 82, 73, 93, 71, 31, 75, 96, 26, 30, 73, 33, 53, 1, 31, 73, 39, 53, 22, 90, 41, 70, 27, 82, 9, 85, 90, 69, 85, 51, 8, 51, 75, 38, 99, 76, 15, 70, 73, 49, 11, 59, 44, 12, 77]
last_save: 737

Gen:2022
last_save: 737
Exit:FalseFalseTrue