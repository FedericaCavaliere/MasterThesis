Dataset:Meander/Full.csv
FS:True
Seed:1238
Size:7

Gen:1
TrainFitness:1.0
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(np.tanh(x[index]),+762689.0455).all():
      return False
    else:
      return True
  def adf1(index):
    if np.equal(np.cos(x[index]),-187375.1333).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(np.cos(x[index]),-691371.8636).all():
      return False
    else:
      return False
  def adf3(index):
    if np.greater(x[index],+703428.2630).all():
      return False
    else:
      return False
  def adf4(index):
    if np.less(rlog(x[index]),+309495.9753).all():
      return True
    else:
      return True
  def adf7(index):
    if np.equal(sigmoid(x[index]),-827503.7343).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*-442.800, adf1(1)*+135.451, adf2(2)*-075.267, adf3(3)*-641.349, adf4(4)*-971.311, adf7(7)*-459.766], [1, 0, 0, 0, 1], 215.539)
result=p(); 1.0
IndLenGenome:286
IndGenome:[71, 69, 89, 38, 45, 27, 79, 61, 12, 55, 83, 87, 89, 34, 42, 95, 76, 45, 35, 96, 11, 69, 99, 73, 57, 24, 35, 31, 23, 70, 49, 61, 24, 85, 47, 12, 11, 36, 65, 45, 37, 69, 35, 20, 2, 92, 64, 19, 59, 13, 56, 70, 82, 79, 30, 76, 58, 36, 85, 32, 37, 93, 73, 69, 12, 54, 99, 64, 74, 96, 26, 43, 25, 48, 64, 86, 53, 30, 98, 64, 10, 68, 57, 43, 14, 9, 45, 73, 83, 65, 77, 31, 30, 22, 75, 17, 1, 54, 54, 29, 11, 44, 54, 18, 72, 55, 30, 3, 40, 99, 43, 71, 30, 48, 89, 97, 84, 89, 15, 55, 62, 67, 63, 63, 31, 22, 30, 56, 93, 79, 40, 46, 11, 85, 45, 70, 5, 61, 74, 32, 66, 77, 49, 67, 98, 23, 38, 79, 81, 38, 70, 94, 93, 36, 88, 53, 91, 45, 1, 91, 11, 53, 52, 86, 17, 68, 55, 93, 77, 14, 23, 37, 43, 15, 96, 19, 83, 49, 74, 49, 19, 30, 82, 80, 23, 36, 11, 75, 43, 11, 67, 27, 98, 74, 91, 41, 77, 26, 7, 4, 79, 38, 19, 19, 55, 28, 11, 94, 31, 29, 74, 9, 36, 68, 7, 13, 88, 66, 13, 50, 36, 42, 47, 51, 77, 43, 3, 11, 56, 69, 1, 65, 12, 99, 28, 59, 7, 21, 74, 63, 56, 55, 78, 15, 59, 2, 4, 54, 93, 17, 64, 41, 95, 24, 1, 40, 71, 70, 37, 3, 18, 70, 58, 16, 64, 67, 89, 28, 49, 71, 41, 15, 34, 98, 59, 49, 17, 83, 42, 45, 87, 79, 74, 25, 9, 86]
last_save: 741

Gen:1
last_save: 741
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.6666666666666666
TestFitness:1.0
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(sigmoid(x[index]),+325385.7005).all():
      return True
    else:
      return True
  def adf1(index):
    if np.greater(sigmoid(x[index]),-042469.1532).all():
      return False
    else:
      return True
  def adf2(index):
    if np.greater(x[index],-887757.5164).all():
      return False
    else:
      return False
  def adf3(index):
    if np.less(sigmoid(x[index]),+833556.1674).all():
      return True
    else:
      return False
  def adf4(index):
    if np.less(np.sin(x[index]),-628573.1692).all():
      return False
    else:
      return False
  def adf7(index):
    if np.equal(x[index],+177975.5554).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+061.846, adf1(1)*-589.719, adf2(2)*-153.384, adf3(3)*+140.741, adf4(4)*+216.790, adf7(7)*+255.583], [1, 0, 1, 1, 0], 084.004)
result=p(); 0.6666666666666666
IndLenGenome:285
IndGenome:[88, 1, 13, 1, 88, 54, 83, 94, 61, 10, 87, 18, 59, 39, 16, 27, 49, 47, 30, 9, 83, 29, 31, 33, 23, 95, 93, 18, 57, 28, 75, 57, 40, 27, 34, 41, 30, 25, 25, 79, 33, 20, 2, 70, 88, 70, 6, 29, 57, 94, 62, 47, 74, 77, 40, 79, 36, 65, 23, 18, 86, 24, 25, 21, 22, 83, 45, 30, 6, 83, 66, 70, 97, 20, 41, 24, 66, 92, 35, 77, 77, 26, 43, 33, 42, 58, 55, 49, 65, 83, 71, 28, 27, 25, 11, 33, 52, 92, 64, 27, 34, 22, 98, 96, 8, 56, 52, 36, 71, 82, 56, 49, 21, 51, 19, 26, 94, 87, 39, 51, 59, 33, 50, 86, 51, 85, 22, 68, 4, 10, 42, 99, 82, 23, 54, 48, 70, 17, 14, 37, 75, 81, 49, 19, 83, 25, 40, 25, 62, 54, 37, 21, 87, 45, 85, 66, 15, 12, 23, 49, 57, 78, 37, 79, 12, 93, 31, 58, 75, 95, 85, 31, 91, 58, 19, 95, 15, 26, 64, 76, 45, 18, 48, 41, 14, 47, 43, 56, 83, 67, 17, 68, 42, 47, 71, 56, 83, 15, 17, 47, 39, 26, 48, 76, 100, 14, 95, 16, 81, 26, 43, 62, 59, 22, 83, 14, 25, 95, 7, 80, 56, 91, 38, 62, 54, 97, 11, 84, 87, 71, 16, 75, 81, 56, 16, 6, 74, 51, 20, 10, 59, 15, 23, 88, 47, 50, 67, 64, 97, 41, 46, 98, 4, 28, 23, 46, 56, 41, 41, 17, 28, 30, 98, 74, 80, 26, 66, 11, 95, 84, 21, 50, 78, 98, 45, 60, 80, 87, 35, 46, 64, 89, 69, 100, 70]
last_save: 742

Gen:12
TrainFitness:0.8333333333333334
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],-491638.0678).all():
      return False
    else:
      return True
  def adf1(index):
    if np.equal(np.cos(x[index]),-035753.0954).all():
      return True
    else:
      return False
  def adf2(index):
    if np.greater(np.cos(x[index]),+562336.4798).all():
      return False
    else:
      return True
  def adf3(index):
    if np.equal(x[index],-939498.4463).all():
      if np.equal(x[index],-672535.0559).all():
        return False
      else:
        return False
      return False
    else:
      if np.less(x[index],-110237.2611).all():
        return True
      else:
        return False
      return True
  def adf4(index):
    if np.less(x[index],+025043.0679).all():
      if np.less(np.sin(x[index]),+107704.2376).all():
        if np.less(rlog(x[index]),-433288.6503).all():
          if np.greater(psqrt(x[index]),-955719.7685).all():
            return False
          else:
            return True
          return False
        else:
          if np.less(x[index],-256399.0976).all():
            return True
          else:
            return True
          return True
        return False
      else:
        if np.less(rlog(x[index]),+251883.4742).all():
          return False
        else:
          return True
        return False
      return False
    else:
      if np.less(x[index],+137309.5806).all():
        return False
      else:
        return False
      return True
  def adf7(index):
    if np.greater(x[index],+297593.5388).all():
      if np.less(x[index],-697617.3905).all():
        if np.equal(rlog(x[index]),+412443.4917).all():
          return False
        else:
          return True
        return True
      else:
        if np.equal(rlog(x[index]),-971730.3596).all():
          return False
        else:
          return False
        return True
      return False
    else:
      if np.greater(psqrt(x[index]),-204129.9869).all():
        return True
      else:
        return True
      return False
  return multiple_operation([adf0(0)*+525.998, adf1(1)*+374.731, adf2(2)*+520.965, adf3(3)*+133.763, adf4(4)*+415.638, adf7(7)*-792.912], [1, 0, 1, 1, 0], 300.024)
result=p(); 0.8333333333333334
IndLenGenome:492
IndGenome:[98, 85, 57, 25, 57, 19, 10, 9, 96, 64, 29, 71, 66, 33, 58, 80, 16, 7, 38, 41, 22, 83, 21, 83, 44, 7, 9, 41, 25, 40, 33, 35, 17, 15, 13, 40, 19, 35, 24, 98, 49, 13, 59, 78, 70, 67, 74, 98, 22, 35, 46, 32, 23, 33, 86, 74, 47, 99, 38, 101, 88, 76, 64, 27, 8, 99, 56, 19, 43, 89, 73, 19, 4, 69, 98, 54, 84, 66, 73, 67, 17, 87, 50, 71, 88, 96, 77, 62, 55, 13, 55, 70, 55, 95, 59, 65, 11, 51, 63, 37, 11, 64, 23, 83, 51, 11, 40, 42, 83, 57, 92, 86, 61, 51, 32, 71, 60, 78, 38, 39, 97, 29, 90, 92, 37, 70, 62, 45, 60, 24, 13, 50, 26, 37, 49, 36, 28, 76, 58, 84, 93, 56, 34, 31, 50, 17, 47, 30, 24, 72, 23, 97, 66, 36, 91, 37, 24, 64, 59, 77, 33, 64, 93, 53, 12, 28, 38, 56, 85, 70, 83, 89, 48, 22, 59, 53, 39, 58, 79, 65, 55, 77, 61, 19, 47, 46, 28, 95, 21, 42, 67, 27, 46, 73, 48, 57, 35, 92, 55, 46, 33, 59, 39, 20, 39, 47, 56, 82, 62, 74, 57, 11, 70, 44, 64, 42, 94, 78, 2, 15, 71, 78, 8, 33, 94, 87, 24, 52, 31, 26, 11, 11, 87, 22, 21, 2, 72, 50, 71, 83, 67, 13, 20, 9, 45, 48, 50, 46, 31, 75, 54, 12, 26, 42, 12, 69, 49, 16, 68, 42, 79, 57, 65, 59, 53, 5, 53, 88, 78, 32, 62, 55, 55, 89, 5, 53, 36, 69, 17, 16, 71, 47, 13, 79, 10, 55, 49, 20, 56, 22, 86, 56, 34, 64, 61, 22, 74, 44, 73, 84, 39, 81, 17, 63, 26, 90, 95, 89, 86, 10, 87, 73, 70, 59, 17, 91, 57, 53, 30, 23, 85, 99, 46, 45, 21, 6, 17, 33, 93, 20, 23, 99, 87, 76, 82, 80, 94, 21, 12, 59, 79, 58, 26, 89, 28, 86, 37, 44, 95, 87, 8, 94, 75, 62, 55, 89, 69, 18, 85, 66, 99, 73, 97, 24, 87, 83, 81, 55, 86, 90, 45, 52, 70, 89, 56, 95, 77, 72, 19, 71, 73, 43, 27, 86, 33, 63, 32, 97, 24, 51, 55, 66, 63, 48, 71, 53, 44, 37, 49, 32, 9, 31, 32, 62, 99, 30, 69, 59, 62, 19, 53, 90, 40, 40, 2, 4, 86, 9, 95, 53, 29, 61, 79, 38, 33, 30, 45, 35, 74, 10, 53, 9, 66, 70, 86, 8, 57, 73, 95, 100, 19, 1, 62, 44, 72, 59, 95, 58, 95, 15, 28, 28, 62, 56, 22, 19, 25, 44, 2, 75, 80, 53, 63, 24, 61, 100, 42, 26, 9, 56, 65, 6, 63, 74, 75, 39, 80, 96, 48, 23, 85, 37, 49, 27, 59, 55, 4, 89, 0, 53, 52, 8]
last_save: 742

Gen:2012
last_save: 742
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:1.0
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],+616595.2756).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(rlog(x[index]),+921515.0081).all():
      return True
    else:
      return True
  def adf2(index):
    if np.less(np.cos(x[index]),-171550.2628).all():
      return False
    else:
      return True
  def adf3(index):
    if np.equal(x[index],-567448.4570).all():
      return True
    else:
      return False
  def adf4(index):
    if np.less(x[index],+947620.6038).all():
      return False
    else:
      return True
  def adf7(index):
    if np.greater(x[index],+444792.4807).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+075.882, adf1(1)*+460.799, adf2(2)*+137.002, adf3(3)*+527.312, adf4(4)*-175.617, adf7(7)*-507.447], [1, 1, 1, 1, 0], 227.222)
result=p(); 0.6666666666666666
IndLenGenome:282
IndGenome:[38, 23, 92, 59, 50, 59, 45, 48, 78, 56, 55, 37, 67, 14, 87, 60, 80, 11, 3, 96, 77, 62, 71, 39, 35, 95, 62, 42, 68, 31, 53, 13, 86, 22, 50, 99, 88, 47, 67, 61, 72, 20, 64, 37, 99, 51, 85, 22, 62, 20, 25, 59, 97, 88, 94, 35, 79, 65, 64, 96, 87, 53, 9, 96, 93, 54, 23, 22, 67, 15, 52, 71, 2, 41, 61, 54, 97, 59, 22, 39, 47, 46, 82, 96, 1, 71, 98, 82, 65, 25, 45, 76, 34, 67, 37, 95, 86, 28, 89, 64, 90, 78, 60, 46, 54, 92, 60, 57, 22, 62, 82, 70, 15, 37, 27, 62, 25, 1, 65, 9, 43, 78, 40, 88, 11, 41, 57, 13, 55, 34, 64, 26, 52, 24, 81, 89, 40, 34, 20, 54, 57, 97, 37, 59, 25, 13, 74, 32, 54, 17, 55, 50, 24, 37, 97, 54, 60, 61, 54, 46, 91, 35, 42, 82, 71, 31, 19, 22, 34, 60, 85, 18, 76, 58, 55, 51, 74, 40, 79, 35, 88, 36, 28, 71, 77, 55, 17, 91, 29, 53, 20, 73, 47, 3, 85, 29, 23, 100, 6, 47, 98, 65, 94, 12, 76, 25, 61, 60, 99, 96, 65, 41, 88, 63, 91, 10, 26, 25, 89, 78, 61, 2, 59, 14, 72, 92, 37, 99, 52, 50, 17, 1, 1, 78, 39, 10, 20, 18, 36, 31, 77, 97, 97, 66, 81, 61, 55, 76, 0, 23, 30, 38, 59, 54, 46, 56, 98, 48, 1, 92, 49, 67, 73, 38, 66, 22, 56, 51, 71, 56, 42, 31, 72, 10, 80, 93, 75, 66, 42, 93, 80, 4]
last_save: 743

Gen:2
TrainFitness:0.8333333333333334
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(np.cos(x[index]),-743491.5282).all():
      if np.less(sigmoid(x[index]),-391932.4368).all():
        return False
      else:
        return True
      return True
    else:
      if np.less(x[index],+873183.9104).all():
        return True
      else:
        return False
      return False
  def adf1(index):
    if np.equal(sigmoid(x[index]),-028246.9091).all():
      return True
    else:
      return False
  def adf2(index):
    if np.equal(np.cos(x[index]),-953904.8720).all():
      return False
    else:
      return False
  def adf3(index):
    if np.greater(x[index],+029047.7421).all():
      return False
    else:
      return True
  def adf4(index):
    if np.greater(sigmoid(x[index]),+345271.9648).all():
      return True
    else:
      return True
  def adf7(index):
    if np.less(x[index],+261554.4922).all():
      if np.greater(np.sin(x[index]),-769239.6333).all():
        return True
      else:
        return False
      return True
    else:
      if np.less(np.tanh(x[index]),+644513.3198).all():
        return True
      else:
        return True
      return False
  return multiple_operation([adf0(0)*+021.780, adf1(1)*-313.141, adf2(2)*-978.535, adf3(3)*-747.713, adf4(4)*+583.576, adf7(7)*+295.980], [1, 0, 0, 1, 0], 882.577)
result=p(); 0.8333333333333334
IndLenGenome:291
IndGenome:[25, 28, 57, 88, 59, 63, 26, 55, 55, 73, 99, 67, 44, 43, 94, 49, 51, 85, 72, 38, 92, 51, 7, 40, 27, 36, 85, 21, 53, 99, 21, 69, 23, 92, 84, 73, 66, 38, 45, 38, 70, 81, 37, 97, 89, 46, 17, 88, 27, 93, 61, 88, 43, 39, 21, 30, 74, 32, 61, 9, 77, 43, 20, 2, 39, 57, 13, 34, 60, 82, 18, 22, 4, 76, 9, 70, 79, 71, 68, 29, 25, 27, 62, 30, 91, 90, 37, 87, 39, 35, 73, 9, 70, 44, 18, 87, 32, 60, 45, 69, 57, 67, 18, 51, 83, 24, 81, 80, 82, 99, 40, 64, 77, 37, 74, 32, 61, 89, 46, 31, 65, 18, 90, 75, 54, 86, 36, 33, 24, 55, 42, 77, 91, 49, 76, 14, 18, 82, 58, 61, 28, 21, 43, 33, 29, 4, 35, 62, 16, 41, 85, 55, 84, 84, 9, 12, 12, 75, 21, 84, 96, 48, 13, 70, 87, 56, 99, 42, 73, 99, 76, 43, 53, 73, 34, 97, 10, 67, 46, 20, 44, 53, 40, 48, 66, 54, 24, 75, 31, 33, 23, 81, 19, 88, 36, 46, 35, 41, 75, 53, 86, 23, 90, 22, 81, 57, 28, 30, 88, 63, 6, 83, 21, 33, 21, 84, 91, 85, 61, 18, 79, 57, 28, 25, 83, 95, 52, 37, 26, 27, 44, 37, 7, 31, 3, 57, 42, 84, 15, 58, 83, 55, 77, 16, 29, 10, 44, 52, 89, 75, 59, 58, 10, 38, 57, 24, 38, 49, 38, 41, 38, 8, 42, 55, 57, 97, 70, 47, 56, 92, 3, 14, 99, 16, 52, 36, 19, 50, 76, 84, 87, 25, 55, 18, 96, 72, 8, 72, 3, 77, 99]
last_save: 743

Gen:2002
last_save: 743
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],-556938.5259).all():
      return True
    else:
      return False
  def adf1(index):
    if np.less(x[index],+462103.2091).all():
      return False
    else:
      return True
  def adf2(index):
    if np.equal(x[index],-773761.4751).all():
      return True
    else:
      return True
  def adf3(index):
    if np.equal(np.cos(x[index]),+065508.8874).all():
      return True
    else:
      return True
  def adf4(index):
    if np.less(x[index],+362547.2310).all():
      return True
    else:
      return False
  def adf7(index):
    if np.equal(rlog(x[index]),-349362.0765).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*-766.940, adf1(1)*-484.816, adf2(2)*-626.038, adf3(3)*-229.810, adf4(4)*+404.516, adf7(7)*+797.352], [1, 1, 1, 1, 1], 005.297)
result=p(); 0.6666666666666666
IndLenGenome:282
IndGenome:[80, 74, 17, 64, 92, 51, 33, 94, 75, 48, 39, 28, 71, 36, 27, 61, 20, 28, 74, 89, 75, 90, 37, 22, 61, 26, 19, 89, 92, 65, 15, 2, 1, 8, 65, 60, 47, 33, 96, 94, 95, 56, 13, 25, 22, 70, 19, 76, 84, 23, 61, 48, 21, 33, 35, 30, 26, 59, 3, 69, 68, 22, 46, 87, 56, 17, 70, 57, 47, 58, 63, 36, 46, 10, 28, 21, 22, 70, 9, 27, 56, 53, 28, 97, 79, 11, 70, 98, 49, 79, 79, 3, 20, 32, 4, 27, 87, 47, 27, 71, 89, 21, 10, 78, 87, 13, 60, 65, 22, 96, 79, 32, 7, 74, 6, 46, 94, 23, 81, 61, 24, 52, 14, 67, 56, 50, 35, 10, 49, 53, 71, 24, 74, 10, 38, 92, 91, 32, 17, 90, 91, 59, 75, 62, 35, 44, 63, 27, 72, 95, 29, 56, 83, 46, 69, 38, 35, 49, 45, 52, 25, 88, 94, 45, 56, 95, 46, 30, 68, 75, 37, 27, 52, 75, 22, 11, 50, 52, 51, 16, 79, 30, 23, 60, 80, 24, 68, 32, 39, 56, 32, 41, 36, 33, 3, 32, 72, 69, 0, 95, 82, 50, 97, 43, 27, 84, 85, 91, 0, 19, 16, 48, 53, 84, 98, 17, 98, 34, 21, 0, 99, 6, 68, 16, 27, 76, 88, 9, 55, 0, 90, 36, 28, 32, 52, 76, 3, 37, 34, 23, 56, 30, 60, 5, 42, 99, 23, 69, 93, 85, 12, 11, 28, 13, 21, 56, 9, 68, 6, 57, 74, 58, 23, 24, 22, 49, 90, 97, 35, 30, 41, 66, 1, 4, 55, 5, 30, 94, 3, 13, 49, 7]
last_save: 744

Gen:16
TrainFitness:0.8333333333333334
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],-436128.4754).all():
      return True
    else:
      return False
  def adf1(index):
    if np.greater(x[index],+033856.4837).all():
      return True
    else:
      return False
  def adf2(index):
    if np.equal(psqrt(x[index]),+368717.7465).all():
      if np.less(psqrt(x[index]),-351768.5808).all():
        return False
      else:
        return True
      return True
    else:
      if np.less(x[index],-276550.3842).all():
        return True
      else:
        return True
      return True
  def adf3(index):
    if np.equal(np.tanh(x[index]),-475112.1503).all():
      return True
    else:
      return True
  def adf4(index):
    if np.equal(x[index],+083436.8272).all():
      return False
    else:
      return False
  def adf7(index):
    if np.equal(sigmoid(x[index]),+210726.5662).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+507.902, adf1(1)*-920.810, adf2(2)*+177.624, adf3(3)*+708.336, adf4(4)*+846.596, adf7(7)*-019.540], [1, 0, 1, 0, 0], 574.013)
result=p(); 0.8333333333333334
IndLenGenome:387
IndGenome:[69, 24, 19, 45, 93, 29, 23, 59, 65, 4, 83, 6, 51, 92, 48, 84, 87, 45, 44, 66, 45, 31, 87, 30, 81, 89, 64, 24, 40, 13, 3, 68, 85, 66, 14, 38, 23, 57, 44, 25, 27, 88, 31, 95, 30, 5, 66, 64, 44, 13, 26, 68, 27, 61, 77, 47, 74, 66, 25, 49, 46, 86, 41, 38, 93, 81, 53, 25, 31, 37, 56, 38, 35, 28, 60, 58, 83, 96, 54, 99, 22, 43, 68, 33, 60, 12, 57, 36, 35, 85, 100, 73, 78, 54, 52, 88, 64, 12, 27, 7, 89, 36, 98, 35, 3, 37, 84, 67, 75, 81, 51, 22, 61, 95, 90, 43, 32, 76, 64, 51, 95, 3, 19, 20, 2, 20, 18, 93, 14, 23, 26, 88, 82, 57, 22, 49, 45, 72, 93, 5, 96, 45, 23, 62, 48, 72, 51, 70, 17, 62, 26, 55, 86, 46, 62, 46, 56, 75, 54, 81, 8, 20, 85, 90, 97, 59, 60, 22, 41, 29, 83, 89, 62, 60, 38, 91, 60, 94, 58, 56, 51, 87, 87, 86, 12, 44, 56, 88, 32, 37, 80, 48, 33, 13, 16, 90, 92, 72, 68, 14, 66, 45, 99, 66, 45, 31, 87, 80, 81, 89, 75, 24, 40, 13, 3, 14, 85, 66, 14, 38, 55, 57, 74, 50, 41, 33, 11, 59, 60, 75, 82, 19, 98, 19, 45, 20, 67, 56, 83, 75, 39, 56, 78, 75, 68, 29, 92, 57, 27, 32, 41, 54, 18, 73, 76, 33, 92, 39, 24, 24, 28, 73, 15, 56, 18, 58, 29, 21, 89, 62, 60, 20, 92, 81, 93, 69, 84, 96, 15, 94, 66, 44, 56, 11, 41, 33, 64, 70, 79, 75, 33, 81, 44, 65, 65, 6, 30, 53, 80, 23, 44, 24, 11, 80, 83, 59, 72, 34, 53, 92, 7, 17, 59, 21, 5, 19, 43, 70, 21, 74, 57, 69, 31, 35, 98, 67, 43, 14, 74, 72, 97, 97, 67, 94, 4, 62, 79, 53, 69, 75, 41, 38, 18, 26, 75, 42, 20, 35, 91, 23, 28, 48, 70, 36, 5, 25, 13, 8, 1, 82, 9, 90, 20, 26, 76, 37, 31, 56, 61, 33, 24, 97, 72, 98, 56, 54, 6, 11, 98, 50, 18, 63, 46, 15, 18, 79, 31]
last_save: 744

Gen:2016
last_save: 744
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:1.0
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],+700422.1644).all():
      return True
    else:
      return True
  def adf1(index):
    if np.greater(x[index],+432577.4366).all():
      return False
    else:
      return True
  def adf2(index):
    if np.equal(psqrt(x[index]),-284787.3573).all():
      return False
    else:
      return True
  def adf3(index):
    if np.greater(x[index],+250324.6314).all():
      return True
    else:
      return True
  def adf4(index):
    if np.equal(x[index],+717815.9557).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(np.cos(x[index]),-574902.1655).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+461.869, adf1(1)*+037.677, adf2(2)*+475.042, adf3(3)*-507.682, adf4(4)*+231.472, adf7(7)*-747.585], [1, 1, 0, 1, 0], 919.434)
result=p(); 0.6666666666666666
IndLenGenome:282
IndGenome:[76, 70, 76, 39, 66, 99, 87, 50, 1, 17, 34, 40, 13, 50, 53, 5, 32, 54, 25, 11, 52, 9, 12, 44, 40, 53, 91, 96, 14, 47, 70, 38, 41, 79, 64, 34, 38, 57, 54, 65, 13, 13, 74, 94, 32, 36, 29, 93, 37, 35, 27, 58, 37, 29, 33, 17, 53, 12, 80, 64, 27, 79, 37, 71, 17, 92, 44, 29, 75, 71, 39, 31, 22, 90, 54, 6, 87, 8, 19, 77, 79, 45, 28, 90, 18, 42, 70, 54, 44, 47, 50, 73, 12, 37, 98, 31, 97, 36, 76, 17, 34, 22, 75, 85, 27, 93, 95, 34, 70, 61, 89, 24, 66, 81, 67, 97, 43, 41, 29, 78, 87, 10, 70, 76, 82, 90, 74, 44, 54, 64, 94, 28, 98, 61, 47, 42, 25, 40, 33, 32, 48, 73, 32, 56, 65, 34, 44, 26, 81, 15, 70, 97, 79, 84, 60, 21, 86, 81, 14, 92, 66, 61, 35, 64, 11, 32, 20, 65, 38, 27, 32, 33, 89, 42, 14, 57, 83, 46, 39, 84, 83, 82, 26, 17, 65, 26, 64, 85, 87, 14, 79, 39, 100, 93, 72, 81, 59, 3, 19, 69, 21, 98, 90, 51, 67, 82, 46, 27, 51, 60, 10, 56, 6, 16, 12, 94, 10, 92, 82, 41, 71, 90, 65, 87, 20, 8, 1, 28, 37, 53, 13, 23, 40, 88, 0, 92, 16, 77, 30, 49, 41, 81, 93, 13, 99, 57, 10, 65, 31, 5, 38, 90, 95, 10, 5, 57, 32, 77, 58, 46, 17, 87, 32, 64, 78, 7, 54, 36, 41, 25, 69, 37, 69, 89, 35, 79, 59, 15, 10, 100, 75, 74]
last_save: 745

Gen:5
TrainFitness:0.8333333333333334
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],-200654.7438).all():
      return True
    else:
      return False
  def adf1(index):
    if np.greater(x[index],-374060.6509).all():
      return False
    else:
      return True
  def adf2(index):
    if np.greater(x[index],+024336.7452).all():
      return False
    else:
      return True
  def adf3(index):
    if np.greater(np.tanh(x[index]),-296169.3983).all():
      return False
    else:
      return False
  def adf4(index):
    if np.greater(np.tanh(x[index]),+369063.1451).all():
      return False
    else:
      return True
  def adf7(index):
    if np.greater(rlog(x[index]),+927667.2522).all():
      if np.less(np.tanh(x[index]),-058081.7197).all():
        return True
      else:
        return False
      return False
    else:
      if np.equal(x[index],-037398.5052).all():
        return True
      else:
        return False
      return False
  return multiple_operation([adf0(0)*-298.230, adf1(1)*+646.377, adf2(2)*-789.161, adf3(3)*-321.103, adf4(4)*-605.207, adf7(7)*+817.673], [0, 0, 0, 0, 0], 994.854)
result=p(); 0.8333333333333334
IndLenGenome:386
IndGenome:[6, 28, 63, 9, 37, 25, 73, 47, 2, 12, 70, 30, 36, 45, 64, 37, 44, 13, 28, 36, 71, 76, 23, 30, 51, 48, 31, 84, 43, 87, 94, 60, 6, 60, 46, 95, 80, 99, 11, 74, 5, 7, 51, 39, 15, 42, 85, 10, 42, 34, 53, 23, 76, 37, 24, 15, 32, 89, 76, 9, 93, 66, 60, 26, 72, 81, 76, 42, 39, 46, 81, 26, 39, 33, 29, 88, 63, 35, 23, 85, 17, 78, 70, 50, 74, 44, 79, 43, 46, 29, 80, 66, 93, 11, 94, 25, 61, 87, 74, 46, 60, 87, 36, 42, 10, 36, 16, 11, 9, 22, 27, 26, 56, 87, 22, 35, 32, 62, 91, 97, 84, 2, 42, 19, 85, 70, 65, 78, 10, 88, 61, 77, 51, 89, 97, 28, 25, 43, 19, 50, 79, 13, 19, 78, 40, 43, 97, 73, 39, 28, 45, 40, 35, 52, 80, 51, 49, 65, 85, 71, 97, 63, 52, 99, 28, 62, 83, 30, 33, 94, 85, 56, 74, 26, 13, 77, 27, 25, 63, 66, 87, 98, 9, 11, 96, 31, 99, 73, 67, 63, 92, 21, 81, 10, 13, 30, 29, 43, 26, 20, 35, 82, 30, 87, 31, 68, 45, 28, 41, 37, 46, 27, 33, 76, 76, 22, 46, 96, 70, 66, 19, 19, 74, 28, 85, 84, 54, 20, 43, 83, 7, 23, 6, 73, 14, 55, 40, 72, 81, 49, 20, 57, 10, 74, 43, 81, 18, 44, 66, 80, 12, 84, 21, 36, 86, 72, 73, 10, 21, 49, 21, 29, 45, 13, 84, 98, 54, 69, 35, 51, 54, 16, 82, 51, 76, 66, 10, 54, 28, 39, 96, 46, 88, 76, 92, 14, 73, 53, 90, 91, 31, 72, 87, 13, 18, 52, 26, 100, 46, 10, 72, 87, 100, 79, 43, 42, 76, 46, 67, 36, 78, 65, 68, 39, 9, 12, 32, 75, 75, 96, 45, 66, 39, 97, 34, 59, 77, 71, 83, 94, 30, 6, 82, 46, 63, 1, 9, 70, 15, 32, 93, 83, 0, 27, 7, 51, 31, 93, 61, 33, 46, 83, 35, 44, 11, 2, 85, 54, 3, 23, 56, 65, 62, 76, 90, 57, 99, 51, 56, 0, 92, 60, 75, 27, 7, 55, 74, 72, 4, 16, 26, 93, 24, 73, 21, 85]
last_save: 745

Gen:2005
last_save: 745
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.8333333333333334
TestFitness:1.0
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],+821307.0387).all():
      return True
    else:
      return False
  def adf1(index):
    if np.less(np.cos(x[index]),+036464.5663).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(psqrt(x[index]),-269850.7274).all():
      return True
    else:
      return True
  def adf3(index):
    if np.greater(x[index],+037223.3507).all():
      return True
    else:
      return False
  def adf4(index):
    if np.less(x[index],-890476.6968).all():
      return False
    else:
      return True
  def adf7(index):
    if np.equal(x[index],+235921.3833).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+563.867, adf1(1)*-275.866, adf2(2)*+100.064, adf3(3)*-496.617, adf4(4)*-055.843, adf7(7)*+820.431], [0, 0, 1, 1, 1], 655.144)
result=p(); 0.8333333333333334
IndLenGenome:282
IndGenome:[82, 10, 24, 13, 13, 53, 5, 33, 89, 44, 47, 28, 61, 71, 4, 93, 31, 48, 85, 72, 14, 93, 16, 41, 64, 77, 57, 75, 44, 98, 61, 33, 50, 43, 41, 24, 47, 19, 45, 5, 88, 92, 37, 75, 10, 85, 34, 72, 70, 99, 38, 36, 86, 91, 98, 29, 54, 80, 61, 78, 99, 66, 38, 45, 78, 86, 76, 84, 93, 60, 66, 39, 30, 76, 55, 23, 87, 34, 53, 74, 64, 94, 7, 45, 13, 14, 86, 35, 37, 75, 33, 22, 53, 54, 76, 78, 85, 14, 97, 59, 51, 34, 16, 99, 50, 81, 60, 13, 23, 8, 61, 50, 61, 27, 34, 18, 53, 90, 89, 82, 84, 82, 42, 47, 28, 48, 66, 16, 67, 94, 64, 58, 65, 67, 35, 82, 27, 29, 17, 50, 20, 30, 58, 36, 39, 4, 58, 26, 77, 25, 20, 53, 65, 83, 78, 16, 84, 78, 18, 82, 80, 15, 87, 45, 17, 53, 52, 10, 57, 23, 20, 83, 13, 83, 12, 73, 92, 53, 73, 12, 80, 31, 54, 56, 79, 45, 52, 58, 52, 81, 87, 50, 81, 68, 13, 21, 31, 11, 29, 3, 0, 21, 83, 51, 53, 23, 33, 63, 77, 74, 97, 17, 89, 19, 14, 90, 79, 75, 26, 93, 41, 35, 71, 58, 38, 84, 5, 84, 52, 3, 42, 52, 60, 37, 41, 32, 42, 22, 2, 39, 9, 42, 88, 71, 87, 7, 70, 89, 85, 21, 78, 48, 4, 30, 58, 3, 85, 80, 82, 9, 21, 34, 82, 43, 99, 1, 24, 82, 77, 96, 65, 26, 39, 81, 56, 93, 5, 13, 59, 98, 3, 2]
last_save: 746

Gen:2001
last_save: 746
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],+660611.8473).all():
      return True
    else:
      return True
  def adf1(index):
    if np.less(sigmoid(x[index]),+468960.1544).all():
      return False
    else:
      return True
  def adf2(index):
    if np.equal(sigmoid(x[index]),-909089.5549).all():
      return True
    else:
      return True
  def adf3(index):
    if np.equal(x[index],-703968.1088).all():
      return True
    else:
      return False
  def adf4(index):
    if np.equal(x[index],+982127.4586).all():
      return True
    else:
      return False
  def adf7(index):
    if np.equal(np.cos(x[index]),-612503.4247).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*-431.360, adf1(1)*-709.503, adf2(2)*+478.064, adf3(3)*-316.453, adf4(4)*-156.820, adf7(7)*-379.369], [0, 1, 0, 0, 0], 147.328)
result=p(); 0.6666666666666666
IndLenGenome:283
IndGenome:[74, 79, 22, 20, 90, 36, 17, 73, 33, 56, 1, 3, 87, 59, 69, 93, 57, 52, 21, 45, 87, 19, 98, 42, 67, 5, 19, 88, 17, 40, 18, 79, 70, 97, 91, 89, 58, 70, 98, 30, 33, 48, 66, 49, 82, 28, 31, 38, 80, 54, 17, 53, 53, 86, 36, 16, 19, 43, 30, 26, 89, 67, 23, 64, 4, 62, 38, 84, 30, 98, 46, 52, 82, 33, 11, 42, 71, 37, 63, 30, 30, 63, 3, 40, 16, 94, 86, 86, 83, 74, 65, 78, 89, 13, 31, 25, 30, 99, 50, 83, 50, 18, 51, 37, 36, 63, 26, 24, 85, 14, 80, 63, 60, 35, 34, 41, 14, 69, 66, 65, 67, 33, 55, 51, 62, 44, 42, 44, 17, 83, 46, 34, 28, 69, 73, 26, 56, 31, 71, 76, 52, 85, 21, 21, 24, 80, 58, 91, 62, 18, 72, 76, 37, 43, 57, 98, 58, 50, 50, 59, 60, 43, 18, 61, 88, 65, 25, 70, 29, 99, 58, 55, 59, 40, 69, 44, 4, 21, 72, 27, 64, 60, 31, 96, 72, 74, 53, 15, 22, 20, 52, 99, 18, 11, 89, 15, 32, 94, 85, 58, 44, 68, 58, 19, 80, 64, 10, 24, 33, 58, 47, 97, 38, 30, 5, 76, 59, 85, 57, 45, 25, 76, 71, 45, 28, 92, 91, 40, 77, 13, 59, 90, 6, 72, 8, 51, 73, 27, 72, 93, 85, 58, 99, 17, 66, 40, 1, 27, 43, 87, 96, 95, 53, 8, 3, 38, 99, 25, 2, 96, 99, 78, 47, 63, 84, 48, 44, 81, 19, 99, 97, 97, 50, 89, 93, 44, 91, 18, 33, 73, 13, 6, 69]
last_save: 747

Gen:6
TrainFitness:0.8333333333333334
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(sigmoid(x[index]),+175943.0945).all():
      if np.less(np.sin(x[index]),-450860.8548).all():
        return True
      else:
        return False
      return True
    else:
      if np.equal(rlog(x[index]),+913612.1444).all():
        return True
      else:
        return False
      return False
  def adf1(index):
    if np.greater(sigmoid(x[index]),+134448.9750).all():
      return True
    else:
      return True
  def adf2(index):
    if np.greater(x[index],-863556.3035).all():
      return False
    else:
      return True
  def adf3(index):
    if np.greater(np.sin(x[index]),+165763.5061).all():
      return True
    else:
      return True
  def adf4(index):
    if np.less(x[index],+203668.1589).all():
      return False
    else:
      return True
  def adf7(index):
    if np.greater(x[index],+018519.3270).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*-187.068, adf1(1)*+223.302, adf2(2)*-586.559, adf3(3)*+028.454, adf4(4)*+753.037, adf7(7)*-377.268], [1, 1, 0, 1, 0], 562.869)
result=p(); 0.8333333333333334
IndLenGenome:373
IndGenome:[98, 47, 46, 82, 69, 58, 54, 39, 80, 24, 69, 11, 77, 55, 29, 54, 23, 80, 29, 24, 15, 77, 28, 52, 54, 45, 31, 24, 44, 15, 20, 48, 16, 90, 78, 85, 24, 68, 70, 7, 48, 29, 5, 60, 10, 34, 54, 99, 69, 31, 33, 66, 51, 92, 81, 84, 34, 74, 90, 47, 7, 47, 79, 42, 4, 93, 8, 54, 69, 21, 73, 74, 14, 44, 48, 49, 7, 85, 70, 26, 32, 62, 57, 12, 45, 88, 17, 88, 98, 36, 83, 5, 15, 6, 93, 30, 13, 55, 99, 66, 24, 85, 75, 92, 18, 14, 72, 13, 51, 16, 75, 47, 46, 73, 45, 60, 26, 21, 88, 46, 51, 37, 61, 39, 20, 26, 65, 62, 80, 73, 46, 16, 48, 11, 95, 78, 79, 17, 72, 43, 87, 90, 61, 99, 48, 44, 70, 31, 58, 35, 1, 49, 33, 72, 37, 80, 81, 16, 47, 89, 11, 57, 14, 81, 88, 67, 50, 76, 18, 38, 10, 9, 22, 32, 23, 13, 50, 72, 95, 31, 53, 55, 88, 96, 55, 65, 69, 35, 34, 68, 50, 72, 58, 64, 25, 34, 67, 34, 47, 57, 55, 33, 80, 43, 17, 54, 73, 37, 63, 27, 57, 52, 76, 98, 91, 41, 27, 86, 51, 6, 31, 75, 76, 12, 78, 26, 39, 85, 12, 90, 74, 73, 79, 55, 58, 41, 54, 40, 49, 58, 87, 35, 66, 90, 76, 50, 94, 47, 71, 64, 50, 77, 53, 68, 76, 85, 99, 36, 39, 83, 75, 46, 52, 35, 35, 88, 24, 52, 96, 24, 24, 63, 88, 31, 47, 10, 87, 39, 44, 90, 40, 80, 19, 8, 19, 55, 100, 24, 57, 6, 58, 92, 20, 17, 94, 74, 82, 17, 93, 95, 63, 44, 43, 54, 25, 73, 31, 73, 2, 77, 36, 100, 17, 4, 34, 91, 78, 23, 66, 98, 28, 64, 38, 8, 52, 19, 54, 79, 94, 1, 0, 2, 5, 5, 13, 56, 34, 54, 62, 48, 20, 75, 41, 10, 57, 30, 63, 81, 56, 4, 100, 3, 48, 28, 72, 76, 69, 59, 3, 77, 85, 81, 31, 51, 61, 9, 47, 49, 35, 93, 18, 24, 68]
last_save: 747

Gen:2006
last_save: 747
Exit:FalseFalseTrue