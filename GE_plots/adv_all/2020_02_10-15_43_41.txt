Dataset:Meander/Full.csv
FS:False
Seed:1236
Size:7

Gen:1
TrainFitness:0.8888888888888888
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],-542390.6164).all():
      return True
    else:
      return False
  def adf1(index):
    if np.equal(x[index],-084158.0081).all():
      return False
    else:
      return True
  def adf2(index):
    if np.equal(x[index],-661944.7053).all():
      return False
    else:
      return True
  def adf3(index):
    if np.greater(x[index],-199086.6652).all():
      return False
    else:
      return True
  def adf4(index):
    if np.less(x[index],-218334.6301).all():
      return False
    else:
      return False
  def adf5(index):
    if np.less(x[index],+894900.9624).all():
      return False
    else:
      return True
  def adf6(index):
    if np.equal(rlog(x[index]),-591949.9276).all():
      return True
    else:
      return True
  def adf7(index):
    if np.greater(x[index],+435475.2388).all():
      return True
    else:
      return False
  def adf8(index):
    if np.less(np.tanh(x[index]),-975098.9499).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-306.900, adf1(1)*+590.447, adf2(2)*-702.404, adf3(3)*-271.329, adf4(4)*-300.078, adf5(5)*+244.619, adf6(6)*+386.240, adf7(7)*+038.144, adf8(8)*-162.460], [1, 1, 1, 0, 1, 1, 0, 0], 052.298)
result=p(); 0.8888888888888888
IndLenGenome:412
IndGenome:[60, 69, 52, 52, 91, 3, 40, 33, 31, 66, 3, 95, 77, 62, 43, 28, 79, 29, 87, 7, 28, 19, 54, 12, 18, 4, 17, 37, 71, 7, 10, 91, 55, 78, 98, 82, 87, 17, 62, 40, 61, 21, 47, 58, 46, 87, 68, 44, 56, 91, 64, 19, 12, 20, 19, 21, 11, 54, 59, 77, 31, 69, 40, 45, 28, 37, 25, 27, 3, 27, 74, 84, 76, 64, 30, 44, 80, 61, 19, 5, 25, 50, 4, 56, 64, 95, 22, 90, 79, 29, 73, 24, 71, 13, 40, 96, 74, 76, 79, 29, 88, 30, 70, 7, 64, 13, 72, 7, 58, 47, 30, 58, 22, 68, 21, 27, 22, 15, 80, 89, 32, 52, 24, 56, 70, 80, 19, 100, 18, 51, 63, 53, 44, 94, 58, 83, 51, 45, 17, 38, 97, 52, 15, 59, 58, 49, 9, 4, 37, 36, 97, 94, 59, 20, 85, 49, 65, 28, 33, 74, 86, 85, 57, 66, 98, 24, 50, 10, 28, 49, 39, 97, 89, 18, 27, 84, 81, 94, 76, 29, 81, 70, 92, 99, 49, 70, 48, 47, 85, 75, 79, 36, 33, 89, 49, 23, 21, 76, 92, 64, 86, 13, 57, 99, 22, 33, 20, 52, 94, 62, 90, 80, 91, 69, 44, 47, 94, 99, 93, 61, 50, 56, 63, 67, 28, 30, 86, 98, 92, 90, 51, 16, 39, 16, 85, 88, 68, 40, 21, 66, 10, 92, 47, 20, 92, 73, 64, 73, 64, 30, 19, 78, 53, 5, 76, 55, 41, 33, 74, 93, 65, 93, 85, 39, 26, 45, 31, 74, 16, 50, 44, 51, 22, 79, 79, 31, 46, 89, 88, 98, 71, 29, 35, 61, 88, 63, 90, 57, 91, 39, 57, 26, 86, 15, 15, 41, 39, 98, 79, 26, 26, 77, 51, 90, 33, 97, 52, 34, 73, 48, 39, 20, 55, 95, 11, 96, 55, 29, 6, 68, 51, 19, 69, 22, 90, 13, 98, 62, 38, 47, 0, 88, 82, 57, 82, 44, 17, 2, 58, 85, 70, 83, 72, 51, 8, 82, 11, 26, 97, 93, 9, 47, 18, 7, 94, 2, 50, 8, 42, 1, 73, 68, 63, 95, 38, 62, 8, 65, 83, 10, 93, 6, 66, 52, 28, 89, 49, 83, 11, 79, 51, 74, 12, 95, 100, 3, 45, 67, 31, 74, 85, 72, 56, 75, 79, 17, 0, 19, 60, 28, 61, 18, 87, 20, 61, 94, 32, 26, 69, 96, 51, 4]
last_save: 721

Gen:2001
last_save: 721
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.8888888888888888
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(sigmoid(x[index]),+468082.7351).all():
      return True
    else:
      return False
  def adf1(index):
    if np.equal(np.sin(x[index]),+229103.2664).all():
      return True
    else:
      return False
  def adf2(index):
    if np.less(np.cos(x[index]),+584082.3697).all():
      return False
    else:
      return False
  def adf3(index):
    if np.equal(x[index],+110572.9881).all():
      return True
    else:
      return True
  def adf4(index):
    if np.greater(rlog(x[index]),-606826.5782).all():
      return True
    else:
      return False
  def adf5(index):
    if np.less(x[index],+668746.2063).all():
      return False
    else:
      return False
  def adf6(index):
    if np.greater(np.sin(x[index]),+227752.7142).all():
      return False
    else:
      return True
  def adf7(index):
    if np.less(x[index],+814786.0895).all():
      return False
    else:
      return False
  def adf8(index):
    if np.less(x[index],+958669.8417).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+401.107, adf1(1)*-011.298, adf2(2)*-716.165, adf3(3)*+376.646, adf4(4)*+700.482, adf5(5)*-051.914, adf6(6)*+341.896, adf7(7)*+409.688, adf8(8)*+105.500], [0, 1, 0, 1, 0, 1, 0, 0], 120.559)
result=p(); 0.6666666666666666
IndLenGenome:417
IndGenome:[85, 52, 87, 76, 69, 46, 65, 94, 80, 69, 71, 87, 96, 78, 42, 30, 32, 19, 49, 61, 59, 39, 48, 93, 44, 99, 43, 57, 99, 58, 95, 70, 30, 94, 51, 19, 77, 20, 65, 12, 76, 91, 91, 76, 33, 69, 32, 82, 53, 67, 4, 51, 43, 65, 95, 63, 97, 21, 40, 47, 48, 66, 68, 85, 2, 16, 81, 32, 87, 48, 7, 17, 78, 15, 94, 88, 30, 54, 54, 85, 52, 31, 64, 50, 91, 86, 91, 90, 73, 66, 61, 10, 94, 25, 87, 28, 67, 86, 52, 54, 31, 21, 49, 86, 66, 16, 33, 66, 30, 71, 43, 26, 90, 18, 70, 58, 75, 82, 37, 49, 45, 96, 80, 52, 90, 45, 16, 58, 26, 79, 60, 38, 87, 56, 29, 75, 86, 18, 20, 9, 66, 65, 85, 87, 39, 76, 41, 77, 64, 57, 29, 38, 2, 45, 51, 61, 12, 61, 87, 41, 59, 25, 63, 38, 59, 88, 70, 30, 15, 80, 70, 47, 54, 61, 39, 41, 29, 25, 71, 72, 82, 71, 80, 1, 36, 24, 19, 11, 92, 92, 79, 96, 24, 82, 50, 16, 61, 78, 25, 18, 62, 81, 86, 63, 78, 16, 96, 32, 67, 57, 63, 73, 40, 67, 96, 34, 52, 54, 57, 41, 88, 66, 24, 85, 36, 58, 76, 41, 66, 65, 31, 72, 82, 98, 39, 35, 64, 11, 37, 28, 58, 30, 37, 60, 18, 98, 54, 75, 58, 89, 15, 91, 69, 89, 80, 73, 30, 76, 98, 84, 58, 56, 18, 27, 92, 90, 8, 61, 57, 17, 12, 88, 78, 96, 13, 25, 20, 14, 52, 78, 92, 81, 87, 79, 97, 18, 81, 53, 5, 99, 23, 67, 99, 10, 1, 67, 38, 55, 80, 12, 90, 20, 12, 82, 77, 6, 92, 23, 66, 1, 36, 84, 42, 36, 1, 54, 26, 68, 2, 23, 92, 4, 94, 34, 68, 35, 84, 86, 2, 84, 86, 63, 72, 65, 85, 95, 54, 15, 47, 82, 28, 60, 12, 5, 35, 51, 94, 31, 89, 82, 38, 41, 44, 35, 47, 7, 44, 94, 31, 85, 27, 18, 19, 65, 82, 3, 15, 13, 77, 25, 36, 28, 17, 80, 8, 36, 63, 85, 83, 0, 23, 87, 14, 80, 61, 81, 78, 75, 2, 11, 56, 50, 39, 30, 91, 96, 54, 70, 88, 79, 3, 28, 74, 69, 54, 68, 56, 72, 32, 9, 46, 97, 53, 35, 40, 28, 0]
last_save: 722

Gen:12
TrainFitness:0.7777777777777778
TestFitness:0.7777777777777778
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],+176750.9871).all():
      return True
    else:
      return True
  def adf1(index):
    if np.equal(np.sin(x[index]),-781309.9178).all():
      return False
    else:
      return True
  def adf2(index):
    if np.greater(np.cos(x[index]),-029076.5019).all():
      return False
    else:
      return False
  def adf3(index):
    if np.less(x[index],+838825.8731).all():
      return False
    else:
      return True
  def adf4(index):
    if np.greater(psqrt(x[index]),-733444.3659).all():
      return True
    else:
      return True
  def adf5(index):
    if np.equal(x[index],+270610.1266).all():
      return False
    else:
      return False
  def adf6(index):
    if np.less(x[index],+032483.2690).all():
      return False
    else:
      return True
  def adf7(index):
    if np.less(rlog(x[index]),-378565.4747).all():
      return False
    else:
      return True
  def adf8(index):
    if np.equal(x[index],+147028.3911).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+858.782, adf1(1)*+378.622, adf2(2)*+968.836, adf3(3)*-585.662, adf4(4)*-543.889, adf5(5)*-966.527, adf6(6)*+770.508, adf7(7)*-081.917, adf8(8)*-183.354], [1, 0, 1, 1, 1, 0, 0, 0], 125.039)
result=p(); 0.7777777777777778
IndLenGenome:463
IndGenome:[39, 26, 5, 41, 28, 83, 51, 44, 62, 71, 87, 56, 47, 5, 40, 99, 48, 27, 31, 30, 64, 56, 47, 65, 28, 72, 90, 31, 96, 87, 78, 31, 63, 50, 79, 69, 91, 17, 18, 53, 84, 62, 53, 6, 46, 43, 88, 41, 58, 60, 62, 49, 90, 57, 96, 85, 90, 61, 79, 37, 71, 89, 59, 43, 83, 69, 54, 9, 68, 43, 78, 98, 72, 75, 98, 47, 33, 71, 55, 94, 53, 73, 87, 98, 89, 82, 31, 42, 37, 33, 83, 14, 24, 94, 63, 26, 35, 59, 40, 6, 84, 33, 29, 61, 50, 62, 39, 92, 97, 30, 26, 51, 80, 91, 32, 36, 36, 45, 53, 15, 73, 76, 47, 23, 58, 19, 60, 93, 92, 84, 48, 83, 82, 26, 29, 70, 55, 50, 19, 5, 91, 66, 70, 53, 71, 46, 93, 27, 18, 35, 36, 45, 34, 57, 84, 37, 91, 86, 90, 65, 92, 33, 70, 68, 60, 31, 44, 37, 90, 12, 48, 63, 69, 11, 71, 55, 25, 70, 28, 16, 90, 21, 18, 35, 68, 27, 38, 42, 62, 96, 21, 83, 87, 78, 66, 32, 32, 89, 38, 34, 39, 26, 98, 88, 83, 96, 81, 53, 97, 75, 58, 55, 86, 26, 92, 42, 9, 16, 45, 84, 23, 68, 48, 79, 71, 3, 28, 29, 36, 86, 45, 82, 47, 73, 72, 72, 37, 57, 10, 25, 90, 28, 11, 33, 24, 20, 8, 91, 79, 81, 77, 95, 97, 12, 21, 78, 3, 83, 85, 54, 60, 97, 82, 61, 75, 79, 74, 40, 36, 69, 51, 72, 85, 40, 93, 39, 59, 47, 68, 92, 27, 33, 74, 74, 30, 26, 76, 56, 83, 15, 90, 55, 20, 51, 81, 28, 39, 15, 79, 17, 67, 95, 65, 69, 44, 67, 24, 53, 14, 75, 12, 27, 79, 33, 98, 49, 57, 91, 26, 84, 59, 42, 98, 32, 30, 82, 48, 57, 73, 7, 74, 37, 13, 45, 6, 70, 19, 96, 12, 60, 98, 80, 26, 42, 47, 70, 4, 76, 22, 36, 92, 71, 24, 14, 29, 75, 80, 50, 47, 40, 58, 64, 85, 13, 26, 13, 95, 89, 82, 13, 56, 28, 69, 96, 2, 25, 76, 90, 76, 9, 50, 75, 93, 45, 70, 92, 82, 6, 78, 58, 28, 81, 4, 78, 89, 29, 22, 72, 55, 27, 50, 6, 71, 2, 27, 27, 93, 51, 66, 79, 60, 60, 59, 35, 79, 8, 100, 20, 40, 88, 51, 61, 35, 42, 17, 80, 30, 55, 8, 53, 71, 32, 23, 70, 54, 94, 19, 58, 39, 56, 85, 86, 21, 91, 72, 51, 59, 47, 83, 1, 40, 52, 83, 64, 2, 80, 31, 1, 96, 40, 27, 74, 54]
last_save: 722

Gen:2012
last_save: 722
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.7777777777777778
TestFitness:1.0
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],+031553.4073).all():
      return False
    else:
      return True
  def adf1(index):
    if np.less(np.cos(x[index]),+427476.3573).all():
      return False
    else:
      return False
  def adf2(index):
    if np.equal(x[index],+094147.8862).all():
      return True
    else:
      return False
  def adf3(index):
    if np.equal(psqrt(x[index]),+759999.5084).all():
      return True
    else:
      return True
  def adf4(index):
    if np.greater(x[index],-709693.7803).all():
      return True
    else:
      return True
  def adf5(index):
    if np.equal(psqrt(x[index]),-712535.5718).all():
      return False
    else:
      return True
  def adf6(index):
    if np.greater(np.tanh(x[index]),-369303.1423).all():
      return False
    else:
      return True
  def adf7(index):
    if np.greater(x[index],-765370.9995).all():
      return False
    else:
      return False
  def adf8(index):
    if np.equal(x[index],-238823.8472).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*-614.337, adf1(1)*+168.982, adf2(2)*+791.499, adf3(3)*-705.985, adf4(4)*+127.685, adf5(5)*-326.766, adf6(6)*+238.847, adf7(7)*+855.420, adf8(8)*-582.141], [1, 1, 0, 0, 0, 0, 0, 0], 695.613)
result=p(); 0.7777777777777778
IndLenGenome:415
IndGenome:[88, 96, 43, 62, 8, 35, 83, 56, 59, 16, 52, 19, 15, 88, 69, 61, 77, 85, 81, 12, 48, 44, 47, 33, 58, 96, 11, 9, 2, 52, 99, 86, 24, 55, 52, 13, 61, 36, 35, 32, 49, 91, 33, 53, 45, 55, 41, 71, 32, 87, 47, 86, 70, 57, 57, 63, 90, 19, 22, 71, 73, 18, 55, 30, 86, 77, 86, 69, 64, 72, 17, 96, 69, 55, 42, 74, 94, 21, 41, 80, 54, 81, 44, 87, 66, 45, 69, 62, 56, 46, 79, 92, 25, 34, 4, 28, 56, 15, 50, 91, 13, 4, 43, 55, 45, 92, 38, 25, 12, 75, 80, 37, 101, 73, 26, 64, 36, 78, 95, 30, 82, 99, 79, 59, 53, 88, 30, 61, 25, 69, 69, 4, 11, 53, 84, 57, 95, 96, 77, 94, 14, 13, 36, 29, 37, 96, 98, 15, 78, 41, 48, 90, 61, 81, 85, 39, 57, 73, 97, 4, 21, 38, 3, 89, 36, 46, 75, 51, 53, 26, 14, 66, 53, 14, 67, 63, 47, 71, 35, 98, 77, 21, 71, 48, 33, 26, 53, 82, 12, 93, 82, 87, 68, 60, 75, 79, 28, 77, 94, 13, 21, 32, 62, 64, 46, 62, 77, 83, 49, 85, 93, 38, 64, 47, 30, 26, 98, 34, 2, 15, 58, 81, 57, 13, 63, 94, 21, 92, 65, 50, 63, 19, 31, 59, 79, 73, 55, 62, 64, 92, 14, 98, 72, 52, 90, 55, 76, 64, 48, 97, 99, 34, 19, 85, 47, 94, 26, 97, 20, 73, 23, 71, 61, 28, 72, 20, 23, 73, 48, 78, 67, 89, 89, 87, 70, 93, 82, 7, 19, 80, 27, 30, 53, 30, 87, 15, 32, 73, 63, 56, 9, 35, 21, 86, 75, 15, 74, 30, 50, 68, 74, 41, 67, 96, 85, 59, 20, 7, 89, 30, 63, 93, 44, 99, 5, 10, 4, 21, 89, 39, 27, 19, 85, 26, 80, 97, 1, 100, 82, 70, 2, 22, 11, 21, 64, 7, 51, 31, 14, 42, 22, 65, 47, 85, 28, 89, 25, 52, 70, 3, 45, 91, 57, 67, 88, 46, 77, 58, 64, 71, 41, 20, 80, 40, 63, 62, 56, 90, 40, 5, 71, 99, 54, 64, 35, 1, 1, 44, 33, 93, 70, 38, 84, 94, 64, 34, 58, 2, 37, 47, 35, 10, 40, 55, 92, 37, 98, 14, 90, 41, 28, 43, 53, 98, 63, 33, 50, 91, 37, 94, 12, 45, 49, 33, 74]
last_save: 723

Gen:2001
last_save: 723
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.7777777777777778
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(sigmoid(x[index]),-129130.4564).all():
      return True
    else:
      return False
  def adf1(index):
    if np.greater(x[index],+479753.0360).all():
      return False
    else:
      return True
  def adf2(index):
    if np.less(x[index],-498359.2879).all():
      return False
    else:
      return True
  def adf3(index):
    if np.equal(np.cos(x[index]),+433749.4564).all():
      return True
    else:
      return True
  def adf4(index):
    if np.less(rlog(x[index]),+494113.2610).all():
      return True
    else:
      return False
  def adf5(index):
    if np.less(sigmoid(x[index]),-569377.4880).all():
      return True
    else:
      return True
  def adf6(index):
    if np.equal(psqrt(x[index]),-488536.9395).all():
      return True
    else:
      return False
  def adf7(index):
    if np.less(np.cos(x[index]),+138596.0783).all():
      return True
    else:
      return True
  def adf8(index):
    if np.less(np.sin(x[index]),-434241.9821).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+956.541, adf1(1)*-897.946, adf2(2)*+296.058, adf3(3)*+196.753, adf4(4)*-575.585, adf5(5)*-575.627, adf6(6)*+220.151, adf7(7)*+047.297, adf8(8)*+164.129], [0, 0, 0, 0, 0, 1, 1, 1], 893.920)
result=p(); 0.6666666666666666
IndLenGenome:420
IndGenome:[15, 7, 33, 8, 29, 41, 74, 22, 45, 83, 38, 66, 85, 93, 37, 16, 17, 61, 38, 42, 55, 50, 68, 49, 82, 91, 87, 78, 67, 29, 63, 17, 34, 61, 55, 67, 68, 34, 5, 30, 59, 26, 29, 76, 16, 64, 63, 96, 17, 62, 44, 53, 55, 70, 91, 9, 86, 22, 92, 21, 80, 87, 10, 52, 86, 67, 85, 9, 70, 52, 44, 101, 28, 85, 55, 27, 100, 64, 65, 82, 92, 13, 22, 89, 83, 58, 85, 17, 95, 62, 93, 78, 57, 63, 46, 60, 55, 60, 68, 93, 39, 65, 35, 64, 88, 77, 34, 89, 54, 74, 80, 46, 69, 75, 91, 45, 43, 25, 94, 85, 23, 76, 59, 29, 69, 25, 4, 36, 43, 71, 82, 77, 84, 37, 10, 85, 53, 68, 89, 40, 33, 78, 80, 57, 73, 31, 74, 18, 61, 94, 67, 89, 34, 84, 79, 89, 72, 34, 55, 94, 70, 76, 56, 49, 89, 55, 36, 91, 66, 51, 20, 75, 94, 78, 13, 40, 80, 17, 75, 94, 15, 13, 81, 41, 79, 67, 25, 32, 76, 30, 87, 55, 72, 61, 33, 46, 81, 68, 34, 88, 20, 42, 63, 73, 72, 31, 82, 59, 73, 59, 89, 1, 73, 71, 41, 35, 38, 39, 76, 32, 10, 32, 76, 14, 84, 88, 42, 99, 19, 78, 84, 85, 75, 29, 42, 65, 67, 14, 14, 89, 37, 78, 77, 18, 74, 4, 71, 94, 56, 56, 55, 89, 76, 42, 73, 67, 29, 43, 97, 87, 75, 74, 94, 93, 61, 51, 65, 61, 65, 35, 27, 61, 57, 16, 63, 50, 83, 99, 70, 24, 68, 18, 9, 36, 76, 65, 32, 20, 18, 72, 86, 79, 28, 76, 62, 69, 57, 100, 51, 45, 63, 81, 1, 56, 57, 1, 34, 3, 36, 91, 31, 82, 77, 96, 95, 34, 15, 90, 92, 55, 18, 80, 51, 26, 32, 100, 43, 67, 24, 50, 78, 1, 95, 11, 91, 25, 45, 81, 42, 12, 96, 95, 38, 52, 15, 54, 57, 9, 67, 23, 19, 4, 96, 2, 67, 24, 33, 56, 58, 49, 78, 42, 12, 16, 47, 17, 53, 92, 19, 42, 19, 96, 62, 23, 33, 54, 59, 59, 47, 47, 89, 19, 57, 52, 71, 35, 74, 64, 68, 29, 29, 34, 18, 28, 95, 42, 42, 33, 83, 27, 7, 68, 30, 24, 65, 68, 0, 81, 80, 21, 63, 57, 86, 52, 13, 56, 34, 31, 36, 52]
last_save: 724

Gen:137
TrainFitness:0.7777777777777778
TestFitness:0.6666666666666666
MaxGenLen:530
Individual: def p():
  def adf0(index):
    if np.equal(x[index],-920016.2537).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(x[index],-552644.5296).all():
      return False
    else:
      return False
  def adf2(index):
    if np.less(x[index],-228366.3221).all():
      return False
    else:
      return False
  def adf3(index):
    if np.greater(sigmoid(x[index]),-419098.9205).all():
      return True
    else:
      return False
  def adf4(index):
    if np.greater(x[index],-849891.4794).all():
      return True
    else:
      return False
  def adf5(index):
    if np.greater(x[index],+350967.1946).all():
      return True
    else:
      return False
  def adf6(index):
    if np.less(x[index],-173459.3952).all():
      return False
    else:
      return False
  def adf7(index):
    if np.greater(x[index],+027486.7401).all():
      return True
    else:
      return False
  def adf8(index):
    if np.less(psqrt(x[index]),+054928.0745).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+155.755, adf1(1)*-348.541, adf2(2)*+544.688, adf3(3)*+917.940, adf4(4)*+881.579, adf5(5)*+040.616, adf6(6)*+519.899, adf7(7)*+544.085, adf8(8)*-902.682], [0, 0, 0, 1, 0, 0, 0, 0], 674.818)
result=p(); 0.7777777777777778
IndLenGenome:516
IndGenome:[56, 41, 23, 3, 23, 53, 7, 3, 62, 49, 2, 70, 20, 61, 96, 32, 35, 53, 87, 99, 57, 37, 77, 22, 79, 98, 53, 85, 75, 5, 32, 16, 84, 4, 45, 42, 99, 76, 67, 69, 44, 69, 25, 75, 93, 97, 91, 62, 92, 48, 23, 36, 66, 83, 32, 62, 51, 97, 91, 3, 73, 48, 40, 45, 19, 33, 78, 44, 11, 19, 40, 69, 78, 89, 32, 60, 25, 84, 49, 85, 99, 9, 51, 72, 73, 41, 38, 14, 39, 88, 9, 11, 94, 37, 69, 84, 56, 49, 54, 31, 9, 43, 84, 40, 18, 63, 95, 30, 89, 86, 87, 11, 89, 34, 46, 36, 79, 84, 49, 28, 99, 9, 51, 69, 51, 97, 23, 54, 35, 9, 43, 19, 25, 52, 63, 95, 75, 97, 69, 9, 10, 2, 86, 40, 82, 67, 74, 88, 56, 67, 44, 70, 91, 98, 73, 86, 11, 94, 40, 29, 63, 34, 6, 60, 25, 84, 49, 22, 18, 40, 77, 44, 15, 6, 43, 98, 79, 39, 28, 42, 1, 45, 85, 97, 5, 45, 62, 71, 7, 33, 54, 48, 55, 74, 51, 52, 12, 5, 65, 74, 14, 86, 88, 58, 11, 94, 71, 69, 51, 97, 49, 84, 30, 9, 48, 84, 18, 18, 71, 5, 7, 69, 95, 10, 15, 90, 4, 10, 16, 21, 46, 83, 96, 93, 25, 11, 49, 28, 99, 9, 51, 34, 14, 65, 34, 14, 10, 88, 95, 75, 97, 69, 9, 10, 2, 86, 38, 82, 67, 74, 88, 56, 67, 38, 82, 92, 74, 35, 56, 67, 44, 48, 91, 98, 73, 86, 11, 94, 79, 63, 63, 34, 6, 60, 25, 84, 49, 22, 18, 40, 77, 44, 75, 56, 19, 9, 34, 24, 26, 86, 48, 99, 55, 35, 50, 57, 63, 46, 12, 11, 76, 41, 20, 59, 10, 50, 65, 44, 3, 57, 22, 90, 30, 70, 33, 27, 97, 95, 35, 77, 34, 89, 11, 71, 83, 11, 34, 16, 69, 65, 76, 78, 33, 95, 21, 99, 55, 70, 4, 46, 35, 25, 84, 1, 28, 99, 63, 20, 72, 4, 19, 85, 27, 90, 86, 53, 43, 65, 16, 68, 100, 97, 20, 18, 95, 41, 46, 24, 96, 80, 31, 97, 63, 38, 57, 11, 6, 89, 93, 3, 90, 93, 86, 51, 64, 41, 61, 56, 85, 94, 72, 31, 66, 93, 0, 47, 23, 86, 66, 27, 26, 51, 22, 43, 92, 52, 88, 55, 17, 18, 31, 94, 51, 24, 98, 91, 40, 25, 82, 47, 93, 7, 35, 2, 80, 47, 6, 56, 15, 84, 45, 43, 43, 77, 77, 70, 15, 63, 34, 90, 94, 27, 87, 34, 51, 75, 3, 84, 69, 71, 33, 61, 6, 82, 59, 8, 15, 64, 19, 29, 82, 8, 66, 26, 83, 17, 49, 40, 2, 25, 13, 56, 80, 68, 11, 27, 98, 47, 37, 84, 81, 47, 34, 59, 26, 55, 26, 72, 23, 56, 67, 81, 66, 18, 21, 20, 0, 82, 89, 37, 82, 86, 81, 14, 18, 66]
last_save: 724

Gen:2137
last_save: 724
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.7777777777777778
TestFitness:0.8888888888888888
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],-784078.5624).all():
      return True
    else:
      return True
  def adf1(index):
    if np.less(x[index],+017591.7086).all():
      return True
    else:
      return False
  def adf2(index):
    if np.equal(x[index],+116769.9177).all():
      return False
    else:
      return True
  def adf3(index):
    if np.equal(sigmoid(x[index]),+807616.9154).all():
      return False
    else:
      return False
  def adf4(index):
    if np.less(rlog(x[index]),+522379.6065).all():
      return False
    else:
      return False
  def adf5(index):
    if np.less(x[index],+247916.5296).all():
      return True
    else:
      return False
  def adf6(index):
    if np.equal(np.tanh(x[index]),-384088.7523).all():
      return False
    else:
      return False
  def adf7(index):
    if np.less(np.cos(x[index]),-220485.1724).all():
      return True
    else:
      return False
  def adf8(index):
    if np.less(x[index],-010693.9951).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-800.797, adf1(1)*-720.694, adf2(2)*+997.407, adf3(3)*-775.458, adf4(4)*+602.751, adf5(5)*-137.166, adf6(6)*+129.134, adf7(7)*-049.853, adf8(8)*+706.512], [0, 1, 1, 1, 0, 1, 0, 0], 816.861)
result=p(); 0.7777777777777778
IndLenGenome:415
IndGenome:[66, 71, 19, 11, 6, 57, 35, 17, 60, 90, 75, 17, 73, 18, 66, 40, 2, 19, 76, 91, 26, 86, 58, 21, 11, 21, 95, 83, 83, 64, 83, 86, 40, 65, 26, 59, 87, 80, 6, 57, 17, 42, 94, 50, 19, 46, 6, 63, 71, 42, 87, 51, 67, 71, 64, 7, 93, 46, 63, 63, 49, 92, 53, 59, 15, 46, 28, 95, 47, 24, 47, 29, 57, 15, 75, 41, 43, 10, 25, 34, 28, 28, 64, 22, 16, 22, 40, 96, 59, 14, 18, 73, 78, 38, 93, 61, 14, 11, 57, 40, 65, 72, 50, 54, 51, 69, 5, 99, 29, 15, 11, 16, 14, 66, 92, 80, 92, 87, 85, 96, 60, 25, 52, 91, 86, 21, 87, 97, 89, 50, 92, 29, 45, 6, 88, 10, 42, 20, 57, 97, 56, 10, 39, 67, 90, 67, 41, 7, 7, 67, 10, 60, 29, 81, 62, 96, 92, 96, 14, 38, 91, 17, 56, 56, 38, 40, 62, 32, 78, 25, 33, 62, 85, 5, 24, 49, 34, 91, 28, 52, 96, 26, 31, 42, 90, 59, 22, 39, 48, 95, 74, 28, 47, 18, 86, 41, 39, 93, 13, 52, 69, 76, 59, 94, 14, 15, 11, 83, 55, 41, 79, 75, 74, 70, 42, 88, 54, 27, 20, 18, 22, 67, 87, 77, 42, 98, 63, 19, 91, 74, 43, 57, 86, 39, 87, 35, 1, 77, 63, 55, 21, 38, 80, 56, 95, 53, 86, 30, 59, 64, 92, 90, 29, 96, 68, 47, 36, 27, 32, 78, 74, 39, 90, 61, 17, 31, 68, 63, 47, 25, 23, 51, 60, 27, 58, 71, 9, 76, 17, 31, 47, 39, 51, 55, 3, 0, 16, 12, 38, 65, 44, 77, 57, 9, 35, 15, 96, 61, 62, 37, 98, 16, 55, 83, 42, 58, 32, 32, 28, 65, 75, 57, 44, 35, 84, 27, 60, 30, 75, 60, 60, 61, 8, 40, 59, 14, 79, 15, 12, 48, 44, 0, 59, 84, 65, 4, 39, 28, 50, 43, 55, 61, 62, 84, 18, 42, 35, 20, 20, 22, 28, 89, 24, 0, 41, 61, 14, 13, 43, 4, 18, 71, 73, 12, 14, 88, 78, 45, 36, 13, 57, 15, 0, 34, 39, 70, 72, 43, 74, 12, 51, 88, 8, 43, 5, 57, 50, 84, 92, 51, 77, 59, 76, 17, 7, 79, 13, 19, 89, 69, 41, 80, 90, 98, 5, 61, 68, 71, 79, 92, 16, 75, 11, 39, 20]
last_save: 725

Gen:2
TrainFitness:0.7777777777777778
TestFitness:1.0
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],-934890.9780).all():
      return False
    else:
      return False
  def adf1(index):
    if np.greater(x[index],-883892.7450).all():
      return False
    else:
      return False
  def adf2(index):
    if np.equal(sigmoid(x[index]),+655422.9313).all():
      return True
    else:
      return True
  def adf3(index):
    if np.greater(x[index],-030303.5679).all():
      return False
    else:
      return True
  def adf4(index):
    if np.greater(x[index],-740067.8615).all():
      return True
    else:
      return False
  def adf5(index):
    if np.equal(np.tanh(x[index]),+346300.6909).all():
      return True
    else:
      return False
  def adf6(index):
    if np.equal(np.tanh(x[index]),+113963.6685).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(np.cos(x[index]),-061019.2818).all():
      return True
    else:
      return False
  def adf8(index):
    if np.greater(x[index],+033126.9693).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+838.270, adf1(1)*-440.932, adf2(2)*+748.741, adf3(3)*+569.796, adf4(4)*-381.715, adf5(5)*+983.861, adf6(6)*+409.626, adf7(7)*-329.064, adf8(8)*+275.757], [1, 1, 1, 0, 1, 0, 1, 0], 762.710)
result=p(); 0.7777777777777778
IndLenGenome:415
IndGenome:[94, 14, 44, 12, 89, 53, 39, 73, 60, 25, 6, 20, 59, 65, 97, 83, 87, 38, 47, 48, 47, 83, 73, 89, 36, 88, 49, 77, 74, 94, 11, 26, 32, 6, 91, 13, 18, 29, 25, 47, 41, 98, 31, 12, 92, 61, 7, 58, 26, 3, 19, 31, 92, 60, 15, 76, 62, 24, 42, 18, 35, 26, 66, 97, 29, 54, 67, 2, 24, 40, 31, 48, 25, 53, 31, 36, 63, 87, 26, 84, 41, 7, 57, 57, 62, 67, 52, 86, 55, 80, 40, 29, 48, 89, 59, 94, 40, 52, 19, 70, 52, 25, 65, 71, 2, 83, 76, 36, 80, 83, 26, 49, 61, 15, 90, 21, 83, 76, 22, 56, 87, 99, 53, 70, 72, 93, 32, 26, 73, 92, 72, 56, 68, 47, 80, 86, 49, 16, 99, 27, 48, 25, 34, 56, 54, 77, 84, 80, 75, 58, 93, 67, 83, 33, 64, 21, 66, 4, 30, 56, 38, 10, 7, 93, 37, 86, 63, 57, 78, 41, 39, 92, 26, 5, 26, 78, 13, 21, 68, 20, 37, 30, 43, 19, 33, 58, 20, 35, 75, 27, 42, 65, 39, 55, 71, 2, 19, 78, 14, 57, 75, 39, 64, 80, 52, 98, 67, 24, 12, 45, 30, 89, 70, 53, 88, 32, 76, 82, 50, 26, 39, 86, 81, 67, 85, 26, 60, 57, 73, 49, 79, 29, 17, 30, 13, 68, 31, 22, 96, 40, 65, 63, 29, 95, 39, 39, 47, 61, 37, 99, 58, 32, 28, 62, 35, 51, 79, 90, 60, 23, 96, 74, 47, 65, 57, 63, 73, 92, 42, 34, 24, 23, 29, 99, 33, 12, 11, 37, 75, 21, 87, 55, 57, 99, 7, 69, 97, 43, 81, 86, 22, 24, 26, 77, 86, 88, 23, 38, 9, 0, 94, 83, 41, 71, 95, 67, 100, 38, 81, 89, 10, 61, 75, 10, 14, 96, 71, 74, 69, 47, 76, 68, 20, 94, 28, 50, 64, 41, 84, 86, 22, 65, 12, 41, 29, 96, 58, 31, 51, 67, 30, 26, 20, 10, 28, 70, 77, 54, 88, 20, 78, 49, 7, 88, 3, 47, 15, 78, 48, 45, 34, 78, 71, 71, 11, 93, 79, 71, 78, 65, 11, 69, 52, 73, 37, 52, 71, 69, 36, 52, 21, 72, 87, 71, 43, 82, 43, 23, 59, 8, 12, 90, 57, 13, 0, 85, 100, 74, 11, 23, 31, 58, 28, 100, 14, 60, 21, 86, 33, 52, 80, 15, 37, 76, 49]
last_save: 725

Gen:2002
last_save: 725
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:1.0
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],+647034.1405).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(rlog(x[index]),+245316.7416).all():
      return True
    else:
      return False
  def adf2(index):
    if np.less(rlog(x[index]),+892187.6857).all():
      return False
    else:
      return True
  def adf3(index):
    if np.greater(x[index],-349224.4627).all():
      return False
    else:
      return True
  def adf4(index):
    if np.equal(x[index],+486962.1606).all():
      return False
    else:
      return False
  def adf5(index):
    if np.less(x[index],-257446.3856).all():
      return False
    else:
      return False
  def adf6(index):
    if np.greater(x[index],+644752.2805).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(x[index],+230950.8211).all():
      return True
    else:
      return True
  def adf8(index):
    if np.less(x[index],+335419.0261).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*-717.821, adf1(1)*+132.927, adf2(2)*-993.410, adf3(3)*+385.546, adf4(4)*+193.270, adf5(5)*-130.981, adf6(6)*-743.366, adf7(7)*-875.980, adf8(8)*-271.922], [1, 0, 0, 1, 1, 1, 0, 0], 987.767)
result=p(); 0.6666666666666666
IndLenGenome:412
IndGenome:[34, 56, 29, 13, 59, 1, 32, 44, 13, 79, 22, 62, 81, 95, 58, 11, 55, 63, 99, 45, 83, 30, 39, 83, 97, 35, 79, 99, 19, 39, 55, 84, 69, 73, 49, 26, 49, 18, 79, 17, 30, 95, 47, 89, 35, 54, 41, 30, 48, 52, 53, 96, 64, 95, 93, 53, 97, 16, 13, 6, 48, 62, 97, 97, 65, 33, 91, 51, 14, 56, 57, 53, 18, 44, 38, 37, 92, 66, 17, 27, 16, 9, 13, 30, 18, 78, 76, 17, 82, 74, 78, 72, 65, 86, 81, 49, 28, 3, 92, 20, 70, 93, 21, 19, 70, 91, 10, 81, 84, 49, 57, 17, 35, 33, 5, 42, 22, 28, 45, 63, 16, 16, 48, 94, 52, 51, 24, 14, 9, 77, 82, 80, 97, 64, 48, 76, 65, 84, 62, 15, 67, 26, 69, 77, 19, 58, 12, 43, 6, 19, 47, 3, 21, 30, 94, 86, 95, 47, 83, 38, 14, 19, 90, 61, 22, 93, 59, 89, 27, 80, 90, 29, 22, 91, 52, 96, 45, 52, 83, 68, 26, 42, 69, 91, 35, 40, 86, 97, 69, 71, 45, 42, 81, 23, 23, 87, 38, 64, 36, 38, 76, 77, 86, 38, 64, 66, 17, 16, 38, 96, 22, 93, 32, 58, 66, 71, 41, 83, 40, 66, 18, 18, 44, 81, 39, 42, 90, 37, 78, 70, 38, 95, 12, 95, 36, 38, 55, 58, 94, 61, 51, 62, 42, 46, 76, 73, 2, 90, 28, 65, 84, 95, 22, 43, 53, 69, 46, 63, 47, 96, 91, 34, 21, 84, 58, 33, 76, 23, 66, 15, 24, 35, 84, 19, 62, 21, 59, 11, 91, 35, 85, 4, 41, 68, 56, 11, 29, 30, 71, 98, 29, 0, 25, 5, 42, 100, 86, 36, 30, 67, 81, 72, 42, 47, 34, 25, 46, 65, 35, 91, 79, 32, 3, 9, 5, 27, 37, 35, 87, 47, 36, 31, 50, 11, 24, 3, 51, 93, 23, 36, 98, 59, 7, 88, 3, 42, 67, 96, 42, 0, 55, 56, 8, 86, 59, 29, 45, 36, 29, 85, 64, 49, 74, 31, 45, 83, 96, 13, 17, 44, 31, 63, 97, 24, 80, 54, 23, 71, 43, 54, 26, 66, 79, 61, 30, 82, 83, 9, 21, 44, 10, 19, 72, 24, 82, 82, 42, 52, 89, 64, 92, 45, 63, 19, 47, 21, 1, 8, 53, 51, 59, 71, 20, 7, 100, 12, 52, 22, 49, 92, 28, 73]
last_save: 726

Gen:82
TrainFitness:0.7777777777777778
TestFitness:0.8888888888888888
MaxGenLen:515
Individual: def p():
  def adf0(index):
    if np.greater(sigmoid(x[index]),-149106.7435).all():
      return True
    else:
      return False
  def adf1(index):
    if np.greater(x[index],+356160.5758).all():
      return True
    else:
      return False
  def adf2(index):
    if np.greater(x[index],-392821.4147).all():
      return True
    else:
      return False
  def adf3(index):
    if np.less(x[index],+460573.8571).all():
      return False
    else:
      return True
  def adf4(index):
    if np.equal(x[index],+087995.8518).all():
      return False
    else:
      return False
  def adf5(index):
    if np.less(x[index],+021601.6998).all():
      return False
    else:
      return True
  def adf6(index):
    if np.equal(rlog(x[index]),-248121.2097).all():
      return True
    else:
      return False
  def adf7(index):
    if np.less(sigmoid(x[index]),-587755.1374).all():
      return True
    else:
      return True
  def adf8(index):
    if np.equal(np.cos(x[index]),+530479.6519).all():
      if np.less(x[index],-968380.1706).all():
        return False
      else:
        return True
      return False
    else:
      if np.equal(x[index],-763722.1978).all():
        return True
      else:
        return True
      return False
  return multiple_operation([adf0(0)*+542.368, adf1(1)*-852.736, adf2(2)*-592.128, adf3(3)*+797.585, adf4(4)*+559.744, adf5(5)*-574.227, adf6(6)*+963.876, adf7(7)*+485.612, adf8(8)*+368.223], [0, 1, 1, 1, 1, 0, 1, 1], 328.694)
result=p(); 0.7777777777777778
IndLenGenome:416
IndGenome:[31, 89, 80, 35, 51, 40, 63, 12, 45, 62, 81, 44, 49, 21, 90, 56, 67, 54, 73, 45, 4, 15, 37, 27, 57, 71, 90, 22, 69, 93, 75, 36, 71, 76, 70, 85, 7, 15, 68, 62, 35, 73, 65, 12, 49, 47, 85, 95, 13, 19, 82, 38, 82, 91, 54, 21, 74, 7, 60, 99, 73, 53, 16, 73, 8, 68, 59, 54, 26, 30, 15, 47, 13, 48, 25, 77, 71, 65, 26, 11, 49, 92, 51, 77, 98, 66, 50, 58, 27, 39, 29, 15, 98, 95, 51, 68, 57, 15, 35, 11, 49, 29, 29, 90, 85, 90, 22, 51, 86, 50, 91, 36, 9, 59, 28, 43, 90, 99, 77, 26, 74, 46, 75, 87, 3, 52, 94, 8, 51, 82, 51, 72, 10, 39, 47, 50, 63, 69, 69, 25, 94, 81, 15, 75, 55, 25, 18, 37, 37, 85, 15, 81, 23, 47, 84, 44, 80, 42, 10, 47, 92, 10, 43, 90, 14, 75, 65, 43, 80, 14, 97, 69, 36, 55, 11, 29, 7, 61, 19, 10, 9, 89, 49, 66, 98, 23, 38, 90, 11, 97, 70, 36, 17, 60, 47, 49, 17, 49, 58, 53, 72, 87, 76, 53, 57, 62, 32, 41, 29, 37, 78, 68, 36, 77, 31, 35, 48, 80, 20, 15, 24, 32, 33, 46, 78, 99, 51, 23, 28, 95, 82, 67, 3, 86, 54, 91, 43, 15, 49, 92, 51, 32, 98, 66, 50, 96, 27, 39, 87, 15, 98, 95, 51, 68, 95, 15, 35, 29, 67, 64, 44, 32, 45, 21, 75, 47, 24, 52, 82, 17, 12, 16, 97, 49, 6, 43, 58, 97, 6, 67, 82, 99, 44, 78, 55, 56, 41, 2, 65, 52, 85, 73, 16, 68, 62, 52, 73, 65, 12, 49, 47, 85, 95, 26, 25, 63, 35, 23, 52, 8, 46, 89, 54, 99, 44, 78, 55, 56, 41, 33, 75, 51, 37, 84, 20, 71, 16, 45, 27, 45, 48, 36, 48, 85, 49, 78, 69, 85, 80, 43, 30, 31, 22, 32, 13, 55, 28, 52, 27, 76, 50, 24, 36, 9, 59, 28, 43, 74, 17, 8, 33, 27, 24, 21, 23, 67, 96, 37, 27, 60, 67, 70, 83, 49, 20, 24, 50, 22, 87, 57, 66, 18, 18, 48, 31, 15, 55, 87, 45, 66, 55, 69, 82, 82, 2, 90, 3, 5, 18, 92, 12, 90, 9, 48, 50, 72, 50, 41, 32, 17, 81, 41, 7, 85, 97, 20]
last_save: 726

Gen:2082
last_save: 726
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.8888888888888888
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(np.tanh(x[index]),-696057.7491).all():
      return False
    else:
      return False
  def adf1(index):
    if np.equal(x[index],-700412.1526).all():
      return True
    else:
      return False
  def adf2(index):
    if np.equal(x[index],-776907.0332).all():
      return False
    else:
      return True
  def adf3(index):
    if np.greater(x[index],+106965.0665).all():
      return True
    else:
      return False
  def adf4(index):
    if np.less(np.sin(x[index]),-856237.6898).all():
      return False
    else:
      return False
  def adf5(index):
    if np.equal(np.cos(x[index]),+577064.2835).all():
      return False
    else:
      return False
  def adf6(index):
    if np.less(x[index],+754984.2934).all():
      return False
    else:
      return True
  def adf7(index):
    if np.equal(sigmoid(x[index]),+318039.6586).all():
      return False
    else:
      return False
  def adf8(index):
    if np.less(x[index],+775629.1064).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*-417.187, adf1(1)*-737.239, adf2(2)*-822.117, adf3(3)*+982.990, adf4(4)*-256.929, adf5(5)*-061.100, adf6(6)*+413.600, adf7(7)*+811.994, adf8(8)*+585.840], [0, 0, 0, 0, 0, 1, 0, 0], 582.342)
result=p(); 0.6666666666666666
IndLenGenome:415
IndGenome:[82, 97, 1, 34, 51, 92, 71, 27, 29, 57, 21, 31, 11, 35, 13, 25, 70, 51, 97, 11, 98, 67, 57, 75, 11, 45, 32, 14, 27, 20, 68, 95, 81, 69, 21, 32, 51, 49, 75, 31, 54, 12, 12, 48, 89, 52, 78, 75, 94, 8, 59, 94, 21, 36, 63, 47, 45, 85, 96, 62, 77, 29, 74, 50, 96, 41, 77, 87, 10, 79, 91, 73, 5, 56, 39, 35, 15, 80, 10, 31, 82, 72, 12, 16, 70, 76, 95, 8, 11, 44, 85, 9, 56, 77, 91, 41, 86, 55, 52, 5, 61, 90, 26, 66, 90, 96, 67, 76, 7, 72, 66, 82, 93, 71, 69, 79, 58, 96, 70, 81, 27, 6, 6, 52, 91, 41, 34, 55, 33, 96, 54, 76, 76, 45, 97, 67, 55, 99, 23, 79, 91, 48, 76, 79, 29, 51, 77, 13, 28, 12, 80, 55, 82, 8, 88, 80, 94, 41, 49, 78, 69, 41, 27, 58, 88, 56, 25, 89, 74, 91, 40, 85, 17, 92, 23, 71, 50, 20, 49, 99, 96, 87, 91, 85, 78, 48, 19, 30, 20, 46, 40, 47, 34, 21, 24, 82, 91, 52, 51, 15, 27, 57, 69, 11, 88, 88, 7, 89, 81, 36, 43, 56, 70, 74, 25, 23, 47, 18, 12, 66, 63, 82, 57, 4, 37, 74, 82, 90, 35, 94, 19, 84, 47, 68, 10, 48, 39, 61, 21, 43, 41, 79, 69, 27, 64, 32, 56, 84, 7, 60, 55, 7, 96, 46, 24, 33, 61, 90, 50, 51, 77, 82, 11, 45, 56, 77, 70, 35, 63, 38, 48, 5, 59, 78, 16, 82, 18, 60, 87, 1, 99, 50, 39, 59, 60, 57, 31, 6, 90, 8, 8, 64, 27, 71, 33, 63, 67, 72, 54, 28, 80, 95, 67, 23, 81, 98, 1, 85, 57, 91, 55, 59, 69, 78, 84, 0, 57, 88, 13, 49, 16, 91, 70, 100, 24, 76, 85, 9, 91, 15, 86, 0, 79, 22, 98, 37, 30, 21, 52, 60, 87, 20, 91, 63, 69, 28, 14, 48, 51, 22, 76, 9, 55, 10, 44, 44, 61, 18, 52, 14, 0, 71, 83, 23, 37, 53, 59, 36, 67, 39, 48, 53, 94, 97, 94, 15, 59, 71, 58, 2, 86, 40, 48, 97, 31, 98, 3, 22, 95, 80, 80, 28, 38, 44, 5, 50, 94, 61, 71, 21, 74, 45, 66, 28, 46, 91, 0, 83, 58, 93, 1, 87, 36, 53, 82]
last_save: 727

Gen:7
TrainFitness:0.7777777777777778
TestFitness:0.7777777777777778
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],+015107.0470).all():
      return False
    else:
      return True
  def adf1(index):
    if np.equal(x[index],-119319.7712).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(rlog(x[index]),+802747.1276).all():
      return False
    else:
      return False
  def adf3(index):
    if np.equal(np.cos(x[index]),+528061.3963).all():
      return False
    else:
      return False
  def adf4(index):
    if np.equal(psqrt(x[index]),+860944.5734).all():
      return False
    else:
      return False
  def adf5(index):
    if np.less(x[index],-311458.3289).all():
      return False
    else:
      return False
  def adf6(index):
    if np.greater(psqrt(x[index]),-321825.7019).all():
      return False
    else:
      return False
  def adf7(index):
    if np.less(np.cos(x[index]),-921668.0163).all():
      return True
    else:
      return True
  def adf8(index):
    if np.equal(psqrt(x[index]),-626997.2937).all():
      if np.equal(x[index],-709169.7673).all():
        return True
      else:
        return False
      return False
    else:
      if np.greater(x[index],+799407.6075).all():
        return False
      else:
        return False
      return True
  return multiple_operation([adf0(0)*-135.048, adf1(1)*-799.407, adf2(2)*+595.880, adf3(3)*-595.987, adf4(4)*+766.986, adf5(5)*-231.288, adf6(6)*-206.661, adf7(7)*-571.727, adf8(8)*+388.999], [1, 1, 0, 1, 0, 0, 0, 0], 521.459)
result=p(); 0.7777777777777778
IndLenGenome:420
IndGenome:[36, 69, 84, 55, 7, 67, 2, 54, 27, 60, 11, 75, 71, 80, 27, 30, 94, 97, 70, 95, 22, 84, 29, 44, 1, 75, 73, 56, 31, 91, 69, 13, 1, 19, 37, 47, 41, 52, 9, 13, 55, 51, 36, 54, 76, 55, 56, 17, 48, 10, 22, 87, 24, 57, 11, 32, 87, 26, 37, 7, 57, 71, 5, 4, 43, 71, 86, 94, 85, 82, 58, 70, 96, 81, 33, 39, 66, 93, 91, 27, 31, 13, 56, 76, 53, 61, 4, 22, 88, 6, 80, 99, 54, 64, 15, 67, 33, 34, 77, 59, 66, 27, 37, 83, 29, 57, 37, 43, 51, 91, 34, 15, 58, 43, 82, 88, 59, 55, 19, 7, 57, 48, 40, 11, 35, 41, 50, 43, 72, 71, 48, 42, 55, 67, 60, 71, 99, 57, 35, 41, 51, 64, 80, 37, 60, 9, 11, 99, 32, 41, 56, 6, 68, 60, 31, 56, 13, 28, 92, 23, 68, 38, 74, 44, 35, 7, 9, 94, 56, 32, 86, 39, 59, 87, 32, 59, 33, 77, 99, 89, 39, 42, 95, 73, 27, 60, 19, 61, 96, 9, 87, 16, 17, 73, 8, 19, 27, 55, 33, 9, 27, 14, 64, 67, 99, 29, 64, 10, 67, 76, 80, 57, 55, 39, 95, 28, 82, 36, 55, 69, 33, 51, 13, 55, 60, 44, 98, 96, 23, 88, 67, 99, 29, 64, 10, 67, 76, 80, 57, 55, 39, 95, 28, 98, 30, 68, 19, 98, 75, 69, 95, 59, 78, 37, 56, 12, 78, 17, 16, 46, 89, 18, 46, 31, 31, 76, 12, 83, 31, 62, 48, 38, 16, 85, 91, 42, 90, 36, 86, 76, 41, 61, 15, 72, 65, 7, 91, 27, 22, 97, 96, 82, 45, 53, 58, 58, 19, 29, 99, 89, 49, 49, 42, 37, 2, 24, 94, 36, 84, 55, 22, 91, 94, 45, 79, 43, 14, 93, 39, 39, 25, 28, 85, 54, 78, 31, 25, 98, 34, 80, 42, 23, 23, 57, 96, 5, 96, 51, 27, 22, 60, 17, 40, 75, 14, 23, 33, 5, 90, 13, 12, 66, 16, 26, 5, 65, 27, 19, 65, 38, 15, 36, 97, 70, 53, 0, 56, 7, 31, 62, 30, 68, 12, 6, 45, 73, 18, 97, 76, 57, 21, 1, 73, 9, 14, 23, 70, 66, 65, 21, 64, 81, 68, 27, 78, 96, 21, 10, 11, 25, 0, 8, 7, 98, 43, 12, 85, 64, 58, 50, 85, 100, 35, 44, 80, 50, 59, 12, 89, 29]
last_save: 727

Gen:2007
last_save: 727
Exit:FalseFalseTrue