Dataset:Spiral/Full.csv
FS:False
Seed:1236
Size:7

Gen:1
TrainFitness:0.7777777777777778
TestFitness:0.5555555555555556
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],+756009.0035).all():
      return False
    else:
      return True
  def adf1(index):
    if np.equal(x[index],+955748.8881).all():
      return False
    else:
      return True
  def adf2(index):
    if np.equal(x[index],-617623.7976).all():
      return False
    else:
      return True
  def adf3(index):
    if np.less(x[index],-213789.4627).all():
      return False
    else:
      return True
  def adf4(index):
    if np.greater(np.cos(x[index]),+454000.5382).all():
      return True
    else:
      return True
  def adf5(index):
    if np.equal(x[index],-347950.4471).all():
      return True
    else:
      return True
  def adf6(index):
    if np.equal(x[index],-074800.1592).all():
      return False
    else:
      return True
  def adf7(index):
    if np.greater(x[index],+670595.0160).all():
      return True
    else:
      return True
  def adf8(index):
    if np.less(sigmoid(x[index]),+458191.2362).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+099.646, adf1(1)*-747.700, adf2(2)*-086.414, adf3(3)*-283.133, adf4(4)*+239.156, adf5(5)*+116.465, adf6(6)*-169.228, adf7(7)*-007.005, adf8(8)*+886.709], [1, 1, 1, 0, 1, 1, 1, 1], 526.711)
result=p(); 0.7777777777777778
IndLenGenome:412
IndGenome:[79, 59, 85, 71, 62, 21, 44, 63, 79, 37, 8, 93, 59, 18, 86, 71, 34, 92, 28, 75, 19, 34, 54, 39, 1, 74, 75, 51, 96, 40, 87, 16, 85, 28, 45, 39, 94, 63, 58, 77, 39, 85, 31, 11, 60, 40, 67, 39, 63, 73, 89, 27, 27, 16, 92, 67, 22, 45, 79, 41, 97, 57, 33, 13, 80, 40, 77, 85, 32, 39, 31, 57, 12, 65, 66, 14, 33, 42, 27, 66, 67, 76, 26, 30, 66, 11, 42, 62, 20, 60, 53, 1, 19, 67, 66, 24, 72, 86, 84, 69, 70, 53, 13, 15, 5, 64, 87, 87, 41, 63, 84, 81, 73, 38, 11, 75, 80, 34, 94, 85, 32, 69, 48, 20, 16, 69, 66, 57, 89, 57, 7, 19, 62, 41, 21, 66, 30, 73, 31, 82, 92, 3, 20, 26, 32, 61, 37, 52, 14, 81, 15, 87, 56, 78, 93, 69, 16, 65, 91, 97, 16, 38, 23, 62, 70, 19, 60, 76, 36, 80, 89, 75, 83, 2, 79, 8, 47, 56, 75, 71, 88, 28, 87, 32, 40, 6, 18, 46, 50, 45, 69, 69, 95, 78, 27, 41, 33, 81, 67, 96, 30, 3, 55, 72, 60, 4, 19, 30, 59, 80, 9, 87, 95, 92, 15, 69, 28, 15, 12, 89, 90, 67, 46, 60, 23, 24, 15, 89, 14, 98, 48, 34, 37, 81, 60, 97, 78, 76, 91, 98, 18, 65, 64, 95, 10, 50, 85, 53, 70, 80, 10, 32, 18, 94, 78, 89, 96, 98, 60, 17, 21, 45, 72, 63, 96, 95, 34, 74, 14, 26, 81, 41, 76, 45, 88, 32, 73, 22, 53, 5, 55, 56, 46, 63, 44, 13, 14, 34, 85, 94, 61, 36, 92, 5, 42, 22, 30, 43, 64, 18, 23, 79, 17, 86, 98, 27, 99, 70, 95, 68, 61, 48, 91, 56, 25, 53, 18, 55, 74, 90, 84, 55, 23, 23, 26, 40, 34, 48, 18, 61, 78, 12, 92, 50, 52, 33, 70, 74, 62, 41, 67, 99, 34, 90, 13, 17, 33, 22, 6, 98, 93, 90, 20, 69, 64, 52, 67, 52, 94, 75, 53, 74, 65, 31, 60, 56, 53, 22, 94, 21, 47, 63, 37, 99, 75, 38, 59, 18, 73, 2, 31, 76, 9, 96, 9, 79, 68, 93, 98, 3, 56, 89, 55, 28, 1, 55, 12, 93, 2, 26, 58, 15, 35, 43, 79, 10, 23, 16, 11, 53, 36, 82]
last_save: 721

Gen:2001
last_save: 721
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],-498119.4333).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(x[index],-664627.3013).all():
      return True
    else:
      return True
  def adf2(index):
    if np.equal(psqrt(x[index]),-334279.9099).all():
      return True
    else:
      return True
  def adf3(index):
    if np.greater(x[index],+027841.1393).all():
      return True
    else:
      return False
  def adf4(index):
    if np.greater(x[index],-255608.8376).all():
      return False
    else:
      return True
  def adf5(index):
    if np.greater(x[index],+825433.7793).all():
      return True
    else:
      return False
  def adf6(index):
    if np.greater(x[index],+727669.5849).all():
      return False
    else:
      return False
  def adf7(index):
    if np.less(x[index],+426890.3162).all():
      return False
    else:
      return False
  def adf8(index):
    if np.equal(x[index],+378489.2019).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+693.416, adf1(1)*+489.393, adf2(2)*+815.498, adf3(3)*-798.723, adf4(4)*-667.016, adf5(5)*-594.890, adf6(6)*+270.182, adf7(7)*-005.055, adf8(8)*-263.558], [0, 1, 0, 1, 0, 0, 1, 0], 967.662)
result=p(); 0.6666666666666666
IndLenGenome:411
IndGenome:[36, 79, 32, 99, 22, 48, 20, 2, 34, 4, 45, 59, 13, 31, 78, 6, 93, 52, 5, 83, 37, 57, 82, 40, 40, 26, 90, 62, 10, 33, 47, 95, 59, 74, 43, 29, 97, 61, 55, 57, 48, 66, 36, 77, 55, 40, 27, 30, 67, 26, 77, 34, 56, 85, 94, 62, 45, 98, 96, 3, 85, 61, 97, 53, 33, 9, 77, 58, 72, 14, 49, 69, 69, 94, 17, 69, 47, 76, 66, 89, 46, 69, 18, 59, 86, 73, 21, 88, 11, 13, 60, 69, 88, 63, 24, 30, 7, 74, 77, 29, 42, 82, 82, 26, 68, 27, 48, 78, 22, 99, 95, 43, 68, 49, 39, 65, 11, 81, 76, 28, 68, 93, 75, 36, 53, 72, 6, 94, 3, 71, 78, 69, 79, 22, 8, 17, 6, 92, 67, 49, 67, 61, 79, 16, 98, 75, 85, 42, 56, 96, 61, 16, 12, 63, 51, 94, 45, 11, 27, 49, 22, 66, 51, 99, 79, 63, 83, 44, 85, 39, 26, 56, 73, 28, 12, 56, 32, 80, 57, 33, 38, 92, 86, 84, 96, 84, 57, 5, 50, 42, 24, 67, 75, 83, 63, 78, 62, 91, 52, 67, 79, 23, 30, 95, 33, 25, 41, 69, 80, 78, 10, 13, 49, 49, 85, 57, 14, 52, 74, 59, 31, 24, 87, 13, 29, 51, 36, 99, 52, 70, 53, 49, 90, 13, 45, 94, 72, 99, 28, 64, 56, 61, 82, 44, 40, 60, 71, 61, 98, 78, 13, 39, 25, 95, 89, 58, 33, 15, 41, 50, 94, 60, 82, 75, 34, 29, 36, 29, 43, 17, 73, 26, 50, 28, 80, 21, 15, 15, 74, 69, 5, 74, 80, 79, 77, 86, 88, 27, 18, 50, 26, 28, 99, 53, 59, 67, 36, 70, 58, 27, 99, 59, 21, 38, 46, 31, 54, 37, 79, 97, 25, 14, 58, 94, 6, 81, 41, 44, 40, 8, 73, 69, 54, 17, 96, 80, 42, 75, 6, 91, 98, 55, 8, 93, 86, 86, 69, 90, 3, 6, 62, 93, 50, 90, 43, 37, 11, 17, 34, 76, 85, 87, 81, 78, 79, 1, 35, 66, 8, 7, 7, 15, 16, 83, 40, 97, 30, 58, 52, 53, 44, 28, 30, 89, 14, 50, 66, 35, 56, 25, 15, 33, 85, 79, 73, 89, 37, 91, 98, 83, 96, 4, 28, 14, 16, 32, 58, 63, 76, 20, 37, 96, 24, 93, 63, 11, 87, 37, 2, 94, 55]
last_save: 722

Gen:28
TrainFitness:0.7777777777777778
TestFitness:0.4444444444444444
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],+333656.9612).all():
      return False
    else:
      return True
  def adf1(index):
    if np.less(psqrt(x[index]),+220984.1260).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(x[index],-096748.4332).all():
      return False
    else:
      return False
  def adf3(index):
    if np.equal(psqrt(x[index]),+514720.7399).all():
      return True
    else:
      return False
  def adf4(index):
    if np.greater(np.cos(x[index]),-684261.0225).all():
      return False
    else:
      return False
  def adf5(index):
    if np.less(x[index],-267013.9575).all():
      return False
    else:
      return False
  def adf6(index):
    if np.equal(x[index],-486102.2591).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(x[index],+006395.7593).all():
      return True
    else:
      return False
  def adf8(index):
    if np.less(x[index],-616797.6506).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*-349.712, adf1(1)*+013.957, adf2(2)*-616.797, adf3(3)*-935.583, adf4(4)*+137.322, adf5(5)*+538.175, adf6(6)*+090.971, adf7(7)*-412.271, adf8(8)*+538.308], [1, 1, 1, 1, 1, 0, 0, 0], 013.957)
result=p(); 0.7777777777777778
IndLenGenome:441
IndGenome:[15, 14, 48, 59, 22, 75, 9, 76, 74, 93, 23, 43, 16, 15, 86, 99, 66, 21, 72, 23, 50, 39, 75, 58, 26, 5, 59, 20, 46, 32, 2, 50, 9, 78, 34, 91, 12, 86, 70, 23, 61, 80, 13, 54, 79, 98, 39, 73, 90, 19, 56, 77, 64, 68, 84, 73, 23, 92, 37, 35, 68, 1, 86, 80, 59, 43, 40, 94, 85, 31, 14, 67, 32, 30, 27, 73, 9, 79, 58, 91, 52, 15, 39, 54, 55, 45, 43, 20, 26, 98, 84, 32, 26, 31, 90, 22, 22, 95, 59, 71, 72, 13, 64, 49, 57, 91, 82, 72, 36, 87, 20, 61, 73, 99, 55, 87, 95, 69, 23, 76, 81, 35, 17, 39, 97, 98, 84, 8, 26, 31, 90, 22, 22, 95, 59, 71, 72, 13, 64, 49, 57, 91, 82, 72, 36, 20, 20, 36, 73, 99, 55, 87, 95, 69, 23, 76, 81, 56, 99, 55, 87, 95, 69, 23, 76, 81, 56, 17, 39, 97, 66, 45, 60, 56, 43, 83, 65, 95, 59, 95, 51, 13, 64, 49, 57, 91, 82, 72, 36, 20, 20, 61, 73, 99, 55, 87, 95, 69, 23, 76, 81, 56, 17, 39, 97, 32, 45, 60, 9, 43, 65, 65, 78, 23, 18, 50, 44, 51, 63, 27, 73, 62, 52, 63, 52, 24, 75, 63, 88, 21, 7, 55, 22, 10, 20, 70, 29, 60, 29, 37, 31, 45, 85, 56, 74, 21, 72, 52, 27, 51, 83, 20, 61, 75, 83, 18, 93, 90, 38, 32, 77, 63, 49, 3, 91, 82, 72, 36, 20, 20, 61, 73, 99, 55, 87, 95, 69, 23, 76, 81, 76, 17, 36, 20, 20, 61, 73, 99, 55, 18, 95, 69, 23, 76, 81, 56, 99, 55, 87, 75, 69, 23, 76, 81, 56, 17, 39, 97, 66, 45, 60, 56, 43, 83, 65, 78, 23, 18, 50, 32, 51, 63, 27, 73, 38, 52, 63, 52, 24, 75, 63, 88, 21, 7, 55, 22, 10, 20, 70, 29, 60, 29, 37, 31, 45, 85, 56, 74, 21, 72, 52, 27, 81, 83, 20, 49, 57, 91, 82, 72, 36, 20, 20, 75, 71, 8, 38, 42, 22, 37, 80, 41, 3, 60, 61, 4, 87, 23, 41, 86, 22, 53, 18, 69, 47, 95, 0, 79, 84, 25, 26, 0, 39, 64, 100, 85, 93, 59, 34, 65, 6, 70, 89, 23, 39, 35, 25, 24, 82, 69, 14, 100, 98, 18, 64, 73, 35, 3, 78, 84, 72, 93, 62, 15, 22, 79, 66, 38, 91, 41, 62, 23, 59, 40, 46, 3, 79, 61, 43, 82, 71]
last_save: 722

Gen:2028
last_save: 722
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.5555555555555556
TestFitness:0.7777777777777778
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(np.cos(x[index]),-305440.5526).all():
      return True
    else:
      return True
  def adf1(index):
    if np.greater(psqrt(x[index]),-635524.2884).all():
      return True
    else:
      return False
  def adf2(index):
    if np.greater(x[index],-013078.2193).all():
      return True
    else:
      return False
  def adf3(index):
    if np.equal(x[index],+991861.2814).all():
      return False
    else:
      return True
  def adf4(index):
    if np.equal(psqrt(x[index]),-918495.6092).all():
      return True
    else:
      return True
  def adf5(index):
    if np.equal(x[index],+858773.6028).all():
      return True
    else:
      return False
  def adf6(index):
    if np.equal(psqrt(x[index]),-746524.1641).all():
      return False
    else:
      return True
  def adf7(index):
    if np.greater(x[index],-981974.2169).all():
      return True
    else:
      return False
  def adf8(index):
    if np.equal(x[index],+879820.3479).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+130.013, adf1(1)*-130.283, adf2(2)*-894.620, adf3(3)*-330.202, adf4(4)*+125.953, adf5(5)*-390.173, adf6(6)*+895.195, adf7(7)*+883.604, adf8(8)*+334.101], [0, 1, 1, 1, 1, 0, 0, 0], 937.601)
result=p(); 0.5555555555555556
IndLenGenome:415
IndGenome:[92, 65, 30, 40, 3, 82, 60, 31, 52, 13, 3, 49, 46, 21, 38, 40, 93, 84, 37, 62, 99, 3, 61, 62, 6, 51, 77, 48, 53, 36, 42, 15, 5, 84, 59, 51, 48, 43, 23, 27, 80, 27, 57, 28, 64, 97, 96, 50, 68, 90, 84, 45, 53, 75, 68, 76, 2, 85, 40, 56, 75, 79, 4, 22, 13, 79, 11, 41, 94, 82, 84, 54, 29, 98, 59, 54, 52, 49, 11, 38, 93, 50, 83, 67, 66, 17, 40, 52, 76, 73, 87, 42, 99, 98, 52, 90, 89, 73, 79, 90, 50, 12, 61, 45, 95, 21, 95, 49, 60, 83, 59, 57, 55, 77, 77, 21, 14, 21, 53, 80, 24, 79, 46, 52, 15, 88, 88, 99, 51, 15, 83, 52, 15, 5, 95, 52, 24, 82, 16, 78, 28, 70, 90, 2, 54, 90, 81, 74, 26, 12, 78, 31, 55, 43, 81, 74, 57, 54, 13, 52, 69, 25, 20, 6, 11, 74, 94, 65, 58, 87, 88, 58, 71, 77, 29, 53, 76, 47, 50, 12, 9, 98, 90, 86, 70, 76, 93, 59, 99, 39, 19, 91, 77, 83, 66, 10, 34, 90, 61, 25, 38, 73, 11, 31, 92, 11, 38, 63, 19, 74, 11, 61, 28, 99, 25, 95, 73, 64, 26, 80, 32, 80, 8, 25, 93, 5, 83, 38, 17, 16, 29, 51, 18, 72, 51, 11, 56, 42, 79, 51, 29, 55, 13, 48, 54, 84, 41, 69, 82, 35, 41, 62, 40, 49, 41, 24, 85, 23, 41, 14, 16, 77, 48, 41, 97, 97, 39, 85, 99, 11, 72, 70, 38, 64, 66, 23, 59, 88, 19, 95, 69, 37, 48, 60, 70, 62, 77, 70, 9, 60, 95, 39, 18, 35, 13, 79, 86, 34, 8, 86, 80, 41, 80, 40, 17, 38, 69, 14, 34, 85, 85, 31, 20, 32, 55, 81, 99, 65, 93, 23, 42, 21, 70, 26, 51, 61, 44, 81, 23, 10, 15, 63, 84, 67, 1, 18, 21, 87, 70, 84, 3, 10, 75, 15, 84, 45, 53, 94, 77, 9, 46, 20, 36, 9, 48, 45, 6, 55, 85, 53, 71, 61, 9, 34, 44, 15, 42, 10, 9, 42, 66, 8, 5, 8, 43, 61, 85, 1, 28, 79, 32, 90, 84, 84, 24, 15, 76, 68, 46, 43, 62, 87, 89, 87, 52, 95, 90, 70, 76, 78, 49, 87, 69, 34, 7, 76, 29, 57, 41, 93, 10, 12, 49, 58, 97]
last_save: 723

Gen:3
TrainFitness:0.6666666666666666
TestFitness:0.5555555555555556
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],+228147.1493).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(x[index],-204761.4203).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(x[index],-426241.8536).all():
      return False
    else:
      return False
  def adf3(index):
    if np.equal(rlog(x[index]),-320325.7793).all():
      return False
    else:
      return False
  def adf4(index):
    if np.less(x[index],+031956.0346).all():
      return False
    else:
      return True
  def adf5(index):
    if np.less(np.tanh(x[index]),-973032.3979).all():
      return False
    else:
      return True
  def adf6(index):
    if np.equal(x[index],+987728.9756).all():
      if np.greater(x[index],+559579.0906).all():
        return True
      else:
        return True
      return False
    else:
      if np.equal(x[index],+967387.6757).all():
        return True
      else:
        return False
      return True
  def adf7(index):
    if np.greater(x[index],+001781.7731).all():
      return True
    else:
      return False
  def adf8(index):
    if np.equal(x[index],+394367.2541).all():
      if np.less(x[index],+352062.0723).all():
        return False
      else:
        return False
      return True
    else:
      if np.equal(x[index],-711472.0699).all():
        if np.greater(rlog(x[index]),-335852.9532).all():
          return True
        else:
          return False
        return True
      else:
        if np.equal(x[index],+992506.3488).all():
          return True
        else:
          return False
        return False
      return True
  return multiple_operation([adf0(0)*+941.742, adf1(1)*+114.639, adf2(2)*+988.647, adf3(3)*-446.711, adf4(4)*-502.328, adf5(5)*+393.181, adf6(6)*+305.246, adf7(7)*-657.302, adf8(8)*+821.721], [0, 0, 1, 0, 1, 0, 0, 1], 697.778)
result=p(); 0.6666666666666666
IndLenGenome:438
IndGenome:[18, 93, 45, 11, 66, 11, 62, 62, 37, 82, 12, 18, 21, 34, 97, 31, 24, 59, 3, 63, 1, 94, 53, 46, 49, 40, 9, 29, 82, 20, 44, 7, 46, 51, 24, 92, 80, 3, 25, 17, 35, 85, 9, 39, 91, 53, 49, 44, 52, 16, 12, 64, 31, 98, 25, 53, 16, 21, 7, 9, 29, 20, 88, 52, 63, 49, 95, 13, 42, 10, 93, 42, 15, 57, 47, 29, 43, 61, 17, 87, 29, 70, 67, 84, 56, 66, 30, 73, 41, 39, 45, 26, 60, 13, 94, 26, 13, 38, 55, 73, 85, 6, 86, 78, 85, 29, 99, 27, 83, 60, 53, 82, 23, 29, 17, 29, 23, 82, 47, 94, 83, 23, 49, 28, 94, 93, 39, 68, 17, 77, 52, 68, 79, 7, 95, 46, 89, 84, 47, 40, 52, 18, 15, 15, 29, 85, 97, 69, 70, 39, 90, 96, 44, 48, 19, 77, 17, 75, 89, 6, 93, 99, 36, 37, 93, 68, 57, 16, 67, 55, 67, 8, 93, 94, 67, 63, 99, 9, 47, 98, 77, 10, 80, 51, 97, 88, 61, 37, 97, 93, 81, 48, 29, 96, 28, 25, 68, 67, 55, 64, 33, 83, 29, 4, 43, 66, 67, 82, 95, 24, 81, 97, 1, 43, 29, 96, 59, 73, 55, 92, 80, 36, 12, 30, 47, 92, 33, 29, 83, 34, 22, 20, 23, 73, 93, 27, 48, 77, 51, 81, 94, 97, 72, 20, 76, 69, 79, 73, 48, 96, 34, 82, 61, 45, 23, 63, 55, 48, 75, 42, 19, 35, 93, 12, 18, 37, 52, 39, 59, 11, 62, 64, 43, 79, 29, 42, 85, 80, 76, 13, 14, 68, 98, 44, 95, 79, 60, 30, 61, 48, 92, 16, 19, 64, 71, 27, 74, 62, 81, 64, 57, 21, 91, 64, 56, 23, 49, 29, 70, 24, 29, 78, 8, 76, 44, 57, 66, 61, 99, 64, 64, 26, 37, 31, 41, 88, 73, 68, 95, 90, 32, 73, 72, 58, 1, 28, 65, 23, 99, 3, 41, 18, 1, 88, 4, 18, 23, 30, 15, 72, 34, 96, 91, 97, 76, 6, 35, 97, 43, 60, 12, 52, 8, 74, 78, 52, 31, 47, 32, 71, 19, 86, 80, 29, 46, 3, 90, 38, 13, 56, 56, 89, 77, 17, 67, 28, 32, 92, 58, 76, 25, 43, 58, 55, 7, 90, 27, 34, 16, 67, 70, 45, 2, 76, 17, 88, 44, 66, 40, 50, 81, 63, 4, 1, 25, 84, 54, 43, 86, 24, 3, 29, 18, 57, 99, 2, 72, 29, 47, 0, 67, 42, 25, 71, 69, 45, 59, 32]
last_save: 723

Gen:4
TrainFitness:0.6666666666666666
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],+228147.1493).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(x[index],-204761.4203).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(x[index],-426241.8536).all():
      return False
    else:
      return False
  def adf3(index):
    if np.equal(rlog(x[index]),-320325.7793).all():
      return False
    else:
      return False
  def adf4(index):
    if np.less(x[index],+031956.0346).all():
      return False
    else:
      return True
  def adf5(index):
    if np.less(np.tanh(x[index]),-973032.3979).all():
      return False
    else:
      return True
  def adf6(index):
    if np.equal(x[index],+942669.2857).all():
      if np.equal(x[index],+204387.2298).all():
        return True
      else:
        return True
      return False
    else:
      if np.equal(np.cos(x[index]),-247165.1993).all():
        return True
      else:
        return False
      return False
  def adf7(index):
    if np.greater(x[index],+195781.7731).all():
      return True
    else:
      return False
  def adf8(index):
    if np.equal(x[index],+394367.2541).all():
      if np.less(x[index],+352062.0723).all():
        return False
      else:
        return False
      return True
    else:
      if np.equal(x[index],-711472.0699).all():
        if np.greater(rlog(x[index]),-335852.9532).all():
          return True
        else:
          return False
        return True
      else:
        if np.equal(x[index],+992506.3488).all():
          return True
        else:
          return False
        return False
      return True
  return multiple_operation([adf0(0)*+941.742, adf1(1)*+114.639, adf2(2)*+988.647, adf3(3)*-446.711, adf4(4)*-502.328, adf5(5)*+393.181, adf6(6)*+305.246, adf7(7)*-657.302, adf8(8)*+821.721], [0, 0, 1, 0, 1, 0, 0, 1], 697.778)
result=p(); 0.6666666666666666
IndLenGenome:439
IndGenome:[18, 93, 45, 11, 66, 11, 62, 62, 37, 82, 12, 18, 21, 34, 97, 31, 24, 59, 3, 63, 1, 94, 53, 46, 49, 40, 9, 29, 82, 20, 44, 7, 46, 51, 24, 92, 80, 3, 25, 17, 35, 85, 9, 39, 91, 53, 49, 44, 52, 16, 12, 64, 31, 98, 25, 53, 16, 21, 7, 9, 29, 20, 88, 52, 63, 49, 95, 13, 42, 10, 93, 42, 15, 57, 47, 29, 43, 61, 17, 87, 29, 70, 67, 84, 56, 66, 30, 73, 41, 39, 45, 26, 60, 13, 94, 26, 13, 38, 55, 73, 85, 6, 86, 78, 85, 29, 99, 27, 83, 60, 53, 82, 23, 29, 17, 29, 23, 82, 47, 94, 83, 23, 49, 28, 94, 93, 39, 64, 92, 36, 76, 59, 62, 88, 15, 7, 15, 26, 53, 7, 8, 78, 32, 10, 34, 33, 98, 47, 22, 72, 89, 78, 10, 42, 21, 67, 77, 44, 67, 86, 51, 93, 22, 94, 87, 41, 66, 45, 101, 19, 19, 23, 26, 49, 49, 91, 81, 42, 37, 65, 70, 20, 81, 69, 15, 97, 88, 61, 37, 97, 93, 81, 48, 29, 96, 28, 25, 68, 67, 55, 64, 33, 83, 29, 4, 43, 66, 67, 82, 95, 24, 81, 97, 1, 43, 29, 96, 59, 73, 55, 92, 80, 36, 12, 30, 47, 92, 33, 29, 83, 34, 22, 20, 23, 73, 93, 27, 48, 77, 51, 81, 94, 97, 72, 20, 76, 69, 79, 73, 48, 96, 34, 82, 61, 45, 23, 63, 55, 48, 75, 42, 19, 35, 93, 12, 18, 37, 52, 39, 59, 11, 62, 64, 43, 79, 29, 42, 85, 80, 76, 13, 14, 68, 98, 44, 95, 79, 60, 30, 61, 48, 92, 16, 19, 64, 71, 27, 74, 62, 81, 64, 57, 21, 91, 64, 56, 23, 49, 29, 70, 24, 29, 78, 8, 76, 44, 57, 66, 61, 99, 64, 64, 26, 37, 31, 41, 88, 73, 68, 95, 90, 32, 73, 72, 58, 1, 46, 65, 23, 99, 3, 41, 18, 1, 88, 4, 18, 23, 30, 15, 72, 34, 96, 91, 97, 76, 6, 35, 97, 43, 60, 12, 52, 8, 74, 78, 52, 31, 47, 32, 71, 19, 86, 80, 29, 46, 3, 90, 38, 13, 56, 56, 89, 77, 17, 67, 28, 32, 92, 58, 76, 25, 43, 58, 55, 7, 90, 27, 34, 16, 67, 70, 45, 2, 76, 17, 88, 44, 66, 40, 50, 81, 63, 4, 1, 25, 84, 54, 43, 86, 24, 3, 29, 18, 57, 99, 2, 72, 29, 47, 0, 67, 42, 25, 71, 69, 45, 59, 32]
last_save: 723

Gen:12
TrainFitness:0.7777777777777778
TestFitness:0.4444444444444444
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],-357963.3154).all():
      return False
    else:
      return False
  def adf1(index):
    if np.equal(sigmoid(x[index]),+484355.0829).all():
      return True
    else:
      return True
  def adf2(index):
    if np.greater(x[index],+579597.7406).all():
      return True
    else:
      return False
  def adf3(index):
    if np.equal(sigmoid(x[index]),+290019.1815).all():
      return True
    else:
      return False
  def adf4(index):
    if np.equal(x[index],+041340.7414).all():
      return False
    else:
      return True
  def adf5(index):
    if np.greater(np.tanh(x[index]),+047456.2020).all():
      return True
    else:
      return False
  def adf6(index):
    if np.equal(x[index],-887728.9556).all():
      if np.greater(x[index],+559579.0906).all():
        return True
      else:
        return False
      return False
    else:
      if np.equal(x[index],+967387.6757).all():
        return True
      else:
        return False
      return True
  def adf7(index):
    if np.greater(x[index],+005781.7731).all():
      return True
    else:
      return False
  def adf8(index):
    if np.equal(x[index],+394367.2541).all():
      if np.less(x[index],+352062.0723).all():
        return False
      else:
        return False
      return True
    else:
      if np.equal(x[index],-711472.0699).all():
        if np.greater(rlog(x[index]),-335852.9532).all():
          return True
        else:
          return False
        return True
      else:
        if np.equal(x[index],+992506.3488).all():
          return True
        else:
          return False
        return False
      return True
  return multiple_operation([adf0(0)*+941.742, adf1(1)*+114.639, adf2(2)*+988.647, adf3(3)*-446.711, adf4(4)*-502.328, adf5(5)*+393.181, adf6(6)*+305.246, adf7(7)*-657.302, adf8(8)*+821.721], [0, 0, 1, 0, 1, 0, 0, 1], 697.778)
result=p(); 0.7777777777777778
IndLenGenome:439
IndGenome:[17, 97, 78, 25, 76, 21, 60, 95, 70, 83, 75, 77, 49, 36, 23, 73, 61, 75, 44, 59, 87, 66, 87, 68, 56, 39, 97, 96, 85, 24, 78, 14, 33, 95, 65, 60, 98, 52, 89, 20, 46, 54, 49, 51, 55, 72, 22, 82, 55, 57, 79, 95, 99, 67, 97, 14, 70, 96, 58, 21, 90, 43, 98, 80, 15, 67, 14, 61, 22, 29, 80, 70, 71, 79, 81, 68, 41, 5, 70, 19, 17, 9, 77, 29, 51, 92, 45, 30, 84, 81, 13, 54, 60, 17, 24, 81, 94, 47, 64, 97, 63, 69, 30, 44, 67, 66, 24, 40, 44, 57, 74, 65, 76, 12, 30, 62, 20, 84, 23, 81, 80, 80, 47, 29, 32, 49, 43, 28, 68, 17, 77, 52, 68, 79, 95, 95, 46, 89, 84, 47, 40, 52, 18, 15, 15, 29, 85, 97, 69, 70, 39, 90, 96, 44, 9, 19, 77, 17, 75, 89, 6, 93, 99, 36, 37, 93, 68, 57, 16, 67, 55, 67, 8, 93, 94, 67, 63, 99, 9, 47, 98, 77, 10, 80, 35, 97, 88, 61, 37, 97, 93, 81, 48, 29, 96, 28, 25, 68, 67, 55, 64, 33, 83, 29, 4, 43, 66, 67, 82, 95, 24, 81, 97, 1, 43, 29, 96, 59, 73, 55, 92, 80, 36, 12, 30, 47, 92, 33, 29, 83, 34, 22, 20, 23, 73, 93, 27, 48, 77, 51, 81, 94, 97, 72, 20, 76, 69, 79, 73, 48, 96, 34, 82, 61, 45, 23, 63, 55, 48, 75, 42, 19, 35, 93, 12, 18, 37, 52, 39, 59, 11, 62, 64, 43, 79, 29, 42, 85, 80, 76, 13, 14, 68, 98, 44, 95, 79, 60, 30, 61, 48, 92, 16, 19, 64, 71, 27, 74, 62, 81, 64, 57, 21, 91, 64, 56, 23, 49, 29, 70, 24, 29, 78, 8, 76, 44, 57, 66, 61, 99, 64, 64, 26, 37, 31, 41, 88, 73, 68, 95, 90, 32, 73, 72, 58, 1, 46, 65, 23, 99, 3, 41, 18, 1, 88, 4, 18, 23, 30, 15, 72, 34, 96, 91, 97, 76, 6, 35, 97, 43, 60, 12, 52, 8, 74, 78, 52, 31, 47, 32, 71, 19, 86, 80, 29, 46, 3, 90, 38, 13, 56, 56, 89, 77, 17, 67, 28, 32, 92, 58, 76, 25, 43, 58, 55, 7, 90, 27, 34, 16, 67, 70, 45, 2, 76, 17, 88, 44, 66, 40, 50, 81, 63, 4, 1, 25, 84, 54, 43, 86, 24, 3, 29, 18, 57, 99, 2, 72, 29, 47, 0, 67, 42, 25, 71, 69, 45, 59, 32]
last_save: 723

Gen:2012
last_save: 723
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.4444444444444444
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(np.cos(x[index]),+332850.2416).all():
      return True
    else:
      return False
  def adf1(index):
    if np.less(x[index],+033948.4167).all():
      return False
    else:
      return True
  def adf2(index):
    if np.less(x[index],-176524.3465).all():
      return True
    else:
      return True
  def adf3(index):
    if np.equal(sigmoid(x[index]),-727862.6348).all():
      return False
    else:
      return True
  def adf4(index):
    if np.greater(np.tanh(x[index]),-983744.7216).all():
      return True
    else:
      return False
  def adf5(index):
    if np.less(x[index],+616448.2032).all():
      return True
    else:
      return True
  def adf6(index):
    if np.less(np.cos(x[index]),+481804.9819).all():
      return False
    else:
      return False
  def adf7(index):
    if np.less(x[index],+026130.0552).all():
      return False
    else:
      return False
  def adf8(index):
    if np.less(x[index],-395962.3662).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+836.525, adf1(1)*+914.606, adf2(2)*+406.058, adf3(3)*+947.107, adf4(4)*+337.227, adf5(5)*-801.861, adf6(6)*+882.930, adf7(7)*+213.891, adf8(8)*-032.212], [1, 1, 0, 0, 0, 1, 0, 1], 047.699)
result=p(); 0.6666666666666666
IndLenGenome:415
IndGenome:[23, 17, 85, 95, 15, 2, 35, 99, 97, 42, 64, 38, 82, 77, 88, 37, 61, 73, 51, 46, 12, 17, 3, 33, 51, 80, 56, 93, 46, 88, 89, 68, 60, 29, 10, 13, 45, 73, 97, 30, 75, 49, 32, 62, 24, 73, 20, 82, 97, 84, 2, 25, 97, 25, 82, 25, 68, 13, 17, 83, 73, 41, 23, 93, 51, 25, 81, 61, 84, 36, 10, 26, 70, 19, 18, 86, 53, 13, 49, 3, 54, 63, 24, 22, 27, 94, 95, 97, 68, 87, 14, 51, 44, 52, 48, 41, 16, 20, 74, 23, 61, 39, 41, 40, 43, 16, 18, 17, 73, 37, 60, 73, 19, 19, 19, 55, 37, 12, 32, 22, 12, 93, 49, 18, 73, 3, 30, 52, 50, 46, 82, 41, 38, 4, 34, 9, 36, 2, 96, 87, 28, 4, 14, 93, 40, 42, 72, 69, 49, 52, 61, 74, 59, 71, 71, 14, 73, 98, 48, 83, 79, 44, 64, 62, 94, 33, 89, 16, 49, 95, 93, 52, 53, 26, 97, 94, 90, 28, 41, 32, 33, 2, 62, 65, 25, 79, 16, 37, 32, 68, 24, 68, 2, 27, 26, 30, 23, 63, 7, 79, 43, 13, 22, 52, 67, 32, 94, 47, 18, 39, 84, 23, 60, 56, 49, 92, 65, 64, 86, 44, 42, 32, 53, 91, 56, 34, 80, 58, 49, 38, 92, 86, 56, 60, 62, 52, 34, 84, 85, 84, 25, 56, 28, 61, 38, 50, 73, 63, 80, 11, 18, 25, 16, 74, 2, 35, 29, 64, 20, 36, 60, 41, 87, 86, 71, 58, 88, 25, 51, 96, 43, 50, 42, 80, 42, 92, 41, 56, 84, 16, 61, 65, 26, 38, 89, 34, 71, 33, 19, 83, 6, 66, 83, 0, 20, 73, 25, 67, 99, 83, 88, 10, 1, 79, 46, 54, 4, 42, 77, 23, 33, 67, 20, 42, 17, 33, 40, 49, 73, 38, 85, 5, 70, 46, 13, 36, 61, 21, 88, 62, 41, 99, 22, 27, 73, 24, 28, 88, 0, 54, 12, 17, 22, 82, 82, 61, 74, 29, 1, 72, 59, 10, 87, 82, 5, 73, 96, 35, 67, 45, 6, 86, 39, 5, 31, 16, 64, 3, 48, 11, 81, 71, 77, 20, 5, 10, 53, 35, 27, 75, 31, 14, 56, 93, 32, 48, 65, 41, 55, 46, 80, 24, 56, 66, 16, 84, 57, 62, 39, 46, 45, 56, 63, 65, 51, 4, 73, 5, 73, 16, 48, 78, 32, 20, 7]
last_save: 724

Gen:55
TrainFitness:0.7777777777777778
TestFitness:0.4444444444444444
MaxGenLen:515
Individual: def p():
  def adf0(index):
    if np.equal(x[index],-063271.7355).all():
      return False
    else:
      return True
  def adf1(index):
    if np.greater(x[index],-327152.9617).all():
      return False
    else:
      return False
  def adf2(index):
    if np.less(np.sin(x[index]),-163382.4122).all():
      return True
    else:
      return True
  def adf3(index):
    if np.greater(x[index],-493191.4809).all():
      return True
    else:
      return False
  def adf4(index):
    if np.less(x[index],+937110.3027).all():
      if np.less(x[index],+009325.2286).all():
        return True
      else:
        return False
      return True
    else:
      if np.greater(sigmoid(x[index]),-293920.2420).all():
        return True
      else:
        return False
      return False
  def adf5(index):
    if np.equal(sigmoid(x[index]),-589646.4415).all():
      if np.greater(np.sin(x[index]),+336115.4804).all():
        return True
      else:
        return False
      return True
    else:
      if np.greater(np.tanh(x[index]),+810588.0803).all():
        return True
      else:
        return True
      return True
  def adf6(index):
    if np.less(sigmoid(x[index]),-807735.0303).all():
      if np.less(np.cos(x[index]),-400298.7399).all():
        return True
      else:
        return True
      return False
    else:
      if np.greater(x[index],-041453.6011).all():
        return False
      else:
        return True
      return False
  def adf7(index):
    if np.less(np.sin(x[index]),+360239.6005).all():
      return False
    else:
      return True
  def adf8(index):
    if np.equal(x[index],+006431.0127).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+826.602, adf1(1)*+545.981, adf2(2)*+305.056, adf3(3)*+940.601, adf4(4)*+345.163, adf5(5)*+964.725, adf6(6)*+621.616, adf7(7)*+440.350, adf8(8)*+408.997], [1, 1, 1, 0, 0, 1, 0, 0], 862.048)
result=p(); 0.7777777777777778
IndLenGenome:425
IndGenome:[73, 98, 62, 75, 29, 73, 8, 57, 11, 70, 86, 3, 2, 27, 21, 97, 73, 65, 5, 31, 42, 94, 83, 75, 61, 45, 79, 14, 63, 62, 7, 51, 65, 32, 99, 6, 61, 27, 45, 79, 52, 59, 91, 88, 66, 27, 41, 47, 41, 26, 63, 23, 18, 92, 34, 81, 42, 32, 74, 84, 82, 35, 96, 87, 2, 67, 17, 54, 89, 23, 21, 19, 71, 74, 18, 20, 49, 84, 3, 31, 62, 20, 76, 81, 82, 72, 41, 39, 73, 67, 31, 71, 50, 83, 90, 52, 57, 73, 79, 21, 9, 34, 86, 30, 90, 19, 73, 72, 65, 82, 42, 48, 76, 74, 71, 84, 5, 33, 66, 69, 51, 81, 97, 92, 79, 3, 29, 22, 10, 42, 14, 72, 10, 48, 81, 45, 89, 44, 68, 2, 66, 9, 35, 3, 2, 15, 98, 99, 96, 54, 66, 34, 24, 71, 5, 31, 66, 70, 60, 30, 78, 87, 13, 23, 6, 51, 51, 35, 84, 58, 10, 4, 80, 81, 26, 21, 45, 84, 92, 19, 82, 38, 58, 51, 80, 15, 68, 78, 0, 38, 80, 93, 62, 98, 68, 31, 66, 32, 94, 10, 93, 15, 29, 69, 38, 60, 67, 67, 3, 45, 30, 63, 50, 53, 67, 28, 78, 55, 10, 73, 83, 74, 90, 70, 52, 99, 68, 97, 33, 79, 39, 70, 10, 81, 51, 24, 79, 98, 11, 61, 40, 74, 71, 84, 5, 33, 66, 30, 51, 81, 97, 92, 79, 12, 29, 70, 34, 42, 14, 72, 67, 63, 86, 70, 32, 33, 19, 16, 100, 10, 15, 47, 38, 12, 21, 95, 97, 7, 66, 58, 40, 70, 46, 14, 53, 21, 60, 51, 92, 97, 55, 13, 35, 34, 80, 58, 49, 38, 92, 86, 56, 60, 62, 52, 24, 34, 85, 84, 25, 89, 28, 61, 38, 50, 73, 63, 80, 85, 80, 25, 16, 66, 2, 35, 29, 64, 20, 36, 60, 41, 87, 86, 71, 53, 94, 25, 51, 96, 43, 50, 42, 50, 39, 76, 64, 27, 32, 15, 74, 52, 34, 26, 42, 91, 16, 61, 46, 36, 22, 95, 74, 24, 50, 13, 75, 60, 75, 28, 74, 24, 0, 18, 99, 39, 87, 72, 41, 5, 39, 90, 100, 7, 44, 22, 66, 58, 56, 32, 50, 94, 28, 34, 53, 21, 74, 35, 22, 30, 69, 13, 79, 39, 68, 64, 64, 50, 98, 41, 30, 44, 51, 47, 31, 9, 36, 27, 17, 27, 87, 27, 46, 59, 0, 20, 57]
last_save: 724

Gen:2055
last_save: 724
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.5555555555555556
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(np.cos(x[index]),-208218.4083).all():
      return True
    else:
      return True
  def adf1(index):
    if np.equal(np.cos(x[index]),+538603.3830).all():
      return True
    else:
      return True
  def adf2(index):
    if np.less(x[index],-973223.7353).all():
      return True
    else:
      return True
  def adf3(index):
    if np.greater(x[index],-097450.8243).all():
      return True
    else:
      return True
  def adf4(index):
    if np.less(x[index],+500381.7904).all():
      return False
    else:
      return True
  def adf5(index):
    if np.equal(psqrt(x[index]),-423957.9504).all():
      return False
    else:
      return True
  def adf6(index):
    if np.less(x[index],-280942.3135).all():
      return False
    else:
      return False
  def adf7(index):
    if np.greater(x[index],-861085.6232).all():
      return True
    else:
      return False
  def adf8(index):
    if np.equal(x[index],+855178.6957).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-363.964, adf1(1)*+504.819, adf2(2)*-956.767, adf3(3)*+438.679, adf4(4)*-910.173, adf5(5)*-742.039, adf6(6)*-430.465, adf7(7)*-777.550, adf8(8)*+551.569], [0, 1, 1, 1, 0, 0, 1, 0], 204.274)
result=p(); 0.5555555555555556
IndLenGenome:414
IndGenome:[32, 92, 41, 21, 11, 44, 91, 71, 59, 13, 35, 86, 11, 31, 28, 59, 60, 54, 75, 30, 16, 60, 70, 58, 24, 88, 33, 37, 41, 50, 39, 29, 84, 82, 31, 26, 16, 73, 63, 38, 60, 91, 83, 23, 45, 82, 62, 75, 64, 34, 5, 58, 15, 56, 55, 69, 29, 95, 3, 23, 82, 63, 93, 21, 65, 77, 53, 58, 97, 56, 58, 14, 91, 74, 92, 84, 70, 35, 65, 57, 84, 91, 96, 30, 33, 67, 51, 46, 94, 34, 59, 85, 31, 48, 75, 99, 82, 83, 76, 65, 32, 65, 10, 3, 30, 18, 33, 45, 48, 56, 71, 43, 85, 47, 23, 79, 30, 44, 62, 60, 60, 82, 46, 86, 70, 70, 55, 85, 57, 99, 12, 88, 23, 97, 85, 37, 61, 10, 27, 49, 14, 43, 79, 46, 93, 29, 39, 4, 83, 53, 51, 95, 63, 53, 91, 62, 84, 69, 40, 37, 16, 96, 48, 97, 99, 30, 35, 98, 22, 85, 36, 18, 97, 55, 1, 17, 62, 47, 87, 93, 70, 76, 42, 70, 49, 71, 44, 51, 87, 21, 87, 89, 27, 19, 77, 82, 33, 56, 88, 53, 79, 14, 63, 12, 25, 61, 38, 43, 69, 90, 7, 33, 94, 55, 14, 39, 18, 80, 2, 22, 87, 35, 64, 16, 66, 65, 66, 40, 82, 69, 33, 9, 17, 13, 11, 60, 81, 73, 15, 52, 31, 10, 73, 38, 5, 13, 42, 37, 18, 30, 10, 50, 85, 24, 61, 62, 93, 33, 59, 12, 78, 50, 34, 58, 83, 91, 92, 30, 18, 71, 59, 80, 28, 60, 97, 14, 41, 95, 49, 52, 37, 45, 54, 14, 96, 17, 30, 100, 18, 58, 25, 0, 86, 42, 51, 71, 55, 100, 8, 13, 5, 92, 84, 76, 99, 67, 93, 43, 68, 13, 24, 3, 91, 85, 79, 89, 19, 74, 61, 2, 41, 23, 81, 93, 47, 88, 83, 55, 76, 95, 62, 25, 76, 47, 97, 55, 44, 4, 22, 29, 74, 46, 87, 16, 48, 16, 1, 57, 9, 12, 56, 49, 45, 52, 42, 47, 62, 70, 47, 33, 14, 47, 22, 73, 64, 79, 51, 43, 98, 87, 79, 93, 94, 19, 92, 24, 34, 2, 33, 33, 74, 24, 1, 27, 0, 12, 78, 33, 2, 39, 35, 18, 0, 8, 99, 88, 77, 90, 97, 50, 14, 41, 97, 82, 58, 54, 69, 100, 54, 45, 49, 27, 25, 1]
last_save: 725

Gen:22
TrainFitness:0.6666666666666666
TestFitness:0.5555555555555556
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],+230392.2747).all():
      return False
    else:
      return True
  def adf1(index):
    if np.greater(x[index],-404212.6832).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(x[index],-630965.0880).all():
      return False
    else:
      return False
  def adf3(index):
    if np.less(x[index],-130019.8289).all():
      return False
    else:
      return False
  def adf4(index):
    if np.less(x[index],+986925.5741).all():
      return True
    else:
      return True
  def adf5(index):
    if np.greater(x[index],+945886.0404).all():
      return True
    else:
      return False
  def adf6(index):
    if np.greater(x[index],-341851.9452).all():
      return True
    else:
      return False
  def adf7(index):
    if np.less(x[index],+552381.6548).all():
      return True
    else:
      return True
  def adf8(index):
    if np.less(x[index],+013435.0444).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+429.051, adf1(1)*+534.185, adf2(2)*-826.139, adf3(3)*-645.223, adf4(4)*-548.002, adf5(5)*-661.241, adf6(6)*+464.673, adf7(7)*-380.034, adf8(8)*-833.728], [0, 0, 1, 0, 0, 0, 1, 0], 823.772)
result=p(); 0.6666666666666666
IndLenGenome:468
IndGenome:[45, 58, 78, 69, 45, 15, 47, 52, 97, 22, 23, 40, 3, 99, 42, 2, 37, 64, 17, 95, 74, 80, 57, 45, 7, 81, 35, 39, 54, 70, 84, 82, 71, 52, 56, 68, 13, 62, 59, 63, 74, 15, 33, 45, 52, 97, 12, 16, 13, 60, 99, 46, 15, 10, 98, 68, 50, 71, 87, 86, 71, 67, 33, 86, 79, 74, 61, 53, 20, 70, 21, 79, 38, 42, 48, 69, 33, 21, 86, 5, 88, 43, 70, 52, 14, 69, 48, 26, 99, 62, 25, 45, 37, 74, 31, 14, 90, 31, 23, 54, 43, 95, 30, 44, 69, 64, 25, 38, 78, 16, 70, 4, 20, 34, 14, 89, 20, 49, 81, 41, 62, 27, 25, 53, 84, 71, 28, 75, 51, 69, 64, 65, 72, 76, 21, 13, 19, 40, 19, 75, 26, 44, 65, 5, 92, 53, 98, 21, 96, 65, 24, 8, 40, 30, 72, 93, 7, 79, 66, 26, 14, 90, 31, 23, 54, 43, 95, 30, 44, 24, 74, 25, 38, 78, 16, 70, 4, 20, 34, 22, 89, 20, 55, 81, 41, 62, 27, 25, 53, 84, 71, 28, 75, 51, 69, 64, 38, 72, 76, 21, 13, 19, 40, 19, 75, 26, 44, 65, 62, 92, 53, 98, 21, 96, 65, 24, 8, 40, 30, 72, 93, 7, 57, 6, 26, 81, 72, 24, 41, 79, 38, 68, 74, 66, 74, 86, 17, 23, 98, 79, 15, 73, 78, 70, 60, 23, 54, 62, 97, 33, 78, 23, 83, 27, 82, 48, 19, 40, 92, 87, 58, 84, 16, 99, 20, 77, 68, 12, 93, 87, 97, 52, 54, 40, 79, 72, 83, 62, 81, 48, 61, 19, 92, 9, 48, 76, 47, 23, 68, 20, 77, 27, 18, 91, 83, 65, 46, 10, 5, 30, 26, 96, 25, 94, 28, 81, 77, 99, 15, 78, 93, 41, 98, 63, 81, 61, 32, 40, 6, 65, 18, 96, 95, 71, 85, 39, 26, 93, 22, 62, 50, 98, 62, 87, 14, 35, 53, 88, 29, 50, 72, 80, 55, 16, 14, 60, 23, 92, 10, 41, 34, 57, 79, 99, 53, 62, 17, 98, 65, 50, 24, 74, 47, 45, 19, 13, 8, 83, 85, 30, 71, 58, 83, 69, 29, 17, 63, 49, 44, 27, 59, 65, 58, 86, 1, 72, 86, 80, 20, 83, 77, 47, 59, 72, 43, 64, 10, 12, 23, 36, 50, 70, 79, 85, 56, 44, 77, 54, 66, 32, 62, 54, 75, 89, 55, 69, 12, 25, 24, 71, 9, 22, 63, 39, 10, 1, 40, 45, 58, 75, 20, 24, 93, 2, 8, 37, 14, 97, 18, 79, 25, 72, 10, 5, 39, 64, 46, 18, 38, 58, 43, 97, 39, 62, 64, 23, 76, 58, 10, 71, 45, 24, 73, 52, 21, 27, 96, 11]
last_save: 725

Gen:361
TrainFitness:0.7777777777777778
TestFitness:0.5555555555555556
MaxGenLen:590
Individual: def p():
  def adf0(index):
    if np.greater(x[index],+230391.2747).all():
      return True
    else:
      return True
  def adf1(index):
    if np.greater(x[index],-404212.6832).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(x[index],-630965.0880).all():
      return False
    else:
      return False
  def adf3(index):
    if np.less(x[index],-130019.8289).all():
      return False
    else:
      return False
  def adf4(index):
    if np.less(x[index],+956925.5341).all():
      return True
    else:
      return True
  def adf5(index):
    if np.greater(x[index],+975887.0404).all():
      return True
    else:
      return False
  def adf6(index):
    if np.greater(x[index],+006227.4754).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(x[index],+421268.3293).all():
      return True
    else:
      return False
  def adf8(index):
    if np.less(x[index],+096508.8017).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-130.017, adf1(1)*-931.658, adf2(2)*+490.694, adf3(3)*-414.013, adf4(4)*-049.656, adf5(5)*+498.692, adf6(6)*-480.126, adf7(7)*-941.100, adf8(8)*-075.715], [0, 0, 0, 0, 0, 0, 0, 0], 293.453)
result=p(); 0.7777777777777778
IndLenGenome:555
IndGenome:[45, 58, 78, 69, 45, 15, 47, 52, 97, 22, 23, 40, 3, 99, 61, 2, 37, 64, 17, 92, 74, 80, 61, 45, 7, 81, 35, 39, 54, 70, 84, 82, 71, 52, 56, 68, 13, 62, 59, 63, 74, 15, 33, 45, 52, 97, 12, 16, 13, 60, 99, 46, 15, 10, 98, 68, 50, 71, 87, 86, 71, 67, 33, 86, 79, 74, 61, 53, 20, 70, 21, 79, 38, 42, 48, 69, 33, 33, 86, 5, 88, 43, 46, 52, 14, 69, 5, 26, 99, 62, 25, 45, 93, 74, 31, 14, 24, 31, 23, 54, 43, 95, 30, 44, 69, 37, 25, 38, 78, 37, 70, 4, 20, 34, 14, 89, 20, 49, 81, 41, 2, 22, 23, 40, 10, 46, 42, 2, 37, 64, 17, 95, 74, 80, 57, 45, 7, 81, 35, 17, 54, 70, 84, 82, 71, 52, 56, 68, 13, 62, 59, 63, 74, 15, 33, 45, 52, 97, 12, 16, 13, 60, 99, 46, 15, 10, 98, 68, 50, 71, 87, 86, 71, 67, 33, 86, 79, 74, 61, 53, 20, 70, 21, 87, 38, 9, 48, 69, 33, 21, 86, 5, 88, 43, 70, 52, 14, 69, 30, 26, 99, 74, 25, 45, 46, 74, 31, 14, 90, 31, 23, 54, 43, 95, 30, 44, 69, 86, 5, 96, 43, 70, 52, 14, 69, 48, 26, 99, 62, 25, 45, 37, 74, 68, 50, 71, 92, 86, 71, 67, 46, 79, 74, 61, 31, 20, 70, 17, 95, 74, 80, 57, 45, 7, 81, 35, 39, 54, 70, 84, 82, 70, 52, 56, 68, 13, 62, 59, 63, 74, 15, 33, 45, 52, 97, 12, 16, 13, 60, 99, 46, 15, 10, 98, 68, 50, 71, 87, 86, 71, 67, 33, 86, 79, 74, 61, 53, 20, 70, 21, 79, 38, 42, 48, 69, 33, 21, 86, 5, 88, 43, 70, 52, 14, 69, 48, 26, 99, 62, 25, 45, 37, 74, 31, 36, 90, 31, 23, 54, 43, 95, 30, 44, 69, 64, 25, 38, 78, 16, 70, 4, 20, 34, 14, 89, 20, 49, 81, 41, 62, 62, 27, 25, 53, 84, 71, 28, 75, 51, 69, 64, 65, 72, 76, 21, 13, 19, 40, 35, 75, 26, 44, 30, 5, 92, 53, 98, 21, 96, 65, 24, 8, 40, 30, 72, 93, 7, 79, 66, 26, 99, 90, 31, 23, 54, 43, 98, 63, 81, 61, 32, 40, 58, 65, 18, 96, 95, 71, 85, 39, 26, 93, 22, 99, 93, 87, 97, 52, 54, 40, 79, 72, 83, 62, 81, 48, 61, 19, 92, 9, 48, 76, 47, 23, 68, 20, 77, 27, 18, 91, 83, 65, 46, 10, 5, 30, 26, 96, 25, 94, 57, 49, 36, 83, 6, 78, 33, 53, 42, 100, 38, 14, 100, 57, 88, 26, 32, 12, 47, 74, 91, 10, 59, 39, 93, 69, 40, 19, 58, 97, 9, 93, 6, 33, 43, 23, 97, 53, 65, 30, 60, 66, 61, 74, 54, 66, 32, 62, 54, 75, 89, 55, 69, 12, 25, 24, 71, 9, 22, 63, 39, 10, 1, 40, 45, 58, 75, 20, 24, 93, 2, 8, 37, 14, 97, 18, 79, 25, 72, 10, 5, 39, 64, 46, 18, 38, 58, 43, 97, 39, 62, 64, 23, 76, 58, 10, 71, 45, 24, 73, 52, 21, 27, 96, 11]
last_save: 725

Gen:2361
last_save: 725
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.5555555555555556
TestFitness:0.4444444444444444
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(np.sin(x[index]),+430541.0168).all():
      return True
    else:
      return False
  def adf1(index):
    if np.equal(x[index],+789777.8179).all():
      return False
    else:
      return True
  def adf2(index):
    if np.greater(np.tanh(x[index]),+760574.9635).all():
      return True
    else:
      return True
  def adf3(index):
    if np.greater(np.cos(x[index]),+457682.8064).all():
      return False
    else:
      return False
  def adf4(index):
    if np.greater(np.cos(x[index]),-696068.2251).all():
      return False
    else:
      return True
  def adf5(index):
    if np.equal(np.tanh(x[index]),-575659.0746).all():
      return False
    else:
      return False
  def adf6(index):
    if np.greater(x[index],+621515.9502).all():
      return True
    else:
      return False
  def adf7(index):
    if np.equal(np.sin(x[index]),+014446.4934).all():
      return True
    else:
      return False
  def adf8(index):
    if np.less(x[index],-347123.2985).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+519.853, adf1(1)*+565.577, adf2(2)*+940.830, adf3(3)*+942.436, adf4(4)*+918.324, adf5(5)*-338.056, adf6(6)*-617.930, adf7(7)*-916.441, adf8(8)*-890.974], [0, 0, 1, 1, 0, 0, 0, 1], 226.122)
result=p(); 0.5555555555555556
IndLenGenome:418
IndGenome:[67, 86, 6, 98, 38, 39, 88, 35, 71, 87, 85, 33, 71, 14, 12, 33, 75, 41, 53, 63, 39, 2, 78, 8, 74, 96, 92, 14, 69, 14, 63, 83, 71, 79, 37, 54, 25, 49, 19, 44, 13, 80, 26, 14, 6, 69, 48, 63, 74, 81, 91, 71, 59, 47, 78, 57, 91, 41, 13, 57, 73, 76, 92, 83, 48, 19, 63, 89, 42, 28, 46, 89, 95, 10, 50, 87, 37, 14, 93, 43, 93, 31, 50, 81, 97, 93, 38, 33, 94, 16, 34, 2, 57, 65, 86, 45, 73, 99, 98, 53, 54, 67, 99, 40, 43, 48, 16, 36, 32, 30, 95, 76, 38, 89, 73, 87, 92, 34, 81, 56, 44, 87, 70, 71, 45, 68, 96, 20, 29, 40, 77, 45, 38, 14, 88, 6, 91, 46, 62, 52, 48, 55, 76, 40, 30, 56, 4, 73, 35, 84, 86, 50, 50, 33, 79, 32, 70, 21, 25, 17, 29, 26, 68, 54, 60, 55, 85, 24, 95, 30, 48, 83, 59, 17, 49, 45, 24, 4, 76, 84, 22, 19, 29, 47, 15, 73, 20, 94, 2, 93, 29, 78, 45, 78, 84, 55, 46, 56, 17, 42, 35, 46, 94, 43, 81, 77, 93, 48, 26, 71, 40, 29, 32, 81, 36, 64, 66, 47, 16, 87, 49, 19, 24, 63, 71, 76, 67, 99, 18, 24, 36, 52, 92, 83, 31, 60, 41, 28, 34, 26, 48, 55, 69, 22, 64, 34, 11, 81, 24, 64, 55, 65, 64, 14, 19, 42, 24, 35, 87, 83, 95, 31, 51, 50, 65, 25, 92, 80, 39, 32, 92, 36, 31, 28, 76, 36, 46, 29, 90, 64, 72, 0, 98, 61, 70, 78, 48, 21, 52, 98, 96, 86, 17, 47, 71, 62, 51, 42, 53, 93, 83, 17, 51, 69, 23, 71, 75, 61, 60, 29, 67, 90, 56, 56, 84, 17, 51, 59, 5, 39, 63, 59, 58, 24, 21, 30, 91, 17, 63, 38, 40, 83, 52, 82, 47, 36, 6, 57, 6, 47, 96, 29, 65, 42, 33, 46, 32, 85, 56, 60, 64, 0, 61, 75, 42, 3, 12, 27, 56, 40, 69, 2, 94, 49, 30, 19, 77, 8, 19, 13, 76, 59, 96, 11, 54, 72, 24, 91, 77, 57, 70, 65, 35, 80, 63, 32, 28, 64, 5, 34, 50, 45, 97, 81, 27, 16, 68, 17, 64, 62, 22, 55, 33, 29, 21, 41, 70, 85, 32, 73, 15, 41, 27, 16, 78, 71, 58, 76]
last_save: 726

Gen:20
TrainFitness:0.6666666666666666
TestFitness:0.3333333333333333
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(sigmoid(x[index]),+163931.1651).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(np.cos(x[index]),+990182.5485).all():
      return True
    else:
      return True
  def adf2(index):
    if np.equal(np.cos(x[index]),-812100.5110).all():
      return True
    else:
      return True
  def adf3(index):
    if np.greater(x[index],+277864.0250).all():
      return True
    else:
      return True
  def adf4(index):
    if np.less(x[index],+003956.6798).all():
      return True
    else:
      return False
  def adf5(index):
    if np.equal(psqrt(x[index]),-353154.6391).all():
      return False
    else:
      return True
  def adf6(index):
    if np.equal(np.cos(x[index]),-406576.4523).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(x[index],+828696.2306).all():
      if np.greater(np.cos(x[index]),-229115.0272).all():
        return True
      else:
        return True
      return True
    else:
      if np.less(x[index],+165149.3612).all():
        if np.less(sigmoid(x[index]),-192106.5623).all():
          return False
        else:
          return True
        return False
      else:
        if np.equal(x[index],-666813.7825).all():
          if np.less(np.tanh(x[index]),+553570.1727).all():
            return False
          else:
            return False
          return False
        else:
          if np.greater(x[index],+347711.1879).all():
            return True
          else:
            return False
          return False
        return False
      return True
  def adf8(index):
    if np.equal(x[index],-756559.6363).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*-037.153, adf1(1)*+112.761, adf2(2)*+596.877, adf3(3)*+325.915, adf4(4)*-141.751, adf5(5)*+093.053, adf6(6)*-331.673, adf7(7)*-439.639, adf8(8)*-649.722], [1, 1, 0, 1, 1, 0, 0, 1], 201.195)
result=p(); 0.6666666666666666
IndLenGenome:450
IndGenome:[85, 39, 81, 25, 50, 82, 63, 15, 2, 100, 21, 46, 93, 89, 93, 81, 31, 46, 35, 1, 45, 67, 11, 71, 76, 74, 79, 11, 44, 14, 99, 49, 10, 21, 98, 92, 95, 14, 38, 15, 26, 16, 78, 39, 47, 64, 19, 93, 21, 91, 68, 81, 52, 11, 70, 50, 15, 21, 61, 30, 20, 62, 40, 31, 3, 11, 97, 94, 51, 92, 87, 17, 68, 46, 84, 30, 12, 25, 40, 14, 72, 21, 75, 79, 69, 84, 88, 69, 10, 20, 3, 29, 55, 6, 16, 67, 49, 58, 54, 27, 28, 71, 23, 44, 29, 63, 83, 60, 23, 45, 83, 1, 85, 54, 86, 23, 49, 21, 51, 72, 27, 35, 29, 26, 73, 2, 77, 60, 44, 10, 96, 55, 97, 36, 34, 65, 22, 43, 100, 51, 68, 86, 65, 63, 69, 31, 90, 85, 38, 92, 18, 16, 49, 56, 82, 23, 80, 86, 13, 27, 68, 31, 27, 41, 59, 82, 72, 79, 91, 61, 25, 50, 72, 27, 62, 22, 88, 56, 46, 6, 46, 87, 21, 10, 27, 21, 66, 75, 51, 84, 49, 43, 16, 51, 92, 13, 34, 96, 63, 35, 53, 64, 11, 89, 2, 31, 80, 16, 25, 76, 72, 3, 99, 88, 33, 90, 52, 11, 61, 93, 65, 15, 96, 36, 46, 18, 41, 83, 97, 38, 32, 45, 13, 52, 26, 80, 52, 18, 93, 65, 25, 93, 65, 97, 30, 61, 77, 32, 37, 13, 77, 71, 33, 3, 65, 39, 66, 17, 23, 44, 97, 27, 31, 81, 11, 18, 87, 29, 62, 69, 73, 93, 96, 33, 41, 68, 3, 92, 55, 45, 47, 65, 56, 45, 85, 89, 36, 63, 36, 73, 69, 18, 77, 80, 47, 59, 96, 80, 13, 37, 31, 35, 23, 67, 34, 21, 31, 61, 22, 87, 56, 91, 4, 100, 33, 35, 9, 66, 68, 57, 97, 56, 26, 27, 73, 62, 15, 49, 31, 35, 34, 33, 9, 11, 14, 11, 67, 95, 61, 61, 14, 73, 60, 59, 3, 30, 45, 73, 35, 43, 23, 53, 33, 71, 6, 47, 33, 46, 19, 75, 24, 13, 59, 6, 63, 99, 21, 93, 16, 56, 84, 79, 67, 12, 2, 41, 57, 7, 86, 45, 43, 78, 14, 43, 100, 42, 60, 61, 11, 9, 85, 75, 39, 88, 77, 46, 89, 5, 76, 94, 54, 65, 66, 52, 100, 51, 54, 71, 99, 48, 76, 67, 73, 57, 10, 26, 48, 79, 57, 35, 7, 48, 83, 92, 85, 65, 22, 23, 4, 69, 50, 31, 55, 100, 58, 48, 81, 98, 21, 45, 76, 44, 8, 67, 87, 66, 38, 35, 89, 72]
last_save: 726

Gen:30
TrainFitness:0.7777777777777778
TestFitness:0.3333333333333333
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(sigmoid(x[index]),+163931.1651).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(np.cos(x[index]),+990182.5485).all():
      return True
    else:
      return True
  def adf2(index):
    if np.equal(np.cos(x[index]),-812100.5110).all():
      return True
    else:
      return True
  def adf3(index):
    if np.greater(x[index],+277864.0250).all():
      return True
    else:
      return True
  def adf4(index):
    if np.less(x[index],+008956.6798).all():
      return True
    else:
      return False
  def adf5(index):
    if np.equal(psqrt(x[index]),-353154.6391).all():
      return False
    else:
      return True
  def adf6(index):
    if np.equal(np.cos(x[index]),-406576.4523).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(x[index],+828696.2306).all():
      if np.greater(np.cos(x[index]),-269115.0272).all():
        return True
      else:
        return True
      return True
    else:
      if np.less(x[index],+165149.3602).all():
        if np.less(sigmoid(x[index]),-192106.5623).all():
          return False
        else:
          return True
        return False
      else:
        if np.equal(x[index],-666813.7825).all():
          if np.less(np.tanh(x[index]),+553570.1727).all():
            return False
          else:
            return False
          return False
        else:
          if np.greater(x[index],+347711.1879).all():
            return True
          else:
            return False
          return False
        return False
      return True
  def adf8(index):
    if np.equal(x[index],-756559.6363).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*-037.153, adf1(1)*+112.761, adf2(2)*+596.877, adf3(3)*+325.915, adf4(4)*-141.751, adf5(5)*+093.053, adf6(6)*-331.673, adf7(7)*-439.639, adf8(8)*-649.722], [1, 1, 0, 1, 1, 0, 0, 1], 201.195)
result=p(); 0.7777777777777778
IndLenGenome:450
IndGenome:[85, 39, 81, 25, 50, 82, 63, 15, 2, 100, 21, 46, 93, 89, 93, 81, 31, 46, 35, 1, 45, 67, 11, 71, 76, 74, 79, 11, 44, 14, 99, 49, 10, 21, 98, 92, 95, 14, 38, 15, 26, 16, 78, 39, 47, 64, 19, 93, 21, 91, 68, 81, 52, 11, 70, 50, 15, 21, 61, 30, 20, 62, 40, 31, 3, 11, 97, 94, 51, 92, 87, 17, 68, 46, 84, 30, 12, 25, 40, 14, 72, 21, 75, 79, 69, 84, 88, 69, 10, 20, 68, 29, 55, 6, 16, 67, 49, 58, 54, 27, 28, 71, 23, 44, 29, 63, 83, 60, 23, 45, 83, 1, 85, 54, 86, 23, 49, 21, 51, 72, 27, 35, 29, 26, 73, 2, 77, 60, 44, 10, 96, 55, 97, 36, 34, 65, 22, 43, 100, 51, 68, 86, 65, 63, 69, 31, 90, 85, 38, 92, 18, 16, 49, 56, 82, 23, 80, 86, 13, 27, 68, 31, 27, 41, 59, 82, 66, 79, 91, 61, 25, 50, 72, 27, 62, 22, 88, 56, 46, 6, 46, 87, 21, 10, 27, 21, 66, 75, 51, 84, 49, 43, 16, 20, 92, 13, 34, 96, 63, 35, 53, 64, 11, 89, 2, 31, 80, 16, 25, 76, 72, 3, 99, 88, 33, 90, 52, 11, 61, 93, 65, 15, 96, 36, 46, 18, 41, 83, 97, 38, 32, 45, 13, 52, 26, 80, 52, 18, 93, 65, 25, 93, 65, 97, 30, 61, 77, 32, 37, 13, 77, 71, 33, 3, 65, 39, 66, 17, 23, 44, 97, 27, 31, 81, 11, 18, 87, 29, 62, 69, 73, 93, 96, 33, 41, 68, 3, 92, 55, 45, 47, 65, 56, 45, 85, 89, 36, 63, 36, 73, 69, 18, 77, 80, 47, 59, 96, 80, 13, 37, 31, 35, 23, 67, 34, 21, 31, 61, 22, 87, 56, 91, 4, 100, 33, 35, 9, 66, 68, 57, 97, 56, 26, 27, 73, 62, 15, 49, 31, 35, 34, 33, 9, 11, 14, 11, 67, 95, 61, 61, 14, 73, 60, 59, 3, 30, 45, 73, 35, 43, 23, 53, 33, 71, 6, 47, 33, 46, 19, 75, 24, 13, 59, 6, 63, 99, 21, 93, 16, 56, 84, 79, 67, 12, 2, 41, 57, 7, 86, 45, 43, 78, 14, 43, 100, 42, 60, 61, 11, 9, 85, 75, 39, 88, 77, 46, 89, 5, 76, 94, 54, 65, 66, 52, 100, 51, 54, 71, 99, 48, 76, 67, 73, 57, 10, 26, 48, 79, 57, 35, 7, 48, 83, 92, 85, 65, 22, 23, 4, 69, 50, 31, 55, 100, 58, 48, 81, 98, 21, 45, 76, 44, 8, 67, 87, 66, 38, 35, 89, 72]
last_save: 726

Gen:2030
last_save: 726
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.4444444444444444
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],+429867.4638).all():
      return False
    else:
      return True
  def adf1(index):
    if np.greater(x[index],-032943.4259).all():
      return True
    else:
      return False
  def adf2(index):
    if np.greater(x[index],+021568.2292).all():
      return True
    else:
      return False
  def adf3(index):
    if np.less(psqrt(x[index]),+444850.3089).all():
      return False
    else:
      return True
  def adf4(index):
    if np.equal(x[index],+265158.6513).all():
      return True
    else:
      return False
  def adf5(index):
    if np.greater(np.sin(x[index]),-529346.0381).all():
      return False
    else:
      return True
  def adf6(index):
    if np.greater(sigmoid(x[index]),-110084.1353).all():
      return False
    else:
      return True
  def adf7(index):
    if np.greater(sigmoid(x[index]),+573176.8922).all():
      return False
    else:
      return True
  def adf8(index):
    if np.greater(x[index],+749923.1753).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*-362.375, adf1(1)*-475.761, adf2(2)*-881.283, adf3(3)*-124.861, adf4(4)*-679.007, adf5(5)*+979.512, adf6(6)*+674.840, adf7(7)*-618.674, adf8(8)*-951.667], [0, 0, 1, 1, 1, 1, 0, 0], 897.871)
result=p(); 0.6666666666666666
IndLenGenome:415
IndGenome:[17, 65, 29, 58, 2, 20, 33, 51, 11, 47, 18, 17, 97, 28, 22, 69, 71, 79, 26, 35, 85, 59, 63, 13, 75, 84, 89, 63, 62, 70, 9, 63, 21, 54, 19, 32, 66, 57, 43, 75, 21, 55, 84, 77, 92, 85, 15, 99, 89, 97, 19, 74, 43, 18, 84, 88, 3, 32, 64, 77, 51, 79, 27, 61, 27, 39, 39, 13, 95, 17, 91, 7, 89, 6, 19, 58, 56, 80, 61, 66, 41, 39, 51, 14, 22, 40, 72, 63, 20, 38, 20, 91, 89, 76, 17, 36, 35, 64, 49, 38, 12, 54, 48, 58, 70, 14, 25, 93, 68, 23, 42, 31, 67, 77, 41, 86, 85, 47, 76, 12, 66, 11, 66, 10, 73, 47, 82, 50, 91, 83, 43, 25, 75, 61, 41, 27, 86, 26, 24, 89, 50, 36, 95, 38, 56, 16, 54, 48, 51, 20, 28, 37, 98, 84, 77, 25, 45, 79, 20, 99, 82, 56, 14, 24, 43, 66, 77, 51, 94, 87, 86, 81, 63, 50, 52, 88, 87, 28, 41, 25, 18, 36, 74, 47, 26, 95, 13, 42, 25, 15, 69, 62, 97, 65, 1, 88, 39, 37, 56, 12, 78, 77, 42, 19, 18, 58, 94, 99, 22, 93, 14, 30, 85, 90, 90, 78, 53, 57, 64, 69, 13, 60, 50, 64, 35, 17, 92, 52, 23, 74, 16, 95, 82, 18, 29, 34, 17, 95, 42, 72, 24, 24, 13, 53, 84, 67, 65, 51, 38, 91, 67, 62, 81, 27, 61, 23, 40, 12, 73, 98, 19, 28, 87, 36, 50, 29, 54, 11, 65, 12, 11, 46, 86, 43, 59, 76, 47, 73, 37, 74, 41, 94, 96, 9, 78, 48, 9, 81, 79, 3, 98, 61, 15, 55, 62, 54, 100, 16, 40, 97, 49, 82, 47, 27, 55, 71, 84, 1, 29, 44, 2, 44, 75, 2, 96, 23, 65, 41, 95, 96, 60, 16, 62, 89, 89, 74, 90, 4, 38, 32, 36, 11, 31, 32, 65, 53, 57, 39, 81, 16, 44, 22, 48, 14, 37, 81, 23, 28, 47, 83, 67, 52, 66, 53, 86, 16, 3, 90, 61, 38, 41, 14, 88, 7, 41, 46, 61, 25, 8, 8, 47, 33, 76, 13, 35, 56, 92, 18, 26, 40, 86, 25, 53, 99, 76, 83, 89, 54, 96, 42, 50, 33, 82, 15, 50, 3, 17, 51, 80, 29, 82, 15, 26, 97, 47, 80, 96, 67, 6, 45, 25, 70, 9, 35, 96]
last_save: 727

Gen:51
TrainFitness:0.7777777777777778
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],-759130.4125).all():
      return True
    else:
      return True
  def adf1(index):
    if np.less(x[index],+004563.1146).all():
      return False
    else:
      return True
  def adf2(index):
    if np.less(np.tanh(x[index]),+584705.1714).all():
      return False
    else:
      return True
  def adf3(index):
    if np.less(np.cos(x[index]),+765815.4875).all():
      return False
    else:
      return True
  def adf4(index):
    if np.equal(x[index],-800854.2247).all():
      return False
    else:
      return False
  def adf5(index):
    if np.greater(np.sin(x[index]),+483067.9906).all():
      if np.greater(x[index],+711389.2424).all():
        return False
      else:
        return True
      return True
    else:
      if np.less(np.tanh(x[index]),+011140.1347).all():
        return False
      else:
        return True
      return False
  def adf6(index):
    if np.greater(x[index],-700449.0679).all():
      return False
    else:
      return False
  def adf7(index):
    if np.greater(x[index],-904236.6055).all():
      return True
    else:
      return True
  def adf8(index):
    if np.less(x[index],-010473.2565).all():
      if np.greater(psqrt(x[index]),+572433.2314).all():
        if np.equal(x[index],-087397.4581).all():
          return True
        else:
          return True
        return False
      else:
        if np.equal(x[index],-102578.5592).all():
          return True
        else:
          return True
        return False
      return False
    else:
      if np.equal(rlog(x[index]),-835423.9815).all():
        return False
      else:
        return True
      return True
  return multiple_operation([adf0(0)*-692.972, adf1(1)*+976.026, adf2(2)*-458.204, adf3(3)*+841.155, adf4(4)*-436.533, adf5(5)*-242.877, adf6(6)*+669.116, adf7(7)*-045.481, adf8(8)*+437.010], [1, 1, 1, 1, 1, 0, 1, 1], 042.614)
result=p(); 0.7777777777777778
IndLenGenome:396
IndGenome:[23, 78, 6, 95, 47, 27, 45, 25, 4, 67, 75, 69, 41, 63, 90, 44, 71, 72, 85, 28, 28, 76, 87, 19, 15, 92, 62, 46, 60, 50, 74, 55, 56, 43, 21, 41, 64, 56, 95, 68, 22, 73, 85, 2, 62, 76, 76, 66, 15, 88, 54, 37, 80, 85, 11, 97, 21, 14, 39, 80, 41, 95, 22, 50, 19, 17, 74, 94, 57, 26, 75, 8, 81, 35, 74, 68, 27, 45, 11, 26, 60, 43, 29, 53, 49, 49, 16, 88, 40, 40, 58, 85, 14, 32, 82, 44, 47, 93, 15, 66, 40, 36, 99, 34, 36, 77, 18, 39, 34, 58, 53, 40, 6, 47, 69, 39, 70, 46, 37, 39, 61, 91, 12, 69, 87, 21, 91, 33, 88, 19, 42, 34, 32, 34, 9, 76, 40, 15, 85, 80, 44, 37, 38, 4, 10, 81, 91, 21, 64, 40, 41, 43, 54, 67, 33, 82, 55, 76, 85, 36, 95, 78, 3, 72, 27, 40, 20, 4, 4, 39, 70, 46, 37, 39, 61, 91, 12, 69, 87, 21, 12, 33, 88, 19, 100, 34, 32, 83, 26, 76, 40, 15, 85, 80, 44, 32, 38, 4, 10, 81, 91, 21, 64, 40, 41, 80, 54, 67, 33, 82, 75, 76, 85, 36, 11, 78, 78, 89, 86, 24, 50, 35, 57, 2, 34, 83, 23, 42, 63, 11, 34, 69, 53, 73, 71, 53, 96, 10, 58, 47, 33, 89, 27, 24, 95, 58, 81, 82, 14, 25, 63, 14, 19, 40, 87, 23, 51, 40, 72, 95, 67, 98, 95, 95, 19, 82, 40, 68, 27, 89, 57, 98, 72, 28, 56, 17, 79, 78, 3, 15, 4, 22, 33, 39, 78, 31, 95, 89, 28, 58, 95, 83, 36, 63, 18, 36, 29, 72, 19, 27, 72, 25, 52, 91, 29, 47, 76, 60, 72, 96, 52, 93, 2, 34, 45, 38, 92, 100, 74, 89, 62, 54, 78, 24, 31, 11, 75, 85, 27, 77, 27, 84, 53, 6, 55, 83, 13, 71, 55, 31, 72, 4, 2, 58, 37, 7, 83, 52, 74, 6, 96, 49, 11, 1, 6, 22, 71, 22, 10, 94, 65, 94, 98, 1, 58, 78, 83, 94, 3, 87, 40, 51, 10, 57, 63, 17, 1, 5, 89, 32, 55, 77, 61, 40, 94, 52, 36, 71, 54, 72, 7, 96, 23, 18, 66, 93]
last_save: 727

Gen:2051
last_save: 727
Exit:FalseFalseTrue