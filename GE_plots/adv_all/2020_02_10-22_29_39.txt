Dataset:Meander/Full.csv
FS:True
Seed:1234
Size:10

Gen:1
TrainFitness:1.0
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(np.tanh(x[index]),+006198.9320).all():
      return True
    else:
      return False
  def adf1(index):
    if np.greater(rlog(x[index]),+082714.0491).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(x[index],+665878.3737).all():
      return False
    else:
      return True
  def adf3(index):
    if np.less(np.sin(x[index]),-695378.4682).all():
      return True
    else:
      return True
  def adf4(index):
    if np.equal(np.sin(x[index]),+344461.9600).all():
      return False
    else:
      return False
  def adf7(index):
    if np.less(np.tanh(x[index]),+627769.7001).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*-304.952, adf1(1)*-471.959, adf2(2)*+002.157, adf3(3)*+970.134, adf4(4)*+334.419, adf7(7)*+154.417], [1, 0, 1, 1, 0], 711.398)
result=p(); 1.0
IndLenGenome:286
IndGenome:[64, 17, 41, 87, 72, 48, 31, 86, 57, 32, 46, 65, 85, 97, 77, 52, 7, 8, 89, 23, 39, 56, 83, 74, 99, 31, 77, 27, 87, 30, 85, 99, 90, 43, 39, 84, 71, 45, 97, 44, 93, 76, 26, 74, 99, 32, 54, 70, 66, 58, 34, 66, 40, 66, 59, 29, 38, 87, 64, 56, 77, 4, 14, 10, 85, 23, 54, 27, 59, 66, 59, 65, 32, 74, 33, 78, 42, 81, 80, 88, 10, 61, 91, 95, 10, 62, 83, 18, 13, 42, 66, 1, 44, 74, 29, 47, 54, 96, 47, 47, 63, 53, 46, 39, 30, 59, 73, 14, 10, 40, 75, 2, 39, 88, 73, 55, 41, 74, 19, 42, 31, 85, 12, 50, 61, 25, 66, 51, 76, 82, 84, 17, 11, 21, 31, 64, 78, 52, 42, 45, 53, 57, 16, 19, 72, 42, 14, 69, 15, 51, 20, 38, 20, 20, 67, 50, 31, 73, 97, 80, 84, 64, 4, 28, 88, 94, 77, 59, 14, 19, 16, 47, 42, 95, 56, 98, 99, 52, 81, 98, 21, 67, 36, 17, 80, 20, 62, 57, 89, 76, 71, 44, 26, 88, 20, 60, 58, 73, 86, 49, 68, 39, 17, 77, 61, 60, 64, 86, 53, 79, 96, 30, 11, 76, 92, 76, 11, 76, 58, 68, 98, 43, 95, 81, 60, 17, 49, 89, 21, 27, 38, 58, 67, 67, 37, 44, 42, 35, 98, 94, 90, 46, 59, 42, 54, 94, 47, 57, 85, 63, 43, 9, 19, 69, 51, 71, 66, 35, 58, 80, 71, 65, 98, 7, 0, 71, 64, 8, 82, 62, 29, 15, 52, 32, 4, 86, 66, 11, 79, 27, 90, 31, 19, 60, 95, 90]
last_save: 1001

Gen:1
last_save: 1001
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.6666666666666666
TestFitness:1.0
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(sigmoid(x[index]),-103496.1920).all():
      return False
    else:
      return True
  def adf1(index):
    if np.equal(x[index],+163679.4633).all():
      return True
    else:
      return False
  def adf2(index):
    if np.equal(psqrt(x[index]),-068957.0335).all():
      return False
    else:
      return True
  def adf3(index):
    if np.less(np.cos(x[index]),-344979.3891).all():
      return True
    else:
      return True
  def adf4(index):
    if np.equal(np.cos(x[index]),-111417.6296).all():
      return False
    else:
      return False
  def adf7(index):
    if np.less(x[index],+937199.5188).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+922.296, adf1(1)*-681.332, adf2(2)*+205.009, adf3(3)*+348.111, adf4(4)*-040.564, adf7(7)*+678.600], [0, 1, 1, 0, 0], 550.710)
result=p(); 0.6666666666666666
IndLenGenome:285
IndGenome:[32, 89, 45, 48, 91, 72, 1, 69, 53, 37, 91, 45, 31, 16, 5, 5, 13, 62, 18, 101, 31, 87, 80, 71, 76, 9, 19, 87, 12, 24, 33, 33, 46, 80, 100, 21, 42, 27, 69, 46, 56, 73, 3, 70, 8, 62, 70, 99, 26, 49, 80, 80, 17, 4, 37, 86, 81, 85, 30, 46, 27, 59, 29, 34, 59, 55, 8, 43, 68, 7, 37, 54, 39, 17, 25, 39, 61, 39, 11, 89, 79, 16, 61, 11, 12, 89, 22, 5, 63, 77, 94, 23, 21, 46, 55, 11, 28, 21, 54, 64, 58, 39, 66, 71, 78, 72, 96, 51, 7, 33, 13, 14, 93, 36, 23, 71, 69, 67, 23, 93, 16, 95, 86, 79, 87, 70, 70, 80, 90, 12, 73, 62, 23, 59, 89, 92, 50, 88, 89, 50, 68, 39, 36, 60, 94, 53, 95, 22, 27, 19, 85, 99, 20, 96, 55, 48, 36, 90, 67, 77, 66, 96, 35, 27, 20, 91, 22, 82, 57, 26, 34, 61, 80, 57, 23, 17, 50, 41, 4, 89, 84, 76, 90, 41, 27, 6, 56, 44, 11, 22, 89, 65, 97, 4, 87, 2, 79, 50, 26, 60, 47, 14, 64, 34, 49, 23, 45, 80, 23, 39, 22, 44, 71, 60, 93, 74, 53, 70, 90, 16, 24, 71, 63, 59, 88, 93, 55, 37, 61, 60, 72, 41, 28, 82, 95, 19, 25, 16, 89, 29, 42, 93, 78, 45, 33, 5, 42, 11, 44, 100, 80, 88, 75, 69, 29, 84, 75, 71, 0, 61, 83, 52, 36, 2, 29, 37, 33, 46, 14, 31, 14, 22, 33, 73, 71, 39, 35, 95, 63, 4, 42, 6, 50, 57, 66]
last_save: 1002

Gen:2
TrainFitness:0.8333333333333334
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],-765786.1108).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(x[index],+033049.0496).all():
      return False
    else:
      return True
  def adf2(index):
    if np.greater(x[index],-682261.8912).all():
      return True
    else:
      return False
  def adf3(index):
    if np.equal(x[index],+269878.3135).all():
      return True
    else:
      return False
  def adf4(index):
    if np.less(x[index],+751775.2712).all():
      return False
    else:
      return True
  def adf7(index):
    if np.equal(x[index],-067386.2254).all():
      if np.less(np.sin(x[index]),+377883.0997).all():
        return False
      else:
        return False
      return False
    else:
      if np.equal(x[index],-676157.8020).all():
        return True
      else:
        return False
      return False
  return multiple_operation([adf0(0)*+404.368, adf1(1)*-872.381, adf2(2)*-602.273, adf3(3)*-091.030, adf4(4)*+292.783, adf7(7)*-435.040], [1, 0, 0, 0, 0], 467.050)
result=p(); 0.8333333333333334
IndLenGenome:285
IndGenome:[35, 51, 21, 33, 8, 33, 74, 99, 25, 27, 26, 35, 57, 8, 56, 81, 61, 10, 28, 7, 51, 59, 91, 40, 73, 96, 92, 7, 80, 73, 63, 10, 74, 99, 60, 44, 39, 76, 5, 72, 27, 33, 78, 83, 4, 61, 38, 26, 58, 12, 42, 36, 31, 98, 39, 71, 72, 96, 17, 34, 59, 44, 33, 18, 24, 32, 12, 66, 19, 28, 37, 38, 13, 71, 13, 95, 56, 15, 92, 73, 58, 41, 15, 64, 10, 7, 95, 61, 57, 37, 95, 42, 97, 61, 12, 43, 98, 57, 46, 27, 32, 15, 36, 97, 22, 10, 6, 7, 73, 88, 36, 52, 92, 15, 54, 35, 97, 46, 24, 33, 18, 65, 73, 17, 7, 58, 28, 33, 40, 59, 19, 97, 29, 37, 51, 91, 92, 31, 70, 19, 65, 96, 17, 86, 31, 45, 57, 48, 20, 62, 30, 46, 61, 39, 95, 52, 47, 12, 50, 54, 50, 94, 63, 36, 38, 63, 85, 63, 98, 47, 62, 93, 88, 51, 33, 87, 24, 66, 80, 72, 72, 87, 33, 43, 77, 80, 70, 49, 91, 80, 53, 70, 58, 48, 43, 52, 49, 12, 67, 38, 33, 35, 89, 5, 74, 63, 85, 50, 94, 30, 18, 33, 32, 44, 96, 38, 37, 24, 16, 37, 70, 65, 70, 39, 91, 95, 3, 40, 62, 38, 79, 21, 68, 75, 10, 65, 19, 87, 95, 38, 60, 26, 7, 31, 86, 82, 61, 4, 35, 79, 24, 70, 5, 70, 74, 1, 20, 70, 63, 67, 83, 92, 17, 78, 54, 9, 100, 60, 74, 64, 80, 96, 2, 20, 33, 44, 49, 28, 76, 48, 41, 13, 64, 76, 35]
last_save: 1002

Gen:2002
last_save: 1002
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],+024809.0529).all():
      return False
    else:
      return True
  def adf1(index):
    if np.less(np.cos(x[index]),+893725.8165).all():
      return True
    else:
      return False
  def adf2(index):
    if np.less(x[index],+912585.2835).all():
      return False
    else:
      return False
  def adf3(index):
    if np.less(x[index],+613795.7793).all():
      return False
    else:
      return False
  def adf4(index):
    if np.equal(np.sin(x[index]),+574409.5691).all():
      return True
    else:
      return True
  def adf7(index):
    if np.equal(x[index],-721314.7125).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*-529.363, adf1(1)*+257.560, adf2(2)*-347.410, adf3(3)*+012.656, adf4(4)*-779.793, adf7(7)*+182.179], [0, 1, 0, 0, 0], 281.128)
result=p(); 0.8333333333333334
IndLenGenome:282
IndGenome:[76, 73, 56, 29, 75, 63, 69, 45, 17, 97, 4, 64, 82, 82, 91, 22, 41, 68, 43, 52, 75, 23, 44, 70, 23, 8, 77, 14, 91, 65, 4, 42, 55, 33, 15, 79, 96, 25, 46, 77, 96, 71, 35, 28, 52, 7, 35, 49, 84, 14, 30, 17, 8, 26, 62, 27, 95, 61, 29, 61, 89, 82, 10, 25, 26, 37, 37, 10, 25, 60, 12, 16, 41, 58, 37, 74, 21, 93, 78, 54, 93, 93, 92, 92, 13, 61, 89, 72, 29, 52, 28, 60, 22, 44, 10, 61, 58, 58, 81, 27, 11, 25, 56, 15, 71, 84, 64, 41, 22, 53, 45, 20, 19, 89, 69, 16, 97, 99, 85, 75, 91, 74, 42, 18, 80, 98, 92, 57, 92, 41, 49, 66, 94, 61, 84, 48, 63, 39, 88, 37, 68, 65, 45, 66, 59, 58, 8, 46, 88, 89, 17, 72, 14, 22, 49, 69, 77, 49, 69, 27, 47, 87, 13, 26, 97, 75, 43, 75, 61, 33, 75, 27, 99, 63, 57, 73, 63, 45, 71, 75, 77, 84, 51, 43, 97, 92, 72, 51, 60, 61, 26, 80, 57, 63, 94, 80, 18, 88, 97, 12, 56, 81, 20, 41, 81, 42, 20, 21, 19, 5, 83, 52, 21, 66, 90, 31, 9, 64, 24, 2, 47, 8, 5, 14, 71, 60, 45, 98, 87, 3, 82, 39, 59, 20, 12, 12, 25, 47, 96, 60, 60, 82, 13, 23, 36, 65, 96, 79, 26, 50, 40, 72, 84, 82, 95, 67, 65, 94, 39, 1, 84, 100, 68, 36, 3, 65, 62, 81, 19, 7, 46, 72, 97, 8, 62, 19, 8, 93, 82, 68, 36, 33]
last_save: 1003

Gen:2001
last_save: 1003
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:1.0
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(np.tanh(x[index]),+428079.7612).all():
      return False
    else:
      return False
  def adf1(index):
    if np.equal(x[index],+089986.6420).all():
      return True
    else:
      return True
  def adf2(index):
    if np.less(x[index],-037753.1442).all():
      return True
    else:
      return True
  def adf3(index):
    if np.less(x[index],-439559.4218).all():
      return True
    else:
      return True
  def adf4(index):
    if np.less(x[index],+956280.9098).all():
      return False
    else:
      return False
  def adf7(index):
    if np.greater(np.tanh(x[index]),+588847.3118).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*-989.596, adf1(1)*-024.820, adf2(2)*+427.247, adf3(3)*+650.129, adf4(4)*-943.535, adf7(7)*+261.051], [0, 0, 1, 1, 1], 471.335)
result=p(); 0.6666666666666666
IndLenGenome:282
IndGenome:[88, 47, 96, 46, 17, 97, 9, 32, 25, 33, 84, 28, 58, 55, 45, 20, 1, 81, 16, 7, 24, 56, 87, 49, 24, 83, 58, 10, 42, 60, 73, 68, 68, 33, 43, 80, 3, 39, 65, 43, 5, 47, 28, 64, 82, 77, 77, 34, 66, 53, 12, 25, 8, 90, 37, 19, 30, 31, 57, 99, 38, 49, 4, 67, 47, 43, 50, 95, 78, 34, 85, 73, 72, 65, 77, 41, 82, 7, 10, 85, 71, 99, 70, 38, 41, 19, 44, 48, 14, 41, 17, 60, 58, 80, 60, 12, 39, 21, 70, 44, 93, 26, 45, 66, 61, 97, 51, 67, 24, 20, 86, 34, 82, 31, 44, 31, 25, 53, 62, 32, 49, 29, 7, 66, 89, 89, 54, 78, 28, 24, 59, 51, 32, 11, 70, 18, 51, 55, 25, 33, 45, 54, 83, 67, 14, 54, 88, 95, 12, 50, 45, 59, 79, 36, 87, 99, 54, 72, 23, 59, 32, 21, 37, 44, 64, 85, 47, 70, 96, 77, 13, 59, 92, 10, 37, 86, 28, 52, 10, 12, 22, 79, 86, 98, 40, 88, 34, 89, 21, 20, 31, 37, 95, 19, 75, 8, 73, 95, 99, 25, 80, 45, 17, 47, 0, 1, 59, 71, 1, 33, 80, 89, 79, 10, 64, 53, 56, 0, 68, 38, 32, 3, 6, 14, 25, 28, 74, 98, 75, 7, 68, 17, 74, 43, 44, 67, 9, 26, 44, 33, 29, 62, 52, 25, 34, 76, 42, 88, 71, 97, 50, 49, 3, 26, 65, 31, 31, 35, 20, 79, 56, 36, 71, 3, 3, 57, 82, 9, 60, 18, 11, 81, 55, 62, 45, 16, 2, 66, 88, 10, 83, 13]
last_save: 1004

Gen:2
TrainFitness:0.8333333333333334
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],+528552.9464).all():
      if np.greater(x[index],-455430.4003).all():
        return False
      else:
        return False
      return True
    else:
      if np.less(x[index],+013371.7872).all():
        return True
      else:
        return False
      return False
  def adf1(index):
    if np.equal(x[index],+564955.2722).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(rlog(x[index]),+060372.1339).all():
      return True
    else:
      return False
  def adf3(index):
    if np.less(x[index],-316066.9007).all():
      return False
    else:
      return True
  def adf4(index):
    if np.greater(psqrt(x[index]),-276619.7627).all():
      return False
    else:
      return True
  def adf7(index):
    if np.greater(x[index],+311099.7295).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+868.215, adf1(1)*-417.618, adf2(2)*-455.186, adf3(3)*-344.282, adf4(4)*-758.368, adf7(7)*-648.254], [0, 0, 0, 0, 1], 422.400)
result=p(); 0.8333333333333334
IndLenGenome:418
IndGenome:[48, 95, 23, 12, 81, 53, 91, 2, 90, 99, 25, 82, 58, 95, 45, 52, 9, 24, 26, 84, 45, 84, 5, 9, 45, 99, 4, 95, 55, 4, 43, 40, 14, 60, 10, 83, 81, 93, 28, 91, 43, 7, 63, 72, 38, 20, 61, 43, 3, 47, 41, 37, 48, 27, 82, 64, 77, 19, 14, 41, 56, 53, 49, 14, 39, 95, 96, 54, 29, 25, 85, 52, 37, 82, 12, 41, 55, 20, 55, 36, 78, 22, 15, 10, 50, 70, 96, 70, 53, 37, 82, 81, 43, 43, 9, 26, 63, 79, 95, 61, 23, 46, 93, 55, 73, 41, 86, 20, 76, 76, 79, 50, 10, 27, 51, 56, 90, 37, 96, 26, 77, 85, 47, 87, 92, 67, 16, 96, 21, 19, 57, 26, 32, 77, 79, 56, 31, 65, 87, 93, 29, 70, 85, 23, 71, 71, 50, 29, 29, 97, 32, 9, 85, 63, 87, 61, 14, 51, 78, 62, 88, 96, 58, 92, 21, 75, 17, 31, 75, 74, 41, 57, 16, 91, 58, 73, 45, 78, 84, 65, 65, 11, 48, 26, 51, 11, 94, 83, 24, 54, 42, 58, 42, 47, 77, 7, 27, 55, 88, 23, 86, 58, 45, 49, 40, 66, 4, 18, 62, 85, 54, 45, 78, 36, 38, 58, 89, 82, 44, 32, 32, 44, 90, 60, 99, 87, 24, 91, 12, 59, 88, 68, 98, 52, 89, 89, 79, 37, 12, 22, 56, 27, 8, 74, 28, 52, 17, 87, 65, 32, 81, 30, 94, 80, 88, 71, 86, 78, 35, 34, 91, 87, 56, 99, 96, 90, 17, 56, 82, 67, 60, 26, 92, 47, 90, 43, 91, 40, 53, 4, 32, 90, 20, 93, 95, 93, 38, 94, 84, 45, 18, 16, 26, 72, 80, 20, 18, 89, 21, 49, 53, 95, 15, 81, 45, 48, 85, 58, 56, 46, 39, 43, 99, 83, 89, 74, 66, 26, 17, 18, 47, 71, 97, 34, 38, 75, 74, 19, 80, 91, 85, 10, 16, 72, 47, 4, 45, 52, 52, 11, 5, 81, 29, 25, 74, 67, 35, 79, 45, 22, 21, 29, 12, 11, 34, 72, 95, 34, 94, 21, 63, 80, 83, 34, 16, 1, 11, 23, 11, 50, 81, 10, 10, 71, 51, 47, 23, 72, 83, 52, 91, 76, 100, 19, 78, 22, 3, 60, 62, 3, 59, 24, 2, 58, 91, 51, 4, 67, 92, 38, 91, 6, 67, 85, 66, 3, 32, 87, 70, 60, 94, 91, 83, 90, 58, 13, 79, 88]
last_save: 1004

Gen:2002
last_save: 1004
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],+031744.0918).all():
      return True
    else:
      return False
  def adf1(index):
    if np.equal(psqrt(x[index]),+485249.3356).all():
      return True
    else:
      return False
  def adf2(index):
    if np.less(sigmoid(x[index]),+602671.9687).all():
      return False
    else:
      return False
  def adf3(index):
    if np.less(rlog(x[index]),-201107.9312).all():
      return True
    else:
      return False
  def adf4(index):
    if np.less(psqrt(x[index]),-386048.9467).all():
      return False
    else:
      return False
  def adf7(index):
    if np.less(np.cos(x[index]),+695467.8961).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+686.438, adf1(1)*+895.575, adf2(2)*-773.878, adf3(3)*-714.396, adf4(4)*-761.102, adf7(7)*-050.229], [0, 1, 1, 0, 0], 068.209)
result=p(); 0.8333333333333334
IndLenGenome:286
IndGenome:[30, 67, 78, 20, 81, 51, 63, 37, 70, 44, 25, 8, 93, 51, 97, 32, 24, 60, 19, 93, 85, 11, 24, 50, 46, 88, 96, 43, 29, 70, 21, 33, 80, 47, 89, 10, 80, 59, 65, 46, 88, 53, 34, 56, 8, 69, 18, 88, 76, 49, 76, 67, 63, 51, 39, 20, 35, 57, 56, 38, 74, 9, 55, 87, 66, 39, 79, 54, 67, 54, 15, 97, 66, 22, 52, 20, 66, 25, 25, 52, 37, 50, 67, 71, 21, 19, 15, 79, 46, 86, 87, 27, 78, 89, 37, 69, 13, 10, 47, 28, 93, 87, 88, 19, 57, 36, 72, 81, 27, 39, 43, 8, 95, 29, 48, 16, 79, 97, 35, 2, 70, 76, 24, 30, 71, 20, 63, 89, 70, 86, 58, 51, 92, 38, 94, 68, 55, 52, 70, 80, 98, 30, 17, 46, 96, 41, 12, 46, 14, 44, 17, 46, 23, 31, 78, 20, 11, 54, 61, 80, 27, 83, 3, 79, 83, 94, 32, 43, 84, 45, 58, 56, 88, 15, 87, 80, 72, 79, 11, 78, 98, 49, 62, 64, 66, 82, 71, 31, 70, 83, 93, 72, 25, 91, 15, 38, 11, 38, 18, 9, 64, 49, 11, 97, 75, 94, 74, 86, 44, 69, 72, 28, 42, 98, 46, 5, 57, 1, 50, 82, 86, 12, 74, 88, 73, 28, 41, 10, 82, 35, 36, 64, 53, 27, 81, 54, 6, 91, 35, 53, 57, 19, 7, 46, 79, 16, 87, 88, 57, 39, 99, 94, 91, 79, 6, 58, 49, 95, 59, 88, 8, 92, 33, 81, 81, 100, 75, 14, 91, 65, 40, 25, 87, 75, 1, 35, 44, 15, 59, 19, 98, 51, 69, 88, 23, 66]
last_save: 1005

Gen:2001
last_save: 1005
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],+283879.1845).all():
      return False
    else:
      return False
  def adf1(index):
    if np.equal(x[index],-086290.7379).all():
      return False
    else:
      return False
  def adf2(index):
    if np.equal(np.tanh(x[index]),-391069.1748).all():
      return False
    else:
      return True
  def adf3(index):
    if np.equal(x[index],+370645.0164).all():
      return True
    else:
      return False
  def adf4(index):
    if np.less(np.cos(x[index]),+940563.2586).all():
      return False
    else:
      return False
  def adf7(index):
    if np.greater(x[index],+089204.5231).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*-912.495, adf1(1)*+913.112, adf2(2)*+979.297, adf3(3)*+323.105, adf4(4)*-266.615, adf7(7)*-755.681], [1, 1, 0, 1, 0], 315.800)
result=p(); 0.6666666666666666
IndLenGenome:282
IndGenome:[36, 68, 30, 55, 35, 50, 92, 24, 33, 35, 45, 45, 81, 11, 76, 5, 43, 75, 69, 58, 73, 14, 72, 53, 5, 78, 57, 26, 69, 29, 57, 90, 87, 40, 46, 60, 53, 3, 50, 16, 85, 36, 64, 11, 3, 3, 93, 32, 49, 22, 87, 71, 69, 28, 11, 2, 74, 57, 31, 87, 22, 27, 52, 51, 14, 47, 92, 99, 45, 7, 31, 33, 31, 81, 85, 17, 56, 99, 93, 34, 36, 78, 33, 55, 27, 28, 52, 3, 57, 23, 69, 32, 71, 10, 80, 50, 61, 47, 81, 49, 53, 23, 53, 46, 21, 5, 14, 57, 24, 41, 25, 28, 95, 7, 32, 52, 24, 51, 66, 35, 32, 39, 90, 46, 86, 69, 38, 65, 83, 39, 58, 71, 55, 46, 1, 21, 39, 25, 95, 99, 92, 63, 27, 74, 45, 87, 63, 64, 19, 58, 11, 34, 36, 20, 10, 52, 71, 51, 25, 98, 94, 78, 60, 32, 88, 75, 15, 59, 63, 24, 49, 44, 23, 22, 10, 38, 67, 25, 42, 86, 69, 53, 27, 37, 89, 51, 11, 97, 44, 15, 96, 44, 34, 6, 58, 1, 37, 21, 92, 38, 42, 21, 64, 2, 27, 95, 85, 70, 60, 42, 73, 11, 60, 52, 74, 90, 24, 20, 27, 1, 87, 3, 7, 83, 68, 22, 50, 41, 11, 71, 6, 28, 36, 11, 96, 13, 79, 63, 98, 75, 32, 91, 0, 62, 46, 30, 47, 67, 60, 18, 85, 53, 52, 1, 0, 18, 53, 30, 34, 75, 13, 31, 15, 70, 33, 84, 10, 87, 1, 14, 18, 64, 70, 61, 74, 1, 47, 33, 8, 64, 2, 92]
last_save: 1006

Gen:2
TrainFitness:0.8333333333333334
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],-564025.9893).all():
      return False
    else:
      return False
  def adf1(index):
    if np.equal(x[index],+433339.3440).all():
      return True
    else:
      return True
  def adf2(index):
    if np.less(sigmoid(x[index]),+448934.3481).all():
      return True
    else:
      return True
  def adf3(index):
    if np.greater(rlog(x[index]),+935224.5326).all():
      return False
    else:
      return False
  def adf4(index):
    if np.greater(np.tanh(x[index]),+344785.9617).all():
      if np.less(rlog(x[index]),-202590.6361).all():
        return False
      else:
        return True
      return False
    else:
      if np.less(x[index],+238367.8862).all():
        return True
      else:
        return True
      return True
  def adf7(index):
    if np.greater(x[index],+014242.0168).all():
      if np.equal(np.cos(x[index]),-462471.9202).all():
        return True
      else:
        return False
      return True
    else:
      if np.greater(rlog(x[index]),-020817.8437).all():
        return True
      else:
        return False
      return False
  return multiple_operation([adf0(0)*-718.947, adf1(1)*+143.151, adf2(2)*-080.921, adf3(3)*+076.451, adf4(4)*+791.019, adf7(7)*-743.858], [1, 1, 0, 1, 0], 856.867)
result=p(); 0.8333333333333334
IndLenGenome:285
IndGenome:[76, 99, 74, 61, 47, 35, 77, 29, 24, 35, 66, 44, 10, 72, 35, 59, 38, 9, 63, 27, 7, 70, 35, 29, 97, 96, 90, 89, 24, 13, 53, 3, 23, 59, 13, 44, 24, 50, 92, 92, 70, 87, 94, 6, 87, 72, 2, 60, 44, 4, 28, 49, 23, 54, 63, 64, 48, 31, 36, 78, 44, 39, 15, 58, 34, 13, 48, 19, 39, 63, 75, 82, 42, 44, 15, 23, 82, 46, 53, 25, 56, 56, 54, 69, 20, 80, 45, 60, 94, 23, 24, 94, 27, 88, 65, 99, 86, 41, 87, 13, 19, 10, 46, 52, 77, 64, 12, 20, 52, 35, 69, 60, 66, 33, 46, 91, 47, 92, 17, 47, 34, 73, 22, 90, 60, 42, 23, 88, 83, 46, 87, 48, 8, 56, 72, 32, 34, 40, 15, 88, 82, 93, 91, 41, 30, 46, 70, 11, 34, 82, 34, 72, 80, 21, 26, 88, 51, 32, 38, 13, 89, 35, 99, 24, 96, 62, 74, 87, 21, 69, 42, 40, 42, 84, 67, 36, 47, 99, 60, 70, 77, 61, 31, 70, 72, 90, 18, 71, 17, 58, 14, 13, 67, 30, 49, 45, 7, 63, 86, 73, 27, 97, 1, 8, 49, 64, 27, 99, 52, 71, 51, 54, 73, 51, 55, 11, 66, 75, 42, 40, 58, 20, 99, 2, 61, 92, 54, 98, 30, 17, 6, 24, 55, 41, 61, 78, 0, 77, 59, 41, 0, 71, 19, 51, 89, 79, 27, 4, 53, 48, 55, 78, 74, 75, 21, 22, 33, 4, 40, 8, 95, 66, 98, 56, 77, 83, 27, 27, 24, 28, 93, 43, 94, 52, 11, 44, 57, 0, 74, 48, 2, 18, 19, 42, 61]
last_save: 1006

Gen:2002
last_save: 1006
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(psqrt(x[index]),-809495.6606).all():
      return False
    else:
      return False
  def adf1(index):
    if np.equal(x[index],-439219.1304).all():
      return True
    else:
      return True
  def adf2(index):
    if np.greater(x[index],+624664.7838).all():
      return True
    else:
      return True
  def adf3(index):
    if np.less(x[index],+010402.8629).all():
      return True
    else:
      return False
  def adf4(index):
    if np.greater(x[index],-064366.3368).all():
      return True
    else:
      return True
  def adf7(index):
    if np.less(np.sin(x[index]),-885375.3481).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+809.188, adf1(1)*-271.890, adf2(2)*+978.605, adf3(3)*-948.332, adf4(4)*-503.956, adf7(7)*-184.445], [1, 1, 0, 1, 1], 360.326)
result=p(); 0.8333333333333334
IndLenGenome:282
IndGenome:[89, 87, 56, 54, 91, 85, 79, 79, 93, 73, 10, 53, 5, 33, 35, 28, 52, 98, 18, 38, 19, 71, 12, 64, 80, 68, 5, 72, 89, 28, 41, 62, 14, 20, 90, 22, 45, 67, 83, 47, 31, 58, 73, 95, 84, 93, 4, 33, 73, 94, 38, 78, 11, 18, 45, 29, 45, 80, 88, 10, 99, 72, 71, 43, 49, 23, 72, 67, 94, 89, 77, 33, 37, 21, 23, 1, 84, 56, 74, 48, 95, 26, 34, 56, 21, 77, 62, 86, 86, 84, 10, 74, 61, 98, 17, 57, 28, 65, 65, 85, 55, 39, 84, 8, 66, 53, 90, 19, 13, 41, 13, 83, 32, 8, 36, 84, 68, 97, 75, 86, 38, 76, 51, 60, 7, 27, 14, 79, 48, 92, 96, 14, 46, 15, 41, 99, 65, 94, 16, 62, 80, 23, 56, 60, 28, 64, 93, 48, 88, 54, 36, 43, 48, 11, 40, 83, 36, 76, 44, 25, 66, 14, 38, 19, 91, 85, 33, 14, 50, 33, 10, 93, 80, 40, 62, 75, 74, 24, 51, 92, 41, 40, 63, 53, 72, 39, 38, 69, 80, 23, 58, 49, 97, 59, 83, 40, 82, 98, 67, 48, 60, 13, 76, 9, 26, 80, 94, 14, 80, 81, 20, 43, 76, 18, 100, 50, 9, 15, 58, 95, 95, 32, 32, 50, 6, 40, 87, 97, 37, 22, 28, 79, 68, 94, 34, 69, 14, 56, 80, 41, 59, 77, 32, 22, 5, 87, 41, 84, 59, 4, 53, 75, 100, 63, 37, 85, 46, 0, 29, 23, 95, 90, 97, 96, 43, 14, 13, 19, 29, 72, 43, 48, 9, 0, 41, 92, 24, 18, 85, 99, 67, 55]
last_save: 1007

Gen:692
TrainFitness:1.0
TestFitness:0.6666666666666666
MaxGenLen:695
Individual: def p():
  def adf0(index):
    if np.greater(x[index],-803087.5645).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(x[index],-613120.4100).all():
      return False
    else:
      return True
  def adf2(index):
    if np.less(x[index],+025356.1916).all():
      return False
    else:
      return True
  def adf3(index):
    if np.less(x[index],+000012.0083).all():
      return True
    else:
      return False
  def adf4(index):
    if np.greater(x[index],+023014.6618).all():
      if np.equal(sigmoid(x[index]),-701106.8888).all():
        return True
      else:
        return False
      return True
    else:
      if np.equal(x[index],+993520.0764).all():
        return False
      else:
        return False
      return True
  def adf7(index):
    if np.less(x[index],-203883.9904).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+576.630, adf1(1)*-561.916, adf2(2)*+535.374, adf3(3)*+680.776, adf4(4)*-991.680, adf7(7)*-982.673], [0, 0, 0, 0, 0], 036.800)
result=p(); 1.0
IndLenGenome:289
IndGenome:[68, 34, 24, 3, 9, 95, 4, 85, 64, 28, 90, 23, 60, 58, 97, 85, 56, 34, 85, 99, 45, 9, 71, 88, 79, 39, 83, 82, 96, 51, 83, 21, 72, 30, 14, 21, 80, 90, 77, 86, 42, 11, 25, 67, 96, 86, 73, 60, 42, 65, 73, 95, 16, 11, 49, 81, 96, 3, 16, 23, 15, 43, 75, 33, 0, 74, 30, 30, 0, 50, 31, 22, 90, 90, 18, 23, 22, 59, 91, 24, 67, 45, 69, 91, 68, 74, 80, 32, 23, 50, 61, 84, 46, 86, 71, 38, 77, 32, 4, 75, 82, 27, 77, 17, 20, 11, 31, 40, 86, 98, 58, 38, 88, 44, 93, 98, 5, 95, 59, 8, 32, 26, 49, 19, 83, 45, 92, 90, 50, 77, 36, 34, 29, 91, 36, 83, 89, 31, 93, 92, 53, 21, 32, 20, 23, 88, 88, 63, 69, 49, 30, 14, 21, 89, 90, 77, 86, 42, 11, 25, 67, 96, 86, 73, 60, 42, 65, 73, 95, 16, 11, 49, 81, 96, 3, 16, 23, 15, 43, 75, 33, 17, 74, 34, 86, 50, 36, 8, 90, 47, 87, 86, 62, 15, 8, 59, 29, 41, 6, 88, 50, 38, 69, 72, 59, 48, 32, 26, 57, 3, 9, 26, 80, 94, 54, 80, 81, 20, 43, 76, 18, 100, 50, 9, 15, 58, 95, 95, 32, 32, 50, 6, 40, 87, 97, 37, 22, 28, 79, 68, 94, 34, 69, 14, 56, 80, 41, 59, 77, 32, 22, 5, 87, 41, 84, 59, 4, 53, 75, 100, 63, 37, 85, 46, 0, 58, 23, 95, 90, 97, 96, 43, 14, 13, 33, 29, 72, 43, 48, 9, 0, 41, 92, 24, 18, 85, 99, 67, 55]
last_save: 1007

Gen:692
last_save: 1007
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.6666666666666666
TestFitness:1.0
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(psqrt(x[index]),+873758.5778).all():
      return True
    else:
      return True
  def adf1(index):
    if np.less(x[index],+571645.7499).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(sigmoid(x[index]),+750386.3475).all():
      return False
    else:
      return False
  def adf3(index):
    if np.equal(sigmoid(x[index]),+205255.5202).all():
      return False
    else:
      return True
  def adf4(index):
    if np.greater(x[index],+737367.7861).all():
      return True
    else:
      return False
  def adf7(index):
    if np.less(rlog(x[index]),+213851.2710).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+507.419, adf1(1)*+156.760, adf2(2)*+679.364, adf3(3)*-876.937, adf4(4)*-127.505, adf7(7)*-682.215], [1, 0, 0, 0, 0], 704.010)
result=p(); 0.6666666666666666
IndLenGenome:285
IndGenome:[58, 22, 35, 42, 40, 10, 31, 17, 93, 60, 63, 3, 22, 95, 12, 43, 18, 17, 53, 60, 97, 62, 45, 31, 62, 30, 73, 47, 10, 66, 80, 7, 9, 33, 56, 59, 6, 40, 87, 87, 30, 11, 79, 37, 37, 62, 79, 33, 85, 64, 76, 24, 24, 43, 16, 37, 98, 46, 91, 64, 72, 29, 18, 14, 29, 50, 65, 12, 25, 23, 7, 30, 59, 44, 46, 17, 37, 34, 97, 60, 90, 36, 49, 63, 88, 86, 84, 64, 91, 2, 97, 40, 2, 25, 55, 77, 23, 13, 28, 88, 50, 80, 49, 97, 19, 51, 27, 60, 55, 77, 83, 63, 26, 38, 17, 67, 68, 3, 43, 31, 38, 52, 69, 25, 61, 61, 70, 94, 15, 47, 76, 71, 66, 21, 17, 17, 81, 76, 15, 82, 95, 47, 56, 90, 66, 82, 91, 72, 15, 17, 18, 1, 33, 25, 30, 42, 7, 35, 25, 66, 12, 96, 47, 70, 42, 6, 50, 12, 87, 42, 94, 46, 41, 94, 35, 27, 25, 96, 45, 58, 55, 68, 97, 27, 87, 38, 17, 35, 81, 83, 67, 85, 24, 25, 57, 14, 98, 22, 43, 37, 95, 65, 6, 61, 22, 57, 90, 19, 19, 94, 81, 72, 81, 18, 89, 15, 58, 84, 90, 22, 33, 64, 46, 64, 86, 54, 71, 20, 10, 87, 44, 25, 65, 57, 8, 95, 80, 2, 12, 18, 39, 85, 83, 21, 20, 62, 63, 90, 84, 3, 5, 51, 68, 63, 55, 75, 56, 96, 26, 77, 88, 22, 78, 47, 58, 46, 64, 81, 55, 36, 93, 72, 12, 22, 6, 75, 12, 86, 13, 71, 40, 14, 4, 79, 71]
last_save: 1008

Gen:29
TrainFitness:0.8333333333333334
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],-454493.2893).all():
      return False
    else:
      return True
  def adf1(index):
    if np.less(x[index],+396658.0523).all():
      if np.greater(x[index],-100838.5344).all():
        return True
      else:
        return True
      return True
    else:
      if np.equal(x[index],-061984.6609).all():
        return False
      else:
        return False
      return False
  def adf2(index):
    if np.greater(x[index],+003912.4375).all():
      return True
    else:
      return False
  def adf3(index):
    if np.less(x[index],-064124.1258).all():
      return True
    else:
      return False
  def adf4(index):
    if np.less(x[index],+010902.7754).all():
      return False
    else:
      return True
  def adf7(index):
    if np.greater(x[index],+866957.7251).all():
      if np.equal(psqrt(x[index]),-958413.0162).all():
        return True
      else:
        return False
      return False
    else:
      if np.equal(x[index],+561582.8683).all():
        return True
      else:
        return True
      return False
  return multiple_operation([adf0(0)*+320.548, adf1(1)*-225.409, adf2(2)*+336.337, adf3(3)*-474.707, adf4(4)*+688.689, adf7(7)*-281.924], [1, 1, 0, 0, 0], 353.819)
result=p(); 0.8333333333333334
IndLenGenome:494
IndGenome:[97, 84, 74, 83, 77, 39, 69, 55, 58, 14, 75, 84, 94, 49, 53, 52, 8, 49, 23, 97, 96, 75, 36, 14, 13, 11, 48, 34, 8, 3, 69, 6, 66, 25, 28, 90, 45, 22, 83, 25, 30, 25, 22, 1, 48, 41, 60, 50, 8, 93, 28, 25, 13, 44, 64, 52, 70, 48, 3, 98, 75, 79, 77, 4, 80, 76, 91, 59, 68, 54, 96, 46, 60, 19, 27, 11, 27, 84, 69, 39, 15, 69, 48, 31, 40, 10, 93, 69, 61, 72, 64, 73, 57, 75, 28, 41, 13, 55, 79, 71, 72, 85, 37, 90, 66, 4, 21, 32, 94, 81, 42, 15, 38, 26, 13, 18, 63, 46, 15, 77, 96, 98, 40, 81, 80, 59, 90, 52, 47, 17, 85, 34, 35, 44, 41, 92, 78, 90, 75, 87, 8, 26, 8, 96, 26, 79, 95, 77, 17, 62, 45, 11, 31, 5, 22, 17, 66, 93, 39, 39, 55, 38, 64, 81, 13, 20, 81, 26, 2, 84, 67, 37, 51, 65, 27, 95, 96, 82, 85, 76, 91, 55, 38, 22, 98, 76, 98, 33, 82, 46, 17, 79, 90, 19, 70, 27, 93, 92, 90, 55, 44, 28, 89, 59, 9, 52, 52, 25, 44, 80, 49, 53, 24, 92, 53, 53, 26, 73, 63, 17, 16, 39, 76, 54, 7, 84, 7, 80, 67, 92, 22, 39, 76, 28, 18, 56, 78, 89, 53, 83, 3, 22, 48, 51, 59, 32, 4, 36, 29, 83, 44, 96, 22, 9, 43, 65, 73, 38, 51, 59, 78, 86, 22, 95, 41, 12, 12, 21, 29, 82, 59, 26, 40, 69, 67, 50, 76, 95, 24, 20, 81, 78, 97, 64, 79, 27, 57, 97, 39, 68, 73, 23, 64, 43, 70, 76, 97, 58, 81, 53, 93, 16, 44, 94, 89, 44, 78, 62, 79, 56, 74, 76, 23, 50, 49, 11, 82, 90, 20, 44, 77, 54, 77, 68, 77, 10, 78, 93, 77, 12, 23, 58, 69, 90, 55, 54, 20, 53, 41, 59, 84, 30, 82, 74, 82, 24, 92, 16, 48, 74, 87, 26, 34, 65, 51, 94, 75, 89, 38, 21, 44, 84, 24, 57, 71, 77, 28, 98, 19, 41, 70, 45, 80, 91, 77, 28, 16, 81, 41, 10, 41, 33, 75, 34, 42, 34, 38, 74, 16, 75, 48, 70, 52, 74, 96, 19, 74, 53, 86, 95, 14, 56, 66, 16, 70, 40, 35, 21, 9, 29, 29, 12, 54, 48, 100, 56, 52, 63, 17, 6, 32, 91, 39, 70, 9, 26, 52, 97, 75, 25, 70, 36, 68, 53, 71, 11, 40, 33, 60, 58, 34, 64, 43, 35, 39, 43, 12, 40, 26, 28, 76, 79, 63, 27, 11, 81, 71, 15, 0, 60, 91, 72, 2, 99, 54, 53, 6, 77, 67, 24, 80, 26, 3, 81, 68, 40, 22, 50, 80, 48, 27, 42, 74, 99, 83, 43, 78, 22, 74, 32, 61, 24, 48, 8]
last_save: 1008

Gen:32
TrainFitness:0.8333333333333334
TestFitness:1.0
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],-459493.3693).all():
      return False
    else:
      return True
  def adf1(index):
    if np.equal(x[index],+839665.8052).all():
      return False
    else:
      return False
  def adf2(index):
    if np.less(x[index],-083853.4424).all():
      return True
    else:
      return False
  def adf3(index):
    if np.less(x[index],+198416.0971).all():
      return False
    else:
      return False
  def adf4(index):
    if np.equal(x[index],+996658.0523).all():
      if np.greater(x[index],-100838.5344).all():
        return True
      else:
        return True
      return True
    else:
      if np.equal(x[index],-061984.6609).all():
        return False
      else:
        return False
      return False
  def adf7(index):
    if np.greater(x[index],+033212.4375).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+783.986, adf1(1)*-956.102, adf2(2)*+826.750, adf3(3)*-755.706, adf4(4)*-167.761, adf7(7)*+581.924], [1, 1, 0, 0, 0], 343.897)
result=p(); 0.8333333333333334
IndLenGenome:383
IndGenome:[97, 84, 74, 83, 77, 39, 69, 55, 58, 14, 75, 69, 94, 49, 53, 53, 6, 49, 23, 97, 96, 75, 41, 14, 13, 11, 48, 97, 8, 3, 69, 6, 66, 25, 28, 90, 45, 22, 83, 25, 30, 25, 22, 1, 48, 41, 60, 50, 8, 93, 28, 25, 13, 44, 64, 52, 74, 48, 3, 98, 75, 79, 77, 4, 80, 76, 91, 59, 68, 54, 51, 46, 60, 19, 27, 11, 27, 95, 63, 86, 37, 53, 79, 67, 56, 69, 79, 69, 6, 66, 25, 28, 90, 45, 22, 83, 25, 30, 25, 22, 1, 48, 41, 60, 50, 8, 93, 28, 25, 13, 44, 64, 52, 74, 48, 3, 98, 75, 79, 77, 4, 80, 76, 91, 59, 68, 54, 96, 46, 60, 19, 27, 11, 27, 84, 69, 39, 15, 69, 48, 31, 40, 53, 93, 52, 61, 72, 64, 73, 57, 75, 6, 41, 62, 38, 41, 2, 19, 37, 68, 33, 49, 78, 6, 68, 81, 86, 69, 25, 76, 91, 20, 32, 87, 88, 16, 8, 22, 96, 67, 25, 50, 13, 99, 79, 87, 75, 85, 37, 90, 66, 26, 61, 40, 21, 36, 47, 37, 56, 61, 40, 62, 73, 95, 48, 51, 59, 32, 4, 36, 29, 17, 44, 62, 22, 95, 13, 54, 73, 38, 99, 37, 78, 12, 23, 93, 52, 93, 1, 48, 23, 66, 1, 5, 46, 11, 80, 58, 61, 32, 82, 50, 88, 29, 96, 18, 23, 6, 3, 40, 43, 32, 81, 55, 28, 82, 63, 5, 47, 99, 72, 4, 34, 30, 4, 98, 99, 72, 42, 77, 0, 91, 38, 68, 11, 63, 53, 11, 89, 70, 28, 30, 96, 22, 27, 79, 73, 74, 75, 19, 65, 91, 18, 45, 92, 71, 70, 58, 50, 38, 84, 23, 45, 48, 34, 54, 32, 0, 82, 94, 15, 58, 14, 94, 34, 88, 38, 9, 26, 100, 29, 4, 21, 23, 20, 50, 22, 41, 47, 96, 6, 26, 93, 69, 90, 74, 7, 32, 89, 87, 31, 41, 60, 59, 11, 33, 2, 52, 52, 96, 26, 24, 68, 16, 63, 96, 39, 55, 5, 68, 67, 79, 22, 99, 63, 15, 61, 6, 87, 75, 23, 49, 20, 49, 15, 12, 54, 7, 78, 19, 90, 40, 94]
last_save: 1008

Gen:2032
last_save: 1008
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],+282066.1356).all():
      return True
    else:
      return False
  def adf1(index):
    if np.less(sigmoid(x[index]),+290941.0797).all():
      return True
    else:
      return False
  def adf2(index):
    if np.greater(sigmoid(x[index]),-293862.4466).all():
      return True
    else:
      return False
  def adf3(index):
    if np.less(np.sin(x[index]),-985062.6247).all():
      return True
    else:
      return True
  def adf4(index):
    if np.less(x[index],+534062.6036).all():
      return False
    else:
      return True
  def adf7(index):
    if np.less(x[index],-437322.0235).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+774.151, adf1(1)*-082.906, adf2(2)*-772.198, adf3(3)*-676.841, adf4(4)*+242.872, adf7(7)*+530.222], [0, 1, 0, 1, 1], 061.807)
result=p(); 0.6666666666666666
IndLenGenome:283
IndGenome:[65, 80, 62, 78, 84, 34, 47, 81, 65, 53, 36, 43, 53, 89, 96, 96, 44, 65, 36, 1, 2, 52, 75, 68, 54, 27, 37, 72, 18, 40, 79, 31, 18, 19, 69, 38, 37, 55, 12, 14, 23, 77, 16, 76, 57, 92, 68, 92, 32, 31, 81, 86, 18, 37, 61, 57, 23, 24, 46, 25, 45, 61, 92, 92, 74, 47, 24, 59, 65, 42, 42, 52, 88, 76, 57, 63, 14, 96, 37, 53, 99, 48, 60, 53, 69, 21, 12, 47, 32, 36, 51, 99, 24, 43, 21, 17, 91, 62, 24, 88, 15, 74, 7, 80, 57, 51, 94, 66, 92, 75, 26, 92, 66, 87, 22, 22, 20, 86, 47, 42, 23, 42, 73, 33, 39, 23, 43, 20, 48, 45, 15, 10, 91, 92, 98, 82, 19, 11, 74, 85, 32, 94, 22, 82, 42, 24, 78, 90, 82, 85, 82, 26, 12, 78, 67, 87, 26, 22, 66, 70, 75, 42, 26, 11, 71, 94, 72, 11, 92, 61, 95, 50, 30, 40, 72, 47, 72, 56, 98, 91, 70, 89, 16, 34, 40, 77, 69, 49, 97, 51, 13, 30, 52, 89, 1, 63, 7, 78, 62, 7, 0, 3, 3, 10, 25, 93, 97, 22, 34, 15, 67, 42, 5, 76, 40, 91, 48, 2, 6, 66, 43, 48, 0, 60, 75, 94, 66, 41, 41, 32, 68, 34, 96, 58, 35, 90, 8, 21, 36, 57, 62, 84, 0, 82, 79, 33, 66, 88, 50, 13, 43, 20, 2, 27, 66, 97, 12, 16, 11, 55, 29, 23, 16, 23, 40, 60, 49, 13, 94, 54, 97, 11, 100, 7, 35, 85, 11, 92, 34, 19, 22, 26, 69]
last_save: 1009

Gen:19
TrainFitness:0.8333333333333334
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(psqrt(x[index]),-307722.6615).all():
      return False
    else:
      return True
  def adf1(index):
    if np.equal(np.tanh(x[index]),-447637.6001).all():
      return False
    else:
      return True
  def adf2(index):
    if np.less(sigmoid(x[index]),-449121.1858).all():
      return False
    else:
      return False
  def adf3(index):
    if np.less(sigmoid(x[index]),+885240.3538).all():
      if np.equal(sigmoid(x[index]),-734126.6804).all():
        if np.less(x[index],-574638.8549).all():
          return True
        else:
          return True
        return True
      else:
        if np.greater(np.sin(x[index]),+985986.1046).all():
          if np.equal(x[index],-649597.3121).all():
            return True
          else:
            return True
          return False
        else:
          if np.greater(np.sin(x[index]),-491812.1448).all():
            return False
          else:
            return False
          return True
        return False
      return True
    else:
      if np.less(np.tanh(x[index]),+823527.6207).all():
        if np.equal(x[index],-540077.7973).all():
          return False
        else:
          return True
        return True
      else:
        if np.greater(x[index],+835233.7418).all():
          if np.less(x[index],-309584.3052).all():
            if np.less(sigmoid(x[index]),-462637.4879).all():
              return False
            else:
              return True
            return False
          else:
            if np.greater(np.sin(x[index]),+268232.9605).all():
              return False
            else:
              return False
            return False
          return True
        else:
          if np.equal(np.cos(x[index]),+019726.1514).all():
            return True
          else:
            return False
          return False
        return True
      return False
  def adf4(index):
    if np.greater(x[index],+019204.1741).all():
      return False
    else:
      return True
  def adf7(index):
    if np.equal(x[index],-631179.1485).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+364.352, adf1(1)*+017.675, adf2(2)*-012.855, adf3(3)*+808.312, adf4(4)*-995.515, adf7(7)*-056.453], [0, 0, 1, 0, 0], 587.009)
result=p(); 0.8333333333333334
IndLenGenome:431
IndGenome:[37, 33, 12, 89, 58, 32, 71, 7, 101, 42, 73, 50, 27, 87, 2, 42, 56, 6, 81, 95, 49, 72, 57, 23, 14, 70, 92, 13, 73, 30, 34, 34, 7, 66, 33, 97, 26, 60, 10, 61, 13, 24, 99, 43, 22, 74, 81, 41, 63, 51, 44, 84, 89, 71, 12, 61, 11, 88, 15, 58, 67, 69, 69, 62, 75, 34, 56, 33, 69, 12, 17, 98, 98, 85, 52, 64, 20, 33, 85, 13, 68, 80, 42, 86, 6, 81, 11, 49, 72, 57, 23, 14, 61, 32, 96, 46, 38, 10, 14, 87, 88, 37, 25, 99, 79, 45, 67, 34, 46, 3, 78, 18, 85, 54, 29, 20, 96, 26, 30, 54, 84, 22, 18, 67, 62, 46, 99, 88, 35, 69, 88, 56, 51, 60, 54, 66, 7, 83, 5, 2, 15, 34, 26, 74, 99, 45, 89, 77, 13, 41, 52, 41, 20, 88, 27, 27, 33, 70, 72, 60, 37, 51, 14, 99, 81, 18, 21, 72, 61, 54, 24, 28, 23, 11, 62, 99, 10, 70, 30, 28, 70, 92, 89, 20, 13, 88, 82, 63, 25, 12, 87, 56, 92, 40, 17, 53, 83, 85, 83, 37, 19, 25, 24, 90, 90, 7, 27, 97, 19, 97, 73, 75, 48, 62, 50, 24, 30, 65, 16, 36, 22, 98, 3, 5, 2, 33, 23, 87, 94, 31, 48, 6, 2, 61, 21, 80, 25, 96, 83, 10, 29, 35, 28, 84, 33, 70, 55, 82, 21, 64, 26, 81, 97, 5, 35, 54, 36, 22, 66, 93, 17, 14, 58, 67, 69, 69, 62, 75, 85, 60, 24, 42, 72, 96, 94, 92, 76, 88, 52, 93, 42, 29, 56, 80, 95, 77, 51, 27, 12, 35, 77, 44, 85, 17, 18, 56, 80, 81, 39, 7, 62, 6, 31, 55, 21, 54, 42, 27, 29, 12, 53, 12, 21, 24, 51, 75, 14, 84, 90, 91, 29, 72, 40, 44, 21, 57, 84, 91, 15, 64, 74, 21, 50, 35, 38, 81, 77, 76, 83, 31, 1, 77, 49, 81, 54, 78, 85, 53, 68, 62, 43, 25, 40, 73, 13, 66, 4, 53, 65, 2, 24, 12, 64, 0, 51, 47, 56, 57, 65, 42, 95, 15, 0, 61, 92, 58, 85, 75, 83, 24, 36, 18, 90, 58, 33, 11, 2, 51, 33, 8, 89, 69, 95, 45, 81, 35, 86, 31, 92, 60, 35, 46, 34, 35, 63, 12, 84, 0, 19, 82, 4, 76, 25, 48, 77, 30, 0, 89, 50, 36, 28, 44, 20, 55, 98, 43, 56, 28, 96, 7, 49]
last_save: 1009

Gen:867
TrainFitness:1.0
TestFitness:0.5
MaxGenLen:740
Individual: def p():
  def adf0(index):
    if np.less(np.tanh(x[index]),-357729.5779).all():
      return True
    else:
      return False
  def adf1(index):
    if np.greater(x[index],+000013.4932).all():
      return True
    else:
      return False
  def adf2(index):
    if np.greater(np.cos(x[index]),+181214.4831).all():
      return True
    else:
      return False
  def adf3(index):
    if np.less(np.tanh(x[index]),+823527.6207).all():
      if np.equal(x[index],-540077.7973).all():
        return False
      else:
        return True
      return True
    else:
      if np.greater(x[index],+835233.7418).all():
        if np.less(x[index],-309584.3052).all():
          if np.less(sigmoid(x[index]),-462637.4879).all():
            return False
          else:
            return True
          return False
        else:
          if np.greater(np.sin(x[index]),+268232.9605).all():
            return False
          else:
            return False
          return False
        return True
      else:
        if np.equal(np.cos(x[index]),+019726.1514).all():
          return True
        else:
          return False
        return False
      return True
  def adf4(index):
    if np.greater(x[index],+019204.1741).all():
      if np.less(sigmoid(x[index]),-176311.7914).all():
        return True
      else:
        return False
      return False
    else:
      if np.less(x[index],-643564.2448).all():
        if np.greater(x[index],-042264.2682).all():
          return False
        else:
          return True
        return False
      else:
        if np.equal(x[index],-574578.6019).all():
          if np.equal(np.cos(x[index]),-279232.1415).all():
            return True
          else:
            return True
          return True
        else:
          if np.equal(rlog(x[index]),-415441.0581).all():
            return False
          else:
            return True
          return False
        return False
      return False
  def adf7(index):
    if np.greater(np.sin(x[index]),-235033.6433).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*-675.255, adf1(1)*-855.346, adf2(2)*+312.138, adf3(3)*-515.612, adf4(4)*-453.240, adf7(7)*+658.700], [0, 0, 0, 0, 0], 836.867)
result=p(); 1.0
IndLenGenome:418
IndGenome:[44, 33, 43, 89, 58, 48, 56, 84, 101, 90, 73, 25, 27, 87, 42, 99, 25, 67, 7, 29, 12, 53, 32, 17, 84, 69, 97, 54, 73, 90, 70, 60, 10, 61, 13, 24, 99, 43, 22, 74, 81, 41, 63, 51, 60, 37, 51, 14, 99, 81, 18, 21, 72, 61, 54, 24, 28, 23, 11, 62, 99, 10, 70, 30, 28, 70, 92, 89, 20, 13, 88, 82, 63, 25, 12, 87, 56, 92, 40, 17, 53, 83, 85, 83, 37, 19, 25, 24, 90, 90, 7, 27, 97, 19, 97, 73, 75, 48, 62, 50, 24, 30, 65, 16, 36, 22, 98, 3, 5, 2, 33, 23, 87, 94, 31, 48, 6, 2, 61, 21, 80, 25, 96, 83, 10, 29, 35, 28, 84, 33, 70, 55, 82, 21, 64, 26, 81, 97, 5, 35, 54, 36, 22, 66, 93, 17, 14, 58, 67, 69, 69, 62, 75, 85, 60, 24, 42, 72, 96, 94, 92, 76, 88, 52, 93, 42, 29, 56, 80, 95, 77, 51, 27, 12, 35, 77, 44, 85, 17, 18, 56, 80, 81, 39, 7, 62, 6, 31, 55, 21, 54, 42, 27, 29, 12, 53, 12, 21, 24, 51, 75, 14, 84, 90, 91, 29, 72, 40, 44, 21, 57, 84, 91, 39, 64, 74, 21, 50, 35, 38, 81, 77, 76, 83, 31, 1, 77, 49, 81, 54, 78, 85, 53, 68, 62, 43, 25, 40, 73, 13, 66, 4, 53, 65, 6, 24, 12, 64, 14, 58, 67, 69, 69, 62, 75, 85, 60, 24, 42, 72, 96, 94, 92, 76, 88, 52, 93, 42, 29, 56, 80, 95, 77, 51, 27, 12, 35, 77, 44, 85, 17, 18, 56, 80, 81, 39, 7, 62, 6, 31, 55, 21, 54, 42, 27, 29, 12, 53, 12, 21, 24, 51, 75, 14, 84, 90, 91, 29, 72, 40, 44, 21, 57, 84, 91, 15, 64, 74, 21, 50, 35, 38, 81, 77, 76, 83, 31, 1, 77, 49, 81, 54, 78, 85, 53, 68, 62, 43, 25, 40, 73, 13, 66, 4, 53, 53, 2, 24, 12, 64, 0, 51, 47, 56, 57, 65, 42, 95, 15, 0, 61, 92, 58, 85, 75, 83, 24, 36, 18, 90, 58, 33, 11, 2, 51, 33, 8, 89, 69, 95, 45, 81, 35, 86, 31, 92, 60, 35, 46, 34, 35, 63, 12, 84, 0, 19, 82, 4, 76, 25, 48, 77, 30, 0, 89, 50, 36, 28, 44, 20, 76, 98, 43, 56, 28, 96, 7, 49]
last_save: 1009

Gen:867
last_save: 1009
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],+313403.1336).all():
      return True
    else:
      return False
  def adf1(index):
    if np.less(sigmoid(x[index]),+796386.8344).all():
      return True
    else:
      return True
  def adf2(index):
    if np.equal(x[index],+532469.2849).all():
      return False
    else:
      return False
  def adf3(index):
    if np.less(x[index],+025964.4902).all():
      return True
    else:
      return False
  def adf4(index):
    if np.greater(np.tanh(x[index]),-158016.4946).all():
      return False
    else:
      return True
  def adf7(index):
    if np.greater(np.cos(x[index]),+466789.6017).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+226.540, adf1(1)*-628.217, adf2(2)*+933.101, adf3(3)*+510.279, adf4(4)*+274.470, adf7(7)*+970.356], [0, 0, 1, 0, 1], 999.450)
result=p(); 0.8333333333333334
IndLenGenome:283
IndGenome:[93, 56, 13, 20, 92, 73, 19, 99, 96, 91, 48, 19, 59, 10, 37, 35, 90, 40, 28, 3, 61, 70, 69, 26, 76, 97, 67, 86, 28, 87, 77, 99, 18, 13, 85, 73, 95, 18, 56, 36, 95, 81, 99, 35, 98, 90, 90, 98, 84, 92, 19, 84, 41, 52, 39, 53, 83, 73, 71, 42, 69, 61, 86, 32, 81, 36, 11, 40, 60, 84, 23, 11, 99, 69, 66, 24, 86, 91, 61, 88, 29, 8, 51, 19, 38, 8, 44, 72, 37, 14, 97, 11, 52, 90, 95, 94, 42, 73, 50, 35, 44, 60, 74, 23, 68, 72, 77, 16, 18, 48, 87, 49, 51, 76, 56, 66, 40, 54, 99, 76, 25, 45, 46, 20, 87, 54, 45, 75, 64, 30, 77, 92, 81, 97, 69, 34, 63, 87, 69, 88, 64, 52, 91, 73, 18, 52, 45, 96, 33, 90, 32, 59, 41, 101, 21, 97, 82, 29, 74, 66, 70, 73, 90, 34, 99, 52, 55, 46, 53, 52, 70, 95, 99, 33, 88, 39, 16, 14, 26, 83, 91, 43, 44, 41, 84, 71, 93, 66, 74, 10, 41, 36, 22, 29, 7, 88, 20, 79, 27, 68, 38, 36, 53, 22, 54, 26, 10, 3, 92, 65, 22, 20, 70, 64, 33, 75, 80, 23, 78, 31, 74, 5, 100, 91, 88, 83, 12, 1, 47, 54, 66, 96, 25, 15, 60, 30, 22, 84, 35, 79, 72, 63, 67, 22, 19, 43, 55, 59, 87, 28, 6, 67, 13, 44, 73, 36, 60, 4, 11, 92, 26, 5, 71, 27, 63, 15, 30, 59, 11, 7, 16, 74, 1, 76, 37, 97, 27, 88, 50, 50, 83, 22, 43]
last_save: 10010

Gen:2001
last_save: 10010
Exit:FalseFalseTrue