Dataset:Meander/Full.csv
FS:False
Seed:1237
Size:7

Gen:1
TrainFitness:0.8888888888888888
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],+192695.7731).all():
      return True
    else:
      return True
  def adf1(index):
    if np.greater(psqrt(x[index]),-645116.3793).all():
      return True
    else:
      return False
  def adf2(index):
    if np.less(np.sin(x[index]),-916172.9542).all():
      return True
    else:
      return True
  def adf3(index):
    if np.less(x[index],+472543.4186).all():
      return True
    else:
      return False
  def adf4(index):
    if np.equal(psqrt(x[index]),-117089.3232).all():
      return False
    else:
      return False
  def adf5(index):
    if np.less(np.tanh(x[index]),-908044.9048).all():
      return True
    else:
      return True
  def adf6(index):
    if np.equal(sigmoid(x[index]),+986400.7873).all():
      return True
    else:
      return False
  def adf7(index):
    if np.equal(sigmoid(x[index]),+204800.8759).all():
      return True
    else:
      return False
  def adf8(index):
    if np.less(np.cos(x[index]),+886913.8533).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+827.952, adf1(1)*+149.025, adf2(2)*+083.830, adf3(3)*+221.691, adf4(4)*-464.983, adf5(5)*-922.520, adf6(6)*+861.287, adf7(7)*+216.288, adf8(8)*+088.016], [1, 1, 1, 0, 0, 0, 1, 1], 812.595)
result=p(); 0.8888888888888888
IndLenGenome:420
IndGenome:[54, 80, 62, 87, 82, 97, 41, 39, 95, 1, 98, 3, 75, 31, 52, 94, 49, 17, 79, 83, 46, 91, 44, 63, 61, 73, 18, 32, 85, 94, 49, 22, 8, 6, 8, 52, 59, 20, 33, 84, 42, 12, 40, 79, 25, 15, 32, 33, 58, 96, 61, 88, 21, 91, 18, 47, 83, 28, 28, 63, 2, 20, 97, 70, 38, 9, 51, 79, 64, 15, 89, 81, 72, 15, 15, 66, 30, 42, 90, 86, 7, 63, 72, 18, 79, 49, 22, 69, 39, 60, 5, 16, 70, 88, 84, 14, 44, 36, 62, 89, 61, 92, 46, 71, 51, 78, 38, 47, 10, 92, 96, 31, 23, 37, 38, 78, 36, 47, 40, 61, 15, 45, 78, 42, 62, 99, 98, 33, 72, 19, 32, 69, 39, 51, 48, 19, 36, 37, 90, 87, 69, 51, 59, 78, 75, 84, 71, 5, 12, 46, 58, 63, 94, 69, 59, 10, 58, 67, 15, 33, 90, 51, 69, 7, 60, 19, 41, 54, 72, 30, 44, 98, 52, 80, 10, 55, 33, 22, 12, 39, 75, 53, 48, 46, 20, 60, 24, 71, 15, 34, 50, 49, 46, 98, 18, 54, 9, 28, 50, 77, 42, 79, 67, 5, 36, 70, 79, 89, 60, 13, 87, 68, 48, 85, 58, 30, 92, 28, 48, 42, 76, 96, 51, 74, 22, 92, 38, 96, 99, 32, 86, 22, 20, 98, 61, 77, 29, 61, 55, 83, 71, 17, 36, 86, 11, 51, 56, 25, 27, 12, 20, 93, 11, 14, 69, 63, 25, 86, 56, 35, 21, 44, 72, 61, 73, 54, 91, 73, 43, 23, 53, 24, 22, 14, 99, 67, 58, 91, 31, 12, 13, 71, 81, 95, 58, 53, 92, 64, 89, 46, 81, 49, 63, 71, 5, 21, 21, 66, 16, 12, 59, 27, 35, 35, 97, 18, 10, 60, 58, 50, 42, 88, 86, 86, 26, 53, 58, 27, 55, 13, 17, 24, 44, 9, 46, 25, 89, 58, 25, 57, 33, 78, 72, 66, 92, 62, 78, 36, 16, 53, 86, 72, 76, 69, 74, 87, 87, 68, 76, 15, 17, 34, 20, 20, 46, 43, 20, 18, 23, 99, 21, 62, 75, 70, 42, 12, 62, 62, 92, 86, 54, 70, 48, 95, 71, 39, 44, 25, 38, 76, 41, 49, 34, 96, 42, 74, 68, 32, 29, 5, 34, 53, 100, 48, 94, 7, 90, 93, 55, 2, 68, 46, 8, 89, 70, 46, 53, 18, 19, 74, 21, 75, 100, 35, 49, 44, 61, 26, 38, 92]
last_save: 731

Gen:2001
last_save: 731
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.8888888888888888
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],-203208.7910).all():
      return False
    else:
      return False
  def adf1(index):
    if np.greater(x[index],+280329.5568).all():
      return False
    else:
      return False
  def adf2(index):
    if np.equal(sigmoid(x[index]),-236719.9420).all():
      return False
    else:
      return False
  def adf3(index):
    if np.greater(rlog(x[index]),-638527.7739).all():
      return True
    else:
      return False
  def adf4(index):
    if np.less(np.sin(x[index]),-648046.4545).all():
      return True
    else:
      return True
  def adf5(index):
    if np.less(x[index],-466626.2455).all():
      return True
    else:
      return True
  def adf6(index):
    if np.greater(x[index],-753655.5927).all():
      return False
    else:
      return False
  def adf7(index):
    if np.less(rlog(x[index]),+151355.3797).all():
      return True
    else:
      return False
  def adf8(index):
    if np.equal(x[index],+511221.6279).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*-387.846, adf1(1)*-831.405, adf2(2)*-189.520, adf3(3)*-172.277, adf4(4)*-833.742, adf5(5)*+012.900, adf6(6)*+221.745, adf7(7)*-924.191, adf8(8)*-917.185], [0, 0, 0, 0, 0, 1, 0, 0], 847.826)
result=p(); 0.6666666666666666
IndLenGenome:415
IndGenome:[95, 93, 21, 73, 10, 39, 66, 45, 57, 48, 73, 78, 90, 4, 65, 24, 89, 83, 89, 26, 79, 73, 83, 19, 10, 44, 85, 47, 88, 4, 73, 93, 73, 83, 91, 25, 73, 63, 25, 10, 90, 20, 44, 63, 10, 26, 4, 62, 41, 55, 21, 60, 44, 51, 78, 52, 33, 56, 31, 2, 17, 22, 90, 81, 14, 41, 87, 14, 92, 27, 66, 28, 33, 36, 32, 64, 68, 42, 83, 59, 79, 35, 3, 55, 37, 65, 29, 6, 13, 52, 90, 95, 48, 74, 79, 91, 43, 73, 95, 32, 21, 37, 34, 27, 65, 26, 75, 41, 11, 37, 14, 58, 79, 99, 28, 11, 43, 78, 40, 27, 81, 24, 57, 30, 37, 25, 35, 78, 89, 12, 37, 39, 31, 73, 92, 43, 95, 49, 82, 56, 56, 63, 48, 17, 17, 17, 56, 98, 33, 62, 46, 68, 60, 11, 38, 85, 91, 96, 45, 54, 52, 37, 99, 20, 94, 31, 20, 86, 14, 26, 50, 50, 12, 50, 33, 72, 16, 6, 96, 88, 63, 54, 45, 31, 73, 21, 57, 27, 81, 31, 98, 74, 48, 82, 27, 94, 11, 35, 49, 52, 24, 64, 86, 72, 40, 15, 30, 76, 70, 77, 65, 12, 35, 92, 32, 63, 91, 27, 79, 22, 27, 19, 41, 39, 15, 37, 13, 34, 97, 16, 55, 59, 45, 23, 64, 31, 17, 52, 9, 20, 14, 98, 50, 48, 52, 10, 48, 99, 41, 92, 36, 58, 8, 79, 41, 45, 22, 37, 63, 73, 36, 44, 61, 65, 55, 33, 62, 55, 40, 69, 86, 57, 74, 50, 52, 65, 20, 57, 25, 16, 5, 19, 31, 42, 2, 18, 4, 89, 55, 1, 28, 66, 74, 40, 7, 55, 23, 95, 13, 86, 34, 76, 15, 92, 76, 83, 42, 35, 17, 15, 17, 66, 75, 44, 76, 85, 12, 37, 55, 49, 47, 13, 8, 42, 43, 74, 46, 41, 26, 46, 52, 47, 70, 55, 47, 88, 14, 67, 43, 81, 30, 59, 47, 92, 54, 34, 29, 38, 18, 19, 79, 3, 18, 72, 19, 7, 21, 73, 98, 51, 61, 60, 36, 48, 29, 55, 25, 33, 76, 27, 21, 53, 62, 52, 56, 95, 80, 68, 94, 80, 96, 36, 98, 65, 76, 41, 10, 16, 65, 96, 98, 52, 6, 70, 15, 12, 87, 7, 45, 54, 97, 36, 53, 34, 63, 42, 49, 79, 57, 61, 60, 0, 17, 93, 56]
last_save: 732

Gen:37
TrainFitness:0.7777777777777778
TestFitness:0.7777777777777778
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(rlog(x[index]),-996484.7160).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(np.cos(x[index]),-628110.1461).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(x[index],+855462.2751).all():
      return True
    else:
      return True
  def adf3(index):
    if np.equal(psqrt(x[index]),+947382.6483).all():
      return True
    else:
      return True
  def adf4(index):
    if np.equal(psqrt(x[index]),+033342.6850).all():
      return True
    else:
      return False
  def adf5(index):
    if np.less(np.sin(x[index]),-760933.0551).all():
      return True
    else:
      return True
  def adf6(index):
    if np.equal(np.sin(x[index]),+039638.5848).all():
      return False
    else:
      return True
  def adf7(index):
    if np.less(x[index],-843974.3650).all():
      return True
    else:
      return False
  def adf8(index):
    if np.greater(x[index],+022059.5517).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*-539.785, adf1(1)*-194.957, adf2(2)*-028.443, adf3(3)*-591.077, adf4(4)*-633.900, adf5(5)*+956.327, adf6(6)*-644.966, adf7(7)*+279.923, adf8(8)*-823.277], [0, 1, 0, 1, 0, 0, 1, 0], 385.463)
result=p(); 0.7777777777777778
IndLenGenome:429
IndGenome:[63, 33, 46, 95, 50, 78, 22, 46, 17, 79, 29, 79, 96, 14, 68, 34, 47, 11, 6, 30, 59, 25, 41, 53, 49, 74, 61, 57, 41, 91, 66, 2, 98, 71, 91, 20, 31, 64, 26, 51, 53, 11, 41, 5, 99, 3, 83, 16, 34, 98, 15, 65, 84, 76, 62, 32, 97, 55, 41, 22, 72, 42, 29, 38, 26, 23, 98, 84, 17, 99, 84, 7, 33, 58, 12, 26, 64, 68, 3, 28, 40, 34, 69, 56, 26, 41, 99, 92, 38, 90, 3, 13, 33, 24, 32, 86, 88, 85, 60, 50, 69, 30, 55, 79, 70, 18, 54, 63, 86, 27, 96, 10, 79, 3, 83, 30, 25, 95, 1, 54, 26, 97, 51, 95, 84, 72, 67, 94, 34, 40, 63, 29, 86, 43, 58, 45, 88, 24, 68, 35, 12, 85, 65, 13, 31, 91, 79, 70, 18, 54, 63, 69, 27, 4, 43, 56, 15, 50, 54, 73, 10, 97, 33, 33, 95, 40, 51, 40, 12, 42, 40, 75, 49, 35, 85, 81, 77, 55, 66, 84, 26, 22, 89, 12, 55, 43, 99, 87, 48, 25, 30, 27, 29, 51, 69, 14, 69, 35, 77, 23, 99, 77, 50, 62, 68, 94, 64, 63, 87, 29, 12, 35, 89, 11, 70, 77, 67, 38, 17, 26, 86, 63, 73, 89, 10, 20, 70, 46, 46, 49, 65, 76, 93, 32, 97, 91, 51, 44, 56, 94, 64, 99, 46, 76, 40, 66, 88, 72, 67, 99, 99, 82, 43, 66, 57, 26, 78, 92, 53, 12, 97, 97, 33, 62, 41, 30, 25, 44, 70, 29, 46, 86, 63, 58, 45, 34, 6, 33, 18, 61, 2, 55, 84, 11, 96, 86, 93, 27, 23, 91, 28, 55, 72, 17, 82, 66, 36, 23, 72, 77, 65, 33, 14, 4, 43, 56, 15, 41, 54, 58, 10, 38, 56, 97, 33, 33, 95, 40, 51, 13, 12, 42, 40, 75, 49, 22, 85, 81, 77, 59, 66, 0, 87, 45, 92, 71, 30, 37, 3, 36, 69, 46, 62, 96, 67, 95, 40, 73, 43, 54, 27, 67, 1, 25, 29, 26, 24, 50, 19, 92, 78, 100, 48, 44, 58, 42, 21, 28, 1, 18, 22, 14, 92, 43, 61, 64, 38, 90, 4, 16, 68, 93, 83, 100, 25, 47, 34, 89, 40, 69, 63, 65, 65, 59, 54, 1, 82, 48, 73, 41, 27, 98, 29, 19, 39, 19, 69, 79, 8, 13, 63, 16, 33, 18, 76, 55, 59, 85, 0, 30, 9, 53, 34, 28, 47, 64, 55, 10, 64]
last_save: 732

Gen:2037
last_save: 732
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:1.0
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(psqrt(x[index]),-002339.9721).all():
      return True
    else:
      return False
  def adf1(index):
    if np.less(sigmoid(x[index]),+877036.4413).all():
      return True
    else:
      return False
  def adf2(index):
    if np.greater(x[index],+640932.0819).all():
      return True
    else:
      return True
  def adf3(index):
    if np.greater(x[index],+732620.8297).all():
      return True
    else:
      return True
  def adf4(index):
    if np.equal(x[index],-553539.7342).all():
      return True
    else:
      return False
  def adf5(index):
    if np.less(x[index],-365854.6579).all():
      return False
    else:
      return True
  def adf6(index):
    if np.greater(x[index],+043909.3172).all():
      return True
    else:
      return False
  def adf7(index):
    if np.equal(x[index],-393454.9249).all():
      return True
    else:
      return False
  def adf8(index):
    if np.greater(np.sin(x[index]),-142945.2764).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+877.904, adf1(1)*-606.353, adf2(2)*+958.833, adf3(3)*-242.894, adf4(4)*-910.565, adf5(5)*-580.400, adf6(6)*-982.163, adf7(7)*-396.035, adf8(8)*-585.508], [1, 1, 1, 1, 0, 0, 1, 0], 968.767)
result=p(); 0.6666666666666666
IndLenGenome:414
IndGenome:[26, 49, 43, 39, 31, 30, 13, 61, 92, 92, 51, 89, 21, 97, 97, 7, 55, 3, 28, 59, 84, 61, 52, 38, 44, 45, 42, 69, 44, 27, 56, 9, 22, 83, 86, 90, 30, 16, 28, 38, 39, 12, 57, 13, 67, 48, 70, 39, 10, 52, 91, 94, 31, 64, 25, 29, 46, 25, 39, 27, 41, 93, 14, 68, 61, 96, 8, 41, 68, 57, 44, 60, 53, 48, 53, 38, 35, 27, 17, 49, 9, 56, 7, 16, 35, 62, 47, 80, 88, 69, 35, 20, 59, 53, 87, 57, 40, 90, 13, 16, 77, 98, 16, 21, 13, 80, 97, 47, 13, 68, 66, 22, 64, 70, 55, 85, 69, 49, 28, 17, 87, 22, 89, 83, 10, 8, 93, 84, 96, 43, 46, 37, 16, 3, 40, 88, 47, 66, 40, 97, 80, 36, 31, 50, 59, 63, 12, 38, 82, 45, 99, 25, 46, 97, 79, 62, 89, 81, 43, 29, 27, 94, 39, 92, 65, 90, 45, 18, 54, 63, 5, 65, 30, 38, 23, 52, 76, 20, 76, 44, 57, 88, 19, 31, 64, 28, 78, 76, 36, 63, 89, 43, 33, 72, 7, 59, 25, 24, 68, 33, 24, 95, 80, 24, 19, 22, 11, 21, 72, 46, 21, 75, 85, 63, 28, 96, 99, 61, 58, 65, 83, 41, 85, 43, 20, 91, 77, 35, 56, 57, 75, 92, 79, 93, 95, 42, 20, 24, 72, 75, 40, 80, 89, 47, 85, 44, 60, 18, 45, 24, 59, 19, 97, 42, 36, 41, 44, 61, 42, 16, 75, 34, 27, 79, 32, 77, 13, 13, 93, 59, 60, 88, 45, 77, 88, 13, 69, 72, 18, 6, 21, 15, 35, 98, 49, 40, 54, 88, 11, 32, 35, 80, 98, 81, 32, 61, 94, 78, 19, 67, 47, 56, 90, 19, 98, 21, 32, 11, 57, 49, 85, 44, 96, 76, 10, 92, 71, 29, 95, 68, 10, 5, 14, 74, 28, 50, 14, 93, 98, 26, 79, 89, 74, 85, 1, 32, 59, 87, 23, 34, 26, 55, 89, 65, 95, 12, 79, 29, 80, 50, 46, 70, 19, 35, 64, 15, 51, 72, 39, 27, 76, 3, 55, 35, 91, 22, 80, 87, 37, 19, 73, 90, 45, 44, 56, 77, 53, 98, 91, 47, 43, 18, 56, 86, 27, 97, 71, 7, 43, 50, 67, 94, 65, 84, 37, 88, 6, 24, 25, 3, 9, 4, 88, 50, 10, 26, 11, 58, 9, 36, 32, 37, 45, 60]
last_save: 733

Gen:8
TrainFitness:0.7777777777777778
TestFitness:0.8888888888888888
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(rlog(x[index]),+919179.1476).all():
      return False
    else:
      return False
  def adf1(index):
    if np.greater(x[index],+587094.7404).all():
      return False
    else:
      return True
  def adf2(index):
    if np.less(x[index],-519784.9989).all():
      return True
    else:
      return True
  def adf3(index):
    if np.greater(x[index],+126743.7434).all():
      return False
    else:
      return True
  def adf4(index):
    if np.less(x[index],+530151.0222).all():
      return False
    else:
      return False
  def adf5(index):
    if np.less(x[index],-970872.4033).all():
      return True
    else:
      return True
  def adf6(index):
    if np.greater(x[index],+032337.0523).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(x[index],-177165.7662).all():
      return True
    else:
      return False
  def adf8(index):
    if np.greater(x[index],-566933.4771).all():
      if np.less(x[index],+190584.5378).all():
        return False
      else:
        return False
      return False
    else:
      if np.less(x[index],+164944.5603).all():
        return True
      else:
        return True
      return False
  return multiple_operation([adf0(0)*+674.196, adf1(1)*-538.819, adf2(2)*+327.954, adf3(3)*-005.958, adf4(4)*-108.493, adf5(5)*+303.389, adf6(6)*-381.370, adf7(7)*+022.922, adf8(8)*+097.401], [0, 1, 1, 0, 1, 1, 1, 1], 971.251)
result=p(); 0.7777777777777778
IndLenGenome:476
IndGenome:[16, 62, 52, 79, 17, 28, 82, 80, 28, 53, 59, 61, 89, 61, 17, 99, 61, 54, 87, 56, 73, 25, 21, 95, 24, 1, 98, 84, 73, 5, 98, 7, 50, 39, 14, 7, 24, 40, 14, 81, 30, 86, 25, 37, 67, 57, 79, 32, 85, 31, 89, 57, 18, 84, 49, 79, 48, 79, 82, 28, 93, 99, 63, 69, 8, 94, 75, 31, 62, 96, 57, 94, 13, 97, 74, 33, 94, 23, 92, 17, 33, 76, 59, 78, 16, 95, 45, 73, 80, 31, 95, 11, 80, 52, 52, 72, 31, 25, 84, 55, 82, 79, 28, 65, 73, 69, 37, 20, 58, 37, 42, 44, 40, 23, 53, 52, 76, 28, 69, 15, 91, 96, 52, 20, 10, 23, 62, 33, 3, 87, 80, 95, 52, 53, 24, 27, 29, 97, 72, 17, 53, 13, 90, 81, 77, 27, 61, 96, 85, 27, 66, 96, 22, 42, 81, 19, 34, 44, 45, 53, 74, 21, 44, 55, 26, 26, 19, 13, 63, 44, 97, 27, 71, 93, 82, 33, 78, 52, 30, 41, 39, 10, 5, 38, 34, 35, 93, 67, 58, 33, 39, 21, 53, 49, 95, 72, 74, 16, 11, 26, 44, 99, 44, 74, 45, 56, 100, 53, 60, 32, 95, 74, 66, 22, 88, 29, 76, 37, 44, 11, 49, 26, 58, 73, 82, 65, 23, 88, 8, 11, 99, 60, 78, 38, 53, 42, 27, 89, 85, 74, 82, 15, 33, 30, 30, 35, 69, 55, 68, 17, 49, 11, 91, 80, 48, 54, 59, 13, 32, 30, 55, 13, 40, 53, 13, 58, 39, 32, 23, 97, 3, 38, 51, 53, 37, 20, 40, 20, 44, 60, 42, 22, 39, 72, 32, 59, 28, 28, 90, 39, 47, 34, 50, 31, 100, 46, 7, 61, 66, 97, 31, 37, 25, 14, 79, 77, 81, 12, 15, 81, 30, 28, 61, 89, 57, 6, 94, 97, 23, 57, 86, 81, 58, 60, 31, 49, 99, 69, 96, 60, 20, 17, 73, 53, 25, 30, 60, 78, 93, 76, 30, 95, 52, 43, 98, 28, 9, 34, 9, 33, 97, 25, 75, 92, 79, 53, 3, 89, 59, 73, 14, 30, 97, 4, 65, 62, 89, 70, 82, 26, 68, 38, 94, 91, 46, 77, 82, 0, 44, 59, 77, 67, 80, 85, 48, 85, 26, 82, 92, 5, 18, 58, 67, 7, 73, 93, 84, 58, 86, 6, 76, 93, 40, 44, 75, 86, 66, 9, 74, 21, 34, 64, 1, 97, 69, 61, 63, 80, 22, 37, 25, 25, 91, 81, 25, 41, 5, 8, 33, 68, 70, 85, 38, 39, 14, 22, 53, 85, 56, 67, 84, 40, 32, 22, 26, 8, 100, 26, 1, 8, 3, 85, 37, 90, 75, 95, 36, 86, 14, 20, 54, 36, 62, 9, 83, 8, 73, 61, 10, 0, 50, 63, 68, 86, 63, 45]
last_save: 733

Gen:2008
last_save: 733
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.7777777777777778
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],-445778.3724).all():
      return False
    else:
      return True
  def adf1(index):
    if np.greater(x[index],+949065.4984).all():
      return True
    else:
      return False
  def adf2(index):
    if np.equal(x[index],+059237.6813).all():
      return False
    else:
      return True
  def adf3(index):
    if np.less(np.cos(x[index]),-092958.1436).all():
      return False
    else:
      return True
  def adf4(index):
    if np.equal(np.sin(x[index]),+120271.5455).all():
      return False
    else:
      return False
  def adf5(index):
    if np.less(x[index],+258946.1288).all():
      return True
    else:
      return False
  def adf6(index):
    if np.greater(np.tanh(x[index]),+191695.6974).all():
      return False
    else:
      return False
  def adf7(index):
    if np.greater(x[index],-553171.2934).all():
      return False
    else:
      return False
  def adf8(index):
    if np.greater(np.cos(x[index]),+752711.6565).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+466.131, adf1(1)*+882.156, adf2(2)*-299.835, adf3(3)*-599.031, adf4(4)*+002.449, adf5(5)*-595.414, adf6(6)*+825.709, adf7(7)*+651.904, adf8(8)*+610.274], [1, 1, 0, 0, 0, 1, 1, 1], 455.083)
result=p(); 0.6666666666666666
IndLenGenome:415
IndGenome:[71, 32, 30, 5, 71, 78, 1, 85, 7, 11, 78, 10, 65, 17, 15, 97, 81, 77, 80, 27, 65, 94, 13, 63, 79, 90, 64, 31, 47, 78, 88, 12, 35, 12, 82, 85, 56, 19, 7, 64, 84, 23, 15, 20, 69, 75, 54, 47, 18, 40, 38, 82, 27, 20, 33, 10, 55, 18, 79, 53, 91, 53, 68, 38, 33, 18, 81, 93, 45, 76, 99, 73, 13, 30, 8, 12, 71, 43, 96, 15, 86, 54, 72, 97, 14, 48, 9, 81, 15, 93, 57, 95, 66, 18, 74, 32, 25, 40, 19, 54, 55, 7, 55, 23, 66, 67, 11, 42, 19, 96, 69, 5, 90, 76, 59, 25, 70, 35, 12, 90, 63, 32, 74, 3, 88, 56, 69, 84, 79, 81, 89, 58, 10, 57, 74, 89, 16, 71, 99, 19, 50, 80, 17, 54, 55, 56, 97, 95, 55, 20, 62, 19, 84, 49, 19, 25, 23, 21, 71, 56, 50, 48, 11, 30, 25, 63, 59, 17, 69, 42, 36, 61, 24, 28, 29, 81, 78, 32, 22, 82, 42, 81, 54, 25, 26, 42, 69, 48, 81, 13, 69, 75, 63, 64, 16, 15, 54, 88, 95, 73, 64, 37, 87, 88, 73, 56, 41, 29, 92, 15, 44, 55, 96, 17, 94, 77, 75, 96, 91, 12, 21, 70, 86, 55, 72, 97, 77, 47, 51, 32, 12, 81, 69, 26, 87, 65, 5, 81, 41, 11, 17, 84, 90, 65, 36, 58, 76, 22, 64, 74, 50, 44, 55, 15, 21, 84, 18, 15, 11, 17, 75, 92, 59, 34, 79, 96, 72, 27, 28, 61, 13, 20, 19, 97, 64, 73, 84, 83, 15, 83, 54, 32, 41, 51, 70, 81, 79, 58, 35, 72, 37, 89, 10, 47, 29, 13, 60, 56, 33, 4, 84, 74, 90, 63, 31, 29, 76, 47, 30, 52, 23, 29, 50, 49, 48, 68, 98, 66, 21, 19, 85, 27, 63, 20, 58, 50, 38, 90, 44, 16, 84, 43, 48, 45, 53, 48, 46, 36, 75, 35, 30, 18, 33, 6, 77, 42, 54, 27, 8, 22, 8, 98, 69, 36, 60, 60, 38, 87, 1, 19, 49, 94, 45, 23, 98, 73, 41, 51, 71, 21, 32, 16, 73, 79, 30, 83, 45, 73, 33, 58, 27, 90, 74, 35, 94, 58, 81, 77, 44, 52, 11, 1, 23, 86, 4, 1, 94, 64, 44, 46, 73, 76, 98, 6, 75, 74, 72, 92, 49, 66, 38, 6, 5, 28, 49]
last_save: 734

Gen:28
TrainFitness:0.7777777777777778
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],+157093.8866).all():
      return True
    else:
      return True
  def adf1(index):
    if np.greater(x[index],-650256.3268).all():
      return False
    else:
      return False
  def adf2(index):
    if np.equal(x[index],-789529.8716).all():
      return True
    else:
      return True
  def adf3(index):
    if np.equal(x[index],+835529.9517).all():
      return True
    else:
      return False
  def adf4(index):
    if np.less(np.tanh(x[index]),-249897.8724).all():
      return True
    else:
      return False
  def adf5(index):
    if np.equal(x[index],-519131.1569).all():
      return False
    else:
      return False
  def adf6(index):
    if np.greater(x[index],+930269.9893).all():
      return True
    else:
      return False
  def adf7(index):
    if np.less(np.cos(x[index]),-945027.5910).all():
      if np.equal(x[index],-414253.3614).all():
        return True
      else:
        return False
      return False
    else:
      if np.less(x[index],+016539.9634).all():
        if np.greater(x[index],-173258.8720).all():
          return True
        else:
          return False
        return False
      else:
        if np.less(rlog(x[index]),-770157.6043).all():
          return True
        else:
          return False
        return False
      return True
  def adf8(index):
    if np.greater(x[index],+582113.9397).all():
      if np.less(x[index],+238850.8313).all():
        return True
      else:
        return False
      return True
    else:
      if np.greater(x[index],-570372.4681).all():
        return True
      else:
        return False
      return True
  return multiple_operation([adf0(0)*+475.173, adf1(1)*-077.346, adf2(2)*-143.581, adf3(3)*+798.820, adf4(4)*-015.150, adf5(5)*+812.642, adf6(6)*+607.926, adf7(7)*-756.605, adf8(8)*-365.715], [0, 1, 0, 0, 1, 1, 0, 1], 010.211)
result=p(); 0.7777777777777778
IndLenGenome:459
IndGenome:[86, 82, 39, 53, 32, 73, 46, 94, 9, 11, 35, 57, 10, 89, 33, 28, 8, 26, 76, 66, 6, 85, 91, 45, 43, 48, 13, 34, 16, 25, 60, 92, 45, 6, 33, 52, 36, 78, 29, 17, 91, 99, 59, 5, 58, 11, 69, 17, 88, 9, 65, 22, 59, 98, 87, 11, 6, 92, 24, 48, 53, 38, 57, 52, 64, 97, 48, 43, 45, 75, 32, 89, 19, 75, 31, 27, 86, 63, 33, 65, 73, 78, 32, 78, 93, 80, 52, 24, 89, 68, 99, 87, 98, 27, 62, 54, 12, 91, 40, 99, 53, 45, 22, 97, 79, 5, 31, 49, 11, 73, 91, 51, 75, 26, 49, 93, 37, 73, 49, 90, 3, 19, 68, 12, 49, 53, 90, 42, 16, 19, 59, 88, 9, 13, 82, 81, 61, 60, 36, 88, 74, 37, 12, 29, 57, 59, 64, 15, 20, 52, 87, 45, 9, 51, 50, 55, 47, 15, 43, 65, 44, 24, 31, 74, 12, 15, 23, 13, 66, 51, 74, 76, 43, 83, 26, 95, 19, 27, 72, 76, 84, 10, 81, 26, 45, 43, 79, 89, 16, 83, 4, 73, 57, 85, 76, 15, 58, 71, 97, 63, 62, 55, 28, 58, 77, 42, 50, 54, 45, 7, 61, 43, 86, 16, 91, 67, 91, 27, 87, 70, 31, 25, 97, 56, 10, 14, 43, 30, 65, 35, 60, 81, 82, 75, 42, 93, 81, 22, 36, 25, 68, 62, 1, 31, 43, 19, 73, 29, 67, 53, 46, 35, 35, 34, 42, 12, 83, 38, 38, 55, 20, 88, 83, 91, 53, 4, 13, 74, 11, 96, 41, 34, 23, 29, 15, 87, 40, 23, 47, 42, 74, 26, 18, 21, 18, 71, 84, 53, 15, 48, 4, 5, 74, 97, 75, 41, 17, 23, 29, 15, 87, 40, 37, 47, 53, 74, 26, 18, 21, 18, 71, 84, 53, 15, 48, 21, 93, 52, 49, 27, 29, 8, 78, 2, 30, 19, 15, 55, 60, 11, 75, 81, 85, 80, 42, 0, 81, 88, 71, 12, 6, 64, 72, 52, 24, 45, 36, 40, 67, 9, 32, 26, 68, 59, 24, 27, 15, 96, 86, 30, 95, 96, 75, 9, 73, 76, 85, 97, 71, 95, 64, 18, 59, 34, 60, 71, 59, 8, 7, 32, 20, 41, 50, 42, 71, 1, 5, 29, 36, 31, 22, 70, 73, 84, 23, 26, 27, 83, 54, 13, 13, 79, 77, 99, 28, 17, 64, 100, 12, 13, 97, 88, 52, 98, 99, 70, 60, 26, 52, 42, 48, 97, 69, 0, 30, 30, 78, 0, 73, 40, 31, 46, 21, 90, 98, 78, 23, 57, 0, 52, 59, 42, 0, 40, 100, 68, 13, 28, 79, 77, 4, 67, 39, 56, 15, 96, 21, 48, 17]
last_save: 734

Gen:2028
last_save: 734
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:1.0
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(rlog(x[index]),-136568.4195).all():
      return True
    else:
      return False
  def adf1(index):
    if np.equal(x[index],-905580.4622).all():
      return True
    else:
      return True
  def adf2(index):
    if np.greater(psqrt(x[index]),+979778.8154).all():
      return True
    else:
      return False
  def adf3(index):
    if np.equal(psqrt(x[index]),+410976.3618).all():
      return True
    else:
      return False
  def adf4(index):
    if np.equal(sigmoid(x[index]),+928979.2609).all():
      return True
    else:
      return False
  def adf5(index):
    if np.greater(x[index],-286600.8189).all():
      return True
    else:
      return False
  def adf6(index):
    if np.greater(np.cos(x[index]),-703529.1189).all():
      return False
    else:
      return True
  def adf7(index):
    if np.greater(x[index],-395362.4521).all():
      return False
    else:
      return True
  def adf8(index):
    if np.equal(x[index],-377357.4765).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+272.436, adf1(1)*-195.884, adf2(2)*+231.277, adf3(3)*-890.729, adf4(4)*+212.196, adf5(5)*-694.602, adf6(6)*+184.902, adf7(7)*+794.410, adf8(8)*+324.381], [0, 1, 1, 0, 0, 1, 1, 1], 141.230)
result=p(); 0.6666666666666666
IndLenGenome:417
IndGenome:[98, 77, 17, 28, 39, 2, 47, 90, 62, 5, 65, 85, 33, 41, 53, 66, 1, 66, 66, 45, 27, 38, 77, 77, 55, 79, 57, 63, 99, 45, 3, 60, 64, 54, 4, 54, 76, 31, 39, 10, 58, 64, 19, 90, 99, 89, 41, 18, 21, 38, 64, 81, 67, 57, 64, 83, 87, 68, 77, 96, 78, 2, 95, 27, 18, 83, 39, 87, 21, 74, 74, 30, 66, 39, 30, 91, 9, 63, 37, 65, 98, 99, 40, 14, 70, 87, 64, 82, 29, 88, 26, 72, 81, 87, 90, 58, 89, 88, 37, 73, 56, 32, 19, 59, 36, 29, 52, 24, 59, 88, 24, 11, 80, 21, 69, 71, 43, 56, 82, 98, 78, 22, 75, 52, 98, 70, 99, 76, 91, 39, 20, 91, 57, 46, 28, 43, 97, 60, 73, 44, 88, 29, 56, 5, 52, 42, 79, 5, 2, 24, 39, 78, 66, 70, 34, 62, 72, 68, 95, 71, 96, 85, 62, 27, 98, 89, 26, 8, 67, 71, 70, 69, 81, 48, 41, 46, 1, 71, 41, 53, 20, 42, 86, 5, 66, 12, 91, 36, 54, 64, 37, 25, 6, 56, 52, 54, 89, 64, 99, 49, 12, 11, 26, 13, 82, 27, 25, 61, 98, 87, 21, 16, 96, 12, 75, 66, 97, 50, 95, 13, 82, 91, 64, 34, 93, 71, 22, 17, 66, 39, 89, 71, 38, 15, 44, 92, 35, 81, 42, 45, 28, 83, 84, 19, 61, 74, 33, 68, 18, 17, 86, 90, 87, 52, 31, 89, 11, 89, 75, 89, 17, 51, 83, 79, 30, 46, 84, 16, 57, 34, 5, 73, 27, 27, 85, 95, 87, 63, 17, 63, 9, 54, 37, 28, 84, 51, 77, 42, 16, 1, 73, 2, 53, 60, 100, 26, 43, 84, 49, 79, 52, 73, 39, 94, 77, 46, 47, 83, 23, 65, 97, 54, 93, 86, 16, 57, 44, 27, 52, 12, 5, 67, 59, 71, 14, 84, 9, 93, 93, 74, 33, 52, 73, 86, 97, 86, 81, 9, 45, 53, 40, 88, 58, 54, 65, 79, 21, 23, 5, 46, 11, 86, 4, 82, 41, 73, 88, 92, 44, 26, 23, 8, 79, 76, 49, 91, 24, 82, 2, 66, 67, 75, 63, 37, 13, 67, 95, 69, 59, 17, 91, 98, 45, 7, 33, 96, 73, 79, 1, 33, 66, 49, 80, 37, 58, 54, 68, 43, 49, 12, 87, 2, 9, 62, 52, 85, 28, 80, 70, 69, 69, 24, 58, 68, 0, 87, 53]
last_save: 735

Gen:70
TrainFitness:0.7777777777777778
TestFitness:1.0
MaxGenLen:515
Individual: def p():
  def adf0(index):
    if np.less(np.sin(x[index]),+500635.9447).all():
      return True
    else:
      return True
  def adf1(index):
    if np.equal(sigmoid(x[index]),-458934.7342).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(x[index],+030151.5004).all():
      return True
    else:
      return False
  def adf3(index):
    if np.greater(x[index],-073661.4593).all():
      if np.greater(x[index],+113084.0543).all():
        return False
      else:
        return True
      return False
    else:
      if np.equal(x[index],+873668.4088).all():
        return False
      else:
        return False
      return True
  def adf4(index):
    if np.greater(sigmoid(x[index]),-172963.3809).all():
      return True
    else:
      return True
  def adf5(index):
    if np.less(x[index],-484413.9035).all():
      return True
    else:
      return True
  def adf6(index):
    if np.less(x[index],-572895.9597).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(np.cos(x[index]),+841757.9626).all():
      return False
    else:
      return True
  def adf8(index):
    if np.greater(np.cos(x[index]),-700599.2956).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+219.798, adf1(1)*-306.670, adf2(2)*+780.975, adf3(3)*+028.312, adf4(4)*+356.405, adf5(5)*+940.277, adf6(6)*-434.896, adf7(7)*-186.933, adf8(8)*+056.089], [0, 0, 0, 0, 1, 0, 0, 1], 717.333)
result=p(); 0.7777777777777778
IndLenGenome:378
IndGenome:[66, 61, 78, 7, 85, 14, 72, 93, 22, 63, 35, 90, 10, 56, 83, 95, 9, 44, 54, 47, 42, 34, 31, 17, 35, 30, 57, 29, 37, 82, 14, 35, 38, 49, 3, 64, 17, 23, 54, 42, 27, 79, 38, 65, 3, 53, 57, 0, 48, 30, 3, 80, 21, 45, 21, 45, 90, 30, 34, 78, 59, 63, 40, 51, 93, 45, 90, 39, 65, 90, 97, 43, 46, 76, 21, 94, 55, 9, 13, 53, 54, 75, 45, 56, 68, 71, 81, 53, 80, 88, 94, 90, 55, 4, 93, 79, 98, 57, 47, 44, 83, 19, 38, 65, 98, 97, 43, 46, 76, 18, 34, 20, 38, 28, 91, 35, 42, 19, 69, 33, 44, 57, 50, 3, 34, 61, 7, 62, 29, 66, 23, 13, 78, 90, 69, 62, 2, 48, 37, 85, 59, 82, 49, 8, 44, 68, 34, 34, 21, 53, 69, 30, 73, 85, 84, 98, 34, 15, 19, 85, 51, 45, 41, 25, 67, 82, 28, 89, 25, 89, 75, 19, 17, 72, 69, 80, 67, 81, 36, 13, 98, 4, 42, 8, 44, 31, 27, 55, 37, 19, 66, 62, 36, 17, 72, 20, 17, 63, 78, 85, 62, 97, 69, 87, 90, 10, 85, 29, 79, 22, 59, 35, 56, 96, 58, 69, 52, 10, 30, 86, 72, 51, 69, 67, 99, 88, 21, 77, 89, 53, 10, 76, 6, 87, 80, 79, 34, 35, 57, 18, 10, 49, 7, 55, 56, 2, 25, 10, 12, 98, 33, 81, 32, 79, 64, 27, 53, 35, 96, 44, 90, 35, 74, 62, 81, 49, 54, 80, 52, 7, 37, 66, 91, 19, 4, 53, 34, 28, 59, 36, 56, 3, 66, 11, 38, 76, 29, 83, 3, 22, 8, 63, 10, 95, 96, 100, 78, 9, 76, 38, 14, 32, 10, 97, 44, 72, 95, 30, 87, 71, 67, 83, 93, 63, 70, 12, 57, 97, 19, 59, 10, 10, 42, 6, 34, 66, 14, 75, 2, 95, 44, 32, 50, 74, 67, 1, 10, 61, 51, 57, 61, 23, 1, 83, 85, 2, 14, 38, 57, 1, 93, 4, 67, 9, 50, 89, 33, 91, 78, 55, 12, 22, 63, 42, 47, 15, 81, 83, 28, 33, 64, 47, 79, 39, 59, 62, 85, 7]
last_save: 735