Dataset:Spiral/Full.csv
FS:False
Seed:1237
Size:7

Gen:1
TrainFitness:0.7777777777777778
TestFitness:0.5555555555555556
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(psqrt(x[index]),-188854.4203).all():
      return False
    else:
      return True
  def adf1(index):
    if np.equal(sigmoid(x[index]),+582886.8414).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(x[index],-144747.0916).all():
      return False
    else:
      return False
  def adf3(index):
    if np.equal(rlog(x[index]),+119662.7761).all():
      return True
    else:
      return True
  def adf4(index):
    if np.equal(np.cos(x[index]),-884496.4121).all():
      return True
    else:
      return False
  def adf5(index):
    if np.less(psqrt(x[index]),+825040.7362).all():
      return True
    else:
      return False
  def adf6(index):
    if np.less(np.sin(x[index]),-402202.7301).all():
      return False
    else:
      return False
  def adf7(index):
    if np.equal(np.tanh(x[index]),-259191.0259).all():
      return True
    else:
      return False
  def adf8(index):
    if np.less(x[index],-333207.2232).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*-796.847, adf1(1)*-526.232, adf2(2)*-850.755, adf3(3)*+965.650, adf4(4)*-384.280, adf5(5)*-741.882, adf6(6)*-704.435, adf7(7)*-265.268, adf8(8)*+555.813], [1, 1, 1, 1, 0, 1, 1, 0], 637.735)
result=p(); 0.7777777777777778
IndLenGenome:420
IndGenome:[22, 4, 78, 75, 78, 91, 65, 78, 30, 77, 31, 51, 61, 4, 17, 67, 33, 7, 21, 97, 37, 56, 33, 61, 38, 60, 3, 77, 46, 11, 29, 60, 41, 32, 20, 4, 67, 78, 45, 47, 88, 73, 70, 63, 79, 63, 31, 19, 68, 47, 29, 52, 64, 36, 29, 67, 74, 91, 55, 95, 67, 36, 24, 8, 55, 72, 67, 59, 96, 32, 60, 72, 41, 77, 23, 89, 71, 21, 50, 83, 39, 10, 88, 60, 37, 46, 15, 58, 23, 69, 90, 21, 15, 50, 30, 17, 58, 35, 38, 19, 52, 66, 97, 34, 43, 12, 46, 23, 93, 28, 3, 71, 21, 52, 7, 92, 26, 30, 25, 43, 96, 77, 96, 2, 12, 19, 52, 84, 84, 36, 82, 99, 62, 83, 42, 22, 64, 62, 14, 51, 55, 57, 28, 11, 60, 46, 31, 68, 74, 41, 34, 28, 22, 62, 58, 35, 97, 82, 100, 20, 78, 97, 37, 55, 75, 15, 32, 31, 26, 86, 45, 82, 65, 94, 26, 46, 34, 93, 23, 18, 10, 10, 11, 67, 64, 74, 62, 15, 92, 95, 46, 34, 73, 88, 63, 27, 37, 28, 70, 33, 51, 72, 40, 75, 51, 72, 77, 43, 75, 60, 36, 48, 44, 25, 67, 61, 38, 47, 22, 26, 24, 12, 81, 80, 85, 98, 62, 37, 75, 93, 13, 25, 50, 90, 38, 84, 83, 62, 68, 89, 12, 47, 66, 52, 28, 42, 91, 36, 12, 82, 12, 45, 41, 15, 17, 70, 7, 89, 73, 35, 24, 66, 94, 31, 57, 98, 98, 34, 69, 98, 65, 51, 36, 42, 67, 35, 88, 97, 53, 24, 11, 60, 47, 51, 33, 62, 93, 27, 89, 1, 65, 100, 99, 58, 7, 71, 29, 67, 43, 60, 50, 3, 83, 79, 15, 78, 45, 90, 40, 21, 10, 100, 13, 3, 3, 23, 37, 30, 2, 6, 44, 19, 82, 62, 48, 38, 61, 41, 56, 75, 69, 95, 97, 22, 60, 17, 100, 32, 85, 4, 100, 5, 91, 44, 9, 57, 53, 10, 86, 15, 78, 14, 18, 24, 6, 26, 74, 52, 66, 35, 1, 7, 30, 93, 21, 92, 20, 35, 52, 96, 48, 16, 66, 35, 67, 87, 32, 30, 55, 72, 71, 55, 0, 48, 28, 29, 55, 33, 94, 100, 38, 26, 0, 38, 79, 94, 87, 89, 99, 45, 65, 84, 24, 1, 38, 32, 19, 87, 19, 51, 29, 62, 2, 75, 21, 51, 92, 58, 93, 84]
last_save: 731

Gen:2001
last_save: 731
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],+436590.1224).all():
      return True
    else:
      return True
  def adf1(index):
    if np.equal(x[index],+953107.0584).all():
      return False
    else:
      return True
  def adf2(index):
    if np.equal(np.tanh(x[index]),-552665.1720).all():
      return False
    else:
      return True
  def adf3(index):
    if np.equal(psqrt(x[index]),-636922.3263).all():
      return False
    else:
      return True
  def adf4(index):
    if np.less(x[index],+010505.9031).all():
      return False
    else:
      return True
  def adf5(index):
    if np.less(x[index],-804162.6010).all():
      return True
    else:
      return True
  def adf6(index):
    if np.greater(x[index],+402593.0522).all():
      return True
    else:
      return True
  def adf7(index):
    if np.less(np.tanh(x[index]),+207984.1479).all():
      return True
    else:
      return True
  def adf8(index):
    if np.less(x[index],+835274.9878).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-609.928, adf1(1)*-191.474, adf2(2)*-386.817, adf3(3)*+176.559, adf4(4)*-647.482, adf5(5)*-294.948, adf6(6)*-991.542, adf7(7)*+442.449, adf8(8)*+331.417], [1, 0, 1, 0, 1, 0, 0, 0], 037.985)
result=p(); 0.6666666666666666
IndLenGenome:414
IndGenome:[13, 98, 70, 89, 13, 21, 8, 77, 27, 85, 21, 41, 8, 52, 37, 64, 92, 57, 20, 91, 54, 80, 84, 84, 70, 98, 37, 32, 36, 63, 24, 86, 15, 59, 51, 61, 20, 56, 95, 38, 46, 64, 67, 66, 44, 81, 27, 61, 38, 39, 58, 88, 71, 4, 32, 54, 79, 7, 27, 96, 11, 47, 72, 31, 57, 3, 73, 45, 63, 53, 67, 60, 71, 87, 61, 15, 47, 73, 57, 89, 38, 19, 21, 85, 48, 39, 91, 60, 87, 93, 89, 71, 10, 87, 79, 38, 70, 40, 26, 82, 42, 51, 91, 43, 84, 8, 14, 11, 28, 64, 63, 39, 24, 46, 14, 13, 21, 81, 82, 27, 62, 34, 14, 50, 97, 58, 36, 65, 48, 92, 55, 32, 52, 2, 35, 63, 68, 44, 91, 22, 66, 36, 25, 16, 27, 44, 38, 36, 26, 48, 50, 76, 53, 26, 90, 96, 58, 54, 94, 57, 46, 62, 43, 52, 28, 43, 9, 54, 62, 42, 37, 82, 84, 63, 95, 59, 33, 69, 55, 38, 43, 53, 41, 72, 15, 4, 65, 92, 74, 45, 58, 64, 62, 28, 83, 11, 10, 54, 16, 52, 19, 77, 11, 18, 40, 62, 31, 90, 32, 14, 13, 79, 49, 31, 33, 42, 35, 46, 25, 64, 78, 85, 23, 75, 60, 61, 77, 60, 10, 82, 79, 19, 57, 84, 13, 39, 16, 18, 52, 74, 67, 12, 43, 84, 70, 79, 94, 28, 94, 85, 56, 85, 10, 24, 84, 49, 79, 67, 71, 90, 60, 42, 79, 81, 65, 95, 83, 82, 30, 65, 59, 40, 49, 94, 90, 81, 71, 65, 60, 28, 61, 71, 0, 5, 28, 93, 52, 66, 63, 72, 64, 17, 84, 78, 46, 83, 13, 81, 76, 23, 62, 8, 90, 31, 19, 56, 55, 78, 96, 24, 68, 99, 87, 18, 82, 88, 15, 25, 53, 19, 66, 10, 13, 99, 21, 4, 41, 96, 16, 75, 57, 16, 10, 88, 21, 45, 50, 21, 67, 58, 90, 16, 12, 65, 41, 26, 13, 65, 1, 10, 8, 75, 54, 39, 60, 68, 37, 49, 28, 83, 86, 59, 96, 0, 20, 33, 85, 36, 32, 81, 83, 56, 9, 85, 71, 2, 47, 71, 55, 55, 26, 16, 36, 86, 4, 34, 82, 79, 82, 25, 10, 38, 54, 34, 70, 50, 54, 93, 48, 20, 74, 29, 32, 3, 33, 22, 97, 49, 26, 16, 45, 94, 85, 12]
last_save: 732

Gen:630
TrainFitness:0.7777777777777778
TestFitness:0.4444444444444444
MaxGenLen:680
Individual: def p():
  def adf0(index):
    if np.less(x[index],-755792.4346).all():
      return False
    else:
      return False
  def adf1(index):
    if np.greater(x[index],-216503.1324).all():
      return True
    else:
      return False
  def adf2(index):
    if np.greater(x[index],-177355.7277).all():
      if np.equal(x[index],-311686.7753).all():
        return True
      else:
        return True
      return False
    else:
      if np.equal(x[index],-129906.4535).all():
        return False
      else:
        return False
      return False
  def adf3(index):
    if np.equal(x[index],-194006.3797).all():
      return False
    else:
      return False
  def adf4(index):
    if np.equal(rlog(x[index]),+223912.3357).all():
      return False
    else:
      return True
  def adf5(index):
    if np.equal(x[index],-801941.9490).all():
      if np.less(x[index],-621320.3855).all():
        return False
      else:
        return False
      return False
    else:
      if np.greater(rlog(x[index]),-692114.5534).all():
        return True
      else:
        return False
      return True
  def adf6(index):
    if np.greater(x[index],+005476.5295).all():
      if np.greater(np.sin(x[index]),+190215.4263).all():
        return False
      else:
        return True
      return True
    else:
      if np.greater(x[index],+661785.7689).all():
        if np.greater(rlog(x[index]),-673843.5394).all():
          return False
        else:
          return True
        return True
      else:
        if np.equal(x[index],-723943.4316).all():
          if np.equal(rlog(x[index]),+665479.6039).all():
            return False
          else:
            return True
          return True
        else:
          if np.less(x[index],-054095.4471).all():
            return False
          else:
            return False
          return True
        return False
      return True
  def adf7(index):
    if np.greater(sigmoid(x[index]),-131128.3809).all():
      return False
    else:
      return False
  def adf8(index):
    if np.equal(x[index],-370145.7766).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-403.848, adf1(1)*-918.025, adf2(2)*-204.400, adf3(3)*-327.304, adf4(4)*-170.180, adf5(5)*+318.674, adf6(6)*-267.909, adf7(7)*-335.286, adf8(8)*+855.018], [0, 1, 1, 0, 0, 0, 1, 0], 625.709)
result=p(); 0.7777777777777778
IndLenGenome:464
IndGenome:[86, 50, 91, 81, 37, 13, 42, 97, 81, 67, 75, 75, 67, 49, 32, 84, 83, 24, 96, 19, 11, 35, 45, 63, 15, 12, 43, 33, 62, 51, 96, 55, 80, 43, 81, 43, 92, 54, 26, 43, 72, 34, 68, 15, 15, 95, 97, 97, 1, 7, 67, 3, 75, 85, 77, 62, 37, 47, 75, 11, 17, 62, 89, 59, 33, 51, 31, 36, 98, 26, 97, 47, 55, 3, 58, 82, 21, 95, 35, 47, 82, 55, 54, 61, 42, 89, 69, 60, 16, 94, 15, 3, 65, 79, 35, 93, 39, 47, 20, 93, 13, 23, 90, 41, 69, 44, 90, 90, 86, 43, 27, 79, 17, 95, 53, 14, 41, 95, 62, 76, 19, 58, 54, 22, 22, 33, 59, 71, 72, 43, 43, 35, 17, 19, 54, 95, 68, 80, 59, 77, 18, 93, 46, 58, 70, 31, 59, 44, 71, 69, 34, 19, 20, 67, 64, 13, 13, 89, 39, 16, 32, 31, 63, 12, 80, 93, 28, 85, 15, 45, 15, 83, 95, 57, 6, 10, 83, 43, 62, 26, 69, 42, 11, 61, 24, 15, 85, 73, 4, 68, 45, 38, 8, 42, 25, 42, 33, 83, 76, 92, 60, 50, 15, 94, 57, 66, 15, 2, 59, 35, 67, 63, 6, 48, 12, 60, 33, 61, 69, 80, 82, 31, 55, 4, 32, 26, 73, 75, 88, 54, 54, 10, 15, 95, 34, 14, 68, 66, 16, 81, 87, 38, 25, 47, 56, 98, 39, 21, 93, 30, 88, 25, 89, 26, 46, 67, 33, 98, 54, 53, 55, 73, 99, 14, 83, 60, 24, 56, 95, 41, 47, 22, 21, 15, 17, 92, 83, 49, 24, 13, 94, 13, 21, 96, 27, 53, 28, 70, 45, 96, 22, 26, 36, 65, 34, 47, 19, 66, 20, 53, 49, 49, 54, 36, 83, 49, 75, 57, 83, 61, 70, 35, 84, 60, 89, 25, 64, 34, 77, 41, 83, 79, 84, 7, 48, 65, 47, 84, 18, 15, 88, 69, 5, 1, 43, 11, 21, 12, 38, 3, 78, 20, 19, 67, 97, 63, 69, 86, 55, 40, 51, 8, 13, 27, 80, 91, 74, 65, 97, 97, 66, 76, 2, 13, 65, 34, 19, 81, 61, 94, 100, 23, 68, 34, 48, 35, 63, 88, 89, 81, 68, 50, 72, 75, 82, 17, 22, 2, 20, 24, 74, 50, 70, 99, 71, 68, 13, 62, 87, 23, 30, 14, 100, 83, 84, 41, 57, 0, 31, 38, 20, 0, 24, 68, 63, 81, 18, 56, 27, 74, 47, 25, 35, 22, 96, 17, 99, 10, 59, 46, 73, 89, 43, 23, 15, 2, 28, 26, 31, 72, 53, 28, 75, 25, 30, 31, 28, 95, 74, 5, 33, 62, 44, 94, 85, 20, 85, 6, 12, 15, 27, 90, 59, 99]
last_save: 732

Gen:2630
last_save: 732
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.5555555555555556
TestFitness:0.7777777777777778
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(np.cos(x[index]),+337736.2762).all():
      return False
    else:
      return True
  def adf1(index):
    if np.equal(x[index],+222306.0821).all():
      return True
    else:
      return True
  def adf2(index):
    if np.less(psqrt(x[index]),-017237.7866).all():
      return False
    else:
      return True
  def adf3(index):
    if np.equal(x[index],+211129.4004).all():
      return False
    else:
      return False
  def adf4(index):
    if np.equal(sigmoid(x[index]),-986866.5071).all():
      return True
    else:
      return False
  def adf5(index):
    if np.less(x[index],-380643.3801).all():
      return True
    else:
      return False
  def adf6(index):
    if np.greater(np.tanh(x[index]),-119592.0181).all():
      return False
    else:
      return False
  def adf7(index):
    if np.less(rlog(x[index]),+241778.5060).all():
      return False
    else:
      return True
  def adf8(index):
    if np.equal(np.cos(x[index]),-308215.9696).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+880.389, adf1(1)*-836.982, adf2(2)*+420.289, adf3(3)*+073.068, adf4(4)*+270.191, adf5(5)*-434.915, adf6(6)*+348.745, adf7(7)*-710.327, adf8(8)*-588.341], [1, 1, 0, 1, 0, 1, 0, 0], 629.912)
result=p(); 0.5555555555555556
IndLenGenome:418
IndGenome:[79, 90, 33, 93, 13, 26, 71, 72, 9, 58, 21, 37, 88, 49, 93, 56, 15, 17, 43, 37, 58, 48, 61, 80, 78, 5, 61, 2, 40, 32, 71, 35, 99, 33, 31, 60, 64, 46, 17, 78, 90, 62, 6, 29, 65, 9, 79, 41, 31, 37, 65, 93, 84, 3, 17, 89, 40, 14, 72, 74, 56, 48, 10, 3, 92, 25, 41, 15, 42, 14, 42, 27, 36, 25, 10, 92, 99, 89, 15, 61, 19, 51, 24, 68, 78, 66, 50, 40, 21, 95, 38, 91, 80, 51, 18, 94, 6, 48, 72, 8, 3, 11, 8, 13, 92, 47, 93, 44, 29, 56, 80, 5, 19, 83, 93, 1, 79, 5, 80, 72, 23, 10, 88, 85, 71, 5, 14, 77, 90, 77, 45, 39, 21, 66, 79, 40, 89, 37, 23, 40, 84, 28, 27, 40, 89, 25, 62, 52, 73, 44, 82, 12, 43, 36, 28, 42, 38, 66, 58, 86, 5, 56, 42, 39, 42, 37, 52, 12, 49, 89, 46, 61, 46, 87, 22, 90, 21, 77, 79, 31, 73, 83, 99, 81, 88, 35, 57, 99, 29, 61, 76, 36, 58, 16, 98, 79, 93, 91, 56, 27, 78, 61, 9, 40, 57, 48, 16, 39, 19, 41, 87, 40, 44, 55, 47, 58, 21, 57, 23, 26, 44, 44, 23, 99, 70, 67, 86, 22, 51, 72, 94, 37, 11, 34, 41, 64, 38, 96, 33, 16, 81, 20, 27, 64, 32, 63, 62, 53, 16, 86, 91, 22, 40, 60, 67, 18, 38, 23, 11, 55, 21, 50, 13, 46, 87, 48, 76, 58, 61, 20, 16, 32, 93, 45, 87, 50, 81, 54, 28, 16, 99, 22, 12, 100, 95, 78, 31, 22, 53, 56, 63, 43, 99, 60, 94, 78, 92, 25, 3, 33, 25, 32, 81, 63, 21, 7, 1, 51, 68, 70, 89, 77, 56, 65, 72, 13, 92, 44, 21, 26, 66, 99, 81, 19, 39, 86, 28, 5, 71, 26, 74, 70, 14, 70, 14, 62, 49, 15, 29, 23, 92, 79, 99, 47, 23, 60, 64, 76, 79, 87, 5, 85, 22, 60, 62, 7, 45, 67, 16, 35, 9, 7, 19, 3, 44, 74, 51, 75, 10, 94, 56, 64, 22, 82, 99, 61, 34, 64, 97, 72, 47, 3, 24, 86, 54, 47, 9, 72, 63, 10, 13, 79, 18, 86, 1, 54, 2, 4, 13, 85, 11, 42, 79, 30, 86, 93, 76, 52, 93, 67, 3, 45, 18, 44, 37, 37, 68, 6]
last_save: 733

Gen:17
TrainFitness:0.6666666666666666
TestFitness:0.7777777777777778
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(psqrt(x[index]),+022167.3005).all():
      return False
    else:
      return True
  def adf1(index):
    if np.less(rlog(x[index]),-311779.2730).all():
      return True
    else:
      return True
  def adf2(index):
    if np.equal(sigmoid(x[index]),-871102.3721).all():
      return False
    else:
      return False
  def adf3(index):
    if np.less(x[index],-961336.6628).all():
      return False
    else:
      return True
  def adf4(index):
    if np.greater(x[index],+036774.4765).all():
      return True
    else:
      return False
  def adf5(index):
    if np.greater(x[index],-702686.3662).all():
      return True
    else:
      return False
  def adf6(index):
    if np.less(x[index],-518323.8937).all():
      return True
    else:
      return True
  def adf7(index):
    if np.less(x[index],+036301.5395).all():
      return False
    else:
      return True
  def adf8(index):
    if np.equal(np.cos(x[index]),-593834.9713).all():
      if np.less(np.sin(x[index]),+639552.0503).all():
        return True
      else:
        return False
      return False
    else:
      if np.equal(psqrt(x[index]),-721917.7026).all():
        if np.less(np.sin(x[index]),+630153.9518).all():
          if np.greater(x[index],-788570.3654).all():
            return True
          else:
            return False
          return True
        else:
          if np.less(x[index],+565137.1608).all():
            return False
          else:
            return False
          return True
        return True
      else:
        if np.less(x[index],+782120.0047).all():
          return False
        else:
          return False
        return True
      return True
  return multiple_operation([adf0(0)*-804.734, adf1(1)*+336.107, adf2(2)*+236.612, adf3(3)*+383.151, adf4(4)*-786.810, adf5(5)*+570.148, adf6(6)*-205.802, adf7(7)*+690.482, adf8(8)*-521.317], [1, 0, 0, 1, 1, 0, 1, 0], 241.669)
result=p(); 0.6666666666666666
IndLenGenome:486
IndGenome:[43, 94, 24, 95, 24, 60, 29, 16, 8, 93, 80, 22, 52, 41, 86, 57, 13, 30, 90, 15, 99, 78, 49, 55, 19, 14, 46, 27, 93, 30, 23, 31, 71, 47, 77, 99, 62, 67, 13, 20, 42, 38, 37, 41, 83, 56, 27, 78, 65, 42, 68, 87, 51, 91, 50, 92, 83, 77, 92, 31, 73, 51, 55, 55, 49, 83, 18, 73, 44, 29, 6, 31, 13, 3, 16, 76, 36, 32, 88, 59, 66, 63, 39, 15, 15, 72, 30, 65, 50, 83, 6, 17, 17, 34, 84, 47, 96, 65, 86, 19, 35, 77, 72, 21, 59, 31, 27, 27, 30, 72, 86, 28, 6, 73, 6, 6, 92, 60, 83, 96, 33, 10, 91, 85, 43, 89, 75, 31, 18, 13, 12, 83, 48, 69, 53, 37, 68, 88, 75, 57, 10, 73, 6, 6, 16, 60, 83, 96, 33, 10, 91, 85, 43, 89, 75, 31, 18, 50, 92, 83, 77, 92, 31, 73, 51, 55, 55, 49, 83, 18, 73, 44, 29, 57, 31, 13, 3, 16, 76, 36, 32, 88, 59, 66, 83, 39, 15, 15, 72, 30, 65, 50, 83, 6, 17, 17, 34, 84, 47, 96, 65, 86, 19, 35, 77, 72, 21, 59, 31, 27, 27, 30, 72, 86, 28, 6, 73, 6, 6, 92, 60, 83, 96, 33, 10, 91, 85, 43, 89, 75, 31, 18, 13, 12, 83, 48, 69, 53, 37, 68, 88, 75, 57, 10, 83, 56, 25, 54, 92, 93, 74, 99, 43, 71, 77, 80, 19, 45, 86, 55, 81, 63, 57, 71, 6, 30, 78, 33, 43, 90, 50, 67, 97, 15, 19, 58, 63, 7, 78, 72, 31, 22, 90, 20, 20, 84, 37, 7, 37, 78, 32, 40, 64, 10, 59, 93, 18, 10, 94, 37, 63, 34, 41, 64, 38, 23, 33, 16, 81, 20, 27, 64, 32, 63, 62, 53, 16, 86, 91, 22, 90, 60, 67, 73, 38, 23, 11, 55, 21, 50, 13, 46, 87, 48, 76, 58, 61, 20, 16, 32, 93, 45, 87, 50, 81, 54, 28, 16, 99, 22, 12, 100, 95, 78, 0, 22, 53, 56, 63, 36, 99, 60, 94, 78, 92, 25, 3, 33, 25, 32, 81, 63, 21, 7, 1, 51, 68, 70, 89, 77, 56, 65, 72, 13, 92, 44, 21, 26, 66, 99, 81, 19, 39, 86, 28, 5, 71, 26, 74, 70, 14, 70, 14, 62, 49, 15, 29, 23, 92, 79, 99, 47, 23, 60, 64, 76, 79, 87, 5, 85, 22, 60, 62, 7, 45, 67, 16, 35, 9, 7, 19, 3, 44, 74, 51, 75, 10, 94, 56, 64, 22, 82, 99, 61, 34, 64, 97, 72, 47, 3, 24, 86, 54, 47, 9, 72, 63, 10, 13, 79, 18, 86, 1, 54, 2, 4, 13, 85, 11, 42, 79, 30, 86, 93, 76, 52, 93, 67, 3, 45, 18, 44, 37, 37, 68, 6]
last_save: 733

Gen:70
TrainFitness:0.7777777777777778
TestFitness:0.4444444444444444
MaxGenLen:515
Individual: def p():
  def adf0(index):
    if np.greater(psqrt(x[index]),+022167.3005).all():
      return False
    else:
      return True
  def adf1(index):
    if np.less(rlog(x[index]),-311779.0730).all():
      return True
    else:
      return True
  def adf2(index):
    if np.equal(sigmoid(x[index]),-571102.3721).all():
      return False
    else:
      return False
  def adf3(index):
    if np.less(x[index],-961336.6628).all():
      return False
    else:
      return True
  def adf4(index):
    if np.greater(x[index],+036774.4765).all():
      return True
    else:
      return False
  def adf5(index):
    if np.greater(x[index],-702686.3662).all():
      return True
    else:
      return False
  def adf6(index):
    if np.less(x[index],-510323.8935).all():
      return True
    else:
      return True
  def adf7(index):
    if np.less(x[index],+006301.7395).all():
      return False
    else:
      return True
  def adf8(index):
    if np.less(np.cos(x[index]),-593834.9713).all():
      if np.less(np.sin(x[index]),+039352.0503).all():
        return True
      else:
        return False
      return False
    else:
      if np.equal(psqrt(x[index]),-721977.7026).all():
        if np.less(np.sin(x[index]),+630163.9518).all():
          if np.greater(x[index],-788570.3654).all():
            return True
          else:
            return False
          return True
        else:
          if np.less(x[index],+565130.1608).all():
            return False
          else:
            return False
          return True
        return True
      else:
        if np.less(x[index],+782120.0047).all():
          return False
        else:
          return False
        return True
      return True
  return multiple_operation([adf0(0)*-804.704, adf1(1)*+336.100, adf2(2)*+336.412, adf3(3)*+383.151, adf4(4)*-786.816, adf5(5)*+571.148, adf6(6)*-205.802, adf7(7)*+690.482, adf8(8)*-523.316], [1, 0, 0, 1, 1, 0, 1, 0], 245.669)
result=p(); 0.7777777777777778
IndLenGenome:486
IndGenome:[43, 94, 24, 95, 24, 60, 29, 16, 8, 93, 80, 22, 52, 41, 86, 57, 13, 30, 90, 15, 99, 78, 63, 55, 19, 14, 46, 27, 93, 30, 23, 31, 71, 47, 77, 99, 60, 67, 13, 20, 42, 38, 37, 41, 83, 56, 27, 78, 65, 42, 65, 87, 51, 91, 50, 92, 83, 77, 92, 31, 73, 51, 55, 55, 49, 83, 18, 21, 44, 29, 6, 31, 13, 3, 16, 76, 36, 32, 88, 59, 66, 63, 39, 15, 15, 72, 30, 65, 50, 83, 6, 17, 17, 34, 84, 47, 96, 65, 86, 19, 35, 77, 72, 21, 59, 31, 27, 27, 30, 72, 86, 28, 6, 73, 6, 6, 92, 60, 83, 96, 25, 10, 91, 85, 43, 89, 75, 31, 90, 13, 12, 83, 48, 69, 53, 35, 68, 88, 75, 57, 10, 73, 6, 98, 16, 60, 40, 96, 33, 10, 91, 37, 43, 89, 75, 31, 18, 50, 92, 83, 13, 92, 31, 73, 51, 24, 55, 49, 83, 18, 73, 44, 29, 57, 31, 13, 3, 16, 76, 36, 32, 88, 59, 100, 83, 39, 53, 15, 72, 30, 65, 50, 83, 6, 17, 17, 34, 84, 83, 96, 65, 86, 19, 35, 77, 72, 21, 59, 57, 27, 27, 30, 72, 86, 28, 6, 73, 6, 6, 36, 0, 83, 96, 33, 10, 91, 26, 43, 89, 75, 31, 18, 13, 12, 77, 48, 69, 53, 37, 68, 88, 75, 57, 10, 83, 56, 25, 54, 92, 93, 74, 99, 43, 71, 77, 8, 19, 45, 86, 55, 81, 63, 70, 71, 6, 30, 78, 33, 43, 90, 50, 67, 97, 15, 19, 58, 63, 7, 78, 72, 31, 22, 10, 20, 20, 84, 37, 7, 25, 78, 32, 40, 64, 10, 59, 93, 18, 10, 94, 37, 40, 34, 41, 64, 38, 23, 33, 16, 81, 20, 70, 64, 32, 63, 93, 53, 16, 84, 91, 22, 90, 60, 60, 73, 38, 23, 81, 55, 21, 50, 13, 46, 87, 48, 76, 58, 61, 26, 16, 32, 93, 45, 87, 81, 81, 54, 28, 16, 99, 22, 12, 100, 95, 78, 0, 22, 53, 56, 12, 36, 99, 60, 94, 78, 92, 25, 3, 33, 25, 32, 33, 63, 21, 6, 1, 51, 68, 70, 89, 77, 56, 65, 72, 13, 92, 44, 35, 26, 66, 99, 81, 19, 39, 86, 28, 5, 71, 26, 74, 70, 14, 70, 14, 62, 49, 15, 29, 23, 92, 79, 99, 47, 23, 60, 64, 76, 79, 87, 5, 85, 22, 60, 62, 7, 45, 67, 16, 35, 9, 7, 19, 3, 44, 74, 51, 75, 10, 94, 56, 64, 22, 82, 99, 61, 34, 64, 97, 72, 47, 3, 24, 86, 54, 47, 9, 72, 63, 10, 13, 79, 18, 86, 1, 54, 2, 4, 13, 85, 11, 42, 79, 30, 86, 93, 76, 52, 93, 67, 3, 45, 18, 44, 37, 37, 68, 6]
last_save: 733

Gen:2070
last_save: 733
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.5555555555555556
TestFitness:0.5555555555555556
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],-631767.5044).all():
      return False
    else:
      return True
  def adf1(index):
    if np.less(rlog(x[index]),+306037.1136).all():
      return True
    else:
      return True
  def adf2(index):
    if np.less(x[index],-548703.4576).all():
      return False
    else:
      return True
  def adf3(index):
    if np.less(np.tanh(x[index]),+684900.8033).all():
      return True
    else:
      return True
  def adf4(index):
    if np.less(np.tanh(x[index]),+887581.6580).all():
      return False
    else:
      return True
  def adf5(index):
    if np.greater(sigmoid(x[index]),-863885.3243).all():
      return False
    else:
      return False
  def adf6(index):
    if np.greater(x[index],+955546.2108).all():
      return False
    else:
      return True
  def adf7(index):
    if np.less(np.tanh(x[index]),+629971.6587).all():
      return False
    else:
      return False
  def adf8(index):
    if np.greater(rlog(x[index]),-419593.7886).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+335.956, adf1(1)*-004.029, adf2(2)*+986.007, adf3(3)*+679.409, adf4(4)*-433.826, adf5(5)*+536.764, adf6(6)*+184.736, adf7(7)*+994.548, adf8(8)*+011.777], [0, 1, 0, 0, 0, 1, 0, 0], 834.684)
result=p(); 0.5555555555555556
IndLenGenome:418
IndGenome:[65, 20, 82, 93, 57, 3, 19, 90, 90, 87, 59, 13, 75, 19, 84, 15, 43, 79, 30, 39, 97, 70, 43, 56, 22, 6, 57, 33, 74, 42, 34, 75, 31, 90, 44, 27, 82, 87, 100, 95, 61, 84, 15, 41, 17, 35, 88, 39, 52, 97, 41, 64, 74, 83, 64, 46, 60, 92, 45, 87, 14, 100, 49, 77, 93, 33, 14, 65, 38, 39, 43, 46, 8, 90, 77, 6, 87, 61, 48, 30, 63, 66, 69, 88, 55, 10, 21, 42, 74, 52, 18, 69, 60, 70, 48, 87, 40, 38, 82, 36, 98, 75, 20, 78, 84, 96, 73, 98, 16, 83, 26, 74, 70, 76, 9, 14, 29, 82, 15, 58, 28, 36, 83, 48, 63, 17, 50, 99, 20, 40, 72, 21, 85, 87, 38, 61, 55, 31, 79, 7, 64, 24, 54, 7, 4, 30, 17, 89, 6, 54, 72, 70, 81, 66, 3, 91, 90, 58, 85, 34, 28, 20, 13, 23, 16, 22, 54, 13, 29, 41, 68, 40, 37, 7, 55, 51, 4, 46, 41, 61, 5, 2, 48, 83, 68, 36, 81, 23, 26, 79, 86, 50, 63, 86, 50, 42, 4, 59, 62, 84, 88, 31, 88, 87, 19, 98, 16, 15, 72, 93, 67, 76, 98, 30, 17, 5, 18, 85, 74, 45, 27, 14, 66, 44, 68, 15, 73, 58, 37, 70, 57, 35, 74, 46, 34, 19, 19, 57, 12, 66, 93, 67, 10, 44, 43, 16, 86, 43, 96, 67, 13, 87, 21, 59, 52, 95, 59, 70, 96, 21, 68, 46, 43, 45, 46, 33, 58, 44, 29, 62, 60, 38, 24, 15, 26, 35, 37, 58, 95, 32, 33, 71, 90, 96, 83, 44, 56, 98, 63, 92, 3, 76, 92, 99, 97, 77, 59, 3, 63, 86, 80, 5, 55, 54, 92, 22, 100, 30, 51, 31, 55, 91, 13, 10, 43, 84, 43, 2, 93, 35, 75, 100, 29, 92, 15, 97, 64, 68, 17, 67, 57, 22, 6, 50, 70, 58, 85, 64, 9, 89, 12, 54, 70, 50, 94, 98, 56, 54, 41, 51, 82, 26, 92, 67, 36, 15, 18, 60, 83, 50, 73, 92, 65, 55, 48, 5, 85, 80, 31, 32, 96, 40, 84, 62, 51, 71, 60, 79, 91, 2, 71, 1, 62, 5, 46, 17, 6, 55, 30, 26, 27, 8, 89, 20, 90, 20, 97, 56, 62, 36, 39, 81, 20, 80, 56, 2, 93, 19, 85, 24, 0, 69, 46, 90, 48, 18, 68, 88]
last_save: 734

Gen:17
TrainFitness:0.6666666666666666
TestFitness:0.4444444444444444
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],+112073.1951).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(x[index],+978385.1152).all():
      return True
    else:
      return False
  def adf2(index):
    if np.less(x[index],+110527.8587).all():
      return True
    else:
      return False
  def adf3(index):
    if np.less(x[index],-961971.6909).all():
      return True
    else:
      return True
  def adf4(index):
    if np.less(np.tanh(x[index]),-169363.0994).all():
      return False
    else:
      return False
  def adf5(index):
    if np.less(x[index],+301246.6354).all():
      if np.greater(x[index],+479149.9817).all():
        if np.less(psqrt(x[index]),+886407.1769).all():
          return False
        else:
          return False
        return True
      else:
        if np.equal(psqrt(x[index]),+632287.9691).all():
          if np.equal(rlog(x[index]),-576463.4988).all():
            return False
          else:
            return False
          return True
        else:
          if np.greater(x[index],-266834.6536).all():
            return False
          else:
            return True
          return True
        return True
      return False
    else:
      if np.greater(psqrt(x[index]),-024418.0330).all():
        return False
      else:
        return False
      return False
  def adf6(index):
    if np.less(x[index],+028375.2796).all():
      return False
    else:
      return True
  def adf7(index):
    if np.greater(np.cos(x[index]),-936880.4301).all():
      return False
    else:
      return False
  def adf8(index):
    if np.equal(x[index],-159731.4893).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-064.377, adf1(1)*-292.761, adf2(2)*+125.533, adf3(3)*+072.371, adf4(4)*+937.279, adf5(5)*-966.150, adf6(6)*-523.784, adf7(7)*-429.428, adf8(8)*-566.446], [1, 1, 1, 1, 1, 0, 1, 1], 059.989)
result=p(); 0.6666666666666666
IndLenGenome:446
IndGenome:[83, 58, 11, 17, 66, 3, 66, 22, 88, 41, 81, 72, 40, 67, 23, 31, 99, 75, 11, 25, 77, 77, 39, 64, 51, 51, 2, 88, 89, 17, 18, 53, 48, 75, 91, 51, 95, 32, 16, 1, 25, 11, 58, 17, 30, 86, 34, 51, 71, 90, 35, 52, 77, 58, 85, 18, 87, 42, 51, 96, 51, 43, 55, 6, 85, 84, 69, 46, 91, 69, 97, 61, 46, 79, 90, 49, 42, 32, 26, 91, 16, 26, 68, 36, 73, 28, 71, 26, 9, 93, 56, 43, 30, 29, 79, 44, 85, 35, 11, 64, 98, 49, 81, 94, 66, 72, 13, 80, 61, 52, 44, 56, 56, 83, 95, 24, 42, 63, 57, 99, 9, 18, 74, 14, 17, 29, 31, 54, 59, 79, 48, 31, 87, 25, 25, 38, 5, 22, 10, 80, 98, 38, 46, 4, 20, 57, 81, 87, 86, 9, 85, 77, 80, 54, 92, 71, 80, 23, 58, 16, 45, 86, 53, 72, 72, 18, 67, 69, 76, 39, 91, 83, 35, 88, 82, 2, 69, 81, 75, 77, 86, 14, 26, 83, 64, 79, 58, 98, 3, 77, 68, 41, 66, 31, 89, 61, 43, 22, 46, 26, 28, 23, 94, 86, 85, 33, 46, 31, 70, 60, 26, 49, 41, 42, 56, 47, 99, 47, 53, 90, 42, 74, 34, 91, 98, 60, 93, 43, 70, 83, 97, 81, 19, 37, 94, 71, 21, 32, 25, 10, 2, 68, 23, 97, 65, 82, 87, 89, 86, 47, 82, 80, 9, 12, 58, 19, 75, 29, 60, 69, 83, 76, 58, 98, 20, 54, 23, 30, 41, 25, 63, 29, 87, 23, 83, 73, 89, 69, 71, 35, 59, 97, 3, 91, 34, 68, 29, 13, 46, 99, 48, 70, 78, 29, 32, 90, 56, 94, 33, 77, 7, 11, 17, 35, 72, 69, 52, 37, 16, 11, 90, 44, 91, 61, 72, 75, 45, 83, 73, 22, 50, 35, 30, 67, 42, 83, 57, 91, 33, 48, 91, 39, 53, 97, 52, 97, 69, 25, 93, 34, 19, 36, 66, 51, 45, 50, 86, 71, 69, 15, 12, 13, 77, 48, 4, 6, 87, 37, 34, 72, 29, 24, 52, 48, 33, 95, 14, 45, 66, 26, 84, 44, 96, 37, 17, 85, 23, 99, 13, 46, 41, 49, 2, 10, 45, 9, 59, 88, 79, 57, 75, 99, 10, 80, 65, 7, 83, 32, 11, 42, 79, 27, 5, 96, 85, 41, 85, 100, 40, 69, 39, 32, 69, 9, 100, 36, 89, 74, 42, 88, 43, 41, 79, 56, 72, 76, 60, 96, 45, 97, 43, 2, 93, 94, 13, 83, 27, 19, 28, 5, 88, 35, 3, 25, 12, 71]
last_save: 734

Gen:431
TrainFitness:0.7777777777777778
TestFitness:0.4444444444444444
MaxGenLen:620
Individual: def p():
  def adf0(index):
    if np.greater(x[index],+112073.1951).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(x[index],+978385.1152).all():
      return True
    else:
      return False
  def adf2(index):
    if np.less(x[index],+110522.8587).all():
      return True
    else:
      return False
  def adf3(index):
    if np.less(x[index],-961971.6909).all():
      return True
    else:
      return True
  def adf4(index):
    if np.less(np.tanh(x[index]),-569363.0994).all():
      return False
    else:
      return False
  def adf5(index):
    if np.less(x[index],+301246.6354).all():
      if np.greater(x[index],+479149.9817).all():
        if np.less(psqrt(x[index]),+886407.1769).all():
          return False
        else:
          return False
        return True
      else:
        if np.equal(psqrt(x[index]),+632287.9691).all():
          if np.equal(rlog(x[index]),-573463.3988).all():
            return False
          else:
            return False
          return True
        else:
          if np.greater(x[index],-266834.6936).all():
            return False
          else:
            return True
          return True
        return True
      return False
    else:
      if np.greater(psqrt(x[index]),-024418.0330).all():
        return False
      else:
        return False
      return False
  def adf6(index):
    if np.less(x[index],+007375.2796).all():
      return False
    else:
      return True
  def adf7(index):
    if np.greater(np.cos(x[index]),+301081.7333).all():
      return False
    else:
      return False
  def adf8(index):
    if np.equal(x[index],+349883.7856).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+914.998, adf1(1)*-585.200, adf2(2)*+407.176, adf3(3)*-042.103, adf4(4)*+632.287, adf5(5)*+135.822, adf6(6)*-764.634, adf7(7)*+378.161, adf8(8)*-266.834], [1, 1, 1, 1, 0, 0, 0, 0], 267.973)
result=p(); 0.7777777777777778
IndLenGenome:591
IndGenome:[83, 58, 11, 17, 66, 3, 66, 22, 88, 41, 81, 72, 40, 67, 23, 31, 99, 75, 11, 25, 77, 77, 39, 64, 51, 51, 2, 88, 89, 17, 18, 53, 48, 75, 91, 51, 95, 32, 16, 1, 25, 11, 58, 17, 30, 86, 34, 51, 71, 90, 35, 52, 82, 58, 85, 18, 87, 42, 51, 96, 51, 43, 55, 6, 85, 84, 69, 46, 91, 69, 97, 61, 46, 79, 90, 49, 42, 32, 79, 91, 16, 26, 68, 36, 73, 28, 35, 26, 9, 93, 56, 43, 30, 29, 79, 44, 85, 35, 11, 64, 98, 49, 81, 37, 66, 72, 13, 80, 61, 52, 44, 56, 56, 83, 95, 24, 42, 63, 57, 99, 9, 18, 74, 14, 17, 29, 31, 54, 59, 79, 48, 31, 87, 25, 25, 38, 5, 22, 10, 80, 98, 38, 46, 4, 20, 57, 81, 87, 86, 9, 97, 77, 80, 54, 92, 71, 80, 23, 58, 16, 45, 86, 53, 72, 72, 18, 67, 69, 76, 39, 91, 83, 35, 88, 82, 2, 69, 81, 75, 77, 73, 14, 26, 83, 13, 79, 58, 98, 3, 77, 68, 41, 66, 75, 89, 61, 43, 22, 46, 26, 28, 23, 94, 86, 39, 33, 46, 31, 70, 60, 26, 49, 41, 42, 56, 47, 99, 47, 53, 90, 42, 74, 34, 91, 68, 60, 93, 43, 70, 83, 97, 81, 19, 37, 94, 71, 21, 32, 25, 10, 0, 77, 23, 97, 65, 82, 87, 89, 86, 47, 82, 80, 11, 12, 58, 19, 98, 20, 54, 23, 30, 41, 60, 98, 91, 87, 23, 83, 73, 89, 69, 90, 73, 89, 77, 86, 14, 26, 83, 64, 79, 58, 98, 3, 77, 68, 55, 66, 31, 89, 9, 18, 74, 14, 17, 29, 31, 54, 59, 79, 48, 31, 87, 25, 25, 38, 5, 22, 10, 80, 98, 38, 46, 4, 20, 57, 81, 87, 86, 9, 85, 77, 80, 54, 92, 71, 80, 23, 58, 16, 45, 86, 53, 72, 72, 18, 67, 69, 76, 39, 91, 83, 35, 88, 82, 2, 69, 81, 75, 77, 86, 14, 26, 83, 64, 79, 58, 98, 3, 77, 68, 41, 66, 31, 89, 61, 43, 22, 46, 26, 28, 23, 94, 86, 85, 33, 47, 31, 70, 60, 26, 70, 41, 42, 56, 47, 99, 47, 53, 90, 42, 74, 34, 91, 98, 60, 32, 25, 10, 2, 68, 23, 97, 64, 82, 87, 89, 86, 47, 82, 80, 11, 12, 58, 19, 98, 20, 54, 23, 30, 41, 60, 98, 29, 87, 23, 83, 73, 89, 13, 90, 73, 89, 85, 23, 99, 13, 39, 41, 49, 25, 10, 34, 9, 37, 88, 79, 39, 91, 83, 35, 88, 82, 51, 71, 21, 86, 47, 82, 33, 9, 12, 58, 29, 75, 50, 76, 30, 67, 42, 83, 14, 91, 33, 48, 91, 39, 53, 97, 48, 45, 69, 25, 93, 96, 19, 16, 66, 51, 45, 50, 86, 71, 69, 15, 12, 13, 77, 48, 44, 6, 87, 37, 34, 85, 29, 20, 52, 62, 55, 95, 49, 45, 66, 26, 84, 44, 96, 37, 99, 85, 23, 99, 13, 46, 41, 49, 2, 10, 45, 9, 59, 88, 79, 57, 75, 99, 10, 80, 65, 7, 83, 32, 11, 42, 79, 27, 5, 96, 85, 41, 85, 100, 40, 69, 39, 32, 69, 9, 100, 36, 89, 74, 42, 88, 76, 41, 79, 56, 72, 76, 60, 96, 45, 97, 43, 2, 93, 94, 13, 83, 27, 19, 28, 5, 88, 35, 3, 25, 12, 71]
last_save: 734