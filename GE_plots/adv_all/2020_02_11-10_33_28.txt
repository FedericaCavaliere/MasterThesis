Dataset:Meander/Full.csv
FS:True
Seed:1235
Size:10

Gen:1
TrainFitness:1.0
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],+022367.6338).all():
      return True
    else:
      return True
  def adf1(index):
    if np.equal(np.sin(x[index]),+670636.1784).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(np.sin(x[index]),-959446.5501).all():
      return False
    else:
      return True
  def adf3(index):
    if np.greater(x[index],-743225.0295).all():
      return True
    else:
      return False
  def adf4(index):
    if np.greater(rlog(x[index]),-490627.9493).all():
      return False
    else:
      return True
  def adf7(index):
    if np.less(x[index],-468727.9573).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*-309.212, adf1(1)*+910.667, adf2(2)*-760.997, adf3(3)*-907.420, adf4(4)*-485.097, adf7(7)*+185.173], [0, 1, 0, 0, 0], 328.834)
result=p(); 1.0
IndLenGenome:283
IndGenome:[87, 31, 69, 93, 68, 77, 35, 71, 75, 31, 51, 86, 15, 67, 12, 71, 46, 43, 40, 78, 73, 3, 75, 96, 52, 8, 54, 58, 36, 28, 28, 79, 25, 19, 76, 60, 26, 82, 79, 26, 26, 38, 85, 74, 33, 68, 81, 60, 64, 49, 38, 91, 95, 20, 46, 35, 39, 60, 32, 13, 25, 36, 43, 87, 9, 77, 19, 26, 8, 94, 5, 69, 18, 12, 11, 37, 77, 68, 62, 34, 37, 96, 72, 24, 79, 32, 24, 78, 93, 46, 45, 85, 24, 15, 87, 59, 13, 44, 53, 87, 46, 55, 81, 41, 76, 89, 10, 52, 31, 7, 36, 35, 18, 59, 92, 26, 43, 27, 87, 70, 46, 84, 84, 50, 50, 42, 4, 67, 89, 21, 33, 23, 48, 67, 88, 33, 70, 54, 79, 96, 91, 73, 42, 76, 66, 27, 97, 92, 54, 77, 47, 92, 57, 5, 65, 26, 13, 25, 91, 36, 20, 20, 22, 24, 50, 59, 91, 14, 59, 36, 54, 59, 43, 12, 87, 80, 69, 12, 29, 46, 70, 30, 52, 38, 24, 34, 97, 76, 69, 63, 21, 57, 35, 34, 69, 49, 21, 62, 98, 80, 89, 30, 11, 20, 80, 85, 22, 23, 25, 65, 54, 42, 97, 62, 69, 29, 27, 10, 6, 92, 96, 100, 62, 21, 11, 90, 12, 51, 52, 40, 71, 8, 51, 6, 40, 90, 98, 42, 41, 36, 78, 27, 49, 38, 68, 14, 42, 63, 57, 91, 53, 73, 81, 65, 29, 18, 30, 70, 95, 4, 79, 19, 96, 69, 67, 3, 27, 41, 47, 25, 16, 25, 15, 31, 63, 50, 88, 49, 56, 75, 62, 58, 60]
last_save: 1011

Gen:1
last_save: 1011
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(np.tanh(x[index]),+410824.4714).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(x[index],-141680.1577).all():
      return True
    else:
      return True
  def adf2(index):
    if np.less(x[index],-798816.2919).all():
      return True
    else:
      return True
  def adf3(index):
    if np.greater(x[index],+033232.0874).all():
      return False
    else:
      return True
  def adf4(index):
    if np.greater(rlog(x[index]),+237782.3539).all():
      return False
    else:
      return True
  def adf7(index):
    if np.greater(np.cos(x[index]),+149889.0884).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+703.868, adf1(1)*-945.118, adf2(2)*+585.329, adf3(3)*+935.426, adf4(4)*-907.503, adf7(7)*+454.282], [0, 1, 1, 1, 0], 798.701)
result=p(); 0.8333333333333334
IndLenGenome:283
IndGenome:[68, 73, 56, 96, 60, 7, 42, 45, 91, 93, 51, 66, 80, 95, 42, 83, 1, 87, 20, 57, 28, 56, 21, 27, 72, 43, 12, 30, 57, 94, 17, 45, 10, 66, 97, 18, 12, 59, 80, 14, 44, 30, 13, 62, 22, 96, 31, 85, 47, 53, 19, 72, 56, 32, 2, 64, 84, 45, 10, 91, 90, 49, 83, 96, 65, 4, 88, 42, 88, 19, 37, 9, 55, 20, 15, 46, 21, 37, 64, 58, 53, 13, 7, 58, 95, 69, 52, 47, 98, 52, 18, 56, 23, 88, 85, 98, 76, 39, 85, 97, 94, 74, 52, 88, 61, 26, 28, 43, 72, 44, 68, 13, 31, 44, 39, 24, 29, 23, 71, 55, 93, 28, 20, 67, 73, 56, 82, 44, 25, 65, 98, 41, 67, 59, 91, 77, 64, 40, 60, 77, 45, 94, 58, 34, 42, 78, 44, 60, 47, 30, 98, 97, 24, 19, 11, 73, 47, 71, 89, 55, 59, 4, 88, 59, 97, 40, 38, 30, 79, 20, 32, 23, 96, 41, 71, 14, 62, 47, 48, 91, 49, 83, 61, 76, 78, 29, 13, 62, 29, 31, 42, 8, 17, 87, 15, 79, 20, 88, 37, 92, 53, 45, 74, 73, 10, 19, 93, 47, 40, 80, 28, 29, 17, 36, 55, 8, 40, 76, 36, 47, 33, 53, 96, 85, 76, 16, 77, 86, 67, 69, 100, 59, 56, 45, 62, 42, 96, 15, 92, 2, 53, 66, 0, 13, 23, 45, 90, 36, 83, 78, 40, 78, 43, 68, 21, 57, 31, 38, 79, 26, 36, 47, 78, 72, 34, 56, 24, 84, 85, 97, 92, 89, 49, 34, 62, 62, 45, 29, 70, 70, 39, 39, 86]
last_save: 1012

Gen:203
TrainFitness:1.0
TestFitness:0.6666666666666666
MaxGenLen:560
Individual: def p():
  def adf0(index):
    if np.less(x[index],+013570.1316).all():
      return False
    else:
      return True
  def adf1(index):
    if np.greater(sigmoid(x[index]),+577502.9533).all():
      return False
    else:
      return True
  def adf2(index):
    if np.greater(x[index],+000026.8459).all():
      return False
    else:
      return True
  def adf3(index):
    if np.equal(psqrt(x[index]),+314128.3009).all():
      return False
    else:
      return False
  def adf4(index):
    if np.greater(psqrt(x[index]),-182530.3356).all():
      if np.equal(x[index],+963155.3192).all():
        return True
      else:
        return False
      return False
    else:
      if np.greater(psqrt(x[index]),-026692.8389).all():
        if np.equal(x[index],+928648.8878).all():
          return False
        else:
          return True
        return False
      else:
        if np.less(x[index],-170616.6093).all():
          return False
        else:
          return False
        return True
      return False
  def adf7(index):
    if np.less(x[index],+978920.1913).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*-366.531, adf1(1)*-802.535, adf2(2)*-982.951, adf3(3)*+374.918, adf4(4)*+202.669, adf7(7)*+897.350], [0, 1, 0, 0, 0], 578.780)
result=p(); 1.0
IndLenGenome:455
IndGenome:[13, 3, 55, 65, 61, 97, 63, 32, 37, 20, 11, 93, 85, 7, 30, 11, 3, 51, 96, 41, 88, 77, 81, 93, 70, 93, 83, 76, 95, 35, 87, 87, 15, 90, 42, 49, 15, 43, 33, 65, 62, 93, 17, 54, 49, 81, 28, 65, 70, 50, 20, 10, 42, 56, 38, 44, 15, 29, 13, 62, 52, 79, 83, 42, 17, 78, 48, 80, 83, 51, 34, 41, 12, 78, 33, 10, 60, 69, 57, 87, 2, 98, 58, 36, 48, 35, 50, 27, 49, 41, 88, 22, 55, 93, 70, 93, 83, 75, 66, 35, 89, 87, 15, 98, 39, 49, 56, 43, 81, 65, 55, 93, 41, 59, 12, 62, 93, 17, 54, 49, 81, 28, 65, 70, 67, 92, 10, 42, 56, 26, 39, 12, 78, 43, 68, 99, 7, 53, 55, 70, 68, 18, 79, 42, 58, 16, 24, 28, 38, 78, 47, 58, 25, 80, 21, 39, 19, 37, 18, 59, 71, 61, 67, 50, 16, 21, 86, 66, 10, 9, 63, 25, 47, 58, 25, 82, 21, 28, 87, 12, 4, 39, 19, 37, 18, 59, 42, 80, 21, 69, 61, 53, 27, 55, 30, 75, 12, 7, 55, 13, 76, 26, 35, 53, 31, 23, 69, 54, 68, 70, 22, 15, 53, 5, 60, 9, 46, 89, 68, 42, 49, 15, 41, 33, 12, 62, 93, 17, 54, 49, 81, 28, 65, 38, 61, 92, 10, 42, 56, 26, 39, 12, 78, 43, 68, 99, 7, 53, 55, 70, 68, 18, 79, 42, 58, 16, 24, 75, 7, 78, 47, 58, 90, 80, 21, 39, 19, 37, 18, 59, 71, 61, 67, 50, 16, 21, 86, 89, 18, 56, 39, 85, 78, 47, 87, 87, 15, 90, 42, 49, 22, 53, 12, 65, 28, 55, 35, 80, 65, 29, 66, 53, 60, 100, 58, 87, 90, 59, 67, 2, 68, 93, 51, 54, 98, 5, 71, 52, 97, 62, 83, 3, 19, 37, 18, 59, 71, 61, 67, 50, 20, 21, 86, 66, 10, 9, 63, 25, 47, 58, 55, 65, 17, 88, 26, 19, 46, 67, 67, 20, 63, 70, 43, 90, 18, 56, 39, 37, 51, 11, 34, 19, 32, 45, 31, 87, 87, 79, 8, 67, 37, 65, 95, 75, 45, 4, 9, 33, 97, 1, 82, 73, 49, 100, 7, 36, 89, 67, 74, 28, 33, 37, 37, 46, 68, 57, 90, 58, 51, 8, 85, 61, 7, 100, 70, 80, 45, 56, 17, 75, 27, 9, 70, 68, 6, 74, 49, 62, 14, 75, 57, 14, 42, 11, 0, 31, 21, 45, 100, 13, 73, 19, 78, 14, 71, 3, 83, 36, 26, 64, 25, 97, 48, 52, 1, 1, 43, 71, 15, 63, 90, 21, 0, 66, 64]
last_save: 1012

Gen:203
last_save: 1012
Exit:TrueFalseFalse

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],+030609.0488).all():
      return True
    else:
      return False
  def adf1(index):
    if np.greater(np.tanh(x[index]),-882798.4255).all():
      return True
    else:
      return True
  def adf2(index):
    if np.greater(x[index],-557868.3333).all():
      return True
    else:
      return True
  def adf3(index):
    if np.less(x[index],-916836.5646).all():
      return False
    else:
      return False
  def adf4(index):
    if np.greater(np.sin(x[index]),+757896.6821).all():
      return False
    else:
      return False
  def adf7(index):
    if np.less(x[index],-819644.7800).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+454.534, adf1(1)*+456.077, adf2(2)*+859.953, adf3(3)*+926.257, adf4(4)*-079.591, adf7(7)*+022.093], [0, 1, 1, 1, 1], 522.315)
result=p(); 0.8333333333333334
IndLenGenome:282
IndGenome:[58, 83, 61, 99, 84, 41, 97, 57, 97, 25, 51, 99, 39, 23, 81, 71, 6, 32, 93, 75, 77, 16, 55, 15, 47, 61, 78, 73, 22, 62, 79, 51, 5, 21, 28, 58, 97, 39, 72, 59, 31, 59, 10, 17, 61, 56, 5, 1, 96, 23, 89, 51, 30, 69, 11, 26, 14, 8, 96, 1, 37, 59, 12, 45, 25, 78, 89, 15, 27, 95, 93, 26, 41, 10, 58, 63, 23, 91, 21, 84, 68, 23, 70, 28, 16, 41, 73, 77, 38, 16, 55, 87, 20, 65, 57, 43, 64, 38, 18, 38, 45, 68, 15, 69, 79, 49, 82, 78, 86, 90, 10, 69, 57, 45, 45, 77, 82, 12, 54, 33, 79, 35, 50, 40, 17, 37, 69, 82, 40, 35, 48, 86, 14, 65, 76, 41, 15, 9, 54, 43, 88, 32, 85, 53, 71, 30, 37, 34, 38, 80, 86, 82, 71, 46, 28, 86, 19, 14, 76, 46, 40, 37, 24, 90, 44, 10, 53, 39, 66, 37, 86, 80, 62, 65, 28, 32, 80, 83, 79, 39, 78, 59, 62, 77, 87, 90, 57, 31, 42, 22, 75, 19, 78, 46, 94, 61, 99, 29, 8, 30, 95, 21, 74, 42, 16, 70, 18, 55, 17, 100, 46, 18, 82, 88, 30, 30, 33, 49, 93, 52, 30, 38, 95, 50, 10, 36, 20, 74, 28, 33, 80, 46, 14, 41, 71, 5, 20, 70, 8, 48, 69, 83, 85, 24, 30, 8, 46, 71, 81, 33, 60, 84, 100, 75, 41, 28, 92, 64, 18, 67, 94, 80, 84, 72, 62, 97, 10, 29, 48, 45, 22, 59, 27, 34, 30, 98, 17, 9, 90, 15, 38, 11]
last_save: 1013

Gen:2001
last_save: 1013
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(sigmoid(x[index]),+789317.3466).all():
      return True
    else:
      return True
  def adf1(index):
    if np.greater(psqrt(x[index]),-179909.8237).all():
      return False
    else:
      return False
  def adf2(index):
    if np.less(x[index],+017380.6171).all():
      return True
    else:
      return False
  def adf3(index):
    if np.greater(psqrt(x[index]),-488891.1427).all():
      return False
    else:
      return False
  def adf4(index):
    if np.less(np.tanh(x[index]),-864584.0648).all():
      return False
    else:
      return True
  def adf7(index):
    if np.less(psqrt(x[index]),-791354.2334).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*-911.300, adf1(1)*-530.641, adf2(2)*+918.261, adf3(3)*+249.642, adf4(4)*-482.010, adf7(7)*-415.882], [0, 1, 1, 0, 1], 224.785)
result=p(); 0.8333333333333334
IndLenGenome:286
IndGenome:[22, 30, 4, 25, 75, 66, 73, 16, 20, 35, 3, 65, 62, 97, 5, 52, 33, 16, 43, 27, 94, 38, 29, 79, 27, 77, 92, 19, 87, 35, 90, 93, 75, 15, 72, 49, 84, 37, 64, 81, 84, 66, 44, 97, 72, 96, 73, 96, 38, 41, 50, 31, 32, 33, 74, 75, 70, 74, 31, 68, 47, 13, 99, 20, 65, 25, 41, 67, 71, 69, 87, 97, 27, 86, 35, 58, 19, 69, 62, 83, 21, 99, 66, 39, 73, 98, 72, 3, 20, 64, 35, 23, 91, 71, 12, 37, 41, 58, 40, 69, 91, 11, 28, 24, 57, 77, 15, 32, 67, 21, 57, 92, 41, 11, 49, 76, 28, 62, 85, 8, 14, 23, 29, 77, 49, 24, 60, 60, 14, 89, 61, 2, 58, 28, 91, 20, 73, 41, 32, 21, 63, 69, 94, 40, 62, 35, 24, 50, 66, 63, 26, 75, 24, 20, 28, 15, 54, 88, 48, 72, 40, 43, 26, 62, 39, 33, 70, 26, 78, 20, 92, 53, 65, 50, 60, 18, 44, 11, 44, 12, 20, 26, 74, 51, 41, 48, 85, 34, 31, 75, 18, 59, 69, 34, 18, 60, 25, 21, 12, 58, 7, 86, 67, 96, 46, 21, 3, 12, 37, 53, 15, 91, 48, 76, 63, 35, 71, 65, 32, 81, 91, 33, 41, 6, 94, 87, 90, 75, 36, 80, 96, 5, 62, 11, 17, 19, 5, 41, 12, 38, 86, 81, 8, 100, 51, 91, 53, 78, 62, 34, 13, 13, 5, 56, 2, 91, 12, 67, 80, 2, 96, 58, 0, 52, 34, 83, 5, 97, 27, 66, 75, 89, 15, 92, 78, 80, 52, 37, 11, 99, 68, 38, 13, 44, 10, 11]
last_save: 1014

Gen:2001
last_save: 1014
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:1.0
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(sigmoid(x[index]),+611800.8365).all():
      return False
    else:
      return False
  def adf1(index):
    if np.equal(x[index],-171679.2118).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(x[index],-163266.0600).all():
      return False
    else:
      return False
  def adf3(index):
    if np.greater(np.cos(x[index]),-779726.9193).all():
      return False
    else:
      return True
  def adf4(index):
    if np.equal(x[index],+396006.4437).all():
      return True
    else:
      return True
  def adf7(index):
    if np.greater(rlog(x[index]),+059910.2418).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+595.767, adf1(1)*-604.015, adf2(2)*+948.627, adf3(3)*-634.626, adf4(4)*+861.901, adf7(7)*+238.596], [0, 0, 0, 1, 0], 630.902)
result=p(); 0.6666666666666666
IndLenGenome:283
IndGenome:[20, 29, 96, 91, 47, 57, 50, 11, 60, 57, 37, 93, 44, 88, 52, 36, 76, 50, 66, 73, 27, 74, 24, 47, 52, 2, 40, 90, 51, 96, 93, 56, 56, 4, 30, 12, 33, 7, 84, 80, 94, 25, 61, 9, 38, 12, 10, 79, 48, 29, 39, 95, 74, 16, 49, 59, 19, 49, 21, 76, 31, 36, 69, 37, 39, 52, 73, 16, 51, 93, 30, 92, 73, 74, 33, 49, 45, 85, 57, 83, 52, 19, 96, 59, 47, 45, 66, 33, 12, 20, 10, 61, 77, 88, 98, 44, 24, 94, 49, 81, 69, 87, 82, 51, 96, 83, 79, 53, 71, 16, 14, 78, 95, 76, 98, 52, 4, 93, 63, 57, 13, 28, 61, 73, 13, 23, 78, 21, 55, 41, 40, 54, 65, 38, 62, 48, 26, 36, 50, 31, 69, 80, 61, 36, 51, 26, 87, 77, 46, 18, 42, 29, 78, 46, 37, 45, 82, 60, 56, 36, 62, 20, 60, 31, 28, 87, 48, 83, 20, 70, 36, 21, 83, 81, 29, 91, 55, 99, 61, 52, 99, 61, 38, 57, 83, 49, 86, 50, 83, 8, 9, 19, 58, 22, 20, 12, 49, 70, 97, 27, 1, 86, 35, 29, 55, 11, 80, 87, 3, 60, 83, 38, 2, 52, 34, 50, 11, 58, 66, 59, 4, 49, 47, 85, 51, 85, 62, 64, 9, 1, 9, 4, 70, 58, 68, 69, 45, 73, 12, 13, 43, 85, 42, 96, 32, 80, 54, 38, 51, 18, 54, 61, 97, 42, 13, 85, 37, 20, 68, 68, 93, 94, 15, 92, 10, 23, 73, 5, 0, 24, 56, 7, 94, 12, 34, 51, 36, 71, 82, 44, 29, 86, 16]
last_save: 1015

Gen:3
TrainFitness:0.8333333333333334
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],+898036.4677).all():
      return True
    else:
      return False
  def adf1(index):
    if np.less(x[index],+777043.2931).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(np.cos(x[index]),-919217.0097).all():
      return True
    else:
      return True
  def adf3(index):
    if np.greater(x[index],+021951.3591).all():
      if np.greater(x[index],+120584.0714).all():
        return True
      else:
        return True
      return False
    else:
      if np.equal(np.tanh(x[index]),-561672.0334).all():
        return True
      else:
        return False
      return True
  def adf4(index):
    if np.equal(x[index],-079910.4913).all():
      if np.equal(np.cos(x[index]),-078755.3699).all():
        return False
      else:
        return False
      return True
    else:
      if np.equal(np.tanh(x[index]),-269370.8877).all():
        return True
      else:
        return False
      return False
  def adf7(index):
    if np.equal(sigmoid(x[index]),-839275.2248).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+451.874, adf1(1)*-592.975, adf2(2)*-687.099, adf3(3)*+876.153, adf4(4)*-656.416, adf7(7)*+120.463], [1, 0, 0, 1, 0], 056.037)
result=p(); 0.8333333333333334
IndLenGenome:409
IndGenome:[54, 41, 6, 11, 90, 39, 38, 70, 72, 48, 79, 88, 60, 23, 76, 44, 26, 67, 97, 26, 61, 75, 25, 61, 9, 82, 78, 72, 27, 57, 37, 70, 14, 53, 82, 9, 83, 41, 27, 95, 15, 41, 39, 48, 91, 80, 91, 83, 79, 81, 59, 42, 71, 77, 30, 20, 49, 47, 98, 2, 66, 12, 75, 69, 29, 74, 24, 4, 90, 12, 41, 19, 55, 21, 63, 35, 19, 91, 83, 3, 45, 42, 50, 18, 41, 62, 40, 45, 78, 64, 50, 67, 21, 34, 16, 80, 93, 49, 65, 84, 20, 16, 63, 36, 25, 76, 41, 56, 77, 12, 90, 53, 83, 14, 72, 99, 44, 58, 44, 13, 20, 53, 7, 23, 63, 10, 77, 79, 19, 91, 60, 74, 39, 71, 43, 73, 17, 70, 25, 9, 89, 34, 80, 37, 18, 77, 25, 45, 33, 86, 89, 49, 81, 59, 48, 87, 2, 38, 56, 81, 65, 78, 62, 16, 69, 23, 97, 70, 38, 18, 87, 47, 90, 27, 47, 81, 81, 86, 52, 87, 94, 35, 95, 58, 3, 89, 12, 27, 35, 82, 72, 24, 78, 57, 37, 71, 42, 54, 68, 30, 54, 85, 11, 88, 47, 84, 71, 27, 67, 85, 19, 72, 29, 47, 35, 96, 29, 53, 36, 88, 7, 50, 89, 99, 80, 36, 29, 38, 47, 96, 11, 25, 23, 17, 77, 98, 46, 15, 76, 24, 21, 36, 29, 84, 57, 71, 12, 90, 34, 66, 73, 90, 15, 70, 80, 3, 60, 68, 20, 25, 16, 40, 23, 17, 81, 43, 5, 32, 27, 19, 59, 27, 84, 90, 63, 18, 84, 29, 39, 41, 24, 90, 31, 14, 83, 29, 22, 7, 25, 16, 78, 64, 44, 79, 57, 73, 43, 52, 81, 98, 3, 65, 54, 26, 82, 30, 51, 39, 26, 74, 29, 73, 71, 78, 23, 34, 92, 71, 54, 31, 27, 50, 62, 63, 15, 5, 28, 82, 64, 71, 0, 69, 80, 99, 12, 50, 88, 3, 55, 12, 11, 64, 23, 70, 85, 55, 86, 10, 83, 58, 42, 48, 1, 83, 8, 72, 23, 92, 73, 56, 57, 63, 17, 11, 49, 66, 50, 1, 20, 98, 69, 83, 62, 43, 92, 19, 62, 12, 4, 72, 12, 13, 38, 49, 81, 97, 27, 18, 96, 3, 14, 14, 70, 10, 15, 2, 46, 5, 1, 86, 12, 90, 27, 38, 71, 53, 15, 73, 23]
last_save: 1015

Gen:2003
last_save: 1015
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],+020179.9056).all():
      return False
    else:
      return True
  def adf1(index):
    if np.equal(np.tanh(x[index]),+895869.8814).all():
      return False
    else:
      return False
  def adf2(index):
    if np.equal(x[index],-583546.1305).all():
      return False
    else:
      return True
  def adf3(index):
    if np.less(np.cos(x[index]),-111011.6117).all():
      return False
    else:
      return True
  def adf4(index):
    if np.greater(x[index],+177045.5513).all():
      return False
    else:
      return True
  def adf7(index):
    if np.greater(np.tanh(x[index]),+268916.4641).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+887.518, adf1(1)*+556.555, adf2(2)*+192.361, adf3(3)*-345.570, adf4(4)*+309.460, adf7(7)*+981.473], [1, 0, 1, 1, 1], 113.904)
result=p(); 0.8333333333333334
IndLenGenome:283
IndGenome:[75, 19, 32, 15, 18, 42, 89, 2, 40, 9, 20, 98, 81, 24, 25, 23, 85, 94, 93, 62, 77, 96, 96, 52, 12, 43, 3, 91, 82, 63, 99, 75, 95, 94, 59, 43, 58, 34, 62, 93, 91, 34, 75, 15, 29, 11, 77, 15, 34, 67, 19, 75, 43, 73, 59, 23, 64, 92, 2, 28, 41, 27, 80, 85, 15, 47, 43, 28, 65, 93, 36, 34, 31, 57, 79, 5, 73, 31, 49, 26, 97, 29, 47, 31, 87, 40, 46, 95, 58, 86, 14, 15, 75, 97, 39, 43, 54, 10, 20, 49, 41, 22, 44, 90, 79, 45, 71, 47, 50, 33, 21, 21, 23, 91, 80, 35, 77, 62, 36, 95, 31, 85, 91, 27, 75, 71, 32, 91, 81, 23, 95, 81, 80, 18, 79, 78, 61, 22, 96, 93, 11, 75, 48, 57, 21, 48, 21, 22, 28, 98, 79, 75, 92, 94, 44, 86, 64, 89, 26, 25, 19, 51, 14, 16, 66, 10, 94, 96, 80, 27, 99, 90, 3, 72, 65, 45, 76, 54, 76, 28, 65, 51, 80, 78, 63, 41, 11, 58, 93, 0, 34, 48, 98, 9, 47, 14, 18, 69, 5, 26, 93, 15, 59, 9, 65, 14, 52, 6, 40, 93, 20, 87, 64, 90, 40, 6, 5, 63, 48, 73, 42, 68, 64, 19, 71, 40, 36, 94, 81, 27, 92, 61, 100, 88, 54, 70, 19, 82, 95, 41, 99, 49, 6, 87, 21, 92, 84, 80, 3, 31, 62, 98, 7, 7, 13, 96, 37, 37, 98, 21, 60, 1, 77, 54, 60, 81, 18, 50, 100, 82, 93, 13, 23, 22, 26, 34, 26, 58, 21, 31, 50, 4, 61]
last_save: 1016