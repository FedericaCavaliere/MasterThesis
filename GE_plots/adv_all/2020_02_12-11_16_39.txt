Dataset:Meander/Full.csv
FS:False
Seed:1237
Size:7

Gen:1
TrainFitness:0.7777777777777778
TestFitness:0.5555555555555556
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(rlog(x[index]),+261481.8274).all():
      return True
    else:
      return False
  def adf1(index):
    if np.greater(x[index],+986594.2818).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(np.tanh(x[index]),+905480.7380).all():
      return False
    else:
      return False
  def adf3(index):
    if np.equal(np.sin(x[index]),-545499.5842).all():
      return True
    else:
      return False
  def adf4(index):
    if np.equal(psqrt(x[index]),-139752.8577).all():
      return True
    else:
      return False
  def adf5(index):
    if np.greater(sigmoid(x[index]),+572957.9211).all():
      return False
    else:
      return True
  def adf6(index):
    if np.less(x[index],+863191.7807).all():
      return False
    else:
      return False
  def adf7(index):
    if np.less(np.sin(x[index]),-781990.4847).all():
      return True
    else:
      return True
  def adf8(index):
    if np.less(x[index],+008394.4898).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+672.247, adf1(1)*+465.177, adf2(2)*+965.817, adf3(3)*+193.661, adf4(4)*-938.375, adf5(5)*+357.826, adf6(6)*-881.112, adf7(7)*-079.869, adf8(8)*+715.728], [1, 1, 1, 0, 1, 0, 0, 0], 711.871)
result=p(); 0.7777777777777778
IndLenGenome:418
IndGenome:[7, 99, 42, 56, 87, 10, 16, 85, 86, 87, 52, 48, 95, 9, 11, 39, 3, 52, 51, 70, 84, 93, 15, 100, 53, 32, 28, 27, 17, 61, 40, 59, 33, 9, 27, 50, 82, 31, 63, 35, 75, 48, 56, 92, 78, 29, 22, 56, 58, 42, 40, 34, 70, 66, 33, 46, 80, 42, 59, 65, 16, 80, 53, 37, 44, 18, 24, 89, 42, 84, 71, 10, 77, 94, 86, 64, 18, 61, 13, 71, 65, 73, 79, 90, 43, 61, 27, 73, 1, 59, 56, 67, 40, 35, 88, 57, 34, 8, 33, 21, 52, 81, 82, 57, 48, 46, 8, 44, 5, 94, 84, 48, 56, 72, 87, 80, 66, 49, 80, 57, 44, 28, 78, 23, 56, 33, 48, 57, 51, 49, 25, 95, 29, 27, 28, 18, 97, 19, 83, 75, 72, 49, 22, 83, 17, 97, 14, 76, 9, 77, 51, 58, 17, 77, 24, 89, 49, 87, 68, 24, 11, 67, 10, 68, 51, 79, 65, 42, 61, 92, 41, 57, 75, 27, 69, 11, 24, 50, 26, 77, 68, 50, 65, 17, 78, 24, 77, 35, 50, 20, 72, 99, 56, 87, 76, 76, 72, 58, 68, 99, 34, 25, 19, 81, 58, 42, 25, 83, 92, 57, 7, 92, 60, 98, 83, 24, 16, 36, 94, 95, 81, 35, 31, 93, 66, 59, 11, 48, 45, 89, 81, 61, 24, 68, 16, 45, 36, 66, 9, 93, 85, 61, 47, 62, 27, 76, 15, 19, 17, 33, 63, 14, 69, 55, 39, 62, 50, 85, 18, 61, 21, 29, 47, 48, 89, 20, 44, 30, 25, 12, 88, 55, 14, 69, 98, 41, 96, 48, 39, 82, 53, 3, 38, 90, 38, 55, 0, 45, 14, 48, 8, 0, 70, 49, 30, 45, 95, 79, 82, 39, 95, 44, 56, 17, 70, 56, 41, 59, 7, 53, 74, 44, 71, 49, 25, 74, 7, 36, 66, 67, 12, 100, 55, 5, 97, 44, 41, 30, 89, 76, 25, 5, 49, 59, 41, 2, 31, 15, 59, 75, 83, 34, 17, 16, 22, 6, 53, 70, 50, 22, 77, 100, 18, 76, 9, 80, 57, 19, 9, 40, 45, 44, 71, 83, 73, 93, 18, 39, 34, 58, 69, 36, 64, 15, 56, 12, 20, 98, 14, 7, 62, 97, 56, 11, 56, 53, 34, 5, 18, 19, 10, 51, 55, 7, 90, 49, 99, 27, 55, 78, 57, 17, 30, 20, 85, 83, 40, 15, 96, 58, 95, 72, 24, 23, 24, 21, 46, 0]
last_save: 734

Gen:42
TrainFitness:0.7777777777777778
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],-309816.9911).all():
      return True
    else:
      return False
  def adf1(index):
    if np.less(sigmoid(x[index]),-941865.2477).all():
      return False
    else:
      return False
  def adf2(index):
    if np.less(np.cos(x[index]),+451478.3686).all():
      return True
    else:
      return False
  def adf3(index):
    if np.greater(sigmoid(x[index]),-018155.1145).all():
      if np.equal(np.cos(x[index]),-250286.8088).all():
        return False
      else:
        return True
      return False
    else:
      if np.greater(psqrt(x[index]),-815627.2121).all():
        return False
      else:
        return True
      return True
  def adf4(index):
    if np.less(np.cos(x[index]),+230385.9418).all():
      if np.greater(x[index],+719139.7713).all():
        return True
      else:
        return False
      return False
    else:
      if np.less(x[index],+278258.2868).all():
        return True
      else:
        return True
      return True
  def adf5(index):
    if np.equal(x[index],+551015.6272).all():
      return False
    else:
      return True
  def adf6(index):
    if np.greater(np.cos(x[index]),+956488.2462).all():
      return False
    else:
      return False
  def adf7(index):
    if np.less(x[index],+013564.6938).all():
      if np.equal(np.sin(x[index]),-923653.8180).all():
        return False
      else:
        return True
      return False
    else:
      if np.equal(x[index],-182522.7720).all():
        if np.greater(np.sin(x[index]),-213691.8591).all():
          if np.less(x[index],-693517.2763).all():
            return False
          else:
            return False
          return False
        else:
          if np.equal(x[index],-658118.7890).all():
            return True
          else:
            return True
          return False
        return True
      else:
        if np.less(x[index],-802245.6742).all():
          return False
        else:
          return False
        return False
      return False
  def adf8(index):
    if np.equal(x[index],+653882.7992).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+466.359, adf1(1)*-594.688, adf2(2)*-533.665, adf3(3)*+928.910, adf4(4)*+395.244, adf5(5)*-223.059, adf6(6)*+173.347, adf7(7)*+932.243, adf8(8)*-395.991], [1, 1, 1, 1, 1, 0, 1, 1], 430.439)
result=p(); 0.7777777777777778
IndLenGenome:472
IndGenome:[81, 34, 10, 49, 79, 13, 75, 5, 65, 73, 90, 19, 8, 11, 96, 29, 69, 61, 51, 42, 33, 52, 63, 13, 74, 3, 71, 13, 22, 19, 54, 81, 48, 46, 35, 52, 94, 47, 67, 69, 97, 59, 65, 52, 44, 67, 43, 84, 6, 94, 95, 81, 64, 47, 48, 63, 96, 18, 26, 94, 33, 72, 78, 87, 63, 2, 99, 68, 25, 48, 60, 51, 48, 71, 95, 15, 71, 31, 94, 85, 61, 26, 76, 97, 52, 55, 68, 82, 25, 20, 22, 28, 66, 68, 40, 8, 68, 91, 2, 53, 77, 39, 78, 59, 55, 89, 31, 88, 1, 65, 26, 42, 77, 2, 71, 72, 71, 49, 96, 48, 62, 60, 44, 7, 86, 79, 25, 88, 28, 42, 33, 30, 13, 8, 85, 89, 74, 81, 18, 43, 93, 67, 4, 4, 83, 27, 21, 59, 91, 33, 9, 67, 47, 61, 13, 24, 59, 47, 39, 28, 63, 26, 40, 64, 52, 87, 68, 82, 25, 38, 22, 28, 66, 68, 40, 8, 68, 91, 63, 53, 77, 39, 78, 59, 55, 15, 31, 0, 71, 65, 26, 42, 77, 2, 71, 30, 71, 49, 96, 44, 25, 4, 10, 45, 59, 45, 16, 44, 8, 38, 12, 34, 96, 82, 63, 83, 66, 10, 20, 67, 43, 39, 56, 26, 40, 101, 63, 95, 76, 14, 76, 19, 23, 88, 25, 41, 50, 42, 64, 51, 81, 89, 32, 23, 16, 75, 33, 78, 91, 48, 70, 23, 48, 27, 52, 66, 68, 99, 34, 25, 19, 81, 58, 42, 25, 52, 92, 57, 7, 92, 60, 4, 83, 24, 16, 36, 94, 95, 81, 92, 31, 93, 66, 59, 11, 48, 45, 89, 81, 89, 34, 81, 16, 45, 36, 66, 9, 93, 85, 61, 47, 62, 27, 76, 33, 19, 17, 33, 63, 14, 69, 55, 39, 62, 6, 85, 18, 61, 21, 68, 47, 48, 89, 20, 44, 30, 25, 12, 95, 61, 59, 16, 49, 91, 28, 90, 52, 42, 24, 15, 86, 77, 34, 22, 33, 89, 67, 89, 12, 53, 35, 81, 42, 22, 74, 56, 75, 93, 18, 38, 72, 27, 59, 79, 52, 76, 27, 38, 50, 38, 10, 53, 14, 36, 76, 93, 85, 49, 47, 91, 87, 65, 99, 34, 86, 48, 88, 87, 59, 66, 85, 3, 63, 56, 86, 85, 48, 12, 54, 79, 2, 78, 59, 51, 20, 24, 46, 35, 33, 39, 95, 72, 74, 4, 73, 65, 37, 22, 62, 43, 100, 45, 29, 0, 92, 0, 41, 97, 73, 83, 54, 37, 44, 8, 39, 19, 43, 82, 72, 84, 23, 55, 45, 96, 83, 69, 15, 39, 29, 41, 90, 83, 13, 5, 13, 41, 2, 71, 7, 28, 44, 3, 50, 84, 63, 59, 33, 99, 82, 74, 14, 64]
last_save: 734

Gen:2042
last_save: 734
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.7777777777777778
TestFitness:0.8888888888888888
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],+994514.0288).all():
      return True
    else:
      return True
  def adf1(index):
    if np.less(x[index],+477460.5625).all():
      return True
    else:
      return True
  def adf2(index):
    if np.less(x[index],-913716.4503).all():
      return True
    else:
      return True
  def adf3(index):
    if np.less(x[index],+008868.0744).all():
      return False
    else:
      return True
  def adf4(index):
    if np.less(x[index],-388383.9380).all():
      return False
    else:
      return False
  def adf5(index):
    if np.equal(x[index],+125440.7568).all():
      return False
    else:
      return True
  def adf6(index):
    if np.less(sigmoid(x[index]),+732771.2068).all():
      return True
    else:
      return True
  def adf7(index):
    if np.equal(x[index],-747171.7512).all():
      return True
    else:
      return False
  def adf8(index):
    if np.equal(x[index],-982002.3483).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+725.908, adf1(1)*+088.275, adf2(2)*+165.982, adf3(3)*+578.610, adf4(4)*-799.533, adf5(5)*-464.420, adf6(6)*-420.604, adf7(7)*+219.149, adf8(8)*-969.517], [1, 1, 0, 1, 1, 1, 1, 0], 669.473)
result=p(); 0.7777777777777778
IndLenGenome:411
IndGenome:[56, 67, 50, 92, 14, 60, 27, 63, 42, 55, 7, 78, 51, 12, 47, 56, 72, 89, 50, 88, 65, 90, 35, 79, 55, 7, 31, 90, 16, 9, 62, 55, 56, 69, 99, 87, 65, 73, 71, 2, 37, 54, 85, 90, 27, 46, 97, 65, 24, 70, 87, 59, 39, 49, 87, 10, 73, 3, 94, 74, 99, 32, 72, 65, 34, 53, 22, 39, 15, 39, 78, 28, 1, 85, 54, 54, 53, 27, 14, 10, 82, 57, 16, 6, 95, 35, 26, 54, 4, 76, 88, 17, 45, 47, 67, 38, 25, 85, 42, 41, 60, 46, 13, 30, 43, 54, 73, 66, 65, 52, 69, 65, 38, 63, 39, 70, 64, 90, 30, 12, 62, 97, 69, 91, 82, 58, 81, 99, 4, 80, 93, 98, 59, 78, 89, 19, 93, 91, 61, 91, 69, 56, 86, 19, 65, 14, 50, 79, 78, 85, 28, 34, 28, 11, 55, 97, 35, 44, 81, 28, 67, 91, 27, 74, 29, 31, 84, 71, 22, 66, 44, 24, 12, 90, 59, 56, 33, 84, 58, 57, 87, 96, 53, 82, 50, 75, 80, 65, 22, 17, 10, 31, 41, 77, 86, 26, 64, 65, 94, 23, 69, 87, 37, 59, 11, 81, 36, 12, 75, 36, 87, 23, 64, 98, 36, 84, 16, 71, 42, 25, 30, 47, 69, 86, 22, 3, 99, 97, 9, 18, 98, 48, 37, 18, 92, 30, 67, 48, 77, 28, 60, 93, 28, 63, 30, 23, 32, 23, 22, 57, 14, 13, 9, 59, 85, 13, 10, 23, 33, 18, 30, 98, 36, 68, 26, 98, 74, 40, 30, 38, 34, 90, 28, 27, 57, 61, 22, 68, 64, 5, 73, 98, 83, 82, 67, 50, 47, 68, 66, 100, 79, 40, 72, 26, 85, 79, 92, 20, 95, 14, 6, 99, 44, 35, 100, 100, 91, 61, 81, 54, 69, 76, 30, 62, 91, 66, 50, 72, 33, 10, 66, 46, 15, 54, 75, 2, 67, 27, 17, 58, 54, 23, 45, 66, 56, 94, 74, 46, 92, 84, 75, 92, 77, 88, 97, 82, 67, 13, 72, 8, 6, 97, 7, 18, 71, 53, 83, 86, 14, 28, 60, 31, 98, 28, 48, 43, 65, 46, 2, 67, 97, 42, 90, 100, 69, 100, 20, 65, 50, 27, 7, 27, 100, 48, 34, 52, 74, 63, 95, 31, 98, 60, 80, 26, 42, 99, 85, 33, 96, 79, 76, 51, 77, 54, 25, 87, 77, 56, 71, 19, 46]
last_save: 735

Gen:2001
last_save: 735
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:1.0
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(sigmoid(x[index]),-802968.9927).all():
      return True
    else:
      return False
  def adf1(index):
    if np.less(x[index],+639797.0314).all():
      return False
    else:
      return False
  def adf2(index):
    if np.equal(np.tanh(x[index]),+927859.0969).all():
      return False
    else:
      return True
  def adf3(index):
    if np.equal(x[index],-430881.3540).all():
      return True
    else:
      return True
  def adf4(index):
    if np.less(x[index],+509301.8484).all():
      return False
    else:
      return True
  def adf5(index):
    if np.equal(np.cos(x[index]),-344058.7149).all():
      return True
    else:
      return False
  def adf6(index):
    if np.equal(rlog(x[index]),+442277.0797).all():
      return False
    else:
      return True
  def adf7(index):
    if np.equal(sigmoid(x[index]),+420167.7973).all():
      return True
    else:
      return False
  def adf8(index):
    if np.greater(np.sin(x[index]),-594289.6969).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+317.967, adf1(1)*-058.599, adf2(2)*-920.302, adf3(3)*-403.770, adf4(4)*+915.370, adf5(5)*-269.629, adf6(6)*-927.904, adf7(7)*+889.292, adf8(8)*+511.461], [0, 0, 1, 0, 0, 0, 0, 0], 738.986)
result=p(); 0.6666666666666666
IndLenGenome:418
IndGenome:[89, 30, 45, 78, 46, 79, 23, 81, 83, 20, 56, 89, 70, 15, 75, 100, 27, 88, 49, 3, 59, 43, 28, 25, 31, 67, 19, 19, 26, 95, 14, 58, 12, 5, 28, 91, 83, 28, 67, 56, 91, 24, 43, 61, 17, 91, 32, 89, 95, 47, 50, 73, 17, 57, 54, 89, 37, 19, 41, 70, 63, 35, 82, 29, 93, 96, 56, 59, 100, 19, 7, 36, 98, 78, 34, 43, 89, 8, 42, 63, 26, 88, 58, 6, 20, 38, 87, 62, 30, 75, 34, 67, 58, 58, 88, 24, 9, 76, 29, 40, 58, 21, 99, 19, 99, 35, 57, 43, 88, 69, 99, 43, 90, 69, 5, 4, 81, 95, 10, 72, 45, 74, 80, 67, 20, 61, 48, 62, 56, 56, 88, 15, 82, 82, 91, 6, 93, 29, 53, 62, 34, 50, 33, 12, 45, 52, 70, 54, 5, 89, 67, 38, 97, 90, 94, 98, 50, 14, 57, 37, 51, 92, 65, 78, 44, 50, 94, 48, 79, 92, 37, 69, 79, 27, 11, 86, 80, 96, 47, 53, 56, 33, 47, 41, 51, 97, 92, 54, 78, 6, 70, 77, 97, 20, 45, 72, 38, 41, 99, 44, 80, 56, 29, 69, 18, 69, 40, 25, 69, 15, 16, 96, 43, 28, 22, 42, 72, 87, 71, 42, 38, 73, 80, 95, 15, 84, 66, 84, 62, 66, 89, 89, 22, 62, 22, 31, 76, 33, 88, 17, 51, 53, 96, 54, 99, 54, 77, 73, 59, 18, 19, 69, 39, 29, 5, 91, 23, 65, 53, 63, 54, 29, 39, 31, 17, 28, 33, 91, 50, 22, 20, 99, 38, 55, 60, 44, 60, 54, 63, 67, 79, 19, 72, 65, 43, 70, 31, 84, 10, 27, 95, 96, 72, 55, 93, 88, 28, 100, 98, 73, 47, 48, 45, 12, 55, 36, 24, 16, 1, 11, 44, 82, 7, 82, 60, 51, 8, 38, 50, 72, 13, 22, 73, 40, 5, 92, 77, 51, 32, 13, 22, 40, 46, 58, 69, 37, 72, 29, 59, 0, 86, 20, 14, 2, 61, 37, 65, 51, 60, 55, 61, 81, 38, 60, 12, 47, 41, 8, 72, 18, 97, 33, 99, 88, 49, 49, 93, 97, 6, 66, 42, 58, 60, 59, 23, 92, 30, 94, 77, 71, 42, 6, 55, 65, 65, 70, 30, 47, 0, 72, 69, 54, 57, 29, 89, 5, 28, 65, 68, 50, 46, 12, 15, 43, 93, 88, 60, 11, 78, 55, 80, 23, 97, 48, 83, 93, 33, 72]
last_save: 736

Gen:6
TrainFitness:0.7777777777777778
TestFitness:0.8888888888888888
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],-730449.3999).all():
      return False
    else:
      return True
  def adf1(index):
    if np.greater(sigmoid(x[index]),+130534.4779).all():
      if np.greater(sigmoid(x[index]),-042371.5663).all():
        return False
      else:
        return False
      return True
    else:
      if np.greater(sigmoid(x[index]),-888945.9282).all():
        return False
      else:
        return True
      return True
  def adf2(index):
    if np.equal(np.tanh(x[index]),+349713.0909).all():
      return True
    else:
      return True
  def adf3(index):
    if np.less(psqrt(x[index]),+026090.6820).all():
      return False
    else:
      return True
  def adf4(index):
    if np.greater(x[index],+018266.8431).all():
      return True
    else:
      return False
  def adf5(index):
    if np.equal(rlog(x[index]),-912003.9223).all():
      return False
    else:
      return False
  def adf6(index):
    if np.less(psqrt(x[index]),+160059.3161).all():
      if np.greater(x[index],-642131.0766).all():
        return True
      else:
        return True
      return True
    else:
      if np.greater(x[index],-122206.0977).all():
        return True
      else:
        return True
      return True
  def adf7(index):
    if np.equal(np.tanh(x[index]),-393139.0823).all():
      return False
    else:
      return True
  def adf8(index):
    if np.equal(x[index],-917272.8165).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*-123.893, adf1(1)*-490.002, adf2(2)*+354.392, adf3(3)*-291.727, adf4(4)*+655.378, adf5(5)*-123.893, adf6(6)*-490.002, adf7(7)*-943.285, adf8(8)*+310.787], [0, 0, 1, 0, 1, 0, 0, 1], 372.399)
result=p(); 0.7777777777777778
IndLenGenome:460
IndGenome:[41, 69, 21, 83, 85, 73, 92, 65, 85, 37, 63, 50, 14, 74, 79, 3, 89, 29, 9, 97, 92, 79, 84, 33, 90, 16, 63, 16, 44, 39, 31, 53, 40, 25, 13, 64, 24, 7, 47, 79, 49, 69, 76, 9, 20, 57, 52, 30, 74, 2, 53, 37, 61, 75, 76, 36, 3, 99, 1, 14, 65, 36, 58, 99, 26, 77, 62, 58, 8, 68, 79, 64, 95, 29, 82, 88, 92, 35, 32, 90, 91, 41, 89, 40, 8, 58, 54, 17, 23, 84, 39, 77, 21, 23, 80, 99, 70, 69, 88, 44, 87, 95, 76, 96, 47, 24, 42, 27, 60, 52, 76, 20, 89, 50, 86, 88, 2, 40, 17, 48, 21, 11, 27, 53, 91, 84, 57, 50, 21, 48, 22, 76, 86, 88, 84, 23, 91, 50, 89, 57, 99, 86, 48, 10, 37, 47, 15, 69, 41, 92, 60, 30, 83, 59, 12, 92, 63, 97, 49, 11, 40, 80, 76, 20, 71, 51, 92, 10, 21, 36, 10, 20, 95, 39, 63, 61, 26, 11, 1, 6, 85, 13, 15, 26, 66, 24, 42, 71, 43, 41, 60, 7, 26, 46, 48, 94, 52, 75, 78, 83, 25, 47, 36, 21, 52, 92, 22, 10, 56, 80, 69, 37, 97, 92, 66, 84, 94, 51, 20, 38, 32, 87, 47, 51, 13, 79, 83, 21, 33, 89, 20, 18, 72, 13, 95, 64, 83, 89, 92, 87, 55, 31, 82, 69, 81, 27, 52, 17, 22, 58, 41, 56, 95, 75, 33, 27, 18, 62, 15, 60, 71, 12, 43, 38, 39, 23, 12, 67, 55, 24, 39, 50, 50, 50, 12, 20, 18, 72, 13, 95, 64, 83, 89, 92, 87, 55, 62, 82, 69, 81, 27, 52, 17, 22, 58, 41, 56, 95, 75, 33, 27, 18, 62, 15, 60, 71, 12, 43, 38, 39, 23, 12, 67, 55, 24, 39, 50, 50, 50, 12, 40, 87, 1, 39, 54, 33, 62, 88, 5, 23, 14, 44, 53, 1, 50, 37, 8, 97, 24, 94, 12, 61, 14, 5, 12, 98, 37, 7, 53, 57, 82, 53, 49, 9, 43, 40, 45, 13, 48, 78, 34, 39, 71, 79, 59, 13, 2, 90, 36, 60, 63, 90, 20, 25, 95, 8, 99, 22, 96, 38, 66, 29, 18, 62, 27, 79, 0, 86, 33, 35, 38, 31, 17, 0, 59, 52, 11, 76, 80, 30, 15, 12, 61, 34, 96, 65, 6, 4, 3, 5, 43, 100, 89, 80, 84, 32, 76, 81, 52, 29, 44, 59, 16, 93, 24, 51, 97, 15, 7, 73, 5, 48, 84, 63, 93, 25, 11, 8, 53, 90, 27, 84, 55, 43, 100, 57, 34, 0, 4, 86, 81, 68, 55, 77, 11, 1, 100, 1, 65, 84]
last_save: 736

Gen:2006
last_save: 736
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.8888888888888888
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],-017345.4978).all():
      return True
    else:
      return False
  def adf1(index):
    if np.less(np.cos(x[index]),+502524.1452).all():
      return True
    else:
      return False
  def adf2(index):
    if np.equal(np.tanh(x[index]),-751594.7032).all():
      return False
    else:
      return True
  def adf3(index):
    if np.greater(np.tanh(x[index]),+771713.4401).all():
      return False
    else:
      return False
  def adf4(index):
    if np.greater(x[index],+267608.6604).all():
      return False
    else:
      return False
  def adf5(index):
    if np.greater(x[index],-406908.2195).all():
      return False
    else:
      return True
  def adf6(index):
    if np.less(np.tanh(x[index]),-434061.9263).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(x[index],-222789.6998).all():
      return True
    else:
      return False
  def adf8(index):
    if np.less(np.tanh(x[index]),-081206.1795).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+209.911, adf1(1)*+677.533, adf2(2)*-623.722, adf3(3)*-489.962, adf4(4)*-517.101, adf5(5)*-937.193, adf6(6)*-047.017, adf7(7)*+145.302, adf8(8)*-468.668], [1, 1, 1, 0, 0, 1, 1, 0], 042.780)
result=p(); 0.6666666666666666
IndLenGenome:417
IndGenome:[4, 45, 13, 24, 63, 26, 90, 41, 15, 46, 89, 57, 50, 2, 70, 27, 57, 48, 76, 87, 14, 15, 97, 44, 90, 41, 83, 43, 77, 18, 49, 38, 91, 36, 91, 54, 32, 21, 68, 13, 85, 83, 14, 30, 88, 47, 30, 94, 84, 46, 70, 53, 44, 23, 59, 66, 95, 66, 17, 22, 36, 99, 52, 79, 64, 23, 91, 39, 29, 60, 51, 29, 20, 90, 21, 20, 31, 88, 92, 77, 55, 72, 43, 73, 34, 99, 97, 12, 77, 43, 45, 26, 53, 11, 46, 9, 31, 42, 97, 19, 41, 91, 76, 54, 46, 77, 18, 54, 89, 76, 99, 63, 37, 71, 79, 74, 92, 30, 49, 55, 87, 30, 13, 52, 24, 36, 86, 94, 77, 4, 65, 36, 19, 60, 4, 17, 53, 41, 4, 76, 98, 9, 94, 48, 46, 69, 22, 61, 83, 13, 46, 32, 62, 32, 66, 97, 23, 82, 87, 53, 7, 48, 62, 30, 78, 77, 61, 99, 94, 49, 30, 40, 59, 37, 63, 87, 40, 78, 62, 89, 70, 25, 88, 22, 85, 5, 99, 95, 16, 14, 57, 39, 70, 90, 38, 92, 35, 64, 57, 11, 65, 37, 24, 65, 22, 56, 50, 68, 67, 42, 70, 24, 53, 65, 45, 57, 81, 69, 41, 82, 91, 17, 62, 65, 81, 84, 65, 47, 93, 62, 22, 14, 67, 61, 57, 74, 38, 97, 62, 47, 24, 89, 71, 91, 93, 50, 74, 66, 66, 14, 31, 48, 91, 29, 56, 35, 84, 93, 57, 11, 80, 51, 14, 48, 62, 89, 75, 42, 20, 19, 60, 53, 14, 44, 43, 70, 11, 10, 77, 7, 37, 15, 73, 54, 27, 13, 60, 3, 66, 76, 59, 16, 98, 72, 3, 7, 41, 69, 94, 57, 18, 75, 87, 10, 90, 94, 60, 87, 46, 26, 35, 12, 64, 57, 17, 56, 28, 80, 4, 26, 91, 52, 43, 24, 32, 40, 46, 3, 49, 60, 30, 77, 67, 66, 24, 37, 78, 45, 84, 28, 51, 50, 31, 70, 72, 59, 24, 5, 76, 70, 18, 81, 87, 83, 48, 16, 32, 66, 76, 23, 52, 93, 83, 61, 57, 41, 61, 6, 92, 18, 53, 24, 7, 54, 94, 44, 71, 18, 36, 84, 90, 31, 54, 95, 65, 67, 23, 61, 68, 44, 27, 18, 69, 23, 14, 46, 87, 74, 68, 2, 54, 26, 37, 15, 88, 67, 48, 65, 20, 25, 7, 44, 3, 16, 39, 15, 78]
last_save: 737

Gen:56
TrainFitness:0.7777777777777778
TestFitness:0.7777777777777778
MaxGenLen:515
Individual: def p():
  def adf0(index):
    if np.greater(x[index],-556064.0231).all():
      return False
    else:
      return False
  def adf1(index):
    if np.greater(np.sin(x[index]),-685695.7397).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(psqrt(x[index]),+165623.5786).all():
      return True
    else:
      return True
  def adf3(index):
    if np.less(sigmoid(x[index]),-978897.2884).all():
      return False
    else:
      return False
  def adf4(index):
    if np.equal(x[index],-223724.3220).all():
      return False
    else:
      return False
  def adf5(index):
    if np.less(x[index],-591195.9879).all():
      return True
    else:
      return False
  def adf6(index):
    if np.less(x[index],-658806.5996).all():
      return False
    else:
      return True
  def adf7(index):
    if np.less(x[index],+035378.5113).all():
      if np.greater(x[index],+388133.8690).all():
        return False
      else:
        return True
      return True
    else:
      if np.less(x[index],-783531.9959).all():
        return True
      else:
        return False
      return False
  def adf8(index):
    if np.greater(np.tanh(x[index]),-975722.6850).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+139.814, adf1(1)*-121.472, adf2(2)*+295.254, adf3(3)*+056.301, adf4(4)*+726.830, adf5(5)*+077.435, adf6(6)*+018.254, adf7(7)*-956.988, adf8(8)*-193.742], [1, 0, 0, 1, 0, 1, 0, 1], 536.884)
result=p(); 0.7777777777777778
IndLenGenome:334
IndGenome:[56, 34, 61, 47, 9, 7, 43, 45, 64, 15, 75, 76, 20, 46, 64, 60, 32, 63, 41, 83, 89, 15, 59, 60, 34, 90, 73, 37, 7, 46, 48, 15, 86, 39, 75, 77, 53, 19, 37, 9, 11, 35, 33, 78, 10, 17, 29, 2, 20, 91, 66, 85, 6, 72, 43, 25, 57, 68, 26, 42, 48, 59, 53, 22, 84, 75, 79, 47, 82, 89, 7, 98, 68, 99, 67, 72, 48, 58, 44, 41, 99, 94, 49, 11, 49, 98, 65, 96, 62, 72, 83, 17, 12, 94, 43, 52, 42, 90, 55, 55, 97, 83, 49, 57, 79, 27, 36, 5, 49, 51, 41, 39, 85, 39, 78, 57, 49, 46, 43, 43, 59, 85, 17, 82, 29, 21, 76, 5, 28, 98, 40, 6, 15, 29, 29, 36, 99, 70, 17, 66, 18, 7, 15, 52, 56, 41, 90, 3, 95, 53, 87, 58, 85, 61, 31, 23, 41, 72, 93, 47, 88, 35, 23, 68, 38, 21, 23, 13, 28, 86, 49, 30, 61, 82, 88, 71, 73, 73, 2, 13, 76, 17, 68, 63, 85, 23, 11, 79, 49, 75, 29, 90, 65, 67, 67, 87, 57, 34, 74, 65, 53, 64, 19, 97, 15, 57, 32, 42, 76, 38, 45, 90, 35, 69, 69, 5, 88, 96, 53, 31, 3, 29, 48, 61, 44, 59, 81, 43, 81, 82, 21, 54, 17, 2, 35, 78, 53, 12, 89, 65, 32, 5, 74, 16, 70, 37, 30, 95, 86, 93, 30, 11, 60, 58, 48, 27, 42, 76, 68, 33, 90, 19, 74, 33, 10, 17, 7, 14, 23, 25, 85, 44, 100, 10, 81, 98, 62, 45, 24, 60, 13, 21, 19, 45, 66, 89, 78, 38, 97, 77, 3, 91, 99, 3, 27, 24, 2, 90, 7, 50, 18, 5, 68, 31, 4, 17, 22, 85, 83, 36, 98, 88, 84, 21, 43, 11, 4, 20, 39, 85, 46, 96, 7, 0, 90, 96, 87, 89, 3, 8, 2, 77, 39, 47]
last_save: 737

Gen:2056
last_save: 737
Exit:FalseFalseTrue