Dataset:Spiral/Full.csv
FS:False
Seed:1237
Size:7

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.4444444444444444
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],-431584.1763).all():
      return False
    else:
      return False
  def adf1(index):
    if np.equal(sigmoid(x[index]),-712768.9555).all():
      return True
    else:
      return True
  def adf2(index):
    if np.greater(x[index],-844160.7115).all():
      return True
    else:
      return False
  def adf3(index):
    if np.equal(np.sin(x[index]),+681678.0051).all():
      return True
    else:
      return False
  def adf4(index):
    if np.less(x[index],+007463.4124).all():
      return False
    else:
      return True
  def adf5(index):
    if np.equal(x[index],-241530.2369).all():
      return False
    else:
      return False
  def adf6(index):
    if np.greater(rlog(x[index]),-851846.3655).all():
      return False
    else:
      return True
  def adf7(index):
    if np.equal(np.sin(x[index]),+723694.0757).all():
      return False
    else:
      return True
  def adf8(index):
    if np.less(np.cos(x[index]),-197528.0790).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-235.324, adf1(1)*-107.424, adf2(2)*+037.179, adf3(3)*-191.137, adf4(4)*-725.499, adf5(5)*+860.627, adf6(6)*+266.219, adf7(7)*+050.570, adf8(8)*+650.324], [0, 0, 1, 0, 0, 1, 1, 0], 820.506)
result=p(); 0.6666666666666666
IndLenGenome:417
IndGenome:[15, 6, 5, 91, 50, 20, 10, 6, 47, 59, 79, 63, 48, 49, 57, 22, 7, 81, 87, 53, 45, 14, 29, 5, 24, 33, 84, 2, 56, 41, 22, 68, 61, 80, 64, 45, 72, 9, 99, 10, 64, 32, 53, 67, 20, 96, 80, 28, 66, 52, 40, 71, 15, 14, 10, 84, 86, 42, 50, 67, 85, 90, 18, 50, 69, 64, 59, 85, 24, 44, 85, 89, 37, 90, 30, 97, 50, 25, 92, 92, 3, 17, 12, 33, 19, 78, 94, 48, 12, 26, 46, 39, 92, 35, 35, 27, 72, 39, 14, 27, 54, 16, 24, 31, 94, 86, 33, 82, 50, 72, 75, 27, 35, 17, 81, 62, 83, 98, 92, 17, 56, 30, 78, 29, 59, 34, 24, 85, 50, 87, 15, 6, 25, 33, 80, 93, 42, 63, 5, 99, 76, 83, 64, 12, 95, 52, 71, 26, 66, 5, 4, 52, 95, 94, 46, 81, 77, 79, 11, 74, 11, 16, 54, 99, 54, 75, 27, 28, 31, 11, 97, 37, 31, 21, 40, 57, 19, 95, 65, 3, 22, 76, 44, 57, 51, 86, 21, 56, 73, 29, 53, 83, 45, 93, 39, 19, 41, 37, 97, 54, 95, 73, 34, 54, 43, 46, 30, 22, 34, 49, 57, 91, 86, 30, 78, 67, 50, 27, 69, 66, 65, 11, 27, 85, 73, 63, 72, 97, 58, 18, 16, 81, 25, 66, 52, 27, 77, 60, 98, 41, 8, 16, 78, 71, 62, 18, 48, 68, 96, 60, 23, 57, 21, 100, 66, 71, 40, 31, 66, 20, 45, 80, 35, 97, 35, 91, 63, 69, 56, 17, 41, 25, 25, 55, 88, 26, 64, 28, 24, 5, 20, 51, 18, 52, 59, 50, 100, 4, 64, 60, 24, 77, 13, 70, 53, 61, 26, 36, 59, 76, 81, 96, 92, 79, 22, 31, 66, 3, 76, 43, 19, 22, 12, 17, 14, 84, 69, 47, 39, 73, 43, 24, 19, 61, 84, 97, 76, 17, 47, 33, 26, 17, 11, 0, 30, 66, 38, 59, 84, 75, 37, 43, 15, 40, 92, 93, 70, 94, 15, 88, 62, 34, 30, 16, 95, 82, 91, 31, 67, 58, 30, 81, 64, 4, 24, 2, 66, 10, 30, 26, 69, 33, 98, 66, 76, 51, 96, 12, 35, 5, 83, 89, 87, 91, 88, 57, 56, 91, 96, 64, 90, 74, 99, 46, 7, 29, 22, 22, 84, 68, 46, 75, 11, 42, 35, 87, 38, 45, 19, 83, 43, 58, 25, 68, 86, 56, 85]
last_save: 734

Gen:15
TrainFitness:0.7777777777777778
TestFitness:0.3333333333333333
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(sigmoid(x[index]),+597057.2161).all():
      return True
    else:
      return True
  def adf1(index):
    if np.equal(x[index],+229959.7686).all():
      return False
    else:
      return False
  def adf2(index):
    if np.less(np.cos(x[index]),-550529.0588).all():
      return False
    else:
      return False
  def adf3(index):
    if np.equal(rlog(x[index]),-704895.2813).all():
      return True
    else:
      return False
  def adf4(index):
    if np.greater(x[index],+503930.1140).all():
      return True
    else:
      return False
  def adf5(index):
    if np.less(x[index],+006056.8077).all():
      return True
    else:
      return False
  def adf6(index):
    if np.greater(x[index],+182637.0322).all():
      return True
    else:
      return False
  def adf7(index):
    if np.equal(x[index],-334674.3560).all():
      if np.equal(np.tanh(x[index]),-924766.9714).all():
        return True
      else:
        return True
      return False
    else:
      if np.greater(psqrt(x[index]),-994608.1385).all():
        if np.equal(rlog(x[index]),+158691.1154).all():
          if np.equal(x[index],-484793.3880).all():
            return False
          else:
            return False
          return True
        else:
          if np.greater(sigmoid(x[index]),+577792.7027).all():
            return False
          else:
            return False
          return True
        return False
      else:
        if np.equal(x[index],-018947.3829).all():
          return True
        else:
          return False
        return True
      return True
  def adf8(index):
    if np.less(x[index],-919654.9180).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+517.100, adf1(1)*+061.600, adf2(2)*-784.355, adf3(3)*-504.069, adf4(4)*+751.005, adf5(5)*+546.390, adf6(6)*-381.511, adf7(7)*+821.912, adf8(8)*+957.369], [0, 1, 1, 1, 0, 1, 0, 0], 380.004)
result=p(); 0.7777777777777778
IndLenGenome:425
IndGenome:[11, 31, 90, 39, 13, 52, 3, 34, 66, 54, 65, 89, 97, 70, 95, 37, 92, 11, 86, 51, 12, 26, 86, 93, 98, 3, 46, 42, 73, 22, 22, 69, 19, 65, 79, 17, 96, 8, 56, 67, 21, 98, 71, 55, 26, 25, 89, 83, 87, 15, 5, 40, 25, 22, 19, 10, 95, 28, 28, 71, 65, 12, 29, 29, 52, 22, 96, 29, 26, 27, 50, 74, 18, 89, 85, 52, 68, 51, 93, 8, 29, 82, 65, 90, 71, 44, 96, 94, 85, 70, 63, 89, 13, 40, 31, 51, 4, 30, 10, 87, 21, 93, 34, 89, 66, 40, 98, 60, 60, 26, 80, 45, 66, 48, 50, 7, 17, 90, 71, 27, 77, 87, 21, 93, 34, 89, 61, 28, 12, 26, 53, 87, 50, 83, 52, 62, 14, 59, 32, 62, 30, 20, 83, 62, 51, 35, 53, 23, 14, 16, 87, 24, 53, 35, 86, 40, 95, 56, 24, 74, 30, 95, 94, 29, 42, 64, 17, 86, 76, 99, 47, 11, 44, 26, 54, 75, 70, 37, 42, 42, 35, 11, 81, 53, 39, 99, 64, 36, 60, 98, 41, 83, 48, 95, 20, 32, 2, 74, 22, 74, 50, 57, 71, 25, 88, 46, 79, 71, 61, 81, 75, 94, 45, 47, 35, 44, 77, 40, 64, 38, 44, 27, 29, 73, 13, 48, 78, 70, 17, 67, 38, 43, 84, 64, 15, 25, 6, 47, 55, 47, 67, 67, 59, 42, 47, 20, 32, 97, 67, 31, 28, 89, 97, 83, 79, 89, 51, 58, 80, 81, 78, 59, 54, 27, 13, 18, 12, 19, 68, 75, 28, 40, 85, 49, 67, 55, 35, 73, 76, 39, 31, 99, 26, 55, 54, 69, 71, 18, 80, 1, 13, 7, 65, 87, 40, 50, 35, 81, 57, 61, 100, 100, 95, 8, 44, 20, 96, 61, 86, 30, 30, 18, 25, 24, 57, 18, 64, 83, 15, 95, 10, 67, 83, 65, 60, 14, 40, 56, 19, 50, 86, 83, 97, 5, 1, 30, 80, 25, 84, 68, 11, 5, 74, 66, 13, 59, 80, 73, 89, 85, 3, 38, 31, 55, 51, 31, 34, 54, 30, 38, 42, 71, 59, 1, 82, 97, 18, 6, 29, 85, 57, 93, 96, 99, 70, 68, 5, 71, 41, 10, 59, 24, 88, 11, 73, 88, 90, 0, 60, 54, 51, 51, 99, 19, 51, 1, 67, 74, 49, 69, 98, 18, 79, 68, 51, 54, 38, 34, 48, 99, 66, 15, 4, 26, 83, 28, 59, 49, 87, 1, 82, 2, 1, 46, 85]
last_save: 734

Gen:2015
last_save: 734
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.5555555555555556
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],+449352.1977).all():
      return True
    else:
      return False
  def adf1(index):
    if np.greater(rlog(x[index]),-679184.9553).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(x[index],-626788.0313).all():
      return True
    else:
      return True
  def adf3(index):
    if np.less(x[index],-884298.4569).all():
      return True
    else:
      return False
  def adf4(index):
    if np.less(x[index],+683369.7861).all():
      return True
    else:
      return False
  def adf5(index):
    if np.less(x[index],+033286.8682).all():
      return False
    else:
      return True
  def adf6(index):
    if np.equal(x[index],-542949.2514).all():
      return False
    else:
      return False
  def adf7(index):
    if np.greater(rlog(x[index]),+367362.1231).all():
      return False
    else:
      return True
  def adf8(index):
    if np.less(np.tanh(x[index]),-141067.0408).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*-816.788, adf1(1)*+771.334, adf2(2)*+086.414, adf3(3)*-658.521, adf4(4)*+174.721, adf5(5)*-639.782, adf6(6)*+840.431, adf7(7)*+485.860, adf8(8)*+354.076], [0, 0, 0, 1, 0, 1, 1, 0], 008.037)
result=p(); 0.6666666666666666
IndLenGenome:414
IndGenome:[91, 57, 78, 92, 80, 82, 11, 89, 43, 45, 37, 47, 77, 79, 24, 86, 55, 3, 29, 92, 43, 96, 90, 37, 91, 28, 27, 50, 89, 97, 21, 51, 40, 69, 4, 57, 35, 97, 5, 61, 44, 93, 29, 44, 83, 68, 80, 30, 71, 28, 17, 40, 17, 4, 94, 68, 93, 96, 15, 69, 46, 28, 96, 31, 75, 27, 17, 3, 73, 48, 9, 11, 36, 37, 10, 42, 32, 93, 52, 84, 27, 30, 72, 50, 53, 87, 66, 42, 44, 41, 84, 56, 18, 82, 54, 25, 20, 19, 10, 17, 68, 10, 28, 88, 66, 16, 34, 53, 83, 64, 89, 31, 12, 34, 91, 65, 43, 84, 73, 48, 74, 13, 88, 28, 92, 13, 60, 76, 93, 10, 67, 90, 98, 86, 78, 87, 98, 36, 99, 18, 20, 76, 58, 62, 81, 45, 89, 90, 71, 24, 87, 76, 88, 32, 62, 53, 34, 47, 26, 42, 14, 13, 21, 72, 93, 31, 77, 96, 18, 95, 67, 44, 7, 81, 6, 87, 5, 58, 74, 8, 88, 11, 76, 54, 94, 89, 50, 50, 84, 40, 6, 70, 60, 82, 43, 47, 12, 39, 33, 23, 75, 88, 69, 16, 77, 84, 25, 62, 50, 27, 38, 16, 21, 95, 99, 68, 65, 46, 93, 53, 77, 69, 39, 87, 18, 66, 34, 69, 76, 37, 70, 77, 37, 17, 63, 43, 73, 83, 19, 53, 44, 98, 91, 85, 41, 79, 23, 64, 46, 82, 93, 11, 62, 27, 67, 78, 91, 98, 52, 13, 86, 64, 11, 28, 61, 66, 71, 95, 15, 76, 45, 32, 37, 26, 18, 50, 52, 2, 50, 53, 24, 43, 45, 26, 55, 58, 2, 79, 64, 67, 88, 31, 81, 35, 38, 43, 0, 97, 81, 41, 58, 73, 75, 68, 46, 17, 76, 21, 67, 25, 69, 57, 32, 3, 75, 66, 79, 75, 63, 5, 46, 45, 55, 63, 88, 100, 71, 10, 61, 15, 86, 70, 78, 96, 97, 23, 28, 61, 76, 20, 31, 79, 76, 29, 1, 51, 73, 66, 8, 83, 25, 77, 62, 87, 94, 93, 6, 44, 87, 57, 32, 64, 22, 91, 54, 31, 15, 91, 87, 69, 48, 42, 72, 52, 19, 50, 18, 61, 97, 15, 2, 44, 74, 85, 54, 66, 41, 32, 42, 32, 35, 39, 59, 82, 21, 98, 27, 37, 68, 11, 90, 61, 29, 59, 13, 31, 90, 36, 43, 74, 83, 84, 68, 45]
last_save: 735

Gen:43
TrainFitness:0.7777777777777778
TestFitness:0.3333333333333333
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],+889114.9467).all():
      return True
    else:
      return False
  def adf1(index):
    if np.equal(x[index],+607307.7047).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(x[index],-357576.8262).all():
      return True
    else:
      return False
  def adf3(index):
    if np.equal(x[index],+990399.8996).all():
      return False
    else:
      return True
  def adf4(index):
    if np.less(x[index],+712902.8931).all():
      if np.less(rlog(x[index]),-500660.1592).all():
        return True
      else:
        return False
      return False
    else:
      if np.less(np.cos(x[index]),-927089.3775).all():
        return False
      else:
        return False
      return False
  def adf5(index):
    if np.greater(np.sin(x[index]),+427687.2286).all():
      if np.equal(np.cos(x[index]),-930705.1254).all():
        return False
      else:
        return True
      return True
    else:
      if np.less(np.cos(x[index]),+647880.4088).all():
        return True
      else:
        return True
      return False
  def adf6(index):
    if np.less(np.cos(x[index]),-910319.0808).all():
      return True
    else:
      return True
  def adf7(index):
    if np.less(x[index],+005341.6410).all():
      return True
    else:
      return False
  def adf8(index):
    if np.equal(x[index],-059286.3139).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*-333.931, adf1(1)*-337.859, adf2(2)*+998.096, adf3(3)*+829.774, adf4(4)*-293.289, adf5(5)*-506.910, adf6(6)*+641.374, adf7(7)*+317.580, adf8(8)*-079.799], [1, 1, 0, 1, 0, 1, 0, 1], 706.372)
result=p(); 0.7777777777777778
IndLenGenome:494
IndGenome:[79, 63, 9, 89, 55, 91, 76, 36, 63, 78, 68, 29, 41, 51, 14, 29, 54, 36, 7, 84, 63, 81, 81, 8, 15, 76, 36, 67, 56, 90, 97, 43, 20, 27, 37, 10, 14, 57, 85, 25, 52, 41, 48, 89, 59, 59, 10, 83, 55, 57, 25, 87, 46, 8, 32, 16, 2, 76, 53, 81, 93, 29, 73, 86, 38, 88, 9, 89, 40, 53, 89, 39, 58, 29, 69, 86, 31, 86, 63, 48, 70, 19, 47, 71, 24, 83, 57, 21, 22, 89, 30, 32, 28, 79, 23, 71, 41, 25, 60, 28, 59, 51, 85, 65, 20, 10, 16, 96, 60, 61, 15, 49, 12, 16, 85, 89, 31, 37, 70, 25, 12, 93, 61, 79, 52, 37, 20, 98, 49, 43, 87, 37, 65, 39, 61, 61, 23, 64, 33, 18, 20, 72, 99, 14, 8, 24, 22, 97, 76, 98, 77, 2, 62, 58, 86, 93, 92, 60, 31, 30, 7, 79, 59, 63, 30, 97, 60, 15, 1, 72, 35, 74, 5, 38, 16, 11, 73, 70, 49, 48, 34, 3, 76, 14, 87, 88, 48, 60, 54, 80, 78, 58, 40, 62, 59, 61, 91, 46, 46, 73, 80, 45, 29, 99, 61, 80, 13, 61, 19, 90, 38, 30, 48, 20, 48, 61, 79, 52, 37, 20, 98, 49, 40, 70, 75, 43, 34, 11, 86, 54, 31, 90, 28, 89, 95, 57, 32, 49, 68, 37, 36, 90, 75, 79, 82, 58, 76, 53, 71, 3, 29, 44, 30, 85, 51, 19, 37, 40, 63, 83, 43, 29, 53, 31, 31, 19, 17, 53, 73, 87, 38, 75, 9, 89, 40, 53, 89, 39, 58, 30, 69, 86, 31, 86, 77, 48, 12, 19, 47, 97, 24, 83, 57, 21, 22, 89, 3, 32, 78, 79, 23, 71, 41, 25, 60, 46, 59, 51, 80, 43, 34, 11, 86, 54, 31, 23, 17, 14, 35, 14, 90, 33, 61, 77, 15, 28, 80, 29, 99, 61, 80, 77, 39, 47, 59, 99, 66, 59, 93, 30, 49, 40, 55, 32, 5, 28, 57, 20, 86, 73, 7, 92, 57, 68, 31, 45, 26, 1, 33, 70, 45, 86, 88, 6, 34, 70, 50, 2, 30, 61, 13, 7, 63, 22, 28, 8, 14, 77, 5, 74, 45, 57, 71, 7, 98, 86, 38, 12, 56, 77, 31, 98, 73, 10, 40, 59, 33, 47, 93, 89, 56, 47, 42, 70, 95, 9, 58, 86, 93, 92, 60, 31, 30, 7, 79, 59, 63, 30, 97, 60, 15, 23, 72, 35, 8, 5, 38, 16, 11, 73, 70, 44, 54, 34, 3, 76, 14, 87, 88, 48, 60, 54, 88, 96, 51, 37, 8, 22, 33, 6, 88, 38, 66, 64, 36, 11, 60, 49, 85, 80, 28, 76, 12, 12, 43, 59, 80, 80, 29, 75, 44, 67, 66, 91, 65, 100, 5, 21, 48, 44, 8, 24, 14, 59, 31, 54, 90, 27, 5, 67, 24, 46, 48, 89]
last_save: 735

Gen:2043
last_save: 735
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.5555555555555556
TestFitness:0.4444444444444444
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],+183042.1551).all():
      return True
    else:
      return False
  def adf1(index):
    if np.less(np.tanh(x[index]),-159065.2154).all():
      return False
    else:
      return True
  def adf2(index):
    if np.greater(x[index],+451110.4008).all():
      return True
    else:
      return False
  def adf3(index):
    if np.greater(x[index],-946149.3396).all():
      return True
    else:
      return True
  def adf4(index):
    if np.equal(x[index],-430693.5895).all():
      return True
    else:
      return False
  def adf5(index):
    if np.greater(np.sin(x[index]),+925278.3329).all():
      return False
    else:
      return True
  def adf6(index):
    if np.less(x[index],-424707.6328).all():
      return False
    else:
      return False
  def adf7(index):
    if np.greater(x[index],-001539.7478).all():
      return True
    else:
      return False
  def adf8(index):
    if np.equal(np.cos(x[index]),-526842.1401).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+126.121, adf1(1)*-189.131, adf2(2)*-496.108, adf3(3)*+393.794, adf4(4)*-379.588, adf5(5)*-988.535, adf6(6)*+195.274, adf7(7)*-008.813, adf8(8)*+501.952], [1, 1, 1, 1, 1, 1, 1, 0], 197.299)
result=p(); 0.5555555555555556
IndLenGenome:414
IndGenome:[42, 44, 96, 82, 25, 76, 95, 52, 4, 21, 18, 6, 8, 39, 5, 27, 97, 52, 41, 34, 93, 60, 73, 95, 41, 3, 43, 79, 33, 42, 5, 14, 42, 40, 91, 79, 15, 37, 8, 24, 39, 30, 43, 97, 41, 97, 23, 31, 29, 85, 17, 99, 46, 96, 47, 79, 74, 97, 9, 7, 61, 35, 9, 79, 76, 35, 91, 27, 53, 17, 41, 84, 55, 10, 29, 26, 71, 6, 38, 42, 89, 92, 93, 99, 74, 42, 11, 87, 2, 79, 41, 99, 87, 1, 47, 52, 37, 46, 9, 41, 24, 91, 16, 93, 82, 24, 50, 88, 7, 45, 75, 33, 15, 59, 8, 40, 71, 8, 11, 64, 78, 23, 79, 65, 66, 73, 34, 62, 92, 16, 59, 85, 54, 28, 29, 93, 55, 86, 9, 90, 84, 51, 6, 7, 48, 24, 24, 61, 70, 53, 28, 71, 70, 80, 22, 22, 10, 23, 46, 91, 91, 43, 29, 68, 44, 96, 39, 66, 45, 11, 92, 43, 71, 17, 56, 75, 41, 49, 18, 64, 39, 48, 79, 67, 96, 97, 18, 88, 79, 94, 77, 61, 99, 83, 69, 92, 25, 58, 68, 65, 58, 97, 99, 80, 38, 91, 50, 91, 65, 23, 33, 89, 51, 40, 48, 61, 37, 43, 77, 26, 55, 61, 60, 86, 31, 46, 13, 16, 24, 22, 54, 35, 88, 32, 52, 83, 64, 90, 39, 11, 53, 75, 17, 8, 46, 82, 42, 31, 23, 55, 56, 56, 42, 21, 65, 79, 54, 13, 71, 47, 34, 65, 23, 84, 65, 40, 78, 20, 59, 60, 90, 35, 61, 61, 31, 84, 50, 99, 69, 54, 83, 75, 9, 20, 35, 23, 83, 82, 74, 23, 88, 91, 77, 91, 82, 30, 63, 77, 0, 90, 22, 22, 44, 76, 72, 77, 42, 78, 61, 55, 23, 33, 66, 18, 92, 53, 90, 5, 76, 97, 76, 84, 2, 65, 22, 64, 39, 35, 61, 14, 69, 95, 93, 4, 13, 85, 36, 46, 6, 66, 66, 76, 96, 78, 65, 72, 24, 20, 97, 80, 93, 31, 32, 13, 48, 99, 68, 6, 91, 74, 39, 69, 56, 98, 28, 16, 38, 49, 54, 6, 76, 32, 57, 42, 12, 18, 27, 19, 1, 39, 0, 52, 29, 79, 34, 10, 32, 84, 73, 36, 67, 61, 42, 68, 82, 86, 70, 62, 28, 8, 48, 48, 67, 70, 87, 85, 19, 85, 62, 88, 50, 78, 42, 41]
last_save: 736

Gen:10
TrainFitness:0.7777777777777778
TestFitness:0.3333333333333333
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],+038764.9553).all():
      return True
    else:
      return False
  def adf1(index):
    if np.less(x[index],-467490.5198).all():
      return True
    else:
      return True
  def adf2(index):
    if np.equal(psqrt(x[index]),-932771.5487).all():
      return False
    else:
      return False
  def adf3(index):
    if np.greater(np.tanh(x[index]),+778130.2946).all():
      return False
    else:
      return False
  def adf4(index):
    if np.greater(psqrt(x[index]),+168539.7555).all():
      return True
    else:
      return True
  def adf5(index):
    if np.equal(x[index],+352845.6790).all():
      return False
    else:
      return True
  def adf6(index):
    if np.greater(x[index],+647191.3885).all():
      return False
    else:
      return True
  def adf7(index):
    if np.greater(x[index],+006087.4969).all():
      return False
    else:
      return True
  def adf8(index):
    if np.less(psqrt(x[index]),-712331.0081).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+926.374, adf1(1)*-147.726, adf2(2)*-703.734, adf3(3)*+146.853, adf4(4)*-858.575, adf5(5)*+763.143, adf6(6)*+054.500, adf7(7)*+176.359, adf8(8)*+269.878], [0, 1, 1, 1, 1, 1, 0, 0], 917.365)
result=p(); 0.7777777777777778
IndLenGenome:410
IndGenome:[56, 22, 29, 31, 40, 71, 2, 22, 41, 30, 33, 78, 37, 56, 24, 19, 65, 55, 33, 98, 15, 76, 7, 61, 93, 28, 61, 55, 54, 46, 47, 64, 69, 40, 95, 11, 19, 88, 46, 8, 90, 81, 38, 30, 47, 37, 15, 10, 69, 23, 22, 37, 97, 31, 45, 54, 8, 77, 51, 17, 74, 81, 48, 78, 98, 31, 98, 85, 67, 77, 88, 41, 13, 50, 12, 89, 54, 76, 49, 97, 15, 19, 69, 88, 35, 50, 58, 66, 11, 66, 38, 65, 3, 49, 97, 15, 65, 55, 40, 6, 8, 11, 44, 91, 50, 48, 88, 93, 45, 12, 28, 4, 65, 56, 37, 99, 10, 69, 16, 50, 75, 21, 83, 88, 28, 20, 86, 44, 27, 51, 99, 21, 73, 18, 78, 45, 67, 96, 69, 3, 9, 27, 24, 74, 30, 80, 60, 86, 40, 98, 27, 34, 99, 26, 69, 75, 58, 21, 79, 94, 92, 89, 89, 35, 44, 67, 81, 12, 73, 13, 31, 90, 20, 98, 61, 47, 11, 61, 16, 45, 68, 96, 89, 62, 66, 83, 17, 14, 68, 53, 91, 11, 44, 87, 47, 32, 56, 52, 75, 93, 37, 40, 33, 57, 53, 44, 37, 68, 86, 31, 74, 76, 38, 95, 73, 79, 63, 5, 78, 15, 98, 35, 97, 55, 19, 42, 26, 67, 66, 93, 81, 34, 83, 33, 70, 14, 50, 25, 94, 15, 80, 80, 98, 94, 37, 51, 97, 26, 83, 15, 89, 30, 50, 41, 62, 26, 79, 98, 47, 78, 86, 84, 43, 27, 57, 11, 23, 42, 28, 44, 69, 51, 77, 33, 16, 15, 53, 60, 25, 12, 5, 63, 21, 5, 46, 91, 73, 16, 34, 92, 19, 60, 31, 72, 17, 2, 14, 7, 7, 12, 79, 47, 45, 4, 80, 89, 19, 34, 50, 17, 32, 76, 31, 79, 96, 36, 96, 6, 71, 72, 40, 38, 77, 71, 31, 63, 68, 75, 36, 89, 83, 65, 62, 46, 58, 29, 70, 52, 15, 46, 36, 46, 1, 10, 14, 0, 42, 6, 59, 57, 57, 40, 51, 18, 40, 82, 85, 63, 39, 83, 49, 75, 80, 9, 19, 25, 86, 83, 37, 46, 19, 44, 81, 12, 97, 91, 8, 83, 21, 19, 12, 63, 98, 64, 31, 76, 56, 64, 27, 59, 38, 51, 9, 58, 2, 65, 50, 77, 17, 20, 49, 58, 17, 92, 7, 80, 100, 79, 92, 4]
last_save: 736

Gen:2010
last_save: 736
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],+323158.8790).all():
      return True
    else:
      return True
  def adf1(index):
    if np.greater(x[index],+514274.0503).all():
      return True
    else:
      return False
  def adf2(index):
    if np.less(x[index],+680586.0433).all():
      return True
    else:
      return True
  def adf3(index):
    if np.greater(sigmoid(x[index]),+468386.7260).all():
      return True
    else:
      return False
  def adf4(index):
    if np.greater(sigmoid(x[index]),-255421.7092).all():
      return False
    else:
      return False
  def adf5(index):
    if np.less(x[index],+003366.6420).all():
      return True
    else:
      return False
  def adf6(index):
    if np.equal(np.tanh(x[index]),+170228.9763).all():
      return True
    else:
      return True
  def adf7(index):
    if np.less(np.tanh(x[index]),+423726.7779).all():
      return True
    else:
      return False
  def adf8(index):
    if np.equal(x[index],+841793.0379).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-094.655, adf1(1)*-758.876, adf2(2)*+385.946, adf3(3)*+314.663, adf4(4)*-289.900, adf5(5)*-702.317, adf6(6)*-873.552, adf7(7)*-372.738, adf8(8)*-674.937], [0, 0, 0, 1, 1, 0, 0, 0], 662.865)
result=p(); 0.6666666666666666
IndLenGenome:415
IndGenome:[97, 39, 14, 30, 38, 83, 3, 25, 31, 22, 91, 55, 87, 93, 16, 86, 10, 21, 53, 49, 7, 55, 64, 12, 61, 29, 58, 87, 50, 4, 36, 22, 5, 32, 89, 40, 68, 59, 14, 9, 24, 79, 9, 48, 43, 60, 10, 75, 57, 56, 78, 33, 56, 71, 60, 15, 4, 26, 36, 10, 22, 49, 36, 8, 68, 87, 13, 96, 13, 68, 70, 17, 39, 60, 97, 84, 43, 90, 97, 97, 47, 97, 52, 68, 43, 63, 94, 45, 12, 33, 32, 85, 62, 46, 71, 57, 97, 28, 13, 56, 16, 63, 52, 13, 50, 61, 22, 68, 22, 65, 23, 57, 33, 42, 75, 53, 59, 32, 50, 56, 46, 74, 78, 7, 28, 12, 73, 67, 42, 44, 99, 77, 17, 36, 33, 50, 87, 97, 92, 51, 28, 28, 82, 39, 33, 79, 70, 47, 12, 65, 44, 31, 60, 80, 15, 86, 22, 46, 51, 75, 41, 71, 71, 30, 55, 65, 59, 49, 96, 35, 24, 32, 18, 53, 33, 63, 50, 82, 49, 44, 77, 9, 78, 53, 88, 28, 66, 56, 15, 56, 31, 65, 12, 87, 34, 60, 2, 45, 63, 71, 94, 57, 85, 58, 81, 19, 37, 68, 80, 55, 17, 98, 53, 92, 98, 49, 97, 40, 22, 51, 67, 55, 27, 47, 60, 46, 13, 24, 78, 40, 24, 10, 53, 22, 56, 98, 68, 73, 92, 42, 33, 66, 97, 86, 24, 16, 40, 23, 50, 53, 65, 26, 64, 68, 81, 67, 19, 99, 10, 83, 11, 83, 84, 18, 31, 18, 94, 50, 87, 22, 74, 13, 16, 38, 76, 15, 76, 3, 77, 80, 32, 98, 76, 46, 73, 2, 67, 14, 28, 0, 54, 49, 98, 47, 40, 20, 99, 68, 3, 13, 9, 96, 44, 97, 5, 66, 48, 76, 3, 68, 49, 34, 88, 23, 71, 28, 37, 65, 61, 54, 2, 34, 8, 93, 60, 63, 22, 75, 44, 35, 35, 61, 18, 10, 81, 86, 47, 26, 18, 39, 15, 21, 84, 77, 21, 95, 80, 21, 91, 42, 97, 1, 4, 83, 77, 89, 21, 73, 15, 35, 18, 33, 59, 56, 58, 75, 33, 6, 41, 33, 99, 29, 16, 17, 93, 81, 37, 83, 83, 11, 53, 83, 69, 95, 79, 10, 51, 39, 80, 11, 55, 20, 51, 95, 35, 41, 53, 23, 45, 20, 28, 35, 80, 83, 1, 86, 20, 73, 43, 48, 60, 100, 85, 10, 0]
last_save: 737

Gen:615
TrainFitness:0.7777777777777778
TestFitness:0.6666666666666666
MaxGenLen:680
Individual: def p():
  def adf0(index):
    if np.less(x[index],-520692.7014).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(np.cos(x[index]),-898644.9936).all():
      return False
    else:
      return True
  def adf2(index):
    if np.greater(x[index],+007300.9039).all():
      return True
    else:
      return False
  def adf3(index):
    if np.less(x[index],-978092.6734).all():
      return False
    else:
      return False
  def adf4(index):
    if np.greater(np.tanh(x[index]),-670106.3945).all():
      return False
    else:
      return False
  def adf5(index):
    if np.greater(rlog(x[index]),+588831.3025).all():
      return False
    else:
      return True
  def adf6(index):
    if np.less(np.cos(x[index]),-194196.5317).all():
      return False
    else:
      return True
  def adf7(index):
    if np.greater(x[index],-855677.4096).all():
      return True
    else:
      return True
  def adf8(index):
    if np.less(x[index],-456065.0715).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+903.583, adf1(1)*-696.190, adf2(2)*+568.339, adf3(3)*-655.517, adf4(4)*-267.122, adf5(5)*-181.137, adf6(6)*+443.067, adf7(7)*-371.705, adf8(8)*+255.517], [1, 1, 0, 1, 1, 1, 0, 1], 049.200)
result=p(); 0.7777777777777778
IndLenGenome:364
IndGenome:[65, 48, 62, 63, 85, 69, 36, 35, 48, 65, 72, 10, 86, 29, 92, 97, 10, 61, 14, 49, 49, 17, 43, 16, 76, 61, 19, 99, 9, 78, 79, 98, 86, 4, 74, 39, 19, 83, 46, 51, 20, 83, 31, 12, 97, 17, 22, 12, 90, 90, 97, 23, 70, 20, 49, 20, 43, 89, 72, 89, 95, 23, 100, 71, 5, 99, 100, 99, 67, 98, 40, 59, 92, 36, 37, 23, 34, 71, 7, 36, 33, 99, 48, 98, 74, 47, 81, 36, 57, 20, 11, 50, 76, 43, 89, 74, 5, 89, 91, 34, 71, 72, 80, 58, 96, 46, 14, 25, 28, 38, 8, 3, 11, 73, 10, 22, 25, 19, 4, 29, 43, 4, 76, 61, 97, 59, 84, 41, 29, 14, 81, 89, 86, 65, 73, 51, 67, 53, 60, 25, 51, 15, 59, 87, 1, 88, 88, 35, 15, 26, 67, 27, 24, 60, 39, 6, 66, 76, 11, 99, 70, 33, 23, 83, 36, 94, 85, 96, 40, 96, 25, 70, 87, 1, 65, 35, 15, 26, 67, 27, 54, 60, 39, 30, 3, 25, 98, 83, 19, 23, 88, 86, 49, 96, 21, 49, 70, 14, 4, 15, 65, 36, 18, 73, 33, 69, 9, 53, 66, 86, 85, 35, 65, 81, 57, 42, 25, 19, 32, 66, 97, 71, 72, 42, 38, 87, 76, 71, 88, 21, 51, 53, 67, 34, 84, 74, 94, 44, 43, 10, 66, 7, 76, 57, 65, 43, 97, 31, 77, 30, 75, 65, 44, 57, 42, 85, 35, 65, 81, 57, 42, 27, 19, 32, 5, 97, 71, 72, 15, 72, 10, 84, 29, 92, 30, 10, 61, 25, 49, 49, 17, 43, 95, 76, 85, 74, 55, 39, 42, 38, 80, 93, 32, 54, 32, 32, 69, 68, 74, 78, 22, 57, 67, 21, 59, 46, 60, 69, 66, 99, 3, 10, 66, 64, 58, 90, 92, 69, 10, 67, 51, 5, 19, 4, 12, 6, 53, 13, 3, 70, 93, 77, 55, 97, 42, 36, 85, 55, 12, 30, 29, 2, 80, 32, 92, 44, 40, 38, 88, 32, 51, 99, 91, 56, 32, 0, 64, 91, 15, 33, 50, 56, 35, 24]
last_save: 737

Gen:2615
last_save: 737
Exit:FalseFalseTrue