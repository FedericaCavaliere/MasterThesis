Dataset:Meander/Full.csv
FS:True
Seed:1235
Size:10

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],-764198.3391).all():
      return False
    else:
      return True
  def adf1(index):
    if np.less(x[index],-702392.8565).all():
      return True
    else:
      return True
  def adf2(index):
    if np.less(x[index],+032424.3390).all():
      return True
    else:
      return False
  def adf3(index):
    if np.less(np.cos(x[index]),-676185.2812).all():
      return False
    else:
      return False
  def adf4(index):
    if np.less(np.tanh(x[index]),-278535.3555).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(x[index],+421075.1578).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+282.910, adf1(1)*-032.999, adf2(2)*+860.454, adf3(3)*-871.920, adf4(4)*+594.351, adf7(7)*-262.977], [1, 1, 0, 0, 1], 508.335)
result=p(); 0.8333333333333334
IndLenGenome:282
IndGenome:[31, 66, 8, 24, 97, 73, 87, 87, 3, 15, 8, 3, 77, 56, 14, 54, 8, 6, 19, 28, 37, 27, 65, 97, 65, 21, 80, 61, 19, 29, 67, 77, 88, 7, 77, 5, 96, 43, 43, 99, 63, 27, 71, 63, 61, 31, 45, 47, 83, 44, 79, 44, 54, 90, 22, 74, 28, 66, 29, 83, 10, 13, 87, 10, 89, 93, 37, 42, 8, 10, 59, 32, 53, 65, 24, 80, 95, 98, 95, 63, 13, 39, 29, 19, 41, 18, 96, 93, 82, 11, 59, 9, 26, 63, 19, 47, 45, 52, 33, 40, 55, 36, 35, 42, 65, 38, 84, 12, 83, 58, 50, 22, 33, 30, 42, 80, 61, 46, 59, 91, 34, 14, 42, 62, 27, 73, 87, 15, 20, 82, 35, 42, 74, 47, 45, 70, 73, 5, 76, 37, 87, 6, 89, 27, 48, 95, 81, 59, 71, 91, 73, 55, 10, 84, 95, 19, 38, 25, 41, 72, 76, 67, 95, 95, 48, 76, 30, 32, 43, 87, 56, 61, 74, 78, 71, 73, 82, 55, 96, 26, 47, 98, 26, 85, 90, 38, 11, 59, 39, 49, 96, 45, 11, 6, 14, 51, 94, 12, 10, 46, 12, 3, 8, 24, 15, 99, 96, 6, 37, 22, 51, 48, 2, 25, 16, 77, 24, 73, 90, 53, 61, 75, 45, 27, 23, 61, 97, 48, 27, 32, 60, 8, 8, 10, 96, 82, 48, 93, 25, 23, 5, 26, 25, 48, 87, 28, 84, 45, 72, 12, 49, 29, 59, 37, 79, 24, 97, 56, 27, 100, 53, 16, 32, 73, 70, 83, 28, 69, 34, 70, 27, 99, 21, 19, 73, 49, 33, 7, 78, 22, 90, 44]
last_save: 1015

Gen:2001
last_save: 1015
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(np.sin(x[index]),+857736.5522).all():
      return False
    else:
      return False
  def adf1(index):
    if np.greater(rlog(x[index]),+381718.6206).all():
      return True
    else:
      return True
  def adf2(index):
    if np.equal(x[index],+209332.8710).all():
      return False
    else:
      return True
  def adf3(index):
    if np.greater(np.tanh(x[index]),-458650.8632).all():
      return False
    else:
      return True
  def adf4(index):
    if np.greater(x[index],+057197.9184).all():
      return True
    else:
      return False
  def adf7(index):
    if np.less(rlog(x[index]),+908257.6971).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+824.620, adf1(1)*+985.143, adf2(2)*-958.736, adf3(3)*+070.164, adf4(4)*-222.532, adf7(7)*-675.786], [1, 0, 1, 0, 0], 382.757)
result=p(); 0.6666666666666666
IndLenGenome:285
IndGenome:[67, 97, 54, 16, 70, 3, 10, 75, 74, 93, 75, 23, 38, 26, 94, 89, 48, 60, 80, 85, 4, 40, 45, 66, 19, 90, 96, 77, 10, 75, 87, 12, 29, 9, 8, 97, 72, 92, 28, 35, 95, 42, 5, 32, 18, 78, 17, 28, 78, 30, 11, 66, 69, 92, 22, 21, 97, 49, 15, 89, 47, 26, 8, 75, 95, 57, 87, 94, 39, 53, 53, 32, 16, 64, 50, 44, 39, 2, 78, 81, 89, 91, 23, 55, 58, 98, 35, 10, 85, 15, 58, 46, 88, 65, 27, 14, 47, 25, 41, 89, 12, 76, 72, 66, 41, 28, 81, 60, 62, 18, 97, 65, 78, 44, 37, 47, 51, 28, 22, 95, 27, 69, 43, 73, 32, 33, 12, 37, 62, 54, 16, 60, 59, 28, 97, 86, 92, 23, 17, 38, 66, 70, 33, 51, 88, 96, 76, 32, 12, 78, 60, 19, 20, 26, 35, 71, 30, 55, 58, 58, 64, 83, 76, 27, 55, 62, 34, 54, 54, 71, 40, 63, 37, 94, 22, 52, 55, 15, 70, 88, 4, 23, 71, 39, 90, 11, 67, 56, 70, 31, 16, 51, 60, 97, 5, 13, 96, 27, 81, 16, 45, 73, 55, 5, 27, 39, 18, 70, 11, 30, 69, 69, 14, 83, 87, 88, 80, 100, 53, 90, 50, 73, 52, 94, 42, 59, 43, 7, 26, 87, 60, 13, 27, 85, 76, 26, 16, 69, 100, 63, 98, 45, 13, 49, 77, 31, 66, 69, 50, 33, 69, 23, 43, 52, 81, 56, 80, 61, 50, 75, 15, 54, 14, 41, 7, 100, 0, 32, 8, 58, 70, 13, 32, 100, 13, 43, 3, 5, 18, 58, 8, 4, 72, 16, 23]
last_save: 1016

Gen:4
TrainFitness:0.8333333333333334
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],-199655.7356).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(np.cos(x[index]),-229474.6329).all():
      if np.less(psqrt(x[index]),+114415.7712).all():
        return True
      else:
        return False
      return False
    else:
      if np.equal(np.sin(x[index]),+897730.8374).all():
        return False
      else:
        return True
      return True
  def adf2(index):
    if np.equal(x[index],-258840.7988).all():
      return False
    else:
      return False
  def adf3(index):
    if np.less(np.cos(x[index]),-125546.6496).all():
      return False
    else:
      return False
  def adf4(index):
    if np.less(x[index],+019508.2104).all():
      return True
    else:
      return False
  def adf7(index):
    if np.less(x[index],+349043.6159).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*-423.254, adf1(1)*+079.035, adf2(2)*+153.468, adf3(3)*+780.156, adf4(4)*+706.756, adf7(7)*+575.669], [1, 1, 0, 1, 0], 101.395)
result=p(); 0.8333333333333334
IndLenGenome:362
IndGenome:[99, 50, 85, 33, 36, 61, 2, 15, 62, 1, 49, 39, 76, 45, 75, 17, 13, 95, 46, 25, 21, 12, 18, 63, 31, 68, 13, 67, 31, 27, 2, 62, 59, 84, 67, 4, 86, 43, 12, 49, 27, 40, 92, 17, 97, 62, 96, 81, 21, 84, 64, 11, 35, 47, 47, 71, 2, 76, 45, 97, 97, 11, 64, 96, 12, 30, 62, 28, 19, 17, 37, 33, 50, 88, 73, 87, 74, 39, 36, 74, 4, 95, 83, 55, 60, 91, 48, 72, 75, 28, 48, 34, 60, 47, 19, 98, 38, 91, 9, 45, 43, 97, 10, 85, 92, 19, 39, 91, 12, 95, 35, 54, 36, 66, 64, 89, 76, 79, 17, 91, 11, 19, 87, 86, 24, 17, 80, 11, 49, 85, 50, 78, 52, 31, 30, 54, 74, 99, 41, 39, 46, 81, 51, 68, 93, 93, 84, 19, 30, 74, 63, 56, 91, 95, 79, 73, 53, 63, 28, 41, 33, 96, 44, 12, 33, 62, 75, 94, 50, 76, 93, 10, 47, 39, 60, 93, 35, 9, 36, 71, 81, 65, 23, 4, 46, 38, 54, 22, 72, 7, 48, 20, 91, 15, 56, 35, 90, 40, 67, 50, 6, 27, 35, 96, 93, 48, 73, 5, 37, 15, 96, 36, 29, 28, 25, 59, 38, 49, 22, 89, 61, 40, 81, 93, 79, 25, 66, 72, 82, 56, 23, 90, 70, 48, 90, 84, 25, 64, 97, 78, 95, 26, 62, 29, 10, 19, 38, 52, 94, 87, 61, 81, 47, 27, 82, 49, 82, 53, 60, 12, 87, 65, 96, 18, 88, 26, 42, 30, 73, 58, 28, 88, 89, 68, 72, 46, 36, 99, 70, 39, 16, 47, 82, 91, 13, 28, 99, 71, 93, 18, 14, 87, 39, 62, 81, 33, 47, 20, 83, 41, 21, 55, 59, 98, 7, 26, 87, 60, 13, 27, 85, 76, 26, 16, 69, 100, 63, 98, 45, 13, 49, 77, 31, 66, 69, 50, 33, 69, 23, 43, 52, 81, 56, 80, 61, 50, 75, 15, 54, 14, 41, 7, 100, 0, 32, 8, 58, 70, 13, 32, 100, 13, 43, 3, 5, 18, 58, 8, 4, 72, 16, 23]
last_save: 1016

Gen:2004
last_save: 1016
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:1.0
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(np.cos(x[index]),-916517.5053).all():
      return True
    else:
      return True
  def adf1(index):
    if np.less(x[index],+414137.9910).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(rlog(x[index]),+461635.8430).all():
      return True
    else:
      return False
  def adf3(index):
    if np.less(x[index],+593444.4965).all():
      return False
    else:
      return False
  def adf4(index):
    if np.less(np.sin(x[index]),-483628.7143).all():
      return False
    else:
      return True
  def adf7(index):
    if np.greater(np.tanh(x[index]),-657812.6625).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+362.373, adf1(1)*-888.824, adf2(2)*-034.324, adf3(3)*+400.257, adf4(4)*+842.067, adf7(7)*+913.536], [1, 0, 1, 1, 1], 321.013)
result=p(); 0.6666666666666666
IndLenGenome:285
IndGenome:[61, 71, 62, 8, 96, 23, 78, 84, 67, 82, 59, 53, 20, 50, 60, 54, 92, 67, 71, 1, 51, 24, 85, 34, 43, 55, 46, 87, 82, 24, 81, 61, 21, 52, 45, 33, 10, 98, 100, 91, 55, 93, 39, 30, 33, 3, 83, 23, 12, 33, 3, 49, 6, 15, 50, 71, 58, 64, 69, 43, 94, 84, 43, 41, 55, 2, 80, 17, 52, 48, 34, 11, 5, 29, 52, 91, 44, 50, 87, 80, 8, 16, 64, 19, 98, 81, 86, 24, 38, 50, 47, 53, 82, 34, 40, 57, 17, 91, 32, 83, 45, 78, 18, 40, 78, 51, 17, 44, 70, 23, 66, 66, 61, 13, 31, 90, 14, 78, 38, 96, 27, 48, 43, 28, 56, 65, 64, 63, 21, 82, 13, 78, 14, 27, 60, 32, 73, 79, 37, 28, 56, 54, 61, 72, 81, 70, 16, 63, 64, 51, 15, 8, 43, 59, 93, 61, 66, 62, 75, 79, 44, 94, 34, 83, 34, 23, 64, 55, 74, 31, 52, 46, 99, 70, 16, 66, 46, 48, 65, 53, 45, 54, 37, 75, 42, 85, 31, 36, 89, 42, 35, 45, 55, 43, 90, 82, 34, 75, 19, 34, 51, 92, 52, 47, 38, 24, 18, 51, 41, 48, 41, 62, 16, 59, 89, 7, 99, 45, 84, 29, 84, 34, 81, 89, 48, 49, 86, 13, 70, 10, 96, 35, 72, 36, 82, 41, 10, 22, 14, 67, 2, 7, 80, 95, 90, 26, 63, 6, 37, 15, 98, 49, 18, 65, 95, 90, 29, 66, 13, 26, 68, 94, 0, 80, 51, 30, 25, 54, 15, 81, 2, 23, 95, 93, 100, 76, 84, 47, 38, 28, 8, 51, 34, 15, 18]
last_save: 1017

Gen:3
TrainFitness:0.8333333333333334
TestFitness:0.3333333333333333
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],+014911.3561).all():
      if np.less(x[index],-890835.0590).all():
        return True
      else:
        return False
      return True
    else:
      if np.equal(x[index],-139479.7944).all():
        return False
      else:
        return True
      return False
  def adf1(index):
    if np.less(x[index],-085543.0404).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(x[index],+001178.3063).all():
      return True
    else:
      return False
  def adf3(index):
    if np.less(sigmoid(x[index]),+116057.3706).all():
      return True
    else:
      return False
  def adf4(index):
    if np.less(x[index],+752345.4170).all():
      return False
    else:
      return True
  def adf7(index):
    if np.less(np.sin(x[index]),-522132.4129).all():
      if np.less(psqrt(x[index]),+937712.8043).all():
        return True
      else:
        return True
      return True
    else:
      if np.greater(np.cos(x[index]),+646712.1380).all():
        return False
      else:
        return False
      return True
  return multiple_operation([adf0(0)*-557.360, adf1(1)*+280.696, adf2(2)*-546.439, adf3(3)*-214.052, adf4(4)*-648.067, adf7(7)*-054.555], [1, 0, 1, 0, 0], 106.358)
result=p(); 0.8333333333333334
IndLenGenome:273
IndGenome:[32, 93, 65, 12, 69, 34, 77, 96, 92, 58, 30, 11, 24, 89, 21, 51, 63, 55, 96, 91, 91, 82, 23, 77, 59, 32, 58, 69, 100, 98, 13, 25, 30, 85, 89, 80, 40, 33, 82, 59, 80, 91, 57, 61, 14, 11, 23, 19, 94, 57, 39, 67, 59, 54, 84, 51, 50, 35, 76, 61, 61, 21, 29, 53, 12, 20, 78, 95, 75, 94, 3, 90, 74, 80, 84, 79, 91, 76, 29, 12, 77, 77, 26, 86, 10, 80, 1, 91, 27, 48, 53, 70, 96, 73, 34, 75, 53, 81, 94, 60, 45, 57, 56, 21, 51, 31, 96, 30, 85, 27, 23, 67, 50, 36, 78, 53, 30, 23, 76, 29, 91, 66, 30, 67, 15, 82, 93, 24, 15, 84, 81, 57, 20, 25, 58, 58, 12, 98, 46, 42, 18, 62, 99, 45, 95, 22, 72, 61, 23, 92, 24, 51, 62, 79, 97, 70, 96, 53, 54, 30, 13, 19, 73, 37, 77, 91, 82, 58, 70, 14, 83, 50, 74, 74, 23, 63, 72, 49, 46, 38, 98, 56, 14, 46, 7, 61, 2, 71, 23, 38, 30, 59, 43, 40, 60, 13, 32, 83, 8, 15, 15, 37, 43, 6, 70, 31, 40, 77, 92, 8, 100, 6, 79, 96, 95, 37, 58, 35, 44, 96, 54, 13, 99, 78, 79, 4, 2, 61, 64, 60, 45, 22, 47, 37, 13, 46, 24, 78, 0, 56, 27, 99, 27, 28, 30, 15, 74, 75, 65, 65, 39, 11, 76, 65, 52, 24, 99, 91, 70, 46, 93, 35, 88, 86, 81, 91, 90, 45, 18, 45, 13, 86, 65]
last_save: 1017

Gen:6
TrainFitness:0.8333333333333334
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],+014911.3561).all():
      if np.less(x[index],-890835.0790).all():
        return True
      else:
        return False
      return True
    else:
      if np.equal(x[index],-139334.9138).all():
        return True
      else:
        return True
      return True
  def adf1(index):
    if np.greater(rlog(x[index]),-246215.6614).all():
      return True
    else:
      return False
  def adf2(index):
    if np.greater(np.tanh(x[index]),-988162.2102).all():
      return True
    else:
      return True
  def adf3(index):
    if np.less(sigmoid(x[index]),-082561.1225).all():
      return False
    else:
      return False
  def adf4(index):
    if np.equal(x[index],-243027.9681).all():
      return False
    else:
      return False
  def adf7(index):
    if np.equal(x[index],+036286.7966).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*-096.781, adf1(1)*-533.173, adf2(2)*+014.771, adf3(3)*-037.477, adf4(4)*-598.877, adf7(7)*-515.928], [0, 0, 1, 0, 0], 504.816)
result=p(); 0.8333333333333334
IndLenGenome:305
IndGenome:[32, 93, 65, 12, 69, 34, 77, 96, 92, 58, 30, 11, 24, 89, 21, 51, 63, 55, 96, 91, 91, 43, 23, 77, 59, 32, 58, 69, 100, 98, 13, 25, 30, 77, 89, 80, 40, 33, 82, 59, 5, 91, 57, 61, 14, 11, 23, 19, 13, 93, 94, 49, 21, 43, 48, 46, 50, 50, 80, 25, 84, 38, 34, 68, 67, 81, 92, 54, 76, 32, 31, 65, 76, 76, 81, 54, 54, 89, 45, 57, 78, 92, 14, 24, 37, 36, 89, 98, 18, 91, 86, 92, 52, 11, 10, 62, 40, 66, 41, 77, 37, 54, 27, 57, 43, 62, 100, 48, 52, 15, 36, 21, 31, 32, 42, 5, 33, 45, 75, 13, 38, 79, 53, 75, 42, 92, 24, 43, 40, 62, 87, 79, 66, 38, 51, 97, 55, 85, 57, 14, 57, 85, 76, 18, 50, 13, 16, 2, 38, 16, 67, 39, 6, 66, 83, 65, 76, 29, 49, 33, 44, 20, 29, 76, 57, 98, 21, 33, 95, 29, 65, 93, 43, 91, 67, 73, 38, 60, 52, 30, 71, 14, 27, 77, 11, 43, 85, 47, 10, 23, 17, 14, 27, 67, 69, 91, 23, 65, 19, 38, 48, 27, 97, 63, 33, 36, 75, 31, 85, 59, 12, 58, 65, 64, 36, 13, 52, 36, 42, 55, 50, 94, 38, 1, 6, 12, 17, 11, 97, 23, 95, 29, 32, 6, 8, 15, 42, 75, 48, 85, 100, 70, 39, 96, 5, 23, 66, 6, 82, 94, 0, 21, 32, 58, 8, 21, 70, 0, 90, 58, 37, 56, 14, 27, 88, 65, 94, 66, 47, 45, 69, 59, 0, 67, 90, 16, 26, 60, 98, 65, 59, 49, 18, 60, 37, 0, 14, 1, 22, 44, 50, 65, 0, 86, 97, 1, 36, 44, 39, 99, 2, 34, 47, 43, 55]
last_save: 1017

Gen:2006
last_save: 1017
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:1.0
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],-778261.4657).all():
      return True
    else:
      return False
  def adf1(index):
    if np.equal(np.tanh(x[index]),+991881.4834).all():
      return False
    else:
      return False
  def adf2(index):
    if np.less(np.sin(x[index]),+066147.8657).all():
      return False
    else:
      return False
  def adf3(index):
    if np.less(sigmoid(x[index]),-142168.1576).all():
      return False
    else:
      return True
  def adf4(index):
    if np.less(sigmoid(x[index]),-556588.2077).all():
      return True
    else:
      return True
  def adf7(index):
    if np.greater(np.cos(x[index]),-314733.1707).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-285.298, adf1(1)*-363.171, adf2(2)*+521.909, adf3(3)*+852.839, adf4(4)*-076.205, adf7(7)*+643.669], [0, 0, 1, 0, 1], 850.348)
result=p(); 0.6666666666666666
IndLenGenome:286
IndGenome:[40, 30, 15, 59, 12, 31, 34, 81, 39, 23, 20, 37, 52, 54, 79, 80, 55, 40, 29, 21, 67, 18, 4, 69, 73, 51, 21, 13, 97, 16, 68, 33, 41, 92, 59, 7, 46, 5, 92, 55, 14, 26, 29, 91, 79, 63, 77, 94, 2, 18, 24, 68, 88, 35, 96, 17, 10, 25, 47, 97, 60, 94, 6, 80, 22, 85, 82, 96, 74, 58, 71, 62, 36, 78, 40, 60, 60, 52, 39, 43, 70, 22, 70, 66, 36, 62, 75, 83, 34, 8, 82, 56, 86, 26, 77, 22, 27, 13, 17, 49, 27, 12, 75, 31, 57, 41, 99, 53, 39, 44, 58, 55, 67, 22, 28, 70, 63, 20, 94, 63, 57, 24, 88, 15, 44, 21, 67, 87, 18, 81, 44, 60, 44, 16, 20, 96, 19, 49, 83, 81, 53, 47, 73, 40, 73, 70, 15, 78, 68, 88, 68, 46, 13, 75, 35, 47, 16, 92, 28, 95, 7, 71, 48, 87, 90, 18, 42, 61, 17, 41, 53, 16, 84, 41, 35, 47, 11, 58, 37, 11, 31, 36, 67, 86, 37, 19, 16, 73, 66, 16, 27, 77, 36, 3, 98, 92, 65, 75, 75, 68, 51, 35, 71, 61, 45, 3, 74, 88, 69, 22, 1, 18, 79, 66, 44, 95, 0, 24, 10, 23, 69, 8, 30, 24, 39, 28, 93, 24, 82, 87, 46, 60, 77, 38, 46, 45, 95, 89, 23, 28, 29, 86, 65, 89, 47, 72, 42, 60, 21, 98, 37, 16, 12, 32, 96, 13, 32, 66, 82, 47, 39, 93, 89, 9, 60, 94, 6, 60, 1, 99, 17, 10, 0, 39, 49, 46, 68, 86, 4, 4, 31, 31, 55, 36, 90, 89]
last_save: 1018

Gen:12
TrainFitness:0.8333333333333334
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(np.tanh(x[index]),-487136.1748).all():
      return False
    else:
      return False
  def adf1(index):
    if np.equal(x[index],+090655.6978).all():
      return True
    else:
      return True
  def adf2(index):
    if np.equal(x[index],+146043.5530).all():
      return False
    else:
      return True
  def adf3(index):
    if np.greater(rlog(x[index]),-804898.6403).all():
      return True
    else:
      return False
  def adf4(index):
    if np.greater(x[index],+021987.0636).all():
      return False
    else:
      return True
  def adf7(index):
    if np.less(x[index],-285487.6560).all():
      if np.greater(sigmoid(x[index]),+443578.4586).all():
        return True
      else:
        return False
      return False
    else:
      if np.greater(x[index],-417779.6891).all():
        if np.equal(x[index],-271804.1351).all():
          return True
        else:
          return False
        return False
      else:
        if np.greater(x[index],+998792.6285).all():
          return True
        else:
          return True
        return True
      return False
  return multiple_operation([adf0(0)*+582.464, adf1(1)*+728.962, adf2(2)*-229.375, adf3(3)*-487.634, adf4(4)*-745.371, adf7(7)*+532.502], [1, 0, 1, 0, 1], 852.820)
result=p(); 0.8333333333333334
IndLenGenome:434
IndGenome:[92, 44, 2, 57, 97, 36, 62, 33, 37, 32, 24, 28, 87, 21, 3, 46, 61, 97, 64, 68, 7, 77, 75, 3, 77, 23, 28, 12, 42, 80, 19, 10, 36, 35, 95, 86, 79, 87, 48, 58, 98, 89, 97, 44, 67, 54, 30, 47, 1, 54, 26, 40, 54, 23, 55, 75, 13, 50, 11, 86, 23, 97, 69, 70, 34, 35, 85, 60, 8, 10, 64, 58, 89, 78, 46, 4, 80, 23, 12, 35, 35, 29, 60, 63, 47, 88, 48, 30, 32, 41, 99, 78, 47, 90, 16, 43, 26, 45, 66, 36, 96, 27, 64, 77, 51, 43, 55, 82, 88, 15, 54, 68, 57, 86, 55, 56, 50, 75, 99, 22, 69, 41, 64, 64, 64, 84, 73, 5, 87, 28, 34, 65, 68, 76, 12, 19, 91, 42, 21, 6, 31, 76, 31, 97, 34, 31, 57, 77, 17, 69, 26, 78, 29, 61, 21, 92, 75, 29, 29, 11, 52, 27, 81, 28, 80, 24, 41, 23, 85, 91, 68, 51, 41, 53, 21, 93, 72, 84, 25, 89, 49, 28, 67, 39, 32, 96, 52, 58, 75, 34, 88, 50, 65, 30, 84, 66, 2, 85, 45, 8, 22, 24, 86, 14, 80, 94, 76, 97, 42, 18, 89, 16, 72, 63, 69, 73, 62, 32, 59, 93, 67, 75, 90, 13, 93, 74, 18, 47, 66, 83, 64, 73, 27, 95, 7, 14, 15, 3, 37, 81, 66, 74, 13, 95, 13, 92, 45, 40, 92, 98, 63, 96, 31, 26, 13, 18, 28, 25, 52, 18, 32, 40, 30, 29, 65, 31, 70, 34, 81, 16, 20, 23, 84, 58, 18, 55, 11, 20, 97, 58, 33, 87, 81, 36, 22, 27, 59, 11, 7, 79, 44, 19, 25, 40, 82, 10, 97, 52, 84, 68, 31, 2, 28, 51, 69, 70, 73, 49, 19, 81, 80, 88, 19, 20, 19, 51, 83, 39, 49, 25, 17, 91, 40, 27, 3, 83, 75, 23, 93, 80, 77, 82, 94, 27, 42, 56, 92, 81, 56, 76, 91, 14, 51, 46, 77, 45, 46, 58, 58, 15, 5, 55, 1, 8, 22, 59, 13, 42, 84, 51, 87, 87, 58, 12, 68, 82, 19, 57, 11, 82, 83, 45, 62, 58, 51, 62, 14, 68, 9, 57, 6, 56, 70, 59, 83, 83, 42, 93, 84, 49, 99, 88, 85, 22, 96, 98, 24, 37, 45, 33, 56, 57, 95, 71, 65, 80, 75, 51, 43, 50, 85, 92, 17, 10, 25, 19, 36, 54, 97, 24, 6, 92, 35, 75, 2, 24, 95, 21, 93, 42, 46, 76, 37, 95]
last_save: 1018

Gen:2012
last_save: 1018
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],+358568.2481).all():
      return True
    else:
      return True
  def adf1(index):
    if np.less(np.tanh(x[index]),-705095.3159).all():
      return True
    else:
      return True
  def adf2(index):
    if np.less(sigmoid(x[index]),-406076.3331).all():
      return True
    else:
      return True
  def adf3(index):
    if np.equal(x[index],+605341.4299).all():
      return False
    else:
      return False
  def adf4(index):
    if np.less(x[index],+306751.9797).all():
      return True
    else:
      return False
  def adf7(index):
    if np.less(x[index],-784673.8619).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+585.782, adf1(1)*-816.247, adf2(2)*-829.668, adf3(3)*-871.117, adf4(4)*+909.352, adf7(7)*-968.665], [0, 1, 0, 1, 0], 789.526)
result=p(); 0.6666666666666666
IndLenGenome:282
IndGenome:[75, 38, 72, 23, 21, 7, 62, 59, 77, 97, 61, 31, 75, 76, 9, 88, 79, 9, 81, 70, 93, 53, 91, 39, 61, 86, 94, 62, 81, 64, 58, 8, 97, 62, 5, 77, 56, 18, 76, 68, 59, 21, 17, 49, 15, 68, 81, 18, 31, 31, 8, 86, 95, 98, 68, 26, 69, 27, 55, 2, 3, 25, 58, 71, 27, 97, 11, 38, 38, 62, 40, 24, 26, 24, 55, 81, 35, 27, 23, 86, 18, 79, 99, 44, 98, 78, 100, 98, 81, 86, 46, 91, 35, 94, 12, 99, 58, 86, 90, 83, 28, 38, 68, 42, 80, 85, 55, 21, 99, 49, 75, 20, 52, 75, 49, 73, 53, 32, 56, 41, 48, 35, 43, 25, 50, 52, 26, 32, 38, 71, 13, 61, 46, 33, 75, 47, 57, 97, 26, 89, 58, 99, 57, 20, 91, 98, 16, 88, 67, 55, 68, 81, 30, 16, 75, 27, 27, 16, 99, 92, 88, 73, 10, 46, 55, 44, 29, 63, 90, 82, 91, 83, 85, 89, 24, 54, 87, 87, 59, 87, 21, 67, 40, 16, 43, 89, 67, 25, 7, 14, 40, 62, 81, 59, 57, 79, 10, 19, 75, 48, 21, 16, 39, 87, 5, 86, 82, 55, 98, 37, 88, 49, 5, 56, 96, 64, 2, 64, 13, 30, 19, 20, 62, 68, 44, 76, 63, 28, 55, 95, 68, 34, 4, 90, 35, 34, 35, 74, 33, 16, 74, 68, 69, 48, 73, 39, 25, 41, 97, 1, 60, 51, 55, 2, 68, 56, 81, 5, 83, 51, 73, 92, 59, 74, 67, 3, 6, 23, 99, 82, 21, 52, 60, 37, 7, 30, 28, 99, 12, 41, 71, 35]
last_save: 1019

Gen:4
TrainFitness:0.8333333333333334
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],+857704.7849).all():
      return True
    else:
      return True
  def adf1(index):
    if np.less(sigmoid(x[index]),+116231.5641).all():
      if np.less(x[index],+010504.8883).all():
        return True
      else:
        return False
      return True
    else:
      if np.greater(psqrt(x[index]),+024590.9795).all():
        return False
      else:
        return False
      return False
  def adf2(index):
    if np.greater(rlog(x[index]),+448529.7054).all():
      return True
    else:
      return True
  def adf3(index):
    if np.equal(np.cos(x[index]),+107200.6636).all():
      return False
    else:
      return True
  def adf4(index):
    if np.less(np.sin(x[index]),-433620.0234).all():
      return False
    else:
      return False
  def adf7(index):
    if np.less(np.cos(x[index]),-368535.4117).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+375.472, adf1(1)*+569.485, adf2(2)*+621.488, adf3(3)*-105.536, adf4(4)*+369.870, adf7(7)*+951.358], [1, 1, 1, 1, 0], 031.318)
result=p(); 0.8333333333333334
IndLenGenome:485
IndGenome:[51, 81, 3, 33, 51, 13, 41, 18, 89, 78, 25, 27, 77, 40, 34, 47, 88, 44, 89, 30, 30, 38, 58, 51, 46, 80, 15, 76, 54, 49, 11, 1, 16, 82, 33, 21, 25, 36, 84, 61, 9, 10, 41, 51, 94, 61, 20, 51, 80, 65, 40, 74, 18, 18, 38, 43, 80, 65, 84, 11, 60, 80, 47, 64, 90, 84, 90, 62, 44, 85, 39, 60, 69, 7, 19, 35, 73, 63, 97, 83, 77, 90, 62, 64, 19, 12, 11, 54, 24, 38, 85, 32, 19, 97, 70, 65, 24, 76, 82, 57, 25, 8, 84, 67, 18, 68, 13, 31, 10, 47, 92, 60, 10, 16, 56, 33, 26, 41, 74, 40, 53, 31, 48, 12, 86, 45, 62, 74, 13, 93, 26, 52, 40, 80, 62, 43, 44, 79, 53, 12, 99, 49, 74, 25, 19, 65, 78, 23, 96, 28, 35, 23, 95, 74, 11, 91, 87, 41, 84, 93, 58, 10, 74, 22, 73, 17, 35, 54, 77, 52, 11, 50, 24, 35, 66, 29, 64, 38, 95, 21, 68, 36, 96, 52, 41, 24, 78, 28, 77, 17, 52, 51, 30, 95, 65, 23, 96, 71, 88, 60, 73, 56, 79, 78, 17, 40, 29, 20, 73, 89, 75, 11, 93, 25, 8, 20, 29, 63, 27, 75, 26, 62, 80, 63, 91, 33, 11, 98, 18, 75, 79, 76, 64, 23, 50, 88, 35, 87, 89, 15, 92, 69, 40, 36, 50, 96, 58, 82, 11, 60, 31, 44, 66, 42, 23, 95, 90, 77, 62, 83, 51, 58, 86, 98, 96, 24, 83, 30, 75, 61, 29, 36, 37, 99, 24, 63, 54, 38, 58, 13, 62, 69, 66, 60, 85, 51, 73, 14, 14, 48, 90, 64, 85, 20, 96, 57, 32, 51, 34, 36, 86, 41, 41, 22, 90, 82, 24, 43, 60, 81, 12, 76, 81, 67, 56, 76, 85, 54, 99, 43, 91, 29, 56, 60, 65, 14, 79, 10, 16, 62, 57, 54, 36, 64, 10, 90, 17, 49, 71, 97, 22, 78, 48, 46, 77, 51, 72, 57, 91, 22, 28, 30, 69, 27, 54, 29, 88, 69, 22, 83, 61, 99, 82, 33, 44, 28, 80, 65, 41, 46, 29, 15, 57, 12, 72, 24, 76, 79, 90, 87, 69, 51, 82, 51, 41, 51, 81, 35, 94, 80, 14, 67, 48, 28, 72, 63, 39, 59, 28, 18, 60, 50, 5, 20, 55, 38, 100, 11, 23, 37, 12, 57, 59, 8, 59, 76, 90, 68, 81, 19, 68, 42, 9, 92, 94, 80, 10, 88, 24, 95, 62, 90, 58, 9, 11, 100, 14, 29, 84, 51, 29, 36, 39, 69, 36, 54, 82, 93, 1, 57, 15, 11, 45, 58, 100, 93, 15, 13, 87, 32, 23, 5, 42, 41, 55, 57, 28, 26, 27, 10, 58, 77, 2, 93, 52, 91, 75, 10, 15, 85, 2, 18, 95, 32, 4]
last_save: 1019

Gen:2004
last_save: 1019
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:1.0
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(psqrt(x[index]),-958695.0978).all():
      return False
    else:
      return True
  def adf1(index):
    if np.less(rlog(x[index]),+480037.3941).all():
      return True
    else:
      return True
  def adf2(index):
    if np.greater(psqrt(x[index]),-348894.5181).all():
      return True
    else:
      return False
  def adf3(index):
    if np.less(np.tanh(x[index]),+787869.8178).all():
      return True
    else:
      return True
  def adf4(index):
    if np.less(x[index],+379407.3041).all():
      return False
    else:
      return True
  def adf7(index):
    if np.less(x[index],+944250.5368).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+715.957, adf1(1)*-970.832, adf2(2)*-698.017, adf3(3)*+021.404, adf4(4)*+211.097, adf7(7)*-110.124], [0, 1, 1, 1, 0], 046.445)
result=p(); 0.6666666666666666
IndLenGenome:285
IndGenome:[84, 85, 33, 72, 65, 37, 86, 36, 9, 91, 6, 14, 19, 47, 67, 20, 98, 54, 81, 90, 94, 74, 75, 19, 8, 83, 82, 84, 13, 17, 97, 74, 81, 60, 31, 87, 63, 71, 49, 83, 5, 42, 54, 25, 9, 60, 33, 91, 89, 43, 14, 90, 57, 11, 44, 30, 55, 48, 11, 18, 3, 75, 10, 77, 52, 84, 57, 59, 48, 33, 30, 12, 55, 101, 18, 17, 66, 70, 54, 30, 33, 6, 17, 16, 61, 33, 77, 42, 37, 11, 71, 32, 88, 84, 13, 24, 6, 2, 18, 60, 59, 49, 65, 80, 76, 51, 66, 27, 71, 78, 70, 72, 92, 49, 40, 23, 56, 28, 55, 27, 14, 8, 26, 73, 99, 79, 27, 19, 15, 94, 32, 65, 11, 98, 8, 24, 98, 61, 40, 71, 32, 37, 32, 69, 91, 37, 42, 19, 29, 35, 28, 64, 61, 91, 94, 49, 10, 38, 72, 30, 79, 26, 16, 91, 32, 81, 47, 21, 52, 71, 78, 55, 28, 80, 88, 95, 37, 67, 23, 24, 77, 69, 78, 46, 26, 53, 59, 51, 37, 67, 35, 13, 80, 55, 17, 3, 86, 96, 91, 67, 63, 14, 51, 31, 62, 32, 95, 20, 39, 83, 100, 40, 33, 7, 100, 33, 41, 78, 18, 19, 59, 83, 84, 52, 51, 91, 48, 46, 11, 95, 0, 53, 20, 95, 88, 31, 31, 29, 87, 24, 88, 77, 65, 43, 5, 76, 68, 25, 46, 63, 66, 62, 49, 50, 27, 4, 86, 52, 72, 56, 27, 38, 98, 51, 2, 29, 94, 88, 43, 93, 88, 66, 40, 29, 41, 74, 66, 4, 76, 82, 27, 71, 6, 81, 39]
last_save: 10110

Gen:8
TrainFitness:0.8333333333333334
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],-275944.3931).all():
      return True
    else:
      return True
  def adf1(index):
    if np.less(x[index],+195337.6357).all():
      if np.equal(psqrt(x[index]),-731899.7540).all():
        return False
      else:
        return True
      return False
    else:
      if np.equal(rlog(x[index]),+771401.7603).all():
        return False
      else:
        return True
      return False
  def adf2(index):
    if np.equal(psqrt(x[index]),+684693.3512).all():
      if np.greater(x[index],-407958.9425).all():
        return True
      else:
        return False
      return False
    else:
      if np.greater(x[index],+029019.3553).all():
        return False
      else:
        return True
      return False
  def adf3(index):
    if np.equal(np.tanh(x[index]),+813150.3778).all():
      return False
    else:
      return True
  def adf4(index):
    if np.equal(sigmoid(x[index]),+899647.6969).all():
      if np.less(np.cos(x[index]),-407339.2202).all():
        return False
      else:
        return False
      return False
    else:
      if np.greater(x[index],+287753.6085).all():
        return False
      else:
        return False
      return True
  def adf7(index):
    if np.greater(np.sin(x[index]),-304599.0598).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+147.359, adf1(1)*-587.660, adf2(2)*-811.622, adf3(3)*-412.690, adf4(4)*+689.254, adf7(7)*-366.549], [0, 0, 1, 0, 0], 404.835)
result=p(); 0.8333333333333334
IndLenGenome:473
IndGenome:[21, 27, 61, 93, 38, 81, 79, 65, 23, 2, 47, 35, 79, 4, 84, 43, 89, 23, 31, 16, 16, 32, 20, 62, 97, 9, 34, 96, 27, 71, 19, 15, 63, 83, 17, 6, 13, 35, 37, 63, 20, 86, 89, 19, 17, 43, 17, 83, 61, 28, 89, 89, 47, 65, 44, 60, 71, 22, 11, 33, 47, 56, 64, 57, 44, 25, 67, 67, 21, 84, 30, 41, 37, 76, 50, 73, 77, 62, 39, 72, 32, 31, 89, 88, 5, 22, 30, 14, 96, 78, 44, 6, 69, 33, 33, 25, 61, 2, 25, 21, 63, 59, 53, 49, 44, 10, 67, 59, 85, 78, 59, 34, 52, 35, 86, 61, 93, 69, 48, 91, 56, 86, 86, 10, 32, 99, 40, 21, 9, 93, 45, 85, 73, 95, 40, 53, 22, 81, 77, 2, 86, 18, 84, 18, 68, 91, 13, 81, 85, 70, 53, 27, 17, 68, 3, 44, 64, 88, 59, 68, 52, 33, 83, 76, 22, 18, 19, 49, 26, 44, 57, 46, 19, 36, 49, 73, 46, 56, 73, 97, 81, 62, 44, 50, 77, 73, 53, 69, 82, 82, 90, 42, 89, 99, 23, 31, 81, 51, 44, 56, 80, 52, 98, 47, 37, 45, 83, 56, 10, 78, 15, 73, 93, 72, 19, 51, 84, 62, 78, 45, 73, 88, 43, 90, 84, 15, 59, 69, 70, 95, 19, 88, 57, 19, 96, 61, 35, 72, 73, 11, 74, 27, 83, 75, 49, 47, 25, 41, 65, 18, 67, 66, 46, 30, 41, 15, 50, 78, 51, 61, 46, 42, 82, 20, 99, 96, 24, 71, 72, 36, 99, 40, 99, 16, 32, 26, 18, 79, 82, 65, 44, 92, 87, 71, 93, 96, 96, 55, 24, 89, 62, 62, 84, 21, 64, 46, 28, 74, 80, 4, 98, 43, 25, 43, 41, 71, 98, 90, 24, 34, 12, 15, 68, 64, 14, 79, 35, 47, 46, 19, 83, 55, 95, 92, 17, 35, 61, 72, 8, 37, 52, 42, 76, 42, 60, 84, 43, 26, 55, 26, 92, 20, 61, 68, 16, 21, 73, 18, 43, 40, 35, 90, 3, 22, 38, 51, 89, 45, 69, 52, 34, 68, 21, 52, 41, 88, 42, 64, 44, 15, 43, 78, 23, 42, 30, 89, 93, 28, 30, 20, 13, 31, 54, 96, 49, 33, 91, 68, 38, 35, 100, 88, 9, 18, 13, 4, 77, 99, 21, 72, 15, 59, 55, 81, 68, 64, 76, 70, 12, 37, 34, 6, 96, 25, 98, 54, 1, 36, 18, 82, 89, 6, 76, 48, 86, 89, 33, 98, 72, 4, 29, 48, 11, 96, 11, 63, 80, 62, 25, 13, 72, 18, 58, 91, 27, 21, 99, 80, 66, 32, 86, 40, 15, 77, 93, 95, 78, 53, 75, 52, 7, 60, 91, 43, 92, 60, 17, 83, 25, 15, 32, 8, 68]
last_save: 10110

Gen:2008
last_save: 10110
Exit:FalseFalseTrue