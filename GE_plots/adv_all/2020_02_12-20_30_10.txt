Dataset:Meander/Full.csv
FS:False
Seed:1238
Size:7

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.7777777777777778
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],-007842.2870).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(np.sin(x[index]),-119910.0167).all():
      return True
    else:
      return False
  def adf2(index):
    if np.equal(sigmoid(x[index]),+361988.5924).all():
      return False
    else:
      return False
  def adf3(index):
    if np.greater(x[index],-933659.4152).all():
      return True
    else:
      return True
  def adf4(index):
    if np.equal(x[index],+397171.8665).all():
      return False
    else:
      return True
  def adf5(index):
    if np.less(sigmoid(x[index]),-018329.7430).all():
      return True
    else:
      return True
  def adf6(index):
    if np.less(x[index],-086831.6641).all():
      return False
    else:
      return True
  def adf7(index):
    if np.greater(sigmoid(x[index]),-764860.1304).all():
      return True
    else:
      return False
  def adf8(index):
    if np.equal(np.tanh(x[index]),-904660.8897).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-317.168, adf1(1)*+867.990, adf2(2)*+999.220, adf3(3)*-537.948, adf4(4)*-543.139, adf5(5)*+295.488, adf6(6)*+578.474, adf7(7)*+133.866, adf8(8)*-378.120], [0, 0, 0, 1, 1, 1, 1, 1], 599.127)
result=p(); 0.6666666666666666
IndLenGenome:417
IndGenome:[28, 31, 51, 93, 17, 93, 97, 13, 72, 85, 74, 46, 57, 9, 55, 10, 22, 53, 13, 20, 36, 36, 37, 66, 39, 2, 72, 17, 20, 85, 57, 57, 40, 94, 17, 89, 44, 64, 9, 80, 13, 80, 16, 53, 53, 42, 75, 78, 24, 40, 21, 61, 24, 69, 54, 47, 87, 98, 41, 26, 95, 29, 29, 75, 89, 7, 91, 75, 23, 44, 13, 86, 61, 99, 51, 61, 19, 70, 63, 79, 59, 13, 32, 47, 43, 28, 90, 49, 64, 47, 51, 67, 64, 81, 62, 68, 28, 50, 15, 60, 69, 32, 46, 93, 47, 71, 97, 96, 85, 38, 91, 44, 79, 71, 26, 27, 52, 15, 91, 41, 73, 86, 81, 56, 45, 18, 79, 38, 86, 27, 38, 99, 91, 36, 89, 6, 74, 57, 42, 65, 91, 47, 31, 52, 53, 18, 19, 89, 63, 49, 61, 28, 39, 91, 16, 9, 58, 54, 40, 24, 98, 57, 85, 99, 83, 93, 60, 40, 71, 38, 54, 64, 49, 53, 40, 45, 34, 22, 88, 56, 68, 47, 68, 86, 63, 73, 62, 86, 18, 66, 89, 38, 19, 84, 52, 49, 87, 43, 60, 16, 78, 22, 20, 17, 47, 51, 55, 37, 93, 39, 62, 18, 66, 86, 83, 51, 27, 13, 61, 30, 43, 12, 13, 41, 11, 46, 70, 67, 36, 25, 56, 80, 10, 84, 65, 29, 25, 31, 99, 92, 93, 99, 98, 26, 20, 79, 59, 91, 14, 74, 64, 41, 82, 23, 64, 58, 56, 21, 89, 85, 67, 75, 89, 79, 11, 83, 96, 89, 30, 74, 80, 40, 97, 37, 62, 98, 62, 38, 2, 22, 98, 80, 55, 16, 56, 1, 6, 18, 35, 36, 39, 83, 51, 86, 1, 20, 37, 79, 69, 83, 0, 0, 33, 84, 18, 56, 21, 1, 4, 49, 99, 32, 43, 35, 39, 90, 17, 24, 54, 74, 16, 31, 3, 42, 11, 6, 13, 37, 8, 94, 90, 65, 34, 84, 9, 27, 27, 43, 11, 49, 24, 99, 43, 21, 17, 19, 59, 73, 92, 36, 66, 15, 75, 37, 52, 45, 90, 53, 56, 80, 74, 60, 58, 98, 13, 60, 58, 68, 35, 81, 34, 56, 51, 1, 47, 95, 12, 64, 66, 14, 23, 33, 52, 95, 17, 58, 30, 25, 27, 64, 63, 54, 10, 13, 61, 82, 50, 15, 32, 57, 75, 31, 79, 73, 17, 43, 35, 38, 48, 10, 42, 13, 99, 69, 63, 68, 15]
last_save: 744

Gen:7
TrainFitness:0.7777777777777778
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],-867573.0958).all():
      if np.less(x[index],+754727.5757).all():
        return False
      else:
        return False
      return True
    else:
      if np.less(x[index],+207841.9456).all():
        return True
      else:
        return False
      return True
  def adf1(index):
    if np.greater(sigmoid(x[index]),+311939.5270).all():
      return True
    else:
      return False
  def adf2(index):
    if np.greater(rlog(x[index]),+719856.9723).all():
      return False
    else:
      return True
  def adf3(index):
    if np.less(np.cos(x[index]),-196260.9502).all():
      return True
    else:
      return True
  def adf4(index):
    if np.equal(x[index],-276126.2315).all():
      return False
    else:
      return False
  def adf5(index):
    if np.less(x[index],-654954.6752).all():
      return True
    else:
      return False
  def adf6(index):
    if np.equal(np.tanh(x[index]),-870583.0980).all():
      return False
    else:
      return True
  def adf7(index):
    if np.equal(x[index],+970562.7053).all():
      if np.less(x[index],-421344.0802).all():
        return True
      else:
        return False
      return True
    else:
      if np.greater(np.cos(x[index]),-773257.4763).all():
        return True
      else:
        return False
      return False
  def adf8(index):
    if np.less(x[index],+016008.9713).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+526.935, adf1(1)*-838.220, adf2(2)*-213.632, adf3(3)*+581.145, adf4(4)*-729.987, adf5(5)*-705.595, adf6(6)*-901.108, adf7(7)*-993.787, adf8(8)*+270.764], [0, 1, 1, 0, 1, 0, 1, 1], 378.905)
result=p(); 0.7777777777777778
IndLenGenome:477
IndGenome:[2, 21, 69, 64, 78, 18, 93, 85, 93, 77, 98, 66, 17, 95, 67, 63, 10, 29, 15, 28, 53, 67, 27, 51, 10, 24, 37, 65, 4, 7, 22, 57, 75, 67, 55, 7, 97, 45, 10, 39, 64, 27, 34, 68, 64, 52, 50, 27, 18, 34, 21, 39, 24, 95, 76, 62, 89, 96, 51, 71, 33, 48, 99, 66, 62, 96, 73, 1, 1, 99, 33, 39, 35, 92, 17, 40, 88, 1, 14, 91, 36, 54, 22, 43, 86, 64, 97, 81, 19, 28, 95, 86, 59, 97, 12, 53, 51, 96, 29, 87, 55, 94, 49, 38, 73, 11, 31, 39, 66, 2, 66, 50, 69, 35, 10, 22, 50, 32, 29, 77, 77, 59, 86, 17, 99, 92, 17, 66, 71, 22, 36, 12, 43, 71, 55, 15, 87, 56, 17, 70, 41, 81, 19, 89, 66, 25, 24, 19, 35, 44, 66, 87, 15, 62, 76, 61, 25, 55, 38, 90, 26, 12, 37, 94, 38, 97, 80, 85, 48, 43, 60, 79, 78, 70, 3, 78, 81, 6, 10, 89, 65, 17, 74, 66, 99, 27, 10, 55, 96, 62, 97, 30, 85, 3, 59, 34, 13, 46, 37, 48, 74, 82, 81, 33, 34, 94, 40, 28, 10, 52, 90, 45, 80, 13, 54, 20, 67, 72, 37, 91, 27, 57, 73, 12, 55, 87, 34, 97, 66, 33, 14, 89, 65, 66, 75, 91, 37, 36, 42, 11, 90, 91, 76, 60, 20, 98, 89, 7, 71, 43, 84, 69, 85, 92, 60, 92, 87, 75, 92, 36, 59, 53, 25, 58, 21, 73, 98, 13, 88, 62, 42, 50, 58, 27, 23, 22, 61, 23, 36, 33, 22, 30, 44, 69, 35, 18, 41, 81, 24, 45, 67, 21, 22, 77, 92, 39, 49, 38, 57, 64, 51, 87, 77, 100, 5, 5, 79, 95, 26, 13, 77, 59, 40, 81, 11, 50, 98, 67, 71, 22, 79, 99, 83, 77, 58, 47, 33, 70, 80, 72, 97, 80, 37, 16, 34, 30, 32, 77, 39, 20, 83, 58, 53, 9, 19, 23, 87, 68, 69, 40, 75, 20, 15, 46, 96, 52, 42, 42, 75, 68, 19, 43, 98, 45, 12, 54, 29, 78, 87, 89, 90, 93, 69, 87, 83, 69, 38, 84, 57, 93, 7, 40, 50, 87, 6, 52, 89, 19, 84, 0, 14, 56, 3, 95, 31, 50, 57, 85, 93, 10, 38, 69, 78, 18, 11, 82, 78, 57, 1, 16, 18, 19, 41, 93, 96, 79, 98, 99, 98, 0, 0, 62, 18, 58, 32, 29, 54, 89, 82, 25, 92, 52, 73, 56, 21, 15, 69, 90, 20, 89, 15, 91, 55, 70, 15, 35, 30, 20, 82, 0, 0, 67, 70, 11, 12, 64, 74, 96, 80, 60, 19, 62, 9, 64, 87, 93, 96, 99, 31, 35, 37, 77, 49, 82, 25, 6, 79]
last_save: 744

Gen:2007
last_save: 744
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.7777777777777778
TestFitness:0.8888888888888888
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(rlog(x[index]),+988888.0219).all():
      return False
    else:
      return True
  def adf1(index):
    if np.equal(np.cos(x[index]),-988241.2715).all():
      return True
    else:
      return False
  def adf2(index):
    if np.equal(np.cos(x[index]),+133804.2117).all():
      return False
    else:
      return False
  def adf3(index):
    if np.less(x[index],+027739.6794).all():
      return True
    else:
      return False
  def adf4(index):
    if np.greater(psqrt(x[index]),-500064.3663).all():
      return True
    else:
      return True
  def adf5(index):
    if np.less(rlog(x[index]),+386641.1911).all():
      return False
    else:
      return False
  def adf6(index):
    if np.equal(np.cos(x[index]),-082470.8022).all():
      return True
    else:
      return True
  def adf7(index):
    if np.greater(x[index],+865026.9976).all():
      return True
    else:
      return True
  def adf8(index):
    if np.equal(x[index],-235674.2518).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+903.057, adf1(1)*-312.698, adf2(2)*-858.998, adf3(3)*+868.619, adf4(4)*-037.577, adf5(5)*+849.482, adf6(6)*+988.564, adf7(7)*+166.838, adf8(8)*+566.190], [0, 1, 1, 0, 1, 0, 1, 0], 965.425)
result=p(); 0.7777777777777778
IndLenGenome:418
IndGenome:[90, 77, 61, 50, 35, 40, 56, 55, 88, 45, 51, 26, 72, 9, 87, 88, 16, 33, 48, 52, 7, 28, 73, 50, 72, 48, 35, 29, 50, 82, 50, 61, 59, 23, 64, 8, 82, 49, 36, 36, 21, 91, 38, 70, 19, 20, 57, 38, 15, 55, 39, 61, 40, 5, 22, 77, 23, 37, 27, 83, 81, 57, 92, 96, 54, 66, 28, 84, 35, 65, 94, 63, 91, 35, 96, 86, 38, 78, 24, 96, 62, 46, 99, 47, 8, 30, 38, 88, 41, 38, 87, 21, 74, 47, 57, 88, 84, 56, 19, 67, 16, 46, 29, 58, 48, 18, 98, 82, 42, 23, 72, 66, 79, 79, 38, 45, 35, 101, 73, 30, 99, 60, 69, 95, 36, 93, 65, 15, 63, 44, 31, 58, 3, 78, 94, 77, 85, 57, 28, 59, 80, 41, 22, 63, 90, 49, 14, 88, 63, 96, 93, 81, 13, 78, 45, 77, 45, 78, 94, 27, 38, 95, 34, 65, 37, 82, 7, 85, 29, 86, 39, 42, 93, 63, 55, 49, 61, 19, 17, 87, 50, 49, 77, 20, 43, 86, 33, 48, 29, 24, 65, 99, 96, 86, 70, 22, 86, 46, 92, 82, 80, 48, 26, 14, 80, 96, 58, 77, 64, 90, 27, 61, 41, 22, 28, 28, 19, 79, 45, 94, 8, 23, 66, 51, 60, 30, 98, 96, 46, 34, 38, 36, 92, 18, 70, 43, 55, 18, 33, 68, 21, 51, 48, 11, 43, 94, 79, 12, 18, 90, 85, 97, 24, 29, 21, 82, 18, 61, 82, 15, 74, 64, 12, 37, 91, 90, 18, 27, 22, 79, 21, 96, 88, 70, 20, 73, 72, 11, 56, 55, 29, 12, 80, 80, 44, 33, 11, 18, 89, 79, 38, 34, 36, 59, 90, 47, 53, 90, 0, 51, 29, 65, 90, 31, 0, 17, 24, 84, 8, 70, 53, 82, 17, 72, 57, 65, 59, 82, 24, 50, 45, 65, 21, 74, 58, 60, 44, 94, 78, 92, 79, 36, 38, 43, 44, 92, 8, 67, 5, 77, 45, 50, 99, 76, 72, 0, 52, 74, 81, 98, 21, 60, 9, 57, 10, 45, 1, 50, 33, 38, 43, 65, 48, 39, 82, 42, 92, 43, 57, 5, 19, 15, 66, 44, 78, 98, 84, 9, 7, 49, 94, 86, 22, 7, 21, 66, 58, 85, 87, 76, 60, 36, 73, 12, 0, 26, 69, 5, 87, 36, 27, 70, 90, 77, 6, 73, 32, 18, 63, 65, 59, 5, 50, 18, 36, 25, 72, 54]
last_save: 745

Gen:2001
last_save: 745
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:1.0
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],+901000.4578).all():
      return True
    else:
      return False
  def adf1(index):
    if np.greater(x[index],-734511.7389).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(np.sin(x[index]),-511739.4332).all():
      return False
    else:
      return True
  def adf3(index):
    if np.greater(x[index],-691809.2565).all():
      return True
    else:
      return False
  def adf4(index):
    if np.greater(x[index],+965072.3397).all():
      return True
    else:
      return True
  def adf5(index):
    if np.less(psqrt(x[index]),-461704.1467).all():
      return False
    else:
      return True
  def adf6(index):
    if np.equal(x[index],-246768.2011).all():
      return True
    else:
      return False
  def adf7(index):
    if np.less(x[index],+664121.8591).all():
      return False
    else:
      return False
  def adf8(index):
    if np.equal(np.sin(x[index]),+306557.9035).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+018.286, adf1(1)*-773.015, adf2(2)*+517.141, adf3(3)*+037.438, adf4(4)*-205.841, adf5(5)*+587.986, adf6(6)*+226.752, adf7(7)*-660.304, adf8(8)*-309.335], [0, 1, 0, 1, 1, 1, 0, 1], 039.653)
result=p(); 0.6666666666666666
IndLenGenome:414
IndGenome:[91, 41, 10, 48, 79, 87, 9, 60, 37, 47, 41, 91, 55, 32, 11, 27, 95, 54, 9, 51, 15, 30, 17, 55, 91, 7, 20, 21, 55, 35, 73, 9, 7, 36, 20, 77, 27, 83, 30, 7, 71, 55, 46, 50, 94, 48, 43, 89, 92, 75, 21, 67, 14, 85, 31, 18, 84, 27, 28, 13, 50, 94, 53, 14, 92, 69, 5, 91, 31, 29, 88, 55, 33, 55, 74, 56, 50, 2, 49, 89, 69, 83, 92, 25, 80, 97, 93, 57, 42, 50, 60, 49, 58, 56, 17, 62, 72, 49, 89, 18, 36, 50, 35, 27, 77, 26, 45, 92, 75, 44, 75, 95, 76, 46, 88, 60, 84, 37, 69, 53, 51, 19, 83, 35, 13, 91, 47, 96, 31, 74, 99, 50, 91, 60, 50, 58, 54, 30, 66, 66, 43, 52, 22, 98, 37, 71, 77, 80, 82, 55, 90, 22, 96, 98, 98, 39, 67, 66, 69, 40, 83, 67, 14, 36, 95, 40, 65, 80, 27, 23, 93, 75, 6, 26, 83, 31, 36, 41, 16, 75, 40, 92, 30, 51, 74, 29, 25, 55, 17, 36, 70, 10, 56, 59, 95, 31, 93, 39, 47, 8, 19, 87, 19, 73, 34, 70, 79, 62, 67, 38, 11, 83, 49, 67, 91, 93, 81, 20, 72, 51, 15, 32, 47, 40, 57, 98, 97, 79, 11, 87, 75, 20, 97, 51, 70, 55, 70, 40, 78, 40, 89, 15, 23, 13, 78, 83, 53, 84, 43, 53, 75, 33, 23, 56, 79, 81, 29, 29, 54, 98, 34, 24, 11, 66, 40, 16, 25, 72, 96, 44, 31, 21, 66, 99, 21, 38, 16, 28, 17, 23, 8, 20, 72, 74, 20, 61, 5, 15, 70, 71, 2, 99, 35, 24, 91, 97, 55, 24, 41, 89, 47, 94, 97, 66, 35, 84, 64, 59, 26, 66, 5, 27, 99, 85, 71, 2, 22, 11, 23, 53, 35, 34, 58, 82, 22, 32, 86, 50, 31, 47, 88, 25, 28, 36, 71, 42, 10, 88, 9, 44, 69, 78, 86, 54, 30, 4, 3, 59, 92, 56, 63, 19, 54, 8, 62, 32, 15, 99, 17, 38, 45, 91, 93, 31, 53, 20, 2, 1, 40, 4, 52, 95, 99, 53, 96, 37, 63, 11, 22, 91, 8, 23, 86, 63, 70, 83, 23, 19, 3, 94, 88, 66, 75, 65, 68, 18, 15, 54, 72, 65, 7, 8, 66, 71, 55, 38, 9, 48, 46, 83, 38, 57, 37, 58]
last_save: 746

Gen:8
TrainFitness:0.7777777777777778
TestFitness:0.8888888888888888
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],+856451.6681).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(x[index],+949988.6483).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(sigmoid(x[index]),-853910.4239).all():
      return False
    else:
      return True
  def adf3(index):
    if np.greater(x[index],+476097.0992).all():
      return True
    else:
      return False
  def adf4(index):
    if np.equal(np.sin(x[index]),-075793.0968).all():
      if np.greater(x[index],+032443.9206).all():
        return False
      else:
        return False
      return False
    else:
      if np.less(x[index],-791945.5648).all():
        return True
      else:
        return True
      return True
  def adf5(index):
    if np.greater(np.cos(x[index]),+233642.8877).all():
      return False
    else:
      return True
  def adf6(index):
    if np.less(sigmoid(x[index]),-799746.1496).all():
      return True
    else:
      return True
  def adf7(index):
    if np.greater(x[index],+578235.4754).all():
      if np.equal(psqrt(x[index]),-717300.3954).all():
        return True
      else:
        return True
      return False
    else:
      if np.greater(x[index],+020363.4380).all():
        if np.less(x[index],-509919.3006).all():
          if np.less(psqrt(x[index]),-777834.0139).all():
            return True
          else:
            return True
          return False
        else:
          if np.equal(psqrt(x[index]),-335987.1064).all():
            return False
          else:
            return False
          return True
        return True
      else:
        if np.greater(np.cos(x[index]),-020363.4384).all():
          return True
        else:
          return True
        return True
      return False
  def adf8(index):
    if np.greater(x[index],-193006.5947).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-340.139, adf1(1)*+552.302, adf2(2)*-588.710, adf3(3)*+008.968, adf4(4)*+668.117, adf5(5)*+095.282, adf6(6)*-824.624, adf7(7)*-989.771, adf8(8)*+120.807], [1, 0, 1, 0, 0, 0, 0, 0], 049.557)
result=p(); 0.7777777777777778
IndLenGenome:478
IndGenome:[3, 46, 92, 7, 95, 39, 53, 2, 51, 68, 15, 16, 24, 55, 71, 46, 16, 98, 81, 55, 55, 75, 55, 73, 71, 31, 10, 73, 29, 4, 9, 89, 58, 48, 66, 4, 18, 3, 65, 5, 17, 63, 93, 32, 87, 59, 55, 23, 58, 25, 13, 99, 51, 80, 84, 92, 63, 9, 45, 88, 89, 47, 18, 61, 92, 50, 51, 94, 97, 76, 40, 79, 77, 40, 59, 49, 42, 78, 95, 87, 16, 10, 11, 52, 48, 10, 71, 16, 70, 77, 45, 7, 39, 3, 50, 19, 86, 98, 95, 87, 89, 47, 36, 66, 0, 23, 12, 14, 44, 33, 59, 82, 40, 36, 71, 77, 85, 65, 79, 27, 10, 67, 66, 87, 49, 101, 59, 74, 85, 95, 36, 54, 58, 14, 20, 54, 77, 19, 60, 64, 43, 66, 92, 88, 22, 83, 63, 46, 14, 92, 88, 18, 87, 97, 45, 10, 82, 99, 31, 56, 81, 37, 41, 34, 47, 79, 69, 37, 94, 66, 91, 94, 49, 66, 44, 22, 56, 8, 64, 12, 11, 24, 92, 50, 35, 57, 78, 32, 23, 95, 24, 47, 25, 94, 39, 11, 64, 83, 44, 47, 94, 77, 71, 37, 93, 20, 30, 13, 29, 65, 94, 62, 40, 65, 80, 20, 63, 61, 11, 40, 67, 90, 82, 60, 23, 76, 73, 24, 93, 88, 80, 48, 88, 46, 49, 67, 93, 54, 85, 40, 79, 79, 41, 89, 83, 60, 90, 66, 75, 79, 24, 47, 28, 95, 24, 37, 77, 57, 88, 33, 24, 20, 11, 53, 99, 40, 28, 59, 55, 95, 2, 53, 70, 95, 23, 53, 53, 75, 59, 18, 87, 61, 70, 56, 74, 55, 33, 100, 48, 49, 66, 8, 31, 76, 13, 16, 90, 82, 60, 23, 76, 73, 24, 93, 88, 24, 48, 88, 46, 49, 67, 93, 54, 85, 40, 79, 79, 41, 89, 83, 60, 90, 66, 75, 79, 24, 47, 28, 95, 24, 37, 77, 57, 88, 33, 24, 20, 11, 53, 99, 40, 28, 59, 55, 95, 2, 53, 70, 42, 23, 53, 53, 75, 58, 18, 87, 61, 70, 56, 74, 55, 50, 100, 48, 49, 66, 8, 31, 76, 13, 16, 56, 48, 51, 41, 87, 80, 68, 36, 0, 39, 65, 42, 98, 32, 47, 63, 37, 8, 12, 44, 86, 2, 94, 68, 77, 50, 9, 18, 59, 87, 37, 61, 86, 34, 70, 41, 82, 90, 58, 70, 77, 9, 93, 88, 1, 26, 76, 16, 50, 18, 34, 100, 44, 9, 5, 15, 57, 60, 55, 46, 66, 42, 31, 98, 7, 88, 98, 25, 2, 39, 21, 11, 3, 24, 32, 64, 76, 61, 78, 94, 31, 2, 92, 22, 96, 65, 56, 46, 25, 99, 18, 10, 44, 100, 88, 54, 28, 43, 15, 35, 76, 59, 29, 99, 64, 32, 34]
last_save: 746

Gen:2008
last_save: 746
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.7777777777777778
TestFitness:0.7777777777777778
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(sigmoid(x[index]),+018891.3909).all():
      return True
    else:
      return False
  def adf1(index):
    if np.equal(x[index],-975051.7551).all():
      return False
    else:
      return True
  def adf2(index):
    if np.greater(sigmoid(x[index]),-965977.5131).all():
      return False
    else:
      return True
  def adf3(index):
    if np.greater(x[index],+029738.7083).all():
      return False
    else:
      return True
  def adf4(index):
    if np.equal(np.sin(x[index]),+968526.3742).all():
      return True
    else:
      return True
  def adf5(index):
    if np.less(x[index],-046888.6665).all():
      return True
    else:
      return False
  def adf6(index):
    if np.greater(sigmoid(x[index]),+722892.3317).all():
      return True
    else:
      return True
  def adf7(index):
    if np.greater(x[index],-753318.7227).all():
      return False
    else:
      return False
  def adf8(index):
    if np.greater(x[index],-779232.6684).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+532.040, adf1(1)*+756.362, adf2(2)*-689.754, adf3(3)*-384.341, adf4(4)*-613.102, adf5(5)*+163.496, adf6(6)*-029.812, adf7(7)*-779.509, adf8(8)*-763.182], [1, 1, 0, 0, 1, 0, 1, 1], 685.334)
result=p(); 0.7777777777777778
IndLenGenome:415
IndGenome:[32, 69, 27, 24, 75, 89, 60, 73, 17, 74, 4, 81, 3, 98, 51, 94, 10, 64, 33, 51, 91, 63, 88, 75, 62, 34, 86, 37, 86, 38, 89, 19, 72, 75, 33, 47, 81, 9, 34, 52, 71, 62, 40, 21, 96, 8, 92, 37, 44, 72, 89, 73, 40, 58, 21, 81, 49, 63, 4, 52, 49, 80, 96, 98, 37, 31, 12, 49, 1, 59, 78, 61, 11, 26, 23, 59, 10, 84, 92, 33, 20, 16, 15, 26, 59, 61, 29, 43, 69, 75, 8, 8, 75, 4, 21, 61, 34, 73, 18, 92, 41, 43, 7, 23, 22, 12, 63, 32, 27, 81, 33, 13, 22, 71, 90, 19, 75, 27, 16, 56, 63, 85, 77, 38, 31, 22, 93, 15, 57, 13, 91, 97, 30, 78, 31, 52, 89, 12, 74, 64, 18, 71, 49, 53, 35, 12, 18, 13, 32, 72, 70, 86, 80, 10, 16, 76, 68, 96, 48, 27, 23, 23, 67, 70, 81, 14, 12, 48, 15, 68, 15, 18, 80, 50, 96, 21, 97, 37, 43, 88, 56, 97, 63, 13, 78, 82, 44, 71, 27, 62, 58, 17, 97, 23, 19, 15, 65, 6, 95, 74, 89, 83, 10, 71, 32, 33, 67, 55, 58, 60, 43, 11, 26, 16, 67, 22, 37, 28, 87, 35, 45, 27, 7, 57, 58, 19, 19, 88, 92, 45, 90, 35, 21, 95, 32, 1, 97, 63, 61, 73, 60, 89, 68, 31, 22, 96, 69, 55, 89, 78, 51, 86, 41, 20, 96, 15, 46, 39, 73, 62, 69, 31, 17, 45, 31, 32, 83, 96, 33, 66, 36, 69, 64, 89, 59, 92, 49, 28, 7, 38, 36, 62, 20, 4, 40, 13, 92, 49, 78, 93, 35, 25, 98, 50, 71, 68, 15, 79, 87, 28, 34, 42, 67, 4, 5, 83, 49, 51, 58, 72, 44, 62, 7, 71, 0, 18, 16, 74, 47, 53, 79, 98, 19, 25, 20, 94, 92, 94, 23, 96, 78, 95, 24, 59, 47, 54, 29, 37, 37, 69, 97, 53, 43, 24, 69, 29, 45, 35, 43, 15, 39, 63, 89, 27, 77, 1, 81, 64, 14, 31, 91, 7, 68, 64, 15, 19, 17, 61, 73, 41, 36, 90, 57, 73, 39, 44, 49, 5, 90, 56, 15, 28, 42, 27, 83, 27, 93, 74, 81, 81, 62, 59, 50, 75, 48, 36, 78, 86, 13, 99, 79, 30, 60, 70, 64, 6, 35, 44, 5, 95, 0, 70, 63, 73, 94]
last_save: 747

Gen:2001
last_save: 747
Exit:FalseFalseTrue