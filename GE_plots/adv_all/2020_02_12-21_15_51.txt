Dataset:Spiral/Full.csv
FS:False
Seed:1238
Size:7

Gen:1
TrainFitness:0.5555555555555556
TestFitness:0.5555555555555556
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],-867025.9168).all():
      return False
    else:
      return True
  def adf1(index):
    if np.equal(psqrt(x[index]),+178584.1112).all():
      return True
    else:
      return False
  def adf2(index):
    if np.greater(x[index],+405848.6985).all():
      return True
    else:
      return True
  def adf3(index):
    if np.equal(sigmoid(x[index]),-183864.5134).all():
      return True
    else:
      return True
  def adf4(index):
    if np.greater(x[index],-082111.7761).all():
      return True
    else:
      return True
  def adf5(index):
    if np.greater(x[index],+161307.9859).all():
      return True
    else:
      return False
  def adf6(index):
    if np.less(np.cos(x[index]),+339697.8720).all():
      return True
    else:
      return True
  def adf7(index):
    if np.equal(sigmoid(x[index]),+170656.1258).all():
      return True
    else:
      return True
  def adf8(index):
    if np.equal(rlog(x[index]),+712610.1527).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*-655.674, adf1(1)*-583.429, adf2(2)*-277.927, adf3(3)*+279.578, adf4(4)*+284.457, adf5(5)*-657.284, adf6(6)*-135.258, adf7(7)*+392.884, adf8(8)*+287.765], [1, 0, 1, 0, 0, 1, 0, 0], 393.313)
result=p(); 0.5555555555555556
IndLenGenome:417
IndGenome:[39, 47, 10, 56, 8, 82, 75, 45, 19, 68, 87, 67, 52, 61, 96, 89, 75, 51, 93, 85, 60, 16, 83, 24, 27, 45, 54, 65, 59, 80, 53, 90, 57, 47, 17, 95, 89, 79, 47, 52, 12, 79, 64, 62, 78, 7, 39, 56, 86, 10, 4, 53, 87, 8, 24, 60, 76, 70, 68, 92, 59, 16, 99, 19, 27, 83, 56, 54, 82, 14, 63, 18, 91, 67, 65, 31, 77, 30, 21, 53, 83, 39, 10, 4, 81, 41, 85, 55, 33, 35, 12, 33, 63, 11, 86, 86, 31, 87, 88, 12, 38, 31, 52, 54, 54, 88, 90, 45, 29, 95, 14, 51, 41, 36, 57, 61, 3, 20, 75, 64, 89, 46, 30, 39, 26, 53, 99, 21, 46, 88, 78, 46, 23, 89, 15, 51, 24, 10, 73, 66, 59, 58, 93, 76, 69, 94, 14, 16, 6, 66, 78, 40, 20, 68, 28, 58, 96, 75, 64, 59, 78, 28, 57, 57, 40, 40, 64, 27, 73, 7, 58, 58, 94, 12, 85, 16, 41, 2, 12, 39, 13, 44, 20, 72, 68, 36, 96, 55, 65, 67, 11, 67, 22, 75, 23, 95, 44, 42, 84, 71, 78, 17, 35, 78, 10, 90, 86, 72, 59, 28, 92, 34, 99, 95, 98, 41, 94, 12, 38, 37, 29, 31, 97, 31, 80, 92, 64, 58, 25, 38, 23, 22, 57, 12, 27, 23, 27, 51, 72, 75, 77, 11, 37, 46, 41, 27, 71, 49, 95, 25, 46, 55, 46, 63, 97, 82, 55, 96, 46, 97, 75, 15, 29, 88, 33, 47, 69, 14, 59, 17, 53, 88, 60, 62, 77, 80, 86, 29, 36, 74, 74, 6, 12, 85, 33, 58, 3, 30, 1, 44, 61, 54, 96, 47, 23, 50, 60, 85, 26, 66, 56, 54, 67, 90, 37, 87, 52, 0, 9, 72, 11, 52, 35, 85, 30, 76, 26, 32, 6, 37, 98, 26, 94, 29, 9, 72, 75, 67, 4, 75, 96, 52, 91, 99, 70, 75, 100, 85, 28, 42, 18, 3, 5, 23, 55, 1, 5, 50, 28, 79, 17, 64, 73, 22, 57, 53, 42, 70, 96, 31, 33, 99, 71, 10, 42, 33, 91, 61, 3, 14, 27, 46, 80, 10, 61, 10, 66, 32, 44, 90, 53, 71, 49, 99, 72, 5, 0, 36, 64, 63, 63, 85, 63, 15, 47, 13, 37, 23, 9, 13, 30, 95, 39, 30, 11, 97, 30, 64, 9, 69, 90, 16, 59, 1, 44, 36, 59]
last_save: 744

Gen:3
TrainFitness:0.6666666666666666
TestFitness:0.4444444444444444
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],+019576.5323).all():
      return False
    else:
      return True
  def adf1(index):
    if np.greater(x[index],-794948.4061).all():
      return False
    else:
      return True
  def adf2(index):
    if np.less(x[index],-253231.8215).all():
      if np.less(x[index],+006650.1400).all():
        return False
      else:
        return False
      return False
    else:
      if np.equal(x[index],+824050.3938).all():
        return True
      else:
        return True
      return False
  def adf3(index):
    if np.equal(x[index],+282634.2297).all():
      return True
    else:
      return False
  def adf4(index):
    if np.equal(rlog(x[index]),+063761.9219).all():
      return True
    else:
      return False
  def adf5(index):
    if np.less(psqrt(x[index]),+726937.9170).all():
      return True
    else:
      return False
  def adf6(index):
    if np.greater(psqrt(x[index]),+395065.1521).all():
      if np.equal(np.cos(x[index]),+359961.9496).all():
        return False
      else:
        return False
      return True
    else:
      if np.less(np.tanh(x[index]),-769723.7278).all():
        return True
      else:
        return False
      return False
  def adf7(index):
    if np.greater(np.sin(x[index]),-697382.2115).all():
      return False
    else:
      return False
  def adf8(index):
    if np.greater(x[index],-444543.7541).all():
      if np.equal(psqrt(x[index]),-147101.2984).all():
        return False
      else:
        return False
      return False
    else:
      if np.greater(x[index],-780458.8246).all():
        return False
      else:
        return False
      return False
  return multiple_operation([adf0(0)*+230.694, adf1(1)*-686.162, adf2(2)*-594.815, adf3(3)*-675.026, adf4(4)*-956.985, adf5(5)*-590.912, adf6(6)*-718.355, adf7(7)*-526.540, adf8(8)*+971.640], [0, 1, 0, 1, 0, 1, 0, 0], 192.270)
result=p(); 0.6666666666666666
IndLenGenome:495
IndGenome:[34, 57, 22, 35, 13, 67, 48, 36, 57, 50, 41, 39, 65, 27, 96, 85, 93, 22, 43, 7, 14, 9, 67, 33, 59, 64, 53, 34, 67, 69, 84, 39, 14, 18, 34, 70, 26, 91, 37, 68, 16, 52, 77, 64, 43, 82, 77, 40, 12, 95, 83, 72, 73, 71, 8, 72, 21, 35, 55, 34, 5, 60, 76, 76, 50, 10, 66, 76, 95, 80, 71, 34, 30, 70, 23, 13, 65, 89, 86, 67, 70, 28, 84, 38, 42, 44, 50, 55, 30, 83, 39, 53, 68, 26, 52, 41, 20, 93, 83, 63, 94, 66, 48, 32, 28, 2, 96, 73, 74, 32, 92, 79, 7, 84, 67, 74, 5, 83, 54, 28, 82, 20, 69, 60, 86, 73, 17, 86, 31, 89, 12, 61, 9, 66, 29, 26, 85, 55, 72, 77, 37, 28, 61, 67, 12, 96, 19, 43, 97, 69, 51, 87, 40, 78, 81, 82, 72, 8, 90, 72, 17, 20, 32, 87, 13, 39, 95, 40, 66, 35, 31, 65, 12, 1, 41, 11, 80, 13, 72, 66, 93, 53, 45, 49, 59, 36, 81, 59, 14, 49, 16, 17, 69, 98, 91, 91, 78, 20, 79, 71, 47, 17, 76, 59, 7, 32, 93, 57, 32, 77, 48, 8, 25, 85, 33, 87, 81, 2, 42, 63, 9, 3, 36, 59, 7, 53, 88, 22, 52, 81, 91, 45, 11, 47, 14, 86, 2, 78, 47, 52, 65, 71, 44, 14, 94, 25, 14, 43, 87, 65, 44, 71, 85, 17, 84, 77, 31, 89, 79, 21, 14, 37, 81, 60, 51, 12, 59, 28, 24, 49, 11, 87, 9, 54, 97, 18, 27, 85, 7, 18, 60, 54, 15, 78, 38, 42, 34, 36, 3, 75, 67, 16, 79, 69, 88, 99, 62, 73, 90, 16, 79, 54, 43, 47, 82, 76, 58, 66, 11, 36, 52, 89, 25, 76, 85, 29, 64, 18, 41, 95, 14, 79, 50, 86, 97, 85, 70, 32, 96, 77, 85, 59, 99, 95, 76, 69, 28, 25, 30, 51, 15, 45, 89, 60, 39, 71, 82, 46, 77, 89, 17, 81, 18, 63, 35, 35, 34, 29, 6, 5, 82, 56, 95, 54, 90, 99, 96, 75, 29, 37, 51, 26, 34, 100, 90, 64, 25, 64, 37, 66, 13, 58, 32, 53, 41, 69, 42, 2, 17, 50, 89, 95, 56, 19, 86, 22, 38, 98, 77, 34, 11, 71, 58, 64, 7, 75, 26, 31, 49, 50, 76, 80, 89, 39, 59, 100, 23, 11, 71, 11, 87, 36, 38, 96, 2, 67, 94, 31, 71, 78, 23, 17, 79, 1, 14, 40, 92, 72, 39, 43, 34, 88, 94, 98, 64, 86, 100, 77, 5, 84, 36, 29, 44, 38, 58, 69, 69, 2, 81, 99, 33, 1, 86, 67, 74, 44, 15, 64, 19, 9, 31, 89, 46, 30, 63, 68, 50, 21, 89, 46, 92, 9, 26, 17, 76, 2, 34, 97, 0, 92, 42, 38, 97, 17, 95]
last_save: 744

Gen:88
TrainFitness:0.7777777777777778
TestFitness:0.3333333333333333
MaxGenLen:515
Individual: def p():
  def adf0(index):
    if np.less(x[index],+019536.5123).all():
      return False
    else:
      return True
  def adf1(index):
    if np.greater(x[index],-794948.1061).all():
      return False
    else:
      return True
  def adf2(index):
    if np.greater(x[index],-253231.6215).all():
      if np.less(x[index],+006607.8800).all():
        return True
      else:
        return False
      return False
    else:
      if np.equal(x[index],+822050.3938).all():
        return True
      else:
        return True
      return False
  def adf3(index):
    if np.equal(x[index],+982634.2292).all():
      return True
    else:
      return False
  def adf4(index):
    if np.less(x[index],-739958.6019).all():
      return False
    else:
      return True
  def adf5(index):
    if np.equal(psqrt(x[index]),-516638.9885).all():
      return False
    else:
      return False
  def adf6(index):
    if np.greater(psqrt(x[index]),+593660.6040).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(x[index],-522529.4263).all():
      return False
    else:
      return False
  def adf8(index):
    if np.equal(sigmoid(x[index]),+208070.1117).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+925.888, adf1(1)*-423.384, adf2(2)*+014.164, adf3(3)*-839.526, adf4(4)*+060.701, adf5(5)*-579.066, adf6(6)*-538.346, adf7(7)*-974.679, adf8(8)*-138.977], [0, 0, 0, 1, 0, 1, 0, 0], 053.852)
result=p(); 0.7777777777777778
IndLenGenome:461
IndGenome:[79, 57, 22, 35, 97, 67, 81, 36, 57, 50, 41, 39, 65, 73, 96, 85, 31, 22, 43, 7, 14, 9, 67, 33, 59, 64, 53, 22, 67, 69, 84, 39, 14, 18, 71, 70, 26, 91, 37, 68, 51, 52, 77, 45, 43, 67, 77, 40, 12, 95, 83, 72, 73, 71, 46, 72, 21, 35, 55, 34, 5, 75, 76, 76, 20, 10, 66, 76, 50, 17, 48, 18, 30, 70, 32, 13, 65, 89, 86, 67, 70, 4, 84, 38, 42, 72, 50, 55, 30, 83, 39, 53, 68, 26, 52, 41, 20, 93, 83, 27, 94, 66, 60, 29, 28, 2, 96, 73, 74, 32, 92, 79, 32, 84, 67, 49, 27, 7, 11, 48, 39, 98, 17, 53, 59, 59, 15, 88, 86, 50, 21, 9, 79, 14, 50, 89, 56, 46, 29, 73, 51, 64, 65, 1, 66, 96, 73, 38, 89, 68, 8, 65, 95, 71, 73, 79, 51, 82, 59, 24, 16, 31, 55, 59, 43, 86, 96, 40, 96, 100, 64, 10, 28, 71, 21, 43, 54, 93, 77, 11, 57, 15, 2, 72, 55, 52, 59, 94, 52, 66, 63, 39, 93, 94, 63, 83, 54, 57, 16, 40, 80, 62, 40, 88, 30, 17, 20, 91, 81, 71, 77, 55, 27, 9, 30, 46, 100, 24, 69, 72, 85, 8, 58, 88, 85, 69, 13, 14, 62, 43, 53, 88, 74, 69, 76, 53, 30, 51, 34, 11, 96, 24, 69, 75, 85, 8, 73, 59, 45, 52, 66, 63, 4, 93, 40, 46, 30, 17, 20, 91, 81, 65, 77, 55, 27, 9, 30, 46, 96, 24, 69, 72, 85, 83, 58, 23, 74, 86, 77, 99, 93, 79, 87, 74, 86, 77, 99, 93, 79, 45, 71, 63, 48, 59, 87, 47, 10, 62, 100, 82, 63, 18, 5, 90, 98, 47, 80, 65, 73, 28, 35, 82, 90, 78, 61, 63, 2, 46, 61, 21, 84, 93, 97, 24, 19, 82, 72, 11, 2, 65, 11, 76, 98, 72, 54, 42, 96, 93, 57, 65, 74, 54, 69, 42, 93, 87, 70, 13, 71, 60, 25, 90, 62, 73, 97, 31, 99, 25, 93, 41, 21, 95, 53, 79, 4, 68, 11, 71, 58, 64, 7, 75, 26, 31, 49, 50, 76, 34, 89, 39, 59, 100, 23, 11, 71, 11, 87, 36, 38, 96, 2, 67, 94, 31, 71, 78, 23, 17, 79, 1, 14, 40, 92, 72, 39, 43, 34, 88, 94, 98, 64, 86, 100, 77, 5, 84, 36, 29, 44, 38, 58, 69, 69, 2, 81, 99, 33, 1, 86, 67, 74, 44, 15, 64, 19, 9, 31, 89, 46, 30, 63, 68, 50, 21, 89, 46, 92, 9, 26, 17, 76, 2, 34, 97, 0, 92, 42, 38, 97, 17, 95]
last_save: 744

Gen:2088
last_save: 744
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.5555555555555556
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],+260242.8179).all():
      return False
    else:
      return True
  def adf1(index):
    if np.less(x[index],+406143.9025).all():
      return False
    else:
      return True
  def adf2(index):
    if np.equal(x[index],-003896.1640).all():
      return False
    else:
      return True
  def adf3(index):
    if np.greater(x[index],-680549.4070).all():
      return True
    else:
      return False
  def adf4(index):
    if np.equal(psqrt(x[index]),+956240.2315).all():
      return False
    else:
      return False
  def adf5(index):
    if np.greater(sigmoid(x[index]),+502786.0752).all():
      return True
    else:
      return True
  def adf6(index):
    if np.equal(np.sin(x[index]),+165099.2763).all():
      return False
    else:
      return True
  def adf7(index):
    if np.equal(np.sin(x[index]),-574116.8915).all():
      return False
    else:
      return False
  def adf8(index):
    if np.less(x[index],-370839.6212).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*-732.759, adf1(1)*+314.415, adf2(2)*+650.823, adf3(3)*-598.360, adf4(4)*-033.109, adf5(5)*+679.444, adf6(6)*-584.999, adf7(7)*+305.839, adf8(8)*+432.476], [1, 1, 0, 0, 0, 0, 1, 1], 761.854)
result=p(); 0.5555555555555556
IndLenGenome:415
IndGenome:[73, 38, 26, 75, 26, 63, 51, 18, 52, 67, 74, 67, 33, 37, 38, 58, 88, 17, 76, 37, 71, 82, 65, 43, 62, 48, 39, 13, 29, 99, 14, 58, 90, 95, 69, 93, 40, 28, 41, 38, 61, 77, 16, 87, 43, 87, 81, 29, 67, 50, 79, 30, 10, 84, 8, 74, 73, 33, 32, 37, 54, 79, 21, 54, 63, 16, 10, 27, 75, 93, 20, 71, 35, 52, 28, 71, 58, 38, 59, 65, 78, 13, 22, 17, 88, 87, 26, 11, 36, 73, 32, 92, 31, 26, 45, 74, 59, 22, 59, 57, 31, 69, 45, 56, 84, 29, 57, 24, 73, 2, 36, 27, 15, 82, 50, 79, 56, 44, 40, 40, 2, 72, 99, 2, 79, 84, 30, 65, 89, 58, 18, 5, 52, 59, 80, 77, 72, 57, 80, 58, 4, 39, 47, 54, 89, 13, 58, 55, 96, 10, 95, 84, 69, 58, 90, 89, 39, 20, 34, 33, 48, 28, 95, 46, 89, 73, 53, 36, 22, 72, 82, 59, 40, 55, 25, 14, 71, 69, 42, 5, 20, 45, 12, 24, 91, 16, 28, 23, 43, 80, 58, 21, 74, 52, 52, 68, 96, 98, 15, 76, 44, 66, 58, 53, 57, 93, 59, 92, 33, 90, 65, 34, 30, 10, 78, 63, 37, 10, 94, 23, 14, 86, 72, 19, 87, 43, 13, 17, 65, 51, 39, 72, 30, 41, 46, 45, 71, 26, 18, 60, 56, 61, 24, 59, 70, 80, 31, 50, 61, 65, 82, 21, 29, 27, 19, 60, 46, 15, 30, 10, 92, 79, 74, 35, 26, 17, 32, 60, 92, 28, 93, 21, 77, 56, 65, 44, 41, 85, 56, 10, 68, 50, 43, 16, 11, 66, 23, 71, 41, 0, 28, 2, 70, 3, 37, 59, 56, 90, 75, 40, 80, 64, 10, 95, 74, 89, 19, 94, 100, 34, 2, 100, 73, 5, 6, 78, 80, 55, 67, 3, 66, 55, 49, 82, 23, 48, 25, 63, 42, 82, 33, 33, 82, 21, 19, 76, 8, 61, 64, 21, 29, 80, 3, 8, 22, 41, 100, 100, 83, 38, 26, 66, 29, 58, 89, 54, 64, 89, 1, 47, 43, 24, 1, 45, 38, 22, 57, 82, 0, 33, 49, 10, 36, 17, 26, 47, 65, 45, 8, 61, 98, 92, 86, 44, 26, 37, 64, 4, 27, 99, 14, 2, 20, 33, 29, 38, 18, 33, 43, 75, 67, 76, 50, 51, 37, 84, 59, 81, 41, 22, 10, 94, 27, 80, 15]
last_save: 745

Gen:13
TrainFitness:0.6666666666666666
TestFitness:0.5555555555555556
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],+131056.4393).all():
      return True
    else:
      return True
  def adf1(index):
    if np.greater(x[index],-039388.7195).all():
      return True
    else:
      return True
  def adf2(index):
    if np.equal(x[index],+777974.3782).all():
      return False
    else:
      return False
  def adf3(index):
    if np.greater(x[index],+532612.6404).all():
      return True
    else:
      return True
  def adf4(index):
    if np.less(sigmoid(x[index]),+377294.9934).all():
      return False
    else:
      return False
  def adf5(index):
    if np.equal(np.tanh(x[index]),+672836.2117).all():
      if np.greater(np.cos(x[index]),+449253.2248).all():
        return True
      else:
        return False
      return False
    else:
      if np.equal(x[index],+012671.3804).all():
        return False
      else:
        return False
      return False
  def adf6(index):
    if np.greater(x[index],+237602.2695).all():
      return True
    else:
      return True
  def adf7(index):
    if np.equal(x[index],+927257.7095).all():
      return False
    else:
      return True
  def adf8(index):
    if np.greater(x[index],+019335.4420).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+782.620, adf1(1)*+521.608, adf2(2)*+036.740, adf3(3)*+387.679, adf4(4)*-381.791, adf5(5)*-579.197, adf6(6)*-191.003, adf7(7)*+744.406, adf8(8)*+477.704], [1, 0, 1, 0, 1, 1, 0, 0], 575.040)
result=p(); 0.6666666666666666
IndLenGenome:463
IndGenome:[52, 9, 33, 29, 49, 39, 98, 8, 42, 11, 3, 71, 20, 55, 96, 94, 73, 59, 33, 54, 78, 60, 21, 72, 91, 1, 99, 49, 20, 53, 49, 33, 28, 88, 47, 21, 29, 75, 58, 10, 18, 5, 65, 89, 74, 20, 49, 37, 17, 17, 29, 77, 24, 83, 57, 38, 82, 31, 31, 24, 53, 36, 95, 74, 98, 20, 45, 23, 72, 6, 61, 62, 86, 44, 40, 74, 64, 68, 90, 57, 88, 20, 33, 58, 58, 66, 83, 37, 47, 72, 79, 84, 29, 69, 73, 64, 69, 73, 61, 60, 86, 29, 94, 38, 80, 48, 40, 96, 97, 92, 38, 53, 16, 2, 91, 91, 57, 49, 54, 36, 61, 54, 62, 33, 84, 14, 69, 92, 55, 43, 72, 12, 4, 78, 84, 31, 59, 67, 80, 5, 45, 40, 85, 40, 31, 42, 16, 47, 91, 63, 58, 20, 24, 99, 67, 49, 47, 19, 12, 79, 10, 64, 68, 92, 13, 17, 76, 90, 72, 12, 26, 9, 25, 8, 48, 74, 81, 56, 57, 51, 16, 81, 19, 32, 17, 22, 75, 17, 77, 80, 49, 15, 33, 60, 38, 51, 51, 43, 59, 44, 72, 10, 21, 19, 33, 83, 25, 24, 44, 82, 70, 55, 48, 65, 57, 91, 18, 94, 17, 28, 82, 66, 42, 60, 23, 50, 43, 5, 52, 91, 36, 80, 78, 78, 54, 21, 40, 33, 96, 97, 64, 60, 57, 34, 33, 83, 48, 87, 46, 37, 99, 92, 11, 25, 13, 28, 91, 77, 59, 91, 30, 67, 78, 95, 57, 59, 91, 39, 97, 85, 29, 74, 21, 19, 61, 80, 90, 33, 88, 66, 6, 87, 34, 64, 94, 30, 76, 19, 46, 79, 24, 77, 27, 37, 0, 34, 59, 17, 68, 7, 74, 75, 93, 46, 16, 33, 15, 67, 85, 40, 44, 10, 75, 61, 29, 82, 13, 22, 43, 34, 73, 81, 46, 54, 52, 16, 41, 37, 24, 56, 52, 83, 22, 48, 25, 25, 26, 19, 35, 32, 31, 36, 15, 100, 47, 1, 61, 94, 58, 56, 35, 97, 1, 10, 28, 39, 43, 68, 86, 45, 44, 71, 25, 29, 59, 20, 65, 59, 40, 73, 84, 24, 25, 79, 77, 69, 85, 94, 73, 22, 25, 10, 79, 28, 98, 56, 82, 33, 26, 0, 61, 73, 60, 54, 91, 86, 51, 41, 81, 4, 2, 24, 8, 60, 23, 43, 29, 4, 99, 50, 89, 62, 17, 48, 14, 9, 27, 56, 12, 46, 54, 68, 61, 22, 62, 34, 72, 17, 59, 55, 96, 98, 40, 87, 13, 6, 57, 37, 45, 95, 7, 15, 66, 49, 5, 73, 0, 48, 26, 99, 40, 37, 27, 7, 36, 95, 41, 81, 84, 74, 72, 94, 31]
last_save: 745

Gen:2013
last_save: 745
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.5555555555555556
TestFitness:0.4444444444444444
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(np.cos(x[index]),-869650.1637).all():
      return False
    else:
      return True
  def adf1(index):
    if np.equal(x[index],+205245.5542).all():
      return False
    else:
      return False
  def adf2(index):
    if np.equal(x[index],-492383.4065).all():
      return False
    else:
      return True
  def adf3(index):
    if np.equal(x[index],+957517.8073).all():
      return True
    else:
      return True
  def adf4(index):
    if np.greater(np.cos(x[index]),+437678.2023).all():
      return False
    else:
      return True
  def adf5(index):
    if np.less(x[index],-289106.1016).all():
      return True
    else:
      return True
  def adf6(index):
    if np.less(np.sin(x[index]),+342541.8995).all():
      return False
    else:
      return False
  def adf7(index):
    if np.greater(np.tanh(x[index]),-117152.1381).all():
      return True
    else:
      return False
  def adf8(index):
    if np.greater(np.tanh(x[index]),-597338.2826).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*-134.540, adf1(1)*-923.008, adf2(2)*+349.900, adf3(3)*-049.922, adf4(4)*-812.804, adf5(5)*+233.754, adf6(6)*+521.279, adf7(7)*+537.142, adf8(8)*-738.149], [0, 1, 1, 1, 1, 0, 1, 1], 473.075)
result=p(); 0.5555555555555556
IndLenGenome:417
IndGenome:[56, 37, 32, 31, 53, 52, 27, 80, 87, 46, 48, 17, 7, 69, 53, 39, 34, 97, 3, 33, 27, 22, 100, 43, 80, 39, 67, 28, 15, 20, 67, 34, 74, 39, 60, 89, 44, 94, 3, 22, 8, 25, 85, 88, 24, 54, 30, 50, 24, 14, 48, 67, 13, 49, 86, 12, 32, 81, 13, 30, 26, 68, 41, 23, 62, 86, 30, 57, 93, 12, 51, 9, 43, 2, 50, 50, 79, 24, 49, 11, 55, 94, 59, 60, 14, 4, 68, 14, 63, 44, 20, 23, 62, 37, 37, 77, 55, 44, 97, 36, 34, 47, 48, 84, 59, 53, 13, 83, 86, 37, 11, 85, 6, 28, 62, 48, 41, 63, 91, 31, 88, 63, 20, 13, 96, 10, 40, 11, 71, 62, 25, 74, 32, 5, 81, 40, 70, 44, 37, 61, 89, 7, 50, 57, 61, 52, 19, 23, 92, 75, 51, 75, 74, 83, 32, 47, 97, 96, 55, 18, 30, 18, 85, 67, 73, 38, 24, 65, 98, 22, 82, 38, 94, 22, 7, 53, 11, 33, 78, 36, 22, 35, 35, 64, 46, 11, 87, 34, 24, 62, 98, 83, 29, 15, 11, 24, 98, 25, 59, 12, 27, 92, 35, 57, 79, 53, 39, 52, 3, 61, 77, 45, 95, 55, 55, 42, 52, 94, 85, 7, 89, 7, 81, 16, 57, 65, 55, 41, 45, 76, 79, 11, 59, 17, 87, 20, 91, 40, 63, 53, 71, 12, 63, 43, 74, 91, 75, 87, 50, 81, 27, 16, 11, 95, 58, 79, 20, 94, 25, 11, 14, 15, 8, 38, 68, 80, 56, 70, 89, 38, 22, 68, 53, 95, 24, 54, 73, 68, 8, 41, 88, 23, 81, 81, 51, 11, 16, 6, 58, 6, 72, 95, 3, 22, 66, 70, 28, 23, 69, 96, 19, 11, 61, 59, 96, 19, 76, 13, 91, 77, 51, 46, 49, 6, 51, 27, 35, 90, 61, 47, 87, 56, 20, 62, 13, 85, 22, 32, 6, 21, 41, 75, 26, 52, 67, 45, 50, 97, 92, 98, 88, 82, 53, 54, 66, 61, 19, 83, 20, 85, 87, 45, 31, 87, 81, 80, 59, 94, 28, 47, 9, 91, 61, 55, 39, 16, 28, 13, 75, 63, 10, 15, 14, 0, 28, 48, 22, 37, 35, 93, 17, 49, 36, 14, 75, 24, 80, 98, 39, 12, 37, 28, 19, 4, 42, 38, 51, 35, 88, 48, 22, 29, 57, 100, 96, 9, 95, 80, 77, 13, 57, 37, 9, 90, 40, 69, 50]
last_save: 746

Gen:33
TrainFitness:0.6666666666666666
TestFitness:0.4444444444444444
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(psqrt(x[index]),+475447.6118).all():
      return False
    else:
      return True
  def adf1(index):
    if np.less(x[index],+728693.8219).all():
      return True
    else:
      return False
  def adf2(index):
    if np.less(sigmoid(x[index]),+320287.9891).all():
      return False
    else:
      return False
  def adf3(index):
    if np.greater(np.tanh(x[index]),+804205.7388).all():
      if np.less(x[index],+798849.2009).all():
        return False
      else:
        return False
      return False
    else:
      if np.greater(x[index],+417984.7939).all():
        return False
      else:
        return False
      return True
  def adf4(index):
    if np.less(x[index],-163437.6951).all():
      return True
    else:
      return False
  def adf5(index):
    if np.greater(np.sin(x[index]),-638361.6191).all():
      return False
    else:
      return True
  def adf6(index):
    if np.less(x[index],-204634.1498).all():
      return False
    else:
      return False
  def adf7(index):
    if np.less(x[index],+923479.3504).all():
      if np.greater(x[index],+039376.7973).all():
        if np.equal(x[index],-844134.7900).all():
          return False
        else:
          return True
        return True
      else:
        if np.less(x[index],-030852.0515).all():
          return True
        else:
          return False
        return False
      return False
    else:
      if np.greater(x[index],+312334.1570).all():
        return False
      else:
        return True
      return True
  def adf8(index):
    if np.equal(x[index],+133601.3754).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*-191.354, adf1(1)*-503.538, adf2(2)*+562.820, adf3(3)*-550.117, adf4(4)*+232.654, adf5(5)*+367.266, adf6(6)*+591.899, adf7(7)*-969.018, adf8(8)*-374.027], [0, 1, 1, 0, 1, 1, 0, 1], 183.204)
result=p(); 0.6666666666666666
IndLenGenome:462
IndGenome:[23, 22, 56, 79, 83, 38, 53, 51, 52, 11, 24, 17, 75, 74, 94, 47, 76, 81, 91, 48, 11, 72, 29, 73, 40, 93, 7, 72, 58, 67, 22, 58, 86, 89, 23, 88, 82, 21, 79, 74, 61, 39, 21, 73, 2, 9, 92, 90, 31, 73, 52, 80, 22, 78, 87, 19, 48, 9, 51, 87, 41, 70, 8, 85, 78, 30, 26, 72, 32, 39, 8, 80, 14, 92, 70, 85, 7, 93, 68, 98, 15, 82, 55, 76, 90, 98, 27, 29, 28, 38, 64, 79, 32, 60, 70, 79, 23, 83, 19, 37, 39, 53, 45, 50, 94, 34, 51, 27, 99, 98, 84, 97, 19, 23, 89, 93, 69, 66, 67, 49, 67, 53, 59, 17, 10, 51, 86, 93, 94, 73, 67, 66, 79, 25, 41, 86, 99, 76, 59, 30, 94, 60, 99, 21, 43, 36, 63, 48, 93, 66, 21, 26, 61, 29, 31, 85, 6, 79, 61, 52, 13, 38, 91, 34, 42, 40, 4, 86, 83, 34, 51, 14, 99, 98, 37, 57, 40, 28, 38, 64, 79, 32, 60, 70, 79, 52, 83, 54, 37, 39, 53, 45, 50, 94, 34, 51, 27, 99, 98, 84, 97, 60, 23, 89, 93, 7, 66, 67, 49, 67, 53, 59, 17, 95, 13, 25, 27, 58, 14, 84, 61, 33, 34, 47, 79, 10, 0, 65, 28, 74, 99, 4, 63, 46, 33, 85, 30, 73, 10, 18, 55, 42, 50, 55, 41, 45, 76, 79, 11, 59, 17, 87, 3, 91, 40, 24, 53, 71, 12, 63, 43, 74, 91, 75, 87, 80, 55, 42, 66, 42, 65, 23, 33, 51, 66, 69, 91, 23, 23, 6, 40, 91, 33, 67, 35, 94, 61, 46, 53, 69, 81, 81, 31, 91, 19, 81, 53, 95, 94, 89, 21, 36, 35, 100, 83, 45, 83, 88, 33, 42, 23, 95, 6, 32, 38, 82, 90, 15, 81, 86, 55, 55, 50, 21, 91, 37, 69, 44, 27, 72, 3, 62, 66, 55, 34, 91, 26, 75, 3, 56, 27, 2, 26, 6, 7, 12, 35, 15, 29, 71, 8, 69, 69, 31, 11, 27, 89, 26, 69, 60, 11, 48, 90, 69, 89, 23, 87, 84, 10, 2, 17, 16, 66, 55, 61, 14, 77, 81, 8, 99, 69, 91, 18, 83, 12, 80, 74, 29, 88, 21, 22, 33, 48, 26, 89, 7, 3, 17, 61, 44, 0, 54, 36, 84, 33, 73, 32, 52, 42, 43, 80, 61, 26, 20, 80, 24, 100, 12, 53, 47, 71, 72, 53, 9, 40, 49, 63, 12, 87, 27, 85, 2, 23, 81, 66, 94, 44, 69, 22, 47, 32, 32, 6, 66, 93, 82, 90, 47, 26, 43, 89, 79, 47, 82, 26, 63, 5, 52, 10, 10, 55, 83]
last_save: 746

Gen:187
TrainFitness:0.7777777777777778
TestFitness:0.4444444444444444
MaxGenLen:545
Individual: def p():
  def adf0(index):
    if np.equal(np.cos(x[index]),+475447.6118).all():
      return False
    else:
      return True
  def adf1(index):
    if np.less(x[index],+728683.8215).all():
      return False
    else:
      return False
  def adf2(index):
    if np.less(sigmoid(x[index]),+220280.9891).all():
      return False
    else:
      return False
  def adf3(index):
    if np.greater(np.tanh(x[index]),+807295.3388).all():
      if np.less(x[index],+798844.2101).all():
        return False
      else:
        return True
      return False
    else:
      if np.equal(x[index],+417780.6989).all():
        return False
      else:
        return False
      return True
  def adf4(index):
    if np.less(x[index],-163437.5941).all():
      return False
    else:
      return False
  def adf5(index):
    if np.greater(x[index],-413221.8612).all():
      return False
    else:
      return False
  def adf6(index):
    if np.less(np.cos(x[index]),-814624.8408).all():
      return False
    else:
      return False
  def adf7(index):
    if np.less(x[index],+923479.9504).all():
      if np.greater(x[index],+005676.7913).all():
        if np.equal(x[index],-744174.1900).all():
          return False
        else:
          return True
        return True
      else:
        if np.less(x[index],-330883.0515).all():
          return True
        else:
          return False
        return False
      return False
    else:
      if np.greater(x[index],+312334.5279).all():
        return False
      else:
        return False
      return True
  def adf8(index):
    if np.equal(x[index],+324653.0453).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+423.643, adf1(1)*-667.250, adf2(2)*-951.114, adf3(3)*-180.993, adf4(4)*+571.618, adf5(5)*+498.123, adf6(6)*+737.140, adf7(7)*+332.223, adf8(8)*-004.023], [1, 0, 1, 1, 0, 1, 1, 0], 752.372)
result=p(); 0.7777777777777778
IndLenGenome:503
IndGenome:[23, 22, 56, 79, 83, 38, 67, 51, 70, 12, 24, 17, 75, 74, 94, 47, 76, 81, 91, 48, 11, 42, 98, 73, 40, 11, 7, 72, 61, 67, 22, 58, 46, 38, 23, 88, 52, 21, 15, 75, 39, 39, 21, 73, 2, 9, 92, 90, 31, 42, 52, 80, 22, 48, 50, 19, 48, 9, 51, 87, 41, 70, 8, 85, 78, 30, 26, 72, 32, 39, 8, 80, 57, 92, 89, 85, 3, 93, 68, 98, 15, 82, 55, 76, 94, 98, 27, 29, 28, 38, 64, 94, 32, 1, 70, 31, 23, 54, 19, 37, 62, 53, 45, 50, 94, 34, 51, 27, 77, 98, 50, 66, 19, 8, 89, 67, 69, 66, 63, 49, 67, 53, 59, 53, 51, 51, 86, 93, 94, 73, 67, 75, 79, 4, 41, 29, 99, 76, 59, 30, 37, 60, 99, 95, 14, 21, 63, 22, 72, 31, 18, 26, 61, 42, 31, 85, 6, 79, 61, 52, 13, 12, 91, 90, 48, 1, 4, 86, 42, 34, 78, 14, 50, 98, 37, 77, 40, 28, 80, 64, 79, 62, 60, 70, 79, 52, 83, 54, 37, 39, 9, 45, 50, 94, 34, 51, 27, 53, 98, 16, 97, 60, 20, 45, 96, 7, 66, 67, 39, 81, 53, 59, 17, 39, 13, 25, 27, 17, 14, 84, 61, 97, 34, 71, 79, 10, 0, 65, 28, 74, 99, 4, 63, 46, 33, 85, 13, 73, 10, 18, 88, 13, 50, 55, 41, 45, 76, 79, 77, 59, 17, 87, 3, 91, 40, 24, 53, 71, 12, 53, 43, 74, 45, 2, 87, 69, 55, 45, 66, 15, 65, 23, 33, 51, 66, 61, 63, 12, 84, 86, 55, 33, 50, 44, 35, 3, 78, 44, 27, 72, 3, 62, 66, 34, 92, 33, 26, 64, 3, 56, 27, 2, 26, 6, 7, 12, 35, 10, 42, 71, 8, 39, 25, 31, 11, 41, 94, 26, 69, 90, 11, 48, 90, 69, 89, 23, 87, 66, 10, 25, 17, 1, 66, 91, 18, 13, 12, 80, 74, 29, 88, 21, 82, 33, 48, 26, 89, 7, 3, 17, 61, 44, 0, 69, 36, 84, 33, 73, 32, 52, 42, 43, 80, 61, 26, 20, 80, 24, 100, 12, 53, 47, 71, 72, 53, 9, 40, 49, 63, 12, 87, 27, 85, 2, 23, 7, 12, 80, 15, 71, 71, 8, 69, 69, 31, 11, 27, 89, 26, 69, 60, 11, 48, 90, 69, 89, 23, 87, 84, 10, 2, 17, 16, 66, 55, 61, 14, 77, 81, 8, 99, 69, 91, 18, 26, 12, 80, 74, 29, 88, 21, 22, 33, 48, 26, 89, 7, 3, 17, 61, 44, 0, 54, 36, 84, 33, 73, 32, 52, 42, 43, 80, 61, 26, 20, 80, 24, 100, 12, 53, 47, 71, 72, 53, 9, 40, 49, 63, 12, 87, 27, 85, 2, 23, 81, 66, 94, 44, 69, 22, 47, 32, 32, 6, 66, 93, 82, 90, 47, 26, 43, 89, 79, 47, 82, 26, 63, 5, 52, 10, 10, 55, 83]
last_save: 746

Gen:2187
last_save: 746
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.5555555555555556
TestFitness:0.3333333333333333
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(np.tanh(x[index]),-853198.9931).all():
      return True
    else:
      return True
  def adf1(index):
    if np.greater(sigmoid(x[index]),-074813.7536).all():
      return False
    else:
      return False
  def adf2(index):
    if np.less(sigmoid(x[index]),+170399.4534).all():
      return True
    else:
      return True
  def adf3(index):
    if np.less(rlog(x[index]),+629176.8175).all():
      return False
    else:
      return True
  def adf4(index):
    if np.greater(rlog(x[index]),-462234.4462).all():
      return False
    else:
      return True
  def adf5(index):
    if np.greater(x[index],+862427.7131).all():
      return True
    else:
      return True
  def adf6(index):
    if np.less(psqrt(x[index]),-900837.5574).all():
      return False
    else:
      return True
  def adf7(index):
    if np.less(np.sin(x[index]),-678307.4466).all():
      return False
    else:
      return True
  def adf8(index):
    if np.greater(np.cos(x[index]),-359819.3644).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-849.636, adf1(1)*-639.353, adf2(2)*+209.438, adf3(3)*-602.322, adf4(4)*-296.461, adf5(5)*-625.060, adf6(6)*+027.055, adf7(7)*+367.451, adf8(8)*+078.792], [0, 1, 0, 0, 0, 0, 0, 1], 802.484)
result=p(); 0.5555555555555556
IndLenGenome:421
IndGenome:[87, 47, 97, 93, 73, 46, 85, 58, 89, 61, 7, 79, 62, 79, 89, 19, 42, 47, 42, 59, 40, 90, 30, 40, 65, 66, 42, 14, 18, 9, 43, 70, 89, 28, 43, 72, 78, 7, 71, 74, 75, 99, 76, 30, 92, 4, 30, 65, 74, 92, 42, 24, 57, 67, 78, 80, 70, 89, 57, 72, 59, 25, 33, 3, 18, 66, 30, 5, 86, 80, 92, 23, 82, 27, 38, 31, 62, 94, 57, 42, 71, 78, 37, 19, 53, 89, 20, 73, 52, 71, 86, 52, 74, 8, 21, 19, 23, 63, 30, 22, 24, 1, 83, 71, 35, 55, 74, 59, 86, 54, 90, 82, 48, 96, 24, 19, 54, 76, 56, 90, 13, 5, 12, 55, 66, 39, 34, 16, 41, 23, 65, 75, 14, 62, 66, 84, 32, 39, 44, 76, 98, 6, 85, 16, 82, 81, 56, 57, 37, 89, 94, 97, 5, 85, 13, 88, 99, 71, 53, 46, 13, 29, 36, 52, 31, 43, 66, 19, 39, 32, 15, 86, 61, 80, 58, 63, 5, 77, 22, 15, 31, 70, 86, 77, 74, 40, 25, 79, 74, 51, 12, 33, 73, 90, 27, 87, 80, 27, 94, 98, 32, 30, 95, 99, 93, 16, 89, 26, 89, 80, 88, 34, 77, 47, 38, 9, 27, 83, 44, 97, 18, 41, 98, 93, 61, 43, 69, 75, 78, 96, 46, 96, 5, 91, 15, 67, 75, 94, 16, 84, 16, 47, 38, 3, 82, 34, 69, 67, 30, 12, 37, 84, 53, 87, 48, 70, 12, 63, 56, 91, 98, 70, 30, 94, 67, 99, 41, 84, 97, 53, 43, 42, 20, 4, 84, 71, 34, 29, 53, 65, 17, 24, 73, 4, 10, 35, 16, 47, 73, 21, 82, 12, 70, 88, 83, 20, 87, 22, 56, 54, 49, 44, 28, 55, 98, 66, 81, 25, 80, 4, 2, 89, 92, 92, 7, 22, 39, 86, 12, 92, 87, 33, 82, 37, 2, 36, 91, 25, 87, 39, 75, 21, 1, 21, 61, 56, 19, 69, 74, 5, 93, 87, 9, 36, 86, 43, 5, 20, 67, 23, 91, 11, 56, 36, 49, 37, 9, 1, 36, 28, 88, 60, 38, 99, 62, 22, 34, 65, 61, 22, 20, 67, 85, 53, 24, 90, 70, 37, 39, 49, 10, 5, 66, 15, 33, 37, 34, 84, 22, 84, 0, 54, 94, 12, 32, 33, 41, 35, 70, 77, 37, 53, 65, 52, 59, 27, 49, 82, 29, 27, 3, 25, 79, 25, 65, 14, 23, 85, 41, 43, 33]
last_save: 747

Gen:5
TrainFitness:0.6666666666666666
TestFitness:0.3333333333333333
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],+503107.4796).all():
      return False
    else:
      return False
  def adf1(index):
    if np.greater(x[index],+033334.8715).all():
      return True
    else:
      return False
  def adf2(index):
    if np.less(x[index],+176587.9015).all():
      return True
    else:
      return True
  def adf3(index):
    if np.less(x[index],-034285.5741).all():
      return False
    else:
      return False
  def adf4(index):
    if np.equal(x[index],-935801.6988).all():
      return False
    else:
      return False
  def adf5(index):
    if np.equal(x[index],+643154.5329).all():
      return True
    else:
      return False
  def adf6(index):
    if np.equal(x[index],+484346.9962).all():
      if np.less(np.sin(x[index]),-271085.3718).all():
        return True
      else:
        return True
      return True
    else:
      if np.equal(np.tanh(x[index]),-695973.3418).all():
        return False
      else:
        return False
      return False
  def adf7(index):
    if np.less(sigmoid(x[index]),-330337.8710).all():
      return False
    else:
      return True
  def adf8(index):
    if np.greater(x[index],+196590.1371).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+603.922, adf1(1)*-085.675, adf2(2)*+331.939, adf3(3)*-193.213, adf4(4)*+140.644, adf5(5)*-989.368, adf6(6)*-408.479, adf7(7)*-532.353, adf8(8)*-730.090], [0, 1, 0, 1, 1, 0, 1, 0], 572.335)
result=p(); 0.6666666666666666
IndLenGenome:482
IndGenome:[42, 15, 65, 73, 40, 45, 81, 36, 84, 55, 60, 23, 21, 60, 87, 34, 7, 29, 86, 35, 19, 79, 69, 30, 39, 51, 60, 73, 100, 63, 13, 3, 83, 34, 28, 97, 41, 15, 24, 45, 86, 43, 76, 3, 23, 4, 51, 81, 47, 66, 45, 38, 37, 69, 80, 31, 45, 24, 30, 24, 45, 46, 25, 72, 99, 61, 60, 13, 84, 92, 78, 55, 25, 97, 74, 11, 99, 17, 32, 33, 11, 37, 54, 79, 89, 49, 13, 5, 88, 80, 21, 46, 39, 18, 28, 45, 9, 63, 99, 41, 51, 97, 26, 95, 76, 24, 13, 11, 95, 74, 35, 63, 12, 19, 54, 19, 79, 20, 24, 74, 97, 73, 88, 16, 54, 98, 34, 73, 24, 96, 99, 99, 76, 52, 11, 7, 24, 36, 93, 5, 23, 52, 17, 41, 40, 48, 95, 13, 77, 91, 68, 28, 72, 42, 75, 20, 36, 98, 95, 35, 51, 16, 59, 5, 99, 57, 43, 13, 64, 61, 58, 17, 17, 17, 1, 37, 82, 10, 93, 95, 97, 31, 73, 13, 10, 13, 23, 17, 48, 47, 31, 40, 21, 96, 41, 25, 42, 85, 15, 66, 3, 71, 9, 16, 75, 29, 70, 41, 53, 97, 21, 11, 78, 27, 22, 13, 36, 18, 76, 60, 93, 79, 72, 32, 58, 45, 55, 60, 78, 45, 66, 47, 15, 41, 78, 32, 63, 43, 71, 99, 43, 49, 43, 13, 49, 51, 79, 33, 72, 31, 73, 33, 18, 87, 51, 54, 10, 96, 24, 74, 78, 55, 53, 59, 58, 39, 23, 76, 88, 85, 19, 73, 84, 70, 28, 74, 27, 29, 63, 25, 98, 15, 93, 52, 63, 95, 83, 49, 63, 18, 97, 83, 20, 90, 19, 90, 92, 92, 83, 14, 87, 91, 34, 75, 44, 95, 35, 37, 12, 43, 63, 95, 83, 49, 63, 18, 97, 83, 20, 90, 19, 90, 92, 92, 83, 14, 87, 91, 34, 75, 44, 95, 35, 37, 12, 43, 80, 42, 89, 34, 41, 15, 30, 22, 89, 84, 61, 78, 50, 35, 0, 5, 12, 51, 80, 71, 35, 26, 92, 83, 35, 59, 30, 18, 90, 11, 55, 18, 56, 83, 96, 15, 32, 37, 25, 47, 2, 5, 94, 46, 78, 60, 76, 47, 9, 33, 57, 20, 35, 99, 76, 60, 4, 75, 48, 8, 59, 49, 72, 90, 68, 97, 17, 6, 21, 17, 9, 46, 63, 5, 87, 51, 78, 73, 16, 51, 25, 98, 100, 94, 15, 20, 28, 43, 16, 67, 9, 94, 92, 95, 46, 6, 0, 1, 39, 12, 9, 10, 85, 21, 89, 46, 62, 85, 42, 48, 84, 64, 39, 12, 93, 10, 84, 30, 62, 1, 0, 64, 42, 78, 45, 78, 19, 94, 12, 26, 62, 81, 41, 95, 25, 5, 40, 44, 91, 13, 35, 79, 68, 64, 74, 70]
last_save: 747

Gen:7
TrainFitness:0.6666666666666666
TestFitness:0.4444444444444444
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],+503107.4796).all():
      return False
    else:
      return False
  def adf1(index):
    if np.greater(x[index],+833334.8715).all():
      return True
    else:
      return False
  def adf2(index):
    if np.less(x[index],+176587.9015).all():
      return True
    else:
      return True
  def adf3(index):
    if np.less(x[index],-034285.5741).all():
      return False
    else:
      return True
  def adf4(index):
    if np.equal(x[index],-667406.5539).all():
      return False
    else:
      return False
  def adf5(index):
    if np.equal(x[index],+977894.8875).all():
      if np.less(x[index],-912600.8254).all():
        return True
      else:
        return True
      return False
    else:
      if np.less(np.tanh(x[index]),-983916.5429).all():
        return False
      else:
        return False
      return False
  def adf6(index):
    if np.less(x[index],+208071.2004).all():
      return False
    else:
      return True
  def adf7(index):
    if np.equal(np.cos(x[index]),+218564.6712).all():
      return False
    else:
      return False
  def adf8(index):
    if np.equal(sigmoid(x[index]),+369401.7915).all():
      if np.less(x[index],+384482.8231).all():
        return False
      else:
        return True
      return False
    else:
      if np.less(x[index],+019552.4878).all():
        return True
      else:
        return False
      return False
  return multiple_operation([adf0(0)*-405.260, adf1(1)*+869.550, adf2(2)*+419.464, adf3(3)*-964.301, adf4(4)*+566.825, adf5(5)*-012.965, adf6(6)*+112.219, adf7(7)*+427.387, adf8(8)*-598.829], [1, 0, 0, 1, 0, 1, 1, 1], 406.881)
result=p(); 0.6666666666666666
IndLenGenome:414
IndGenome:[42, 15, 65, 73, 40, 45, 81, 36, 84, 55, 60, 23, 21, 60, 87, 34, 7, 29, 86, 35, 19, 79, 69, 30, 39, 51, 60, 73, 18, 63, 13, 3, 83, 34, 28, 97, 41, 15, 10, 45, 86, 43, 76, 3, 23, 4, 51, 81, 47, 66, 45, 38, 37, 69, 80, 31, 45, 40, 30, 24, 45, 46, 25, 72, 99, 61, 60, 13, 84, 92, 78, 55, 25, 97, 74, 11, 7, 34, 95, 21, 41, 55, 51, 77, 72, 66, 86, 17, 14, 20, 86, 55, 5, 43, 39, 77, 61, 52, 34, 99, 2, 39, 31, 56, 51, 99, 37, 27, 48, 39, 64, 58, 58, 57, 85, 75, 49, 23, 48, 35, 57, 79, 31, 72, 46, 90, 90, 88, 52, 75, 94, 50, 56, 29, 97, 10, 30, 86, 54, 15, 24, 19, 88, 53, 69, 21, 46, 35, 84, 92, 69, 11, 27, 45, 87, 61, 82, 37, 69, 70, 97, 22, 30, 58, 30, 77, 21, 32, 70, 50, 94, 67, 60, 57, 31, 20, 4, 61, 86, 40, 15, 92, 51, 58, 95, 36, 4, 16, 37, 21, 62, 29, 13, 20, 90, 49, 29, 68, 63, 78, 10, 14, 73, 86, 29, 74, 90, 61, 27, 69, 21, 45, 51, 67, 43, 93, 70, 67, 13, 68, 14, 74, 68, 22, 88, 72, 43, 41, 43, 14, 89, 95, 70, 25, 47, 48, 31, 60, 91, 19, 65, 25, 32, 24, 78, 37, 38, 16, 13, 11, 80, 5, 20, 73, 12, 24, 90, 85, 82, 16, 80, 47, 98, 72, 38, 16, 79, 45, 85, 10, 71, 62, 66, 74, 31, 99, 64, 86, 54, 26, 3, 38, 9, 86, 24, 63, 50, 1, 96, 70, 57, 55, 46, 6, 88, 2, 85, 9, 43, 34, 50, 11, 62, 9, 46, 75, 39, 64, 44, 81, 11, 42, 62, 41, 89, 17, 40, 67, 34, 22, 37, 33, 58, 97, 0, 61, 0, 45, 39, 38, 38, 82, 89, 79, 49, 94, 84, 95, 24, 47, 9, 5, 93, 34, 20, 36, 8, 98, 51, 82, 64, 44, 97, 97, 89, 46, 57, 14, 63, 78, 78, 64, 46, 23, 74, 61, 60, 64, 93, 66, 41, 55, 80, 49, 100, 11, 100, 15, 62, 60, 52, 55, 38, 76, 46, 69, 59, 40, 6, 98, 6, 19, 43, 22, 14, 73, 58, 90, 50, 70, 36, 3, 28, 87, 28, 54, 52, 88, 23, 87, 41, 30, 42, 52]
last_save: 747

Gen:32
TrainFitness:0.7777777777777778
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],+273107.4796).all():
      return False
    else:
      return False
  def adf1(index):
    if np.greater(x[index],+033334.8715).all():
      return True
    else:
      return False
  def adf2(index):
    if np.less(x[index],+006587.9587).all():
      return False
    else:
      return True
  def adf3(index):
    if np.greater(np.sin(x[index]),+291034.2055).all():
      return False
    else:
      return True
  def adf4(index):
    if np.equal(sigmoid(x[index]),-999358.0169).all():
      return True
    else:
      return True
  def adf5(index):
    if np.greater(x[index],-524315.4532).all():
      if np.greater(x[index],+473864.8494).all():
        return True
      else:
        return False
      return False
    else:
      if np.equal(x[index],+532710.8537).all():
        if np.equal(np.sin(x[index]),-685516.9595).all():
          return False
        else:
          return False
        return True
      else:
        if np.less(x[index],-730357.1330).all():
          return False
        else:
          return False
        return False
      return True
  def adf6(index):
    if np.less(x[index],-255632.9659).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(x[index],-368603.9228).all():
      return False
    else:
      return False
  def adf8(index):
    if np.greater(x[index],-233199.9369).all():
      if np.less(x[index],-387140.6448).all():
        return False
      else:
        return False
      return False
    else:
      if np.equal(rlog(x[index]),-408079.3588).all():
        if np.less(x[index],-387300.9022).all():
          return True
        else:
          return False
        return True
      else:
        if np.less(sigmoid(x[index]),-723353.9387).all():
          return False
        else:
          return True
        return True
      return False
  return multiple_operation([adf0(0)*-714.545, adf1(1)*-302.941, adf2(2)*+941.805, adf3(3)*-101.562, adf4(4)*-080.158, adf5(5)*-527.572, adf6(6)*+806.793, adf7(7)*+960.458, adf8(8)*-208.776], [1, 1, 0, 1, 1, 1, 1, 0], 615.804)
result=p(); 0.7777777777777778
IndLenGenome:487
IndGenome:[42, 15, 65, 77, 40, 45, 81, 36, 84, 72, 37, 23, 21, 60, 87, 34, 7, 29, 86, 35, 19, 79, 69, 30, 39, 51, 60, 73, 100, 63, 13, 3, 83, 34, 28, 97, 41, 15, 24, 45, 86, 43, 76, 3, 23, 4, 51, 0, 40, 66, 45, 38, 37, 69, 45, 38, 37, 69, 80, 55, 45, 24, 30, 24, 45, 46, 25, 72, 99, 61, 60, 13, 84, 92, 70, 55, 25, 97, 74, 11, 99, 89, 32, 33, 11, 37, 54, 79, 89, 49, 13, 5, 88, 80, 21, 46, 39, 18, 28, 45, 32, 63, 99, 41, 51, 97, 26, 95, 42, 24, 13, 11, 95, 74, 35, 63, 12, 19, 54, 19, 79, 20, 5, 74, 97, 73, 88, 16, 54, 98, 34, 39, 24, 96, 99, 99, 76, 52, 11, 7, 24, 94, 93, 5, 23, 52, 17, 41, 40, 48, 95, 13, 77, 91, 68, 28, 72, 42, 75, 20, 36, 98, 95, 35, 51, 16, 59, 5, 99, 55, 43, 13, 64, 61, 58, 17, 17, 17, 1, 37, 43, 10, 93, 95, 97, 31, 73, 13, 10, 13, 23, 17, 48, 47, 31, 40, 21, 96, 41, 25, 42, 85, 15, 66, 3, 92, 9, 16, 75, 29, 70, 41, 53, 97, 21, 11, 78, 27, 22, 13, 36, 18, 76, 60, 93, 79, 72, 32, 58, 45, 75, 60, 78, 45, 66, 47, 15, 41, 78, 32, 63, 43, 71, 99, 59, 49, 43, 56, 49, 51, 79, 33, 72, 31, 73, 33, 18, 87, 51, 54, 10, 96, 24, 74, 78, 55, 53, 59, 58, 39, 23, 76, 88, 85, 5, 73, 84, 70, 28, 10, 27, 29, 63, 25, 98, 68, 93, 52, 63, 95, 83, 49, 63, 18, 97, 83, 20, 90, 19, 90, 92, 92, 92, 83, 14, 87, 91, 34, 75, 44, 95, 35, 37, 12, 43, 63, 95, 83, 49, 63, 18, 97, 83, 20, 90, 19, 90, 92, 92, 83, 14, 87, 91, 34, 75, 44, 95, 35, 37, 12, 43, 80, 42, 89, 34, 41, 15, 30, 22, 89, 84, 61, 78, 50, 35, 0, 5, 12, 51, 80, 71, 35, 26, 92, 83, 35, 59, 30, 18, 90, 11, 55, 18, 56, 83, 96, 15, 32, 37, 25, 47, 2, 5, 94, 46, 78, 60, 76, 47, 9, 33, 57, 20, 35, 99, 76, 60, 4, 75, 48, 8, 59, 49, 72, 90, 68, 97, 17, 6, 21, 17, 9, 46, 63, 5, 87, 51, 78, 73, 16, 51, 25, 98, 100, 94, 15, 20, 28, 43, 16, 67, 9, 94, 92, 95, 46, 6, 0, 1, 39, 12, 9, 10, 85, 21, 89, 46, 62, 85, 42, 48, 84, 64, 39, 12, 93, 10, 84, 30, 62, 1, 0, 64, 42, 78, 45, 78, 19, 94, 12, 26, 62, 81, 41, 95, 25, 5, 40, 44, 91, 13, 35, 79, 68, 64, 74, 70]
last_save: 747

Gen:2032
last_save: 747
Exit:FalseFalseTrue