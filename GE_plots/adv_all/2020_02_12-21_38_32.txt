Dataset:Meander/Full.csv
FS:True
Seed:1236
Size:10

Gen:1
TrainFitness:0.6666666666666666
TestFitness:1.0
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],+938580.3639).all():
      return True
    else:
      return False
  def adf1(index):
    if np.less(np.sin(x[index]),+460340.2104).all():
      return False
    else:
      return False
  def adf2(index):
    if np.less(psqrt(x[index]),+375844.1256).all():
      return False
    else:
      return True
  def adf3(index):
    if np.less(x[index],-075560.5958).all():
      return False
    else:
      return True
  def adf4(index):
    if np.less(x[index],+132558.0755).all():
      return True
    else:
      return False
  def adf7(index):
    if np.equal(np.cos(x[index]),+125183.9884).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*-114.949, adf1(1)*+958.987, adf2(2)*-340.448, adf3(3)*-687.398, adf4(4)*-326.225, adf7(7)*-552.724], [1, 1, 0, 1, 0], 045.509)
result=p(); 0.6666666666666666
IndLenGenome:283
IndGenome:[53, 6, 27, 92, 99, 73, 39, 48, 48, 60, 26, 39, 27, 36, 86, 44, 63, 92, 91, 26, 25, 17, 39, 47, 40, 90, 75, 67, 89, 35, 29, 24, 15, 31, 14, 95, 43, 74, 84, 68, 25, 83, 89, 90, 98, 65, 61, 15, 50, 66, 19, 55, 52, 25, 11, 47, 64, 39, 90, 14, 44, 72, 54, 94, 55, 24, 27, 51, 44, 87, 68, 26, 22, 26, 97, 28, 31, 32, 4, 68, 89, 11, 67, 63, 57, 57, 71, 18, 89, 28, 15, 87, 60, 93, 51, 11, 29, 83, 1, 23, 61, 99, 87, 46, 15, 78, 18, 52, 75, 96, 85, 18, 68, 23, 44, 27, 85, 42, 25, 58, 47, 44, 34, 11, 84, 61, 55, 64, 44, 97, 40, 95, 60, 44, 95, 67, 40, 21, 35, 89, 29, 34, 71, 15, 6, 38, 93, 69, 38, 26, 95, 75, 99, 63, 20, 14, 30, 42, 66, 2, 26, 45, 57, 86, 99, 62, 84, 46, 88, 31, 72, 42, 11, 40, 93, 83, 98, 61, 48, 32, 23, 52, 54, 52, 77, 36, 15, 65, 69, 46, 62, 62, 22, 82, 69, 74, 86, 45, 26, 27, 75, 7, 37, 34, 51, 62, 63, 71, 32, 80, 27, 47, 96, 4, 48, 98, 3, 92, 84, 13, 2, 99, 91, 83, 77, 90, 91, 28, 72, 64, 15, 99, 29, 53, 26, 89, 72, 19, 88, 96, 39, 41, 92, 10, 96, 87, 91, 5, 85, 31, 30, 0, 12, 18, 65, 58, 89, 60, 95, 33, 2, 27, 24, 61, 73, 44, 91, 84, 37, 69, 19, 5, 33, 63, 27, 100, 65, 68, 13, 7, 88, 9, 7]
last_save: 1025

Gen:9
TrainFitness:0.8333333333333334
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],+370621.3310).all():
      return False
    else:
      return True
  def adf1(index):
    if np.greater(x[index],+031020.7426).all():
      return True
    else:
      return False
  def adf2(index):
    if np.less(x[index],+162074.9511).all():
      if np.greater(sigmoid(x[index]),-331673.3875).all():
        return True
      else:
        return True
      return False
    else:
      if np.equal(x[index],-642679.9829).all():
        if np.greater(x[index],+107292.1969).all():
          return False
        else:
          return False
        return False
      else:
        if np.equal(x[index],+015441.9232).all():
          return True
        else:
          return True
        return False
      return False
  def adf3(index):
    if np.equal(x[index],+009978.5385).all():
      if np.equal(np.sin(x[index]),+818965.4231).all():
        return False
      else:
        return True
      return True
    else:
      if np.greater(np.sin(x[index]),+649604.5879).all():
        if np.less(x[index],+165426.7150).all():
          if np.less(x[index],-899510.7047).all():
            return False
          else:
            return True
          return False
        else:
          if np.equal(np.sin(x[index]),+387093.4048).all():
            return True
          else:
            return True
          return True
        return True
      else:
        if np.less(x[index],+762902.8381).all():
          return False
        else:
          return False
        return False
      return False
  def adf4(index):
    if np.less(x[index],+588700.0769).all():
      return False
    else:
      return True
  def adf7(index):
    if np.greater(x[index],+838881.5017).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+430.370, adf1(1)*+908.734, adf2(2)*-943.558, adf3(3)*-548.047, adf4(4)*+797.340, adf7(7)*-907.814], [0, 0, 0, 1, 1], 077.769)
result=p(); 0.8333333333333334
IndLenGenome:406
IndGenome:[37, 40, 93, 37, 77, 71, 96, 4, 40, 13, 87, 30, 16, 32, 21, 73, 33, 81, 10, 37, 84, 17, 61, 24, 67, 55, 96, 6, 80, 93, 61, 10, 12, 40, 97, 54, 32, 76, 64, 21, 42, 50, 48, 13, 3, 3, 76, 25, 41, 76, 22, 10, 17, 54, 19, 55, 71, 31, 11, 63, 96, 87, 45, 79, 31, 13, 73, 41, 36, 77, 33, 63, 8, 47, 65, 22, 70, 63, 14, 98, 38, 3, 27, 5, 69, 46, 14, 42, 6, 57, 19, 99, 88, 52, 59, 43, 96, 13, 68, 44, 84, 21, 10, 67, 82, 59, 42, 21, 99, 56, 69, 51, 73, 77, 89, 83, 35, 64, 22, 87, 70, 91, 65, 64, 74, 41, 49, 52, 83, 52, 12, 60, 73, 83, 54, 14, 31, 77, 25, 37, 82, 97, 20, 80, 29, 39, 47, 78, 15, 53, 18, 15, 57, 77, 54, 72, 17, 10, 94, 18, 71, 8, 49, 96, 95, 84, 82, 23, 51, 67, 88, 98, 46, 69, 90, 56, 84, 80, 66, 66, 36, 14, 89, 66, 80, 24, 65, 78, 97, 19, 24, 63, 88, 75, 7, 48, 67, 91, 66, 85, 14, 82, 36, 37, 21, 85, 60, 33, 31, 85, 42, 71, 88, 28, 69, 59, 45, 31, 70, 47, 50, 24, 37, 61, 80, 29, 37, 35, 76, 42, 69, 56, 73, 63, 58, 37, 50, 19, 93, 14, 60, 44, 88, 20, 66, 52, 32, 63, 85, 61, 72, 82, 92, 17, 56, 72, 99, 30, 32, 18, 23, 78, 41, 83, 63, 27, 61, 80, 33, 16, 13, 90, 34, 67, 95, 68, 98, 67, 10, 20, 20, 67, 56, 59, 17, 22, 93, 9, 57, 67, 83, 96, 43, 78, 43, 48, 8, 48, 31, 25, 30, 61, 77, 27, 66, 21, 63, 35, 28, 54, 4, 23, 30, 13, 57, 30, 31, 96, 30, 19, 90, 18, 67, 53, 54, 52, 43, 11, 19, 14, 23, 25, 25, 68, 62, 71, 88, 15, 74, 68, 50, 84, 77, 89, 64, 46, 97, 59, 37, 53, 24, 50, 46, 81, 96, 49, 20, 27, 78, 1, 34, 89, 66, 16, 60, 11, 91, 56, 0, 97, 97, 97, 6, 9, 23, 31, 73, 54, 35, 1, 95, 91, 45, 73, 40, 22, 91, 1, 54, 83, 3, 4, 37, 59, 5, 9, 54, 99, 24, 54, 83, 79, 19, 39, 45, 62]
last_save: 1025

Gen:2009
last_save: 1025
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],-569780.3694).all():
      return True
    else:
      return False
  def adf1(index):
    if np.greater(x[index],-572180.2552).all():
      return True
    else:
      return True
  def adf2(index):
    if np.less(rlog(x[index]),-393883.9366).all():
      return True
    else:
      return False
  def adf3(index):
    if np.less(sigmoid(x[index]),+132261.6389).all():
      return False
    else:
      return False
  def adf4(index):
    if np.greater(x[index],-005003.1718).all():
      return False
    else:
      return False
  def adf7(index):
    if np.greater(psqrt(x[index]),+247723.4235).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*-704.081, adf1(1)*+779.652, adf2(2)*-957.858, adf3(3)*-305.201, adf4(4)*+900.136, adf7(7)*-972.053], [1, 0, 0, 1, 1], 105.307)
result=p(); 0.6666666666666666
IndLenGenome:283
IndGenome:[86, 18, 84, 6, 57, 86, 93, 15, 93, 66, 50, 30, 17, 65, 5, 33, 4, 13, 47, 20, 61, 63, 74, 33, 48, 23, 27, 21, 59, 50, 25, 21, 11, 55, 59, 97, 63, 90, 79, 80, 30, 72, 60, 54, 54, 77, 28, 50, 27, 21, 85, 92, 61, 3, 69, 10, 48, 40, 47, 63, 15, 62, 89, 13, 24, 80, 59, 93, 62, 18, 11, 27, 84, 71, 80, 55, 30, 22, 96, 75, 58, 81, 73, 53, 30, 60, 59, 81, 96, 40, 73, 31, 17, 47, 77, 85, 50, 60, 91, 44, 52, 94, 91, 16, 52, 73, 39, 37, 43, 90, 48, 54, 58, 86, 50, 45, 90, 65, 12, 17, 45, 32, 22, 18, 56, 55, 32, 93, 26, 23, 28, 91, 13, 29, 17, 39, 38, 45, 56, 87, 92, 87, 55, 51, 7, 32, 44, 77, 58, 58, 94, 47, 65, 83, 5, 85, 53, 95, 65, 85, 24, 66, 69, 29, 44, 83, 19, 79, 29, 97, 73, 28, 16, 91, 28, 96, 31, 83, 63, 20, 36, 59, 75, 63, 81, 96, 54, 62, 32, 52, 81, 11, 81, 0, 96, 69, 12, 100, 77, 68, 23, 53, 44, 5, 19, 19, 58, 41, 55, 31, 94, 40, 39, 0, 94, 74, 73, 56, 83, 98, 66, 43, 77, 10, 55, 79, 96, 94, 36, 99, 63, 95, 99, 19, 9, 93, 48, 34, 28, 22, 70, 26, 24, 43, 22, 57, 51, 9, 58, 96, 31, 88, 90, 72, 59, 45, 74, 69, 51, 9, 61, 49, 8, 5, 42, 21, 58, 18, 13, 78, 56, 53, 29, 12, 64, 27, 0, 28, 100, 63, 92, 84, 75]
last_save: 1026

Gen:28
TrainFitness:0.8333333333333334
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(np.cos(x[index]),-076328.2270).all():
      return True
    else:
      return True
  def adf1(index):
    if np.greater(x[index],+019342.0477).all():
      return False
    else:
      return True
  def adf2(index):
    if np.less(sigmoid(x[index]),+919838.0075).all():
      return True
    else:
      return False
  def adf3(index):
    if np.greater(psqrt(x[index]),-159730.9002).all():
      return True
    else:
      return False
  def adf4(index):
    if np.equal(x[index],-159483.5001).all():
      if np.equal(psqrt(x[index]),-114227.7515).all():
        return False
      else:
        return False
      return False
    else:
      if np.less(x[index],-414150.1998).all():
        if np.less(x[index],-328262.4483).all():
          return False
        else:
          return True
        return False
      else:
        if np.greater(x[index],+338149.1048).all():
          if np.greater(np.sin(x[index]),-834571.5891).all():
            return False
          else:
            return True
          return True
        else:
          if np.less(np.cos(x[index]),+316987.7341).all():
            return False
          else:
            return False
          return False
        return True
      return False
  def adf7(index):
    if np.equal(x[index],+478071.5213).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*-293.409, adf1(1)*+174.449, adf2(2)*-747.550, adf3(3)*+380.505, adf4(4)*-494.173, adf7(7)*+012.402], [1, 0, 0, 0, 1], 161.114)
result=p(); 0.8333333333333334
IndLenGenome:355
IndGenome:[25, 42, 87, 97, 83, 4, 49, 77, 33, 95, 30, 57, 56, 53, 52, 8, 32, 32, 37, 70, 66, 32, 66, 43, 90, 83, 95, 76, 35, 20, 31, 39, 33, 64, 22, 60, 24, 97, 17, 49, 52, 24, 59, 28, 46, 87, 26, 28, 47, 79, 81, 29, 28, 83, 18, 30, 40, 47, 45, 86, 33, 48, 23, 72, 10, 59, 50, 25, 21, 11, 55, 59, 17, 63, 90, 79, 80, 30, 72, 60, 97, 54, 38, 28, 50, 27, 21, 85, 92, 61, 5, 69, 44, 28, 13, 15, 60, 30, 81, 59, 11, 82, 17, 21, 51, 51, 91, 21, 74, 32, 62, 37, 97, 95, 21, 45, 93, 73, 29, 66, 98, 91, 51, 29, 31, 88, 14, 81, 24, 61, 45, 30, 81, 59, 69, 58, 33, 34, 35, 37, 11, 85, 13, 22, 98, 42, 16, 22, 34, 34, 38, 23, 27, 40, 81, 24, 61, 45, 71, 64, 34, 84, 93, 83, 28, 11, 54, 39, 101, 10, 44, 28, 13, 15, 18, 30, 100, 59, 58, 58, 33, 34, 35, 37, 11, 85, 28, 19, 31, 21, 70, 44, 41, 40, 94, 73, 28, 22, 75, 93, 11, 36, 49, 78, 87, 67, 63, 44, 71, 41, 59, 59, 68, 63, 90, 79, 80, 17, 72, 60, 97, 54, 77, 28, 50, 27, 21, 85, 92, 61, 3, 69, 10, 48, 40, 47, 63, 15, 62, 89, 13, 24, 80, 59, 93, 62, 18, 11, 27, 84, 64, 64, 39, 16, 23, 54, 87, 44, 57, 55, 85, 0, 27, 54, 97, 53, 58, 10, 35, 90, 25, 34, 31, 0, 14, 49, 34, 31, 37, 63, 47, 86, 33, 90, 41, 22, 14, 70, 52, 61, 69, 28, 84, 88, 89, 44, 61, 76, 41, 81, 41, 44, 42, 7, 54, 63, 66, 45, 73, 97, 19, 92, 85, 39, 64, 21, 19, 98, 3, 29, 71, 69, 17, 79, 86, 93, 63, 53, 22, 0, 79, 85, 17, 73, 72, 70, 63, 70, 16, 50, 82, 48, 75, 78, 77, 13, 20, 100, 1, 83, 53, 92, 36, 76, 86]
last_save: 1026

Gen:2028
last_save: 1026
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(np.tanh(x[index]),-081653.8864).all():
      return True
    else:
      return True
  def adf1(index):
    if np.less(np.cos(x[index]),+852719.8714).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(np.cos(x[index]),+825188.2941).all():
      return True
    else:
      return False
  def adf3(index):
    if np.greater(rlog(x[index]),+670922.4593).all():
      return False
    else:
      return False
  def adf4(index):
    if np.less(x[index],+025635.8627).all():
      return True
    else:
      return False
  def adf7(index):
    if np.less(np.cos(x[index]),-806376.2548).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+554.326, adf1(1)*+898.646, adf2(2)*-028.090, adf3(3)*+317.853, adf4(4)*+752.505, adf7(7)*-435.718], [0, 1, 1, 1, 1], 740.662)
result=p(); 0.8333333333333334
IndLenGenome:286
IndGenome:[72, 81, 17, 43, 49, 49, 64, 95, 89, 61, 73, 35, 71, 64, 10, 52, 37, 66, 93, 19, 13, 37, 35, 60, 31, 27, 48, 16, 77, 10, 7, 52, 20, 14, 32, 7, 48, 15, 24, 95, 44, 53, 72, 26, 69, 61, 9, 13, 87, 20, 44, 41, 19, 71, 93, 28, 32, 39, 74, 87, 90, 80, 99, 22, 65, 1, 14, 24, 58, 17, 88, 85, 46, 72, 24, 39, 22, 76, 6, 95, 97, 56, 10, 25, 75, 42, 93, 42, 32, 60, 95, 18, 51, 15, 46, 18, 56, 21, 67, 31, 52, 82, 48, 27, 69, 48, 30, 54, 91, 16, 14, 30, 43, 32, 55, 86, 16, 63, 75, 39, 48, 34, 72, 60, 46, 19, 61, 83, 55, 88, 23, 51, 75, 12, 13, 35, 24, 91, 10, 31, 51, 89, 87, 78, 35, 76, 47, 26, 84, 92, 58, 64, 52, 37, 46, 67, 18, 81, 57, 88, 52, 24, 70, 57, 65, 37, 38, 72, 16, 93, 88, 72, 13, 85, 73, 78, 35, 74, 38, 91, 97, 66, 48, 10, 90, 84, 74, 73, 75, 23, 59, 78, 57, 85, 63, 49, 13, 47, 37, 83, 60, 39, 49, 79, 23, 82, 87, 30, 4, 12, 23, 53, 36, 9, 81, 89, 6, 79, 98, 54, 71, 36, 55, 23, 81, 48, 25, 58, 97, 5, 75, 21, 70, 73, 90, 8, 91, 34, 46, 9, 42, 85, 57, 77, 56, 32, 16, 1, 7, 57, 66, 28, 86, 62, 97, 59, 19, 26, 93, 61, 85, 37, 7, 17, 59, 88, 30, 83, 80, 90, 43, 42, 97, 38, 45, 47, 93, 27, 46, 21, 38, 90, 51, 78, 39, 92]
last_save: 1027

Gen:37
TrainFitness:0.8333333333333334
TestFitness:1.0
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(np.cos(x[index]),-957038.3803).all():
      return True
    else:
      return True
  def adf1(index):
    if np.less(np.sin(x[index]),-310908.0923).all():
      return True
    else:
      return False
  def adf2(index):
    if np.greater(x[index],-660688.5355).all():
      return False
    else:
      return False
  def adf3(index):
    if np.greater(x[index],-460309.0204).all():
      if np.equal(np.cos(x[index]),-907453.9555).all():
        return True
      else:
        return False
      return True
    else:
      if np.equal(np.sin(x[index]),-922943.1623).all():
        return False
      else:
        return False
      return True
  def adf4(index):
    if np.greater(x[index],+553623.5266).all():
      return False
    else:
      return False
  def adf7(index):
    if np.less(x[index],+029907.4036).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+793.198, adf1(1)*+165.260, adf2(2)*+623.128, adf3(3)*+846.531, adf4(4)*-924.510, adf7(7)*+983.217], [0, 0, 0, 1, 0], 238.260)
result=p(); 0.8333333333333334
IndLenGenome:440
IndGenome:[81, 68, 78, 83, 43, 10, 49, 46, 51, 85, 79, 55, 57, 50, 33, 68, 23, 48, 60, 53, 68, 78, 67, 11, 64, 38, 18, 62, 95, 91, 93, 41, 40, 79, 10, 8, 30, 99, 62, 53, 46, 83, 87, 1, 36, 23, 31, 57, 42, 96, 26, 80, 76, 18, 68, 45, 63, 55, 65, 87, 61, 27, 12, 22, 15, 89, 34, 43, 35, 64, 66, 50, 93, 10, 89, 10, 72, 10, 14, 97, 26, 18, 37, 15, 15, 46, 89, 30, 17, 14, 65, 43, 89, 75, 85, 75, 24, 1, 22, 27, 50, 60, 18, 27, 73, 69, 29, 2, 22, 49, 64, 73, 71, 56, 12, 63, 33, 83, 94, 74, 23, 36, 15, 95, 86, 80, 75, 75, 63, 16, 42, 33, 65, 12, 26, 36, 49, 21, 93, 23, 94, 33, 56, 66, 44, 50, 32, 19, 69, 20, 97, 74, 80, 63, 96, 79, 20, 37, 33, 81, 10, 45, 37, 59, 13, 81, 69, 68, 62, 54, 75, 61, 76, 65, 72, 76, 0, 33, 30, 14, 6, 22, 53, 41, 22, 8, 27, 14, 42, 98, 4, 46, 45, 63, 61, 85, 47, 79, 29, 42, 64, 35, 21, 80, 96, 54, 78, 89, 68, 63, 72, 61, 57, 53, 24, 54, 66, 39, 18, 46, 92, 33, 98, 92, 36, 20, 19, 92, 25, 56, 81, 77, 80, 19, 19, 90, 58, 23, 20, 54, 13, 74, 60, 20, 79, 7, 99, 90, 24, 3, 77, 62, 46, 33, 13, 14, 71, 37, 40, 98, 4, 46, 45, 63, 61, 85, 47, 79, 29, 42, 64, 35, 21, 80, 92, 33, 23, 97, 28, 87, 77, 18, 2, 65, 70, 95, 50, 34, 81, 70, 51, 84, 76, 71, 13, 79, 77, 32, 60, 53, 46, 83, 87, 10, 36, 23, 31, 57, 42, 96, 26, 80, 76, 32, 32, 25, 22, 28, 19, 97, 50, 41, 89, 35, 89, 88, 8, 47, 84, 62, 40, 51, 16, 34, 91, 38, 51, 40, 11, 88, 82, 20, 20, 31, 12, 32, 56, 73, 82, 95, 97, 80, 75, 50, 0, 23, 100, 90, 25, 2, 50, 81, 32, 36, 62, 85, 18, 33, 47, 51, 75, 94, 52, 50, 87, 37, 88, 71, 7, 18, 96, 4, 57, 61, 75, 76, 6, 13, 96, 90, 83, 40, 4, 86, 78, 91, 50, 36, 34, 31, 78, 18, 64, 77, 90, 88, 36, 4, 29, 95, 69, 69, 3, 79, 99, 54, 52, 51, 93, 12, 37, 83, 30, 6, 39, 89, 81, 87, 83, 39, 51, 53, 31, 2, 39, 87, 24, 96, 25, 85]
last_save: 1027

Gen:2037
last_save: 1027
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],+011275.6931).all():
      return True
    else:
      return False
  def adf1(index):
    if np.equal(np.tanh(x[index]),+991058.4108).all():
      return False
    else:
      return True
  def adf2(index):
    if np.equal(x[index],+018911.2424).all():
      return True
    else:
      return True
  def adf3(index):
    if np.equal(x[index],-483132.2477).all():
      return True
    else:
      return True
  def adf4(index):
    if np.less(x[index],-883723.9108).all():
      return True
    else:
      return True
  def adf7(index):
    if np.equal(np.sin(x[index]),+626120.4284).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+169.883, adf1(1)*-477.555, adf2(2)*-000.507, adf3(3)*+197.074, adf4(4)*-085.249, adf7(7)*+312.911], [0, 1, 0, 0, 1], 395.795)
result=p(); 0.8333333333333334
IndLenGenome:282
IndGenome:[20, 28, 16, 93, 98, 70, 31, 91, 67, 101, 73, 92, 5, 94, 61, 34, 25, 93, 77, 19, 44, 79, 51, 7, 52, 31, 8, 7, 61, 25, 65, 39, 92, 66, 95, 32, 40, 82, 34, 45, 99, 90, 97, 52, 13, 51, 68, 44, 47, 18, 67, 21, 39, 12, 47, 11, 52, 15, 68, 42, 28, 88, 82, 12, 79, 67, 90, 54, 11, 93, 28, 50, 43, 15, 51, 50, 75, 17, 23, 12, 61, 12, 24, 15, 60, 42, 67, 59, 11, 79, 34, 70, 59, 29, 60, 56, 56, 74, 83, 12, 75, 10, 38, 5, 41, 6, 13, 60, 80, 60, 41, 60, 64, 92, 80, 76, 30, 66, 31, 77, 90, 21, 85, 82, 55, 29, 39, 93, 42, 64, 88, 35, 34, 76, 41, 78, 60, 17, 49, 84, 75, 55, 30, 30, 99, 61, 38, 97, 98, 72, 82, 25, 98, 74, 87, 41, 41, 77, 45, 79, 46, 51, 53, 85, 14, 97, 77, 55, 15, 43, 71, 72, 1, 22, 28, 99, 36, 51, 62, 37, 63, 92, 27, 83, 64, 38, 51, 84, 51, 81, 97, 76, 58, 28, 29, 67, 80, 73, 10, 58, 28, 57, 80, 71, 67, 89, 70, 48, 45, 53, 29, 59, 63, 63, 100, 37, 13, 1, 22, 8, 29, 65, 40, 11, 95, 31, 28, 10, 26, 73, 97, 65, 33, 98, 26, 94, 90, 88, 58, 8, 26, 90, 55, 58, 55, 46, 31, 35, 63, 71, 27, 93, 46, 49, 33, 44, 52, 79, 66, 75, 87, 48, 92, 84, 58, 74, 44, 39, 47, 89, 74, 34, 90, 69, 33, 7, 7, 26, 85, 73, 78, 7]
last_save: 1028

Gen:2001
last_save: 1028
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(sigmoid(x[index]),+123927.2275).all():
      return False
    else:
      return False
  def adf1(index):
    if np.equal(x[index],+917071.7335).all():
      return False
    else:
      return False
  def adf2(index):
    if np.equal(x[index],-728442.0880).all():
      return True
    else:
      return False
  def adf3(index):
    if np.equal(np.sin(x[index]),+597747.7410).all():
      return True
    else:
      return True
  def adf4(index):
    if np.greater(x[index],+493825.9342).all():
      return False
    else:
      return True
  def adf7(index):
    if np.greater(rlog(x[index]),-338995.5627).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+175.254, adf1(1)*-022.235, adf2(2)*+090.459, adf3(3)*-078.912, adf4(4)*-569.863, adf7(7)*+777.568], [0, 0, 0, 0, 1], 489.734)
result=p(); 0.6666666666666666
IndLenGenome:283
IndGenome:[24, 37, 24, 12, 52, 35, 13, 79, 61, 73, 86, 32, 55, 5, 31, 16, 77, 41, 2, 27, 26, 65, 101, 41, 92, 47, 29, 21, 41, 49, 78, 96, 93, 10, 23, 85, 88, 22, 61, 39, 29, 35, 25, 14, 97, 74, 52, 67, 59, 11, 3, 74, 79, 91, 69, 23, 58, 56, 37, 83, 67, 68, 40, 25, 36, 97, 95, 23, 89, 51, 92, 56, 52, 59, 95, 18, 61, 79, 74, 17, 55, 29, 42, 37, 50, 86, 54, 8, 62, 74, 73, 93, 68, 22, 48, 62, 79, 70, 76, 88, 67, 33, 16, 70, 11, 74, 68, 79, 92, 46, 15, 78, 43, 11, 18, 27, 57, 31, 59, 82, 52, 88, 54, 47, 18, 47, 20, 26, 90, 27, 45, 90, 69, 18, 23, 98, 93, 69, 32, 42, 74, 34, 90, 74, 29, 35, 37, 70, 59, 88, 2, 34, 41, 64, 12, 4, 16, 30, 12, 62, 62, 85, 27, 22, 17, 49, 23, 94, 97, 85, 55, 81, 93, 36, 30, 27, 41, 30, 79, 55, 69, 64, 47, 47, 54, 60, 97, 51, 67, 17, 15, 73, 14, 8, 46, 90, 28, 12, 68, 75, 0, 26, 80, 62, 14, 81, 77, 70, 74, 36, 22, 26, 58, 64, 9, 66, 2, 72, 1, 79, 59, 38, 57, 95, 96, 1, 96, 71, 60, 37, 69, 94, 0, 6, 83, 84, 45, 19, 23, 66, 11, 87, 2, 29, 92, 49, 29, 85, 16, 63, 92, 42, 71, 46, 98, 88, 43, 85, 51, 14, 83, 29, 39, 33, 40, 64, 58, 28, 93, 92, 24, 83, 29, 30, 67, 23, 1, 98, 64, 18, 63, 67, 34]
last_save: 1029

Gen:18
TrainFitness:0.8333333333333334
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],+015892.5695).all():
      return False
    else:
      return True
  def adf1(index):
    if np.greater(np.cos(x[index]),-978618.4670).all():
      if np.less(rlog(x[index]),+419732.8998).all():
        return False
      else:
        return True
      return False
    else:
      if np.greater(x[index],-895493.4784).all():
        return True
      else:
        return True
      return False
  def adf2(index):
    if np.equal(np.cos(x[index]),-305720.2161).all():
      return True
    else:
      return True
  def adf3(index):
    if np.equal(sigmoid(x[index]),-864534.4325).all():
      if np.equal(np.tanh(x[index]),-077339.7825).all():
        return False
      else:
        return True
      return False
    else:
      if np.equal(x[index],-421510.4931).all():
        return False
      else:
        return False
      return False
  def adf4(index):
    if np.greater(psqrt(x[index]),-892160.6998).all():
      return True
    else:
      return True
  def adf7(index):
    if np.equal(x[index],+649453.6203).all():
      if np.equal(np.tanh(x[index]),+278794.9782).all():
        return True
      else:
        return False
      return True
    else:
      if np.less(x[index],-182172.1231).all():
        return True
      else:
        return True
      return False
  return multiple_operation([adf0(0)*+861.354, adf1(1)*+457.132, adf2(2)*-640.710, adf3(3)*-397.825, adf4(4)*+311.171, adf7(7)*-597.789], [1, 0, 0, 0, 1], 364.920)
result=p(); 0.8333333333333334
IndLenGenome:394
IndGenome:[29, 51, 90, 25, 72, 61, 29, 52, 88, 50, 91, 25, 98, 29, 52, 75, 86, 79, 55, 37, 68, 49, 22, 54, 84, 56, 25, 94, 15, 18, 69, 37, 58, 66, 41, 28, 64, 46, 27, 20, 75, 31, 14, 22, 91, 38, 56, 64, 61, 49, 97, 53, 42, 28, 59, 9, 48, 97, 46, 91, 59, 36, 89, 61, 75, 37, 58, 99, 35, 84, 19, 13, 24, 97, 98, 14, 54, 76, 53, 36, 37, 8, 76, 49, 70, 47, 23, 43, 60, 15, 7, 72, 90, 12, 31, 46, 41, 36, 92, 85, 14, 66, 74, 18, 63, 14, 59, 58, 68, 66, 64, 45, 23, 24, 74, 83, 32, 55, 63, 89, 96, 14, 80, 67, 71, 20, 77, 57, 33, 23, 59, 57, 58, 12, 75, 17, 26, 89, 23, 71, 91, 11, 17, 17, 54, 72, 91, 85, 91, 30, 54, 89, 23, 71, 29, 11, 17, 71, 37, 63, 28, 65, 99, 27, 47, 78, 39, 62, 61, 16, 60, 56, 59, 79, 8, 76, 64, 89, 72, 80, 38, 57, 11, 34, 33, 6, 64, 69, 4, 15, 3, 46, 92, 50, 53, 63, 11, 20, 20, 44, 60, 66, 92, 27, 38, 57, 89, 64, 79, 87, 8, 92, 54, 91, 92, 67, 85, 85, 39, 71, 34, 51, 28, 22, 51, 87, 52, 41, 62, 53, 21, 14, 60, 79, 31, 67, 55, 82, 76, 78, 26, 81, 23, 65, 74, 95, 10, 28, 14, 5, 87, 91, 83, 32, 55, 63, 89, 96, 14, 80, 67, 71, 20, 77, 57, 33, 23, 59, 57, 58, 12, 75, 17, 26, 89, 23, 71, 91, 11, 17, 71, 37, 63, 28, 65, 99, 27, 47, 78, 39, 62, 61, 16, 60, 56, 59, 79, 33, 76, 64, 89, 72, 80, 38, 97, 11, 34, 33, 6, 64, 69, 4, 15, 3, 85, 92, 50, 53, 63, 11, 20, 20, 44, 60, 66, 92, 27, 41, 6, 24, 66, 38, 59, 1, 89, 70, 42, 7, 76, 15, 27, 88, 33, 88, 14, 12, 57, 47, 93, 55, 80, 24, 31, 20, 17, 29, 95, 2, 80, 41, 94, 78, 48, 6, 85, 13, 11, 18, 78, 53, 62, 59, 8, 75, 30, 3, 79, 36, 52, 58, 77, 5, 41, 98, 72, 3, 89, 3, 73, 92, 62, 28, 33, 88]
last_save: 1029

Gen:2018
last_save: 1029
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(rlog(x[index]),-781549.2387).all():
      return True
    else:
      return True
  def adf1(index):
    if np.equal(np.sin(x[index]),+050483.5361).all():
      return True
    else:
      return True
  def adf2(index):
    if np.equal(x[index],+898808.6880).all():
      return False
    else:
      return False
  def adf3(index):
    if np.greater(x[index],+034542.2382).all():
      return False
    else:
      return True
  def adf4(index):
    if np.less(x[index],+293536.1539).all():
      return True
    else:
      return False
  def adf7(index):
    if np.less(x[index],-221979.8555).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*-049.422, adf1(1)*-493.907, adf2(2)*-321.321, adf3(3)*-393.601, adf4(4)*-226.422, adf7(7)*-262.254], [0, 1, 0, 1, 1], 127.779)
result=p(); 0.8333333333333334
IndLenGenome:282
IndGenome:[6, 2, 80, 86, 90, 19, 19, 89, 51, 38, 14, 48, 31, 79, 35, 20, 49, 57, 38, 97, 67, 53, 78, 98, 89, 7, 50, 75, 50, 88, 59, 50, 43, 80, 20, 72, 31, 75, 39, 12, 92, 29, 60, 14, 89, 38, 19, 47, 23, 30, 37, 30, 24, 96, 100, 93, 82, 32, 89, 77, 12, 97, 58, 78, 36, 31, 53, 53, 21, 83, 46, 98, 90, 34, 56, 94, 39, 42, 30, 34, 11, 30, 11, 57, 82, 25, 79, 42, 28, 92, 99, 36, 71, 28, 38, 75, 89, 87, 25, 67, 54, 62, 68, 42, 38, 90, 19, 88, 73, 13, 45, 76, 63, 74, 91, 91, 39, 14, 15, 70, 23, 6, 19, 50, 82, 17, 55, 43, 30, 91, 12, 32, 34, 32, 25, 72, 62, 71, 83, 72, 59, 12, 55, 34, 72, 12, 80, 37, 36, 89, 52, 96, 62, 62, 28, 83, 31, 74, 92, 29, 95, 22, 35, 76, 95, 53, 33, 73, 93, 29, 90, 13, 44, 66, 91, 46, 20, 15, 50, 35, 58, 51, 53, 90, 29, 14, 94, 49, 0, 91, 27, 32, 80, 43, 61, 22, 22, 76, 53, 60, 92, 3, 51, 31, 100, 49, 39, 84, 93, 1, 63, 98, 7, 33, 49, 5, 69, 86, 0, 30, 66, 19, 7, 90, 35, 51, 6, 28, 21, 52, 83, 99, 74, 22, 48, 18, 97, 36, 95, 52, 4, 71, 65, 31, 67, 27, 93, 94, 39, 25, 13, 45, 21, 7, 80, 64, 62, 74, 12, 40, 51, 48, 7, 19, 100, 28, 72, 59, 92, 51, 12, 16, 17, 65, 67, 7, 75, 36, 2, 3, 68, 32]
last_save: 10210

Gen:2001
last_save: 10210
Exit:FalseFalseTrue