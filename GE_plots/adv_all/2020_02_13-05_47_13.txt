Dataset:Meander/Full.csv
FS:False
Seed:1237
Size:10

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.7777777777777778
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],-833612.4985).all():
      return True
    else:
      return True
  def adf1(index):
    if np.greater(x[index],-027785.5919).all():
      return False
    else:
      return False
  def adf2(index):
    if np.less(rlog(x[index]),-216859.1742).all():
      return False
    else:
      return True
  def adf3(index):
    if np.less(np.tanh(x[index]),+673152.9290).all():
      return True
    else:
      return True
  def adf4(index):
    if np.less(psqrt(x[index]),+626681.9696).all():
      return True
    else:
      return True
  def adf5(index):
    if np.equal(np.tanh(x[index]),-229946.1185).all():
      return False
    else:
      return True
  def adf6(index):
    if np.less(np.cos(x[index]),-654898.6934).all():
      return False
    else:
      return False
  def adf7(index):
    if np.equal(np.cos(x[index]),-860538.1408).all():
      return True
    else:
      return True
  def adf8(index):
    if np.greater(np.tanh(x[index]),+405757.4052).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*-056.414, adf1(1)*-855.360, adf2(2)*+752.841, adf3(3)*+923.938, adf4(4)*-352.987, adf5(5)*-853.781, adf6(6)*+035.586, adf7(7)*+547.978, adf8(8)*-906.195], [0, 1, 1, 1, 0, 1, 1, 0], 460.867)
result=p(); 0.6666666666666666
IndLenGenome:420
IndGenome:[70, 82, 44, 3, 46, 92, 85, 34, 27, 61, 19, 38, 50, 45, 12, 17, 35, 67, 97, 30, 86, 90, 66, 88, 90, 83, 42, 79, 24, 93, 50, 46, 34, 15, 65, 71, 4, 9, 87, 78, 49, 53, 45, 11, 84, 68, 95, 22, 61, 28, 7, 62, 20, 41, 3, 36, 24, 53, 5, 48, 52, 82, 4, 94, 38, 25, 21, 64, 28, 58, 81, 95, 93, 26, 62, 76, 65, 12, 71, 99, 84, 87, 6, 95, 83, 45, 93, 38, 25, 8, 61, 95, 31, 14, 43, 97, 32, 29, 92, 11, 26, 42, 38, 65, 27, 91, 54, 72, 11, 74, 74, 89, 8, 90, 73, 17, 36, 26, 61, 32, 39, 77, 78, 45, 15, 57, 50, 58, 19, 42, 45, 37, 20, 68, 28, 30, 52, 46, 28, 46, 31, 33, 23, 27, 25, 87, 70, 15, 61, 91, 93, 69, 99, 17, 55, 39, 55, 38, 51, 38, 82, 83, 42, 92, 46, 12, 10, 92, 36, 29, 95, 58, 43, 92, 61, 61, 55, 97, 16, 83, 52, 8, 72, 95, 15, 20, 22, 66, 59, 89, 52, 73, 11, 18, 19, 67, 85, 26, 2, 54, 32, 39, 31, 42, 35, 18, 95, 67, 19, 52, 99, 75, 75, 80, 79, 34, 25, 72, 59, 17, 84, 8, 24, 32, 14, 29, 47, 48, 61, 66, 76, 11, 76, 28, 20, 91, 60, 28, 58, 62, 16, 13, 91, 6, 18, 40, 95, 40, 74, 46, 18, 37, 28, 71, 88, 76, 55, 14, 19, 77, 64, 88, 28, 53, 57, 99, 66, 25, 75, 35, 23, 61, 91, 16, 52, 29, 68, 24, 83, 38, 21, 20, 65, 54, 28, 16, 33, 43, 72, 65, 67, 96, 84, 27, 72, 19, 82, 75, 22, 96, 99, 4, 58, 72, 91, 44, 98, 17, 19, 76, 45, 92, 31, 58, 37, 8, 90, 27, 13, 91, 59, 24, 32, 70, 52, 14, 27, 50, 99, 50, 3, 89, 91, 16, 39, 8, 25, 3, 85, 86, 85, 56, 43, 80, 23, 39, 61, 21, 87, 96, 55, 88, 88, 19, 85, 38, 11, 34, 21, 95, 83, 92, 81, 20, 52, 26, 82, 49, 56, 77, 7, 16, 42, 85, 59, 75, 61, 67, 15, 40, 80, 88, 30, 28, 50, 6, 79, 65, 36, 84, 23, 84, 65, 25, 41, 9, 97, 46, 99, 59, 94, 99, 51, 37, 86, 38, 84, 70, 14, 78, 14, 86, 73, 50, 55, 15, 5, 16, 78, 100]
last_save: 1034

Gen:27
TrainFitness:0.7777777777777778
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],+056689.3138).all():
      return False
    else:
      return True
  def adf1(index):
    if np.less(np.sin(x[index]),-654506.5808).all():
      if np.greater(x[index],+019372.2210).all():
        return True
      else:
        return True
      return False
    else:
      if np.equal(x[index],+356988.7562).all():
        return True
      else:
        return False
      return False
  def adf2(index):
    if np.equal(np.cos(x[index]),+074100.7382).all():
      return False
    else:
      return False
  def adf3(index):
    if np.greater(x[index],+048716.0840).all():
      return True
    else:
      return True
  def adf4(index):
    if np.greater(sigmoid(x[index]),+559379.9725).all():
      return True
    else:
      return True
  def adf5(index):
    if np.equal(np.tanh(x[index]),-716592.9401).all():
      return True
    else:
      return True
  def adf6(index):
    if np.equal(x[index],-793788.3255).all():
      if np.greater(rlog(x[index]),-589373.7556).all():
        return False
      else:
        return False
      return True
    else:
      if np.greater(x[index],+021525.7196).all():
        return True
      else:
        return False
      return True
  def adf7(index):
    if np.less(np.cos(x[index]),+002775.6738).all():
      return True
    else:
      return False
  def adf8(index):
    if np.equal(x[index],+790257.0483).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*-646.564, adf1(1)*+346.422, adf2(2)*+415.927, adf3(3)*-381.690, adf4(4)*-987.186, adf5(5)*+184.911, adf6(6)*-977.895, adf7(7)*-125.724, adf8(8)*+605.205], [0, 1, 1, 0, 1, 1, 0, 0], 238.435)
result=p(); 0.7777777777777778
IndLenGenome:457
IndGenome:[79, 44, 46, 71, 86, 15, 9, 76, 12, 40, 85, 36, 6, 88, 99, 13, 61, 93, 28, 77, 22, 18, 36, 36, 16, 76, 78, 69, 59, 99, 46, 35, 54, 85, 50, 96, 15, 28, 30, 68, 17, 9, 35, 85, 80, 62, 90, 21, 39, 53, 7, 72, 42, 82, 41, 40, 46, 78, 71, 47, 29, 45, 37, 64, 58, 43, 25, 86, 19, 18, 48, 37, 5, 26, 62, 52, 99, 69, 71, 63, 92, 24, 31, 20, 96, 55, 60, 47, 94, 11, 20, 30, 37, 73, 98, 12, 53, 83, 90, 11, 63, 93, 52, 86, 76, 60, 44, 48, 87, 31, 66, 50, 8, 84, 20, 36, 96, 32, 33, 96, 78, 69, 12, 78, 76, 75, 75, 99, 3, 37, 19, 79, 27, 2, 85, 64, 94, 95, 21, 98, 68, 38, 74, 49, 70, 87, 51, 36, 55, 89, 22, 39, 24, 40, 31, 42, 94, 38, 94, 56, 47, 49, 64, 55, 98, 67, 39, 63, 67, 78, 38, 63, 12, 35, 45, 49, 57, 98, 34, 58, 35, 17, 45, 78, 89, 93, 77, 63, 7, 35, 85, 16, 45, 45, 54, 59, 78, 37, 38, 70, 43, 60, 72, 51, 25, 22, 95, 77, 21, 59, 56, 42, 81, 94, 11, 57, 16, 14, 19, 29, 36, 3, 50, 90, 12, 47, 67, 25, 66, 77, 53, 58, 20, 41, 34, 43, 59, 41, 48, 52, 69, 67, 99, 70, 42, 75, 57, 20, 84, 48, 93, 99, 89, 28, 29, 12, 39, 41, 46, 34, 56, 85, 76, 54, 85, 90, 36, 83, 74, 76, 94, 12, 12, 85, 12, 93, 4, 71, 25, 49, 72, 47, 31, 87, 77, 53, 98, 51, 26, 19, 20, 12, 29, 41, 79, 38, 27, 21, 38, 76, 47, 78, 56, 61, 68, 84, 79, 11, 51, 56, 89, 14, 89, 37, 47, 88, 49, 15, 3, 3, 95, 41, 2, 25, 37, 12, 34, 1, 60, 12, 36, 20, 95, 92, 10, 65, 61, 48, 93, 75, 32, 29, 37, 80, 76, 47, 2, 83, 68, 54, 13, 55, 62, 52, 84, 17, 13, 58, 19, 53, 19, 95, 9, 85, 57, 29, 36, 87, 46, 7, 43, 83, 53, 10, 58, 64, 49, 68, 30, 26, 27, 46, 6, 21, 94, 89, 12, 96, 74, 34, 53, 49, 60, 62, 36, 18, 73, 80, 79, 7, 48, 51, 15, 53, 83, 20, 89, 35, 43, 75, 22, 98, 88, 30, 18, 29, 34, 11, 62, 90, 100, 79, 67, 96, 41, 36, 51, 59, 46, 32, 57, 80, 46, 36, 62, 24, 38, 38, 6, 91, 61, 53, 51, 3, 97, 27, 2, 14, 57, 80, 60, 45, 31, 66, 0, 22, 22]
last_save: 1034

Gen:2027
last_save: 1034
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.7777777777777778
TestFitness:0.5555555555555556
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],-759455.3856).all():
      return False
    else:
      return True
  def adf1(index):
    if np.less(x[index],+998368.6631).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(x[index],+116948.1090).all():
      return False
    else:
      return False
  def adf3(index):
    if np.less(x[index],+030263.2337).all():
      return False
    else:
      return True
  def adf4(index):
    if np.greater(x[index],-778688.4187).all():
      return True
    else:
      return True
  def adf5(index):
    if np.less(np.cos(x[index]),+984731.1257).all():
      return True
    else:
      return False
  def adf6(index):
    if np.less(rlog(x[index]),+880826.1857).all():
      return False
    else:
      return False
  def adf7(index):
    if np.greater(x[index],-225233.4525).all():
      return True
    else:
      return False
  def adf8(index):
    if np.less(x[index],-101642.8601).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*-884.683, adf1(1)*+450.361, adf2(2)*-519.001, adf3(3)*-819.537, adf4(4)*-200.991, adf5(5)*+215.227, adf6(6)*-812.050, adf7(7)*-072.933, adf8(8)*+283.244], [0, 0, 1, 0, 0, 0, 0, 0], 016.191)
result=p(); 0.7777777777777778
IndLenGenome:412
IndGenome:[3, 77, 93, 27, 97, 74, 61, 27, 46, 11, 22, 54, 14, 79, 60, 94, 24, 73, 21, 43, 80, 78, 26, 39, 23, 42, 42, 11, 23, 70, 6, 59, 23, 47, 71, 25, 98, 95, 9, 83, 42, 35, 3, 88, 99, 43, 15, 5, 73, 71, 19, 70, 37, 28, 70, 39, 29, 25, 25, 27, 38, 98, 89, 64, 29, 83, 43, 48, 32, 79, 35, 88, 29, 81, 45, 50, 41, 77, 81, 79, 100, 18, 58, 10, 41, 79, 47, 95, 89, 15, 68, 49, 21, 36, 60, 24, 5, 47, 81, 21, 13, 28, 67, 63, 29, 92, 28, 87, 38, 81, 39, 20, 60, 14, 91, 93, 52, 52, 40, 25, 91, 91, 77, 96, 94, 40, 50, 55, 27, 90, 20, 36, 50, 51, 11, 74, 78, 59, 20, 31, 19, 22, 10, 58, 47, 88, 18, 81, 23, 39, 11, 29, 93, 89, 84, 93, 12, 28, 72, 65, 69, 96, 86, 67, 83, 19, 35, 80, 61, 68, 21, 72, 58, 74, 57, 28, 76, 29, 11, 11, 93, 20, 14, 70, 69, 66, 10, 42, 12, 76, 26, 82, 85, 68, 86, 92, 25, 62, 71, 61, 9, 25, 42, 31, 48, 33, 42, 63, 28, 28, 68, 61, 98, 45, 22, 4, 57, 38, 13, 61, 95, 77, 35, 84, 37, 14, 84, 90, 39, 75, 99, 90, 59, 75, 64, 78, 91, 52, 33, 73, 26, 94, 46, 16, 20, 55, 12, 25, 97, 39, 43, 25, 34, 52, 78, 13, 98, 23, 36, 81, 23, 47, 58, 72, 36, 65, 71, 59, 60, 17, 56, 73, 33, 76, 85, 92, 20, 50, 57, 61, 60, 97, 92, 62, 49, 70, 9, 49, 35, 82, 81, 2, 1, 81, 80, 55, 64, 90, 85, 31, 27, 22, 77, 31, 68, 16, 94, 74, 31, 40, 49, 57, 40, 61, 41, 83, 72, 10, 96, 6, 75, 59, 99, 67, 21, 70, 75, 16, 67, 16, 13, 99, 46, 95, 1, 32, 77, 14, 48, 90, 42, 80, 34, 49, 94, 21, 36, 60, 70, 64, 60, 76, 18, 33, 21, 27, 21, 57, 26, 8, 69, 37, 74, 87, 77, 45, 52, 21, 49, 66, 92, 4, 69, 90, 59, 70, 24, 4, 75, 31, 100, 82, 25, 22, 66, 89, 2, 95, 23, 41, 8, 94, 35, 1, 16, 9, 70, 2, 1, 27, 75, 52, 46, 18, 26, 65, 26, 75, 4, 57, 36, 92]
last_save: 1035

Gen:2001
last_save: 1035
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.7777777777777778
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],-976408.1987).all():
      return False
    else:
      return False
  def adf1(index):
    if np.equal(rlog(x[index]),+941041.5025).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(rlog(x[index]),-563345.6511).all():
      return False
    else:
      return True
  def adf3(index):
    if np.greater(rlog(x[index]),+970640.5833).all():
      return False
    else:
      return True
  def adf4(index):
    if np.less(x[index],-243290.3310).all():
      return False
    else:
      return True
  def adf5(index):
    if np.less(x[index],-576821.2118).all():
      return False
    else:
      return False
  def adf6(index):
    if np.less(x[index],+827671.3472).all():
      return False
    else:
      return False
  def adf7(index):
    if np.greater(psqrt(x[index]),-983323.2669).all():
      return False
    else:
      return False
  def adf8(index):
    if np.equal(x[index],-022811.3974).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+117.740, adf1(1)*+936.757, adf2(2)*-170.147, adf3(3)*+703.631, adf4(4)*-089.052, adf5(5)*+658.114, adf6(6)*-526.277, adf7(7)*+471.977, adf8(8)*+008.660], [0, 1, 1, 0, 1, 0, 1, 0], 358.217)
result=p(); 0.6666666666666666
IndLenGenome:415
IndGenome:[60, 59, 23, 53, 83, 89, 57, 46, 59, 37, 81, 93, 1, 53, 67, 45, 34, 85, 37, 17, 61, 64, 6, 12, 11, 47, 27, 94, 53, 24, 7, 62, 61, 8, 87, 20, 41, 34, 94, 88, 6, 28, 76, 41, 63, 31, 3, 38, 91, 89, 34, 3, 24, 59, 24, 41, 22, 18, 89, 37, 79, 97, 36, 92, 14, 9, 68, 12, 69, 21, 85, 75, 19, 55, 8, 61, 98, 24, 9, 57, 98, 99, 33, 62, 27, 73, 21, 56, 97, 35, 40, 98, 14, 80, 20, 25, 89, 49, 53, 25, 30, 78, 14, 60, 74, 40, 72, 78, 25, 53, 59, 71, 49, 69, 8, 80, 62, 14, 92, 67, 71, 52, 66, 92, 92, 92, 30, 5, 74, 93, 37, 34, 33, 99, 75, 91, 64, 23, 71, 15, 21, 79, 60, 27, 49, 51, 31, 72, 74, 71, 17, 60, 55, 94, 31, 57, 65, 84, 60, 45, 64, 94, 2, 14, 74, 61, 80, 86, 49, 79, 76, 46, 67, 90, 91, 13, 63, 68, 50, 20, 58, 26, 45, 93, 35, 10, 27, 46, 85, 9, 96, 79, 99, 85, 27, 44, 57, 87, 52, 67, 36, 56, 41, 84, 26, 12, 82, 23, 55, 37, 2, 86, 38, 56, 66, 81, 10, 63, 40, 30, 38, 79, 67, 85, 17, 76, 67, 55, 61, 82, 23, 53, 53, 40, 79, 41, 39, 44, 28, 14, 47, 79, 63, 81, 41, 24, 29, 51, 67, 89, 78, 46, 93, 40, 93, 22, 23, 94, 61, 37, 37, 27, 46, 17, 32, 28, 56, 23, 75, 83, 71, 46, 61, 28, 94, 36, 75, 18, 92, 7, 71, 25, 39, 44, 28, 33, 0, 54, 43, 28, 15, 27, 38, 49, 59, 44, 33, 10, 94, 50, 1, 99, 38, 72, 17, 58, 52, 32, 47, 83, 42, 1, 20, 84, 29, 19, 6, 1, 88, 65, 100, 84, 2, 48, 54, 12, 99, 57, 67, 94, 26, 18, 79, 46, 40, 60, 25, 80, 67, 2, 40, 2, 98, 88, 91, 16, 88, 16, 44, 71, 62, 94, 5, 21, 18, 71, 60, 61, 65, 38, 8, 29, 19, 11, 34, 81, 90, 77, 36, 64, 16, 54, 34, 36, 34, 7, 51, 7, 36, 84, 46, 31, 88, 93, 43, 81, 55, 10, 91, 24, 39, 71, 39, 67, 1, 27, 27, 49, 1, 84, 85, 18, 50, 61, 48, 81, 55, 49, 79, 32, 86, 98, 67, 19, 61]
last_save: 1036

Gen:3
TrainFitness:0.7777777777777778
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(np.cos(x[index]),-447038.8140).all():
      return True
    else:
      return False
  def adf1(index):
    if np.less(x[index],+024578.3726).all():
      return True
    else:
      return False
  def adf2(index):
    if np.less(np.tanh(x[index]),-476412.5282).all():
      return False
    else:
      return True
  def adf3(index):
    if np.less(np.tanh(x[index]),+741524.9786).all():
      return False
    else:
      return False
  def adf4(index):
    if np.greater(x[index],-428597.2192).all():
      if np.equal(np.cos(x[index]),-136943.7107).all():
        return False
      else:
        return False
      return True
    else:
      if np.less(x[index],+824559.4532).all():
        return True
      else:
        return True
      return True
  def adf5(index):
    if np.greater(x[index],+442842.6843).all():
      return True
    else:
      return True
  def adf6(index):
    if np.less(x[index],-336249.6603).all():
      return False
    else:
      return False
  def adf7(index):
    if np.equal(sigmoid(x[index]),+210944.7546).all():
      return False
    else:
      return False
  def adf8(index):
    if np.less(x[index],-662105.3943).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+439.508, adf1(1)*+439.508, adf2(2)*+298.505, adf3(3)*+794.953, adf4(4)*+972.582, adf5(5)*-916.134, adf6(6)*+529.855, adf7(7)*-207.705, adf8(8)*-567.085], [1, 1, 1, 1, 0, 1, 0, 1], 794.648)
result=p(); 0.7777777777777778
IndLenGenome:491
IndGenome:[97, 58, 52, 19, 40, 34, 25, 87, 79, 72, 4, 74, 17, 20, 83, 78, 68, 31, 24, 20, 40, 11, 45, 87, 82, 41, 40, 44, 12, 30, 2, 14, 85, 67, 28, 43, 17, 32, 36, 22, 89, 58, 41, 34, 10, 14, 58, 57, 78, 44, 7, 96, 44, 41, 32, 25, 2, 78, 52, 85, 76, 69, 93, 22, 10, 74, 40, 90, 56, 47, 54, 21, 5, 52, 24, 49, 7, 58, 76, 47, 75, 3, 24, 9, 87, 35, 94, 49, 31, 94, 92, 88, 45, 59, 87, 22, 41, 49, 62, 57, 5, 52, 25, 96, 41, 47, 31, 93, 96, 39, 44, 33, 87, 21, 40, 37, 63, 35, 76, 97, 97, 19, 75, 22, 81, 98, 12, 84, 95, 85, 89, 84, 15, 13, 32, 82, 64, 26, 18, 27, 6, 89, 94, 98, 30, 64, 44, 22, 58, 84, 62, 26, 38, 74, 43, 40, 64, 26, 51, 52, 5, 79, 61, 86, 73, 83, 6, 72, 64, 39, 46, 96, 40, 83, 19, 67, 40, 73, 2, 34, 93, 53, 8, 97, 62, 31, 60, 19, 24, 64, 37, 25, 34, 26, 87, 73, 52, 17, 25, 17, 67, 29, 78, 86, 76, 12, 71, 40, 65, 93, 9, 4, 93, 37, 68, 97, 48, 43, 42, 87, 54, 93, 89, 55, 80, 18, 62, 58, 87, 54, 93, 89, 55, 80, 18, 62, 58, 44, 92, 69, 48, 35, 80, 15, 32, 38, 25, 47, 19, 44, 89, 35, 33, 43, 86, 26, 99, 27, 82, 85, 88, 62, 61, 81, 59, 29, 21, 46, 21, 43, 54, 66, 72, 98, 15, 52, 59, 28, 95, 35, 87, 63, 40, 92, 70, 87, 87, 20, 45, 30, 29, 95, 35, 36, 77, 50, 98, 95, 67, 31, 77, 39, 51, 98, 55, 40, 47, 29, 17, 89, 94, 16, 14, 28, 56, 22, 93, 21, 66, 74, 45, 28, 56, 81, 63, 36, 89, 73, 26, 55, 45, 51, 36, 19, 28, 97, 78, 71, 51, 91, 75, 19, 63, 15, 41, 88, 8, 87, 69, 15, 10, 25, 76, 57, 23, 6, 85, 71, 62, 98, 1, 98, 94, 51, 64, 75, 31, 49, 93, 97, 95, 25, 76, 67, 95, 48, 88, 15, 76, 64, 73, 18, 78, 54, 23, 57, 63, 95, 36, 58, 6, 90, 39, 17, 55, 93, 69, 5, 1, 74, 11, 44, 83, 16, 28, 2, 71, 93, 39, 43, 95, 28, 74, 33, 37, 67, 83, 61, 71, 21, 13, 16, 42, 87, 93, 78, 99, 87, 53, 95, 90, 91, 97, 73, 75, 16, 37, 55, 36, 62, 63, 12, 7, 13, 28, 43, 97, 69, 85, 66, 8, 8, 44, 72, 40, 14, 11, 21, 92, 49, 40, 7, 10, 55, 20, 64, 13, 91, 36, 57, 93, 9, 4, 46, 25, 46, 49, 16, 52, 82, 14, 6, 88, 5, 99, 80, 16, 29, 63, 47, 52]
last_save: 1036

Gen:2003
last_save: 1036
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.8888888888888888
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(sigmoid(x[index]),+004934.8621).all():
      return True
    else:
      return False
  def adf1(index):
    if np.greater(rlog(x[index]),-961991.1956).all():
      return True
    else:
      return True
  def adf2(index):
    if np.greater(x[index],-645437.1336).all():
      return True
    else:
      return True
  def adf3(index):
    if np.less(np.sin(x[index]),+358608.8959).all():
      return True
    else:
      return False
  def adf4(index):
    if np.less(x[index],+927430.7009).all():
      return False
    else:
      return True
  def adf5(index):
    if np.equal(x[index],+683584.2963).all():
      return False
    else:
      return True
  def adf6(index):
    if np.greater(x[index],-526773.3963).all():
      return True
    else:
      return True
  def adf7(index):
    if np.equal(np.sin(x[index]),+203080.6692).all():
      return True
    else:
      return False
  def adf8(index):
    if np.greater(x[index],-135396.4618).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*-563.621, adf1(1)*-985.960, adf2(2)*+426.201, adf3(3)*+536.071, adf4(4)*-766.669, adf5(5)*+485.285, adf6(6)*+595.656, adf7(7)*-565.127, adf8(8)*-957.404], [1, 0, 1, 0, 1, 1, 1, 0], 031.093)
result=p(); 0.6666666666666666
IndLenGenome:415
IndGenome:[2, 73, 99, 5, 18, 79, 44, 81, 2, 77, 8, 32, 60, 63, 90, 28, 53, 21, 19, 77, 18, 73, 34, 66, 86, 21, 90, 97, 53, 46, 39, 59, 45, 85, 96, 84, 24, 26, 5, 66, 61, 15, 20, 9, 99, 41, 17, 39, 30, 75, 53, 46, 68, 84, 47, 99, 47, 89, 26, 93, 85, 45, 32, 22, 71, 87, 90, 10, 76, 12, 45, 66, 35, 56, 46, 12, 41, 75, 64, 9, 90, 50, 15, 70, 34, 50, 25, 78, 17, 41, 93, 35, 46, 86, 45, 44, 28, 49, 35, 49, 30, 39, 36, 73, 62, 16, 94, 25, 94, 62, 37, 74, 69, 27, 86, 70, 80, 34, 2, 91, 99, 22, 17, 7, 54, 92, 87, 28, 47, 8, 19, 21, 28, 40, 83, 53, 15, 76, 78, 52, 87, 75, 84, 99, 88, 13, 77, 88, 21, 53, 33, 88, 26, 36, 10, 10, 52, 84, 75, 43, 96, 26, 75, 75, 16, 79, 23, 69, 23, 48, 76, 94, 61, 81, 20, 55, 36, 60, 69, 78, 53, 40, 90, 39, 94, 15, 29, 63, 20, 67, 84, 13, 91, 41, 83, 2, 87, 14, 10, 36, 96, 75, 26, 16, 37, 61, 78, 15, 22, 42, 98, 44, 34, 58, 63, 93, 27, 21, 25, 57, 2, 57, 79, 29, 12, 38, 96, 95, 76, 11, 41, 54, 83, 33, 99, 68, 16, 84, 45, 31, 39, 76, 75, 72, 14, 56, 78, 72, 60, 83, 94, 11, 85, 87, 13, 21, 66, 36, 49, 15, 88, 35, 62, 32, 46, 48, 13, 61, 96, 21, 19, 59, 60, 51, 89, 50, 89, 73, 95, 79, 58, 51, 65, 98, 100, 100, 65, 88, 36, 43, 93, 83, 67, 52, 23, 60, 13, 44, 47, 42, 97, 92, 50, 40, 45, 27, 62, 64, 45, 23, 42, 11, 10, 65, 71, 43, 15, 30, 13, 99, 14, 58, 59, 53, 52, 96, 24, 95, 52, 33, 42, 70, 63, 37, 11, 70, 19, 24, 46, 46, 31, 83, 0, 64, 78, 52, 59, 50, 43, 33, 25, 91, 54, 4, 13, 49, 16, 58, 57, 6, 40, 95, 36, 22, 8, 35, 97, 89, 16, 0, 82, 97, 21, 15, 25, 39, 11, 68, 74, 75, 70, 22, 25, 86, 96, 21, 57, 0, 81, 26, 39, 24, 5, 28, 84, 95, 81, 60, 44, 31, 14, 88, 48, 47, 46, 68, 1, 58, 32, 3, 42, 29, 8, 63, 66]
last_save: 1037

Gen:3
TrainFitness:0.7777777777777778
TestFitness:0.7777777777777778
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(np.cos(x[index]),-053651.6268).all():
      return True
    else:
      return False
  def adf1(index):
    if np.greater(x[index],-910833.9075).all():
      return True
    else:
      return False
  def adf2(index):
    if np.greater(rlog(x[index]),-744017.1265).all():
      return True
    else:
      return False
  def adf3(index):
    if np.equal(psqrt(x[index]),-859190.3272).all():
      return False
    else:
      return False
  def adf4(index):
    if np.greater(x[index],-230800.6625).all():
      return False
    else:
      return True
  def adf5(index):
    if np.greater(x[index],-660135.1818).all():
      return True
    else:
      return True
  def adf6(index):
    if np.equal(x[index],-001632.8658).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(x[index],+021191.0269).all():
      return False
    else:
      return True
  def adf8(index):
    if np.equal(np.sin(x[index]),+292834.9562).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*-170.327, adf1(1)*+259.199, adf2(2)*-278.286, adf3(3)*-762.644, adf4(4)*+333.493, adf5(5)*-370.278, adf6(6)*+470.829, adf7(7)*-797.848, adf8(8)*-543.099], [0, 1, 0, 1, 1, 1, 0, 0], 421.954)
result=p(); 0.7777777777777778
IndLenGenome:493
IndGenome:[26, 86, 2, 39, 8, 10, 55, 63, 47, 94, 20, 5, 53, 26, 85, 81, 76, 82, 56, 98, 16, 77, 52, 23, 45, 13, 94, 61, 67, 29, 101, 10, 68, 43, 43, 39, 90, 67, 55, 86, 69, 30, 55, 87, 48, 82, 43, 53, 20, 17, 64, 24, 30, 61, 77, 31, 92, 16, 95, 20, 27, 94, 63, 11, 40, 65, 21, 59, 39, 58, 5, 19, 11, 29, 50, 83, 82, 27, 22, 81, 23, 77, 99, 48, 69, 26, 19, 39, 12, 43, 20, 38, 50, 50, 56, 26, 32, 35, 89, 62, 82, 69, 21, 39, 82, 47, 49, 66, 56, 80, 31, 33, 55, 21, 58, 91, 48, 82, 20, 93, 89, 35, 5, 19, 83, 75, 40, 30, 41, 26, 13, 82, 18, 36, 15, 88, 74, 55, 19, 41, 69, 79, 48, 60, 24, 70, 72, 91, 51, 79, 11, 70, 42, 56, 29, 23, 10, 23, 31, 14, 22, 36, 64, 56, 80, 62, 79, 42, 98, 83, 34, 39, 35, 16, 62, 30, 58, 64, 21, 72, 57, 99, 21, 37, 80, 53, 92, 7, 98, 72, 53, 22, 55, 39, 11, 99, 89, 93, 77, 6, 82, 17, 68, 42, 48, 56, 61, 27, 85, 27, 56, 32, 46, 54, 34, 69, 64, 87, 23, 53, 83, 54, 59, 43, 66, 63, 80, 93, 97, 50, 72, 27, 88, 50, 56, 19, 54, 57, 30, 48, 62, 69, 83, 69, 52, 17, 39, 57, 58, 44, 58, 39, 43, 60, 65, 54, 93, 50, 49, 49, 25, 28, 97, 18, 65, 45, 15, 84, 42, 19, 34, 22, 31, 19, 95, 64, 52, 79, 42, 84, 44, 28, 96, 25, 8, 16, 58, 52, 35, 56, 9, 24, 23, 27, 90, 30, 15, 58, 19, 14, 75, 81, 98, 90, 19, 13, 43, 65, 87, 63, 41, 98, 63, 33, 83, 59, 42, 85, 88, 26, 92, 82, 21, 14, 90, 42, 66, 86, 29, 88, 97, 87, 32, 62, 61, 31, 23, 27, 35, 18, 58, 43, 38, 43, 86, 72, 15, 37, 59, 53, 89, 92, 38, 69, 72, 12, 60, 55, 69, 57, 67, 27, 21, 7, 92, 96, 87, 80, 42, 48, 21, 84, 89, 25, 41, 14, 61, 87, 27, 34, 83, 4, 32, 45, 7, 13, 48, 90, 21, 72, 85, 24, 67, 8, 62, 83, 41, 89, 46, 23, 30, 97, 82, 98, 77, 63, 72, 27, 40, 70, 42, 90, 58, 32, 21, 76, 48, 57, 17, 28, 35, 64, 84, 12, 5, 75, 43, 48, 10, 33, 75, 52, 83, 45, 78, 91, 32, 75, 22, 19, 35, 1, 14, 26, 28, 71, 5, 43, 60, 10, 23, 79, 31, 55, 70, 71, 19, 4, 66, 45, 67, 73, 80, 10, 37, 55, 82, 75, 23, 42, 3, 15, 91, 10, 14, 63, 3, 10, 9, 68, 20, 8, 90, 28, 49, 83, 83, 17, 88, 53, 1, 38, 66]
last_save: 1037

Gen:2003
last_save: 1037
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.7777777777777778
TestFitness:0.8888888888888888
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],-628519.5645).all():
      return True
    else:
      return False
  def adf1(index):
    if np.less(x[index],-975367.6760).all():
      return False
    else:
      return True
  def adf2(index):
    if np.less(psqrt(x[index]),-125169.5901).all():
      return False
    else:
      return False
  def adf3(index):
    if np.equal(np.tanh(x[index]),+616924.1415).all():
      return False
    else:
      return True
  def adf4(index):
    if np.greater(np.sin(x[index]),-685825.3122).all():
      return False
    else:
      return False
  def adf5(index):
    if np.less(x[index],-653259.1691).all():
      return True
    else:
      return False
  def adf6(index):
    if np.greater(x[index],-984195.2316).all():
      return True
    else:
      return False
  def adf7(index):
    if np.less(x[index],+030130.6696).all():
      return False
    else:
      return True
  def adf8(index):
    if np.equal(np.tanh(x[index]),-159684.9033).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+228.562, adf1(1)*+523.912, adf2(2)*+839.816, adf3(3)*-576.231, adf4(4)*+832.051, adf5(5)*-123.600, adf6(6)*-102.154, adf7(7)*-680.099, adf8(8)*+900.674], [1, 0, 0, 0, 0, 1, 1, 0], 049.406)
result=p(); 0.7777777777777778
IndLenGenome:415
IndGenome:[35, 87, 99, 77, 79, 71, 46, 79, 68, 77, 47, 6, 20, 33, 98, 65, 99, 43, 72, 36, 35, 85, 80, 55, 20, 57, 53, 22, 31, 91, 36, 36, 12, 59, 45, 61, 4, 46, 40, 79, 47, 38, 44, 6, 36, 55, 36, 73, 57, 12, 51, 44, 90, 3, 15, 10, 12, 19, 48, 92, 39, 4, 15, 39, 25, 40, 37, 51, 56, 67, 92, 11, 69, 22, 21, 62, 17, 92, 94, 86, 16, 91, 91, 71, 26, 41, 97, 43, 24, 67, 92, 86, 24, 49, 39, 35, 68, 12, 40, 75, 90, 71, 65, 84, 47, 81, 50, 76, 65, 58, 96, 31, 82, 66, 36, 91, 40, 73, 88, 65, 15, 11, 69, 38, 34, 80, 99, 74, 86, 85, 15, 76, 60, 73, 69, 47, 9, 45, 91, 90, 4, 51, 74, 17, 10, 67, 12, 82, 13, 85, 22, 24, 10, 15, 66, 21, 70, 54, 85, 32, 91, 78, 80, 83, 51, 7, 76, 14, 81, 59, 35, 15, 92, 17, 91, 46, 59, 82, 65, 33, 96, 63, 63, 78, 67, 12, 77, 60, 69, 56, 38, 58, 43, 96, 92, 51, 46, 36, 19, 96, 57, 34, 26, 73, 91, 16, 76, 29, 45, 51, 98, 85, 26, 98, 7, 21, 10, 31, 10, 39, 29, 61, 56, 95, 79, 25, 55, 30, 67, 82, 11, 78, 99, 10, 85, 55, 19, 97, 55, 73, 62, 96, 54, 26, 20, 76, 53, 81, 33, 17, 29, 65, 31, 25, 39, 87, 53, 78, 19, 63, 61, 86, 72, 95, 59, 53, 11, 45, 63, 29, 46, 64, 73, 84, 53, 48, 20, 28, 1, 74, 87, 68, 67, 52, 36, 5, 3, 45, 79, 98, 2, 5, 10, 95, 42, 62, 77, 69, 95, 52, 99, 73, 29, 17, 16, 81, 56, 21, 52, 55, 18, 10, 28, 20, 42, 68, 3, 22, 32, 89, 25, 93, 65, 11, 84, 81, 9, 6, 29, 43, 70, 53, 54, 31, 57, 87, 53, 79, 97, 80, 77, 81, 41, 14, 57, 6, 55, 75, 58, 27, 9, 89, 61, 52, 68, 4, 32, 88, 45, 78, 40, 66, 6, 93, 17, 16, 89, 14, 97, 75, 62, 51, 30, 37, 45, 95, 96, 27, 86, 81, 12, 74, 66, 87, 97, 59, 16, 42, 92, 100, 47, 45, 76, 36, 29, 83, 27, 65, 22, 3, 53, 14, 59, 22, 90, 17, 79, 83, 1, 35, 64, 5, 98, 31, 92]
last_save: 1038

Gen:2001
last_save: 1038
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.7777777777777778
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],-306087.0187).all():
      return True
    else:
      return False
  def adf1(index):
    if np.less(x[index],+028615.9693).all():
      return False
    else:
      return True
  def adf2(index):
    if np.less(x[index],-779548.0369).all():
      return False
    else:
      return False
  def adf3(index):
    if np.greater(x[index],+147447.1596).all():
      return False
    else:
      return True
  def adf4(index):
    if np.less(x[index],+766413.1966).all():
      return True
    else:
      return True
  def adf5(index):
    if np.less(x[index],+898987.4868).all():
      return False
    else:
      return False
  def adf6(index):
    if np.equal(rlog(x[index]),-551874.8763).all():
      return True
    else:
      return True
  def adf7(index):
    if np.greater(np.cos(x[index]),-942489.6002).all():
      return True
    else:
      return True
  def adf8(index):
    if np.equal(x[index],-494999.5721).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-360.838, adf1(1)*+680.494, adf2(2)*-742.830, adf3(3)*+599.856, adf4(4)*-831.608, adf5(5)*+009.839, adf6(6)*+696.694, adf7(7)*+125.250, adf8(8)*-014.077], [0, 0, 1, 0, 0, 0, 1, 0], 531.403)
result=p(); 0.7777777777777778
IndLenGenome:412
IndGenome:[75, 15, 83, 16, 62, 29, 60, 19, 35, 65, 37, 90, 92, 64, 91, 42, 83, 50, 29, 32, 29, 21, 19, 94, 39, 52, 75, 91, 40, 43, 2, 73, 23, 7, 47, 58, 6, 70, 2, 18, 70, 65, 68, 10, 36, 27, 94, 43, 33, 81, 80, 42, 60, 94, 50, 54, 75, 92, 49, 65, 50, 29, 16, 33, 58, 84, 29, 75, 36, 21, 42, 87, 4, 76, 61, 71, 52, 52, 96, 45, 84, 88, 31, 70, 81, 16, 48, 43, 45, 40, 26, 12, 36, 94, 79, 24, 10, 19, 30, 83, 99, 78, 63, 13, 81, 68, 91, 65, 96, 70, 89, 49, 67, 70, 33, 37, 14, 38, 33, 29, 55, 50, 32, 84, 36, 26, 88, 68, 58, 60, 70, 38, 22, 27, 47, 4, 40, 64, 33, 30, 78, 98, 22, 84, 29, 78, 68, 28, 68, 88, 98, 2, 21, 55, 21, 89, 84, 17, 55, 90, 38, 12, 49, 68, 93, 29, 79, 15, 57, 97, 54, 80, 51, 42, 96, 7, 89, 49, 99, 20, 25, 48, 94, 68, 94, 89, 96, 14, 46, 5, 55, 89, 64, 42, 37, 69, 34, 46, 37, 49, 15, 97, 36, 15, 90, 11, 44, 55, 58, 41, 87, 49, 86, 47, 58, 35, 99, 7, 10, 13, 19, 65, 37, 61, 19, 13, 33, 19, 63, 56, 38, 94, 19, 96, 59, 94, 41, 97, 36, 36, 85, 52, 92, 43, 97, 40, 10, 89, 46, 28, 76, 33, 91, 76, 16, 23, 89, 31, 94, 13, 98, 27, 99, 53, 77, 50, 99, 48, 37, 60, 55, 17, 90, 88, 31, 5, 23, 99, 67, 7, 88, 68, 33, 3, 94, 16, 68, 73, 93, 56, 87, 97, 40, 91, 8, 27, 31, 85, 16, 15, 38, 14, 47, 73, 86, 68, 33, 56, 27, 18, 3, 93, 84, 25, 59, 22, 63, 39, 84, 40, 70, 29, 97, 62, 20, 35, 18, 1, 39, 41, 80, 1, 99, 50, 62, 12, 57, 7, 21, 85, 77, 1, 92, 60, 35, 97, 14, 42, 75, 80, 43, 100, 76, 29, 94, 42, 82, 86, 33, 84, 26, 84, 69, 51, 58, 64, 1, 1, 31, 87, 22, 5, 35, 3, 43, 33, 82, 52, 77, 59, 63, 14, 68, 35, 25, 25, 88, 75, 78, 98, 67, 69, 85, 34, 28, 36, 29, 72, 81, 69, 19, 49, 91, 0, 59, 73, 16, 87, 60, 54, 62, 4]
last_save: 1039

Gen:2001
last_save: 1039
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.7777777777777778
TestFitness:0.5555555555555556
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],-837471.8612).all():
      return False
    else:
      return True
  def adf1(index):
    if np.equal(np.tanh(x[index]),-491297.0731).all():
      return True
    else:
      return False
  def adf2(index):
    if np.equal(sigmoid(x[index]),+362271.9313).all():
      return True
    else:
      return True
  def adf3(index):
    if np.greater(x[index],+022810.6256).all():
      return True
    else:
      return False
  def adf4(index):
    if np.greater(x[index],-147591.4222).all():
      return False
    else:
      return True
  def adf5(index):
    if np.greater(rlog(x[index]),-717340.6036).all():
      return False
    else:
      return False
  def adf6(index):
    if np.less(sigmoid(x[index]),+591479.6791).all():
      return False
    else:
      return False
  def adf7(index):
    if np.less(x[index],-892009.2523).all():
      return True
    else:
      return False
  def adf8(index):
    if np.equal(x[index],+719743.5671).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+326.079, adf1(1)*+515.704, adf2(2)*+243.846, adf3(3)*-595.509, adf4(4)*+832.061, adf5(5)*-134.606, adf6(6)*+145.924, adf7(7)*+521.973, adf8(8)*-334.905], [1, 1, 1, 1, 0, 1, 0, 1], 043.507)
result=p(); 0.7777777777777778
IndLenGenome:415
IndGenome:[44, 37, 29, 36, 87, 99, 46, 55, 27, 11, 28, 27, 58, 43, 13, 14, 61, 42, 74, 55, 67, 4, 79, 85, 89, 46, 68, 89, 44, 71, 40, 18, 54, 45, 21, 80, 63, 77, 59, 70, 2, 97, 52, 5, 22, 66, 3, 90, 75, 61, 12, 84, 10, 67, 49, 23, 81, 7, 12, 51, 62, 83, 66, 27, 85, 99, 43, 29, 80, 63, 64, 58, 81, 19, 46, 61, 72, 15, 4, 80, 64, 85, 55, 49, 50, 77, 73, 97, 67, 26, 61, 90, 25, 92, 54, 45, 41, 21, 21, 54, 32, 46, 34, 39, 48, 87, 27, 82, 53, 26, 47, 83, 15, 11, 85, 84, 76, 58, 93, 31, 52, 75, 29, 69, 50, 58, 33, 64, 95, 47, 47, 66, 74, 67, 57, 20, 84, 15, 19, 41, 61, 22, 80, 83, 18, 78, 70, 22, 41, 23, 63, 52, 16, 20, 81, 54, 85, 46, 74, 53, 83, 77, 49, 81, 64, 54, 79, 37, 43, 23, 63, 24, 53, 23, 59, 51, 28, 27, 97, 56, 54, 55, 76, 87, 81, 45, 18, 29, 26, 30, 11, 82, 40, 30, 73, 84, 41, 80, 99, 72, 22, 79, 88, 26, 66, 80, 62, 89, 70, 73, 53, 78, 50, 80, 75, 89, 5, 59, 10, 12, 12, 67, 84, 83, 92, 77, 53, 99, 30, 26, 75, 85, 50, 61, 95, 57, 99, 41, 74, 30, 87, 12, 61, 26, 79, 30, 8, 44, 87, 11, 81, 16, 19, 92, 51, 27, 43, 25, 22, 52, 37, 88, 85, 97, 33, 97, 21, 87, 59, 76, 54, 51, 97, 94, 32, 99, 19, 67, 80, 33, 4, 77, 31, 96, 47, 29, 56, 7, 60, 16, 20, 30, 85, 67, 18, 62, 65, 8, 28, 25, 5, 39, 64, 25, 32, 92, 31, 41, 7, 31, 29, 20, 68, 4, 26, 100, 41, 84, 23, 18, 8, 9, 44, 50, 98, 48, 70, 36, 0, 13, 68, 31, 78, 24, 54, 22, 15, 88, 92, 45, 26, 39, 66, 30, 71, 40, 17, 96, 83, 38, 51, 1, 51, 11, 94, 4, 13, 16, 64, 63, 2, 62, 90, 2, 12, 1, 82, 86, 14, 61, 96, 87, 8, 23, 37, 72, 76, 95, 75, 35, 72, 72, 58, 26, 82, 100, 45, 77, 73, 82, 22, 55, 80, 35, 62, 32, 0, 40, 73, 14, 9, 65, 15, 87, 66, 68, 92, 28, 93, 54, 64, 17, 37, 58, 43]
last_save: 10310