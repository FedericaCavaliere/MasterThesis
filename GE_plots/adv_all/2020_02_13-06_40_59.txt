Dataset:Spiral/Full.csv
FS:False
Seed:1237
Size:10

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.5555555555555556
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(rlog(x[index]),+439527.2135).all():
      return True
    else:
      return False
  def adf1(index):
    if np.equal(rlog(x[index]),-265201.2537).all():
      return True
    else:
      return True
  def adf2(index):
    if np.less(x[index],+005436.6747).all():
      return False
    else:
      return True
  def adf3(index):
    if np.equal(rlog(x[index]),-845900.4174).all():
      return False
    else:
      return False
  def adf4(index):
    if np.less(np.sin(x[index]),+450875.8534).all():
      return False
    else:
      return False
  def adf5(index):
    if np.greater(x[index],-769095.0204).all():
      return True
    else:
      return False
  def adf6(index):
    if np.less(np.cos(x[index]),+272111.5244).all():
      return True
    else:
      return True
  def adf7(index):
    if np.less(x[index],-895474.3741).all():
      return True
    else:
      return False
  def adf8(index):
    if np.equal(x[index],-052240.5708).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*-403.358, adf1(1)*+046.667, adf2(2)*+945.239, adf3(3)*+660.032, adf4(4)*+223.561, adf5(5)*+518.218, adf6(6)*-261.473, adf7(7)*-764.833, adf8(8)*+167.685], [0, 1, 0, 1, 1, 1, 0, 1], 511.156)
result=p(); 0.6666666666666666
IndLenGenome:417
IndGenome:[62, 30, 8, 48, 84, 33, 92, 89, 42, 71, 79, 31, 85, 72, 2, 71, 51, 97, 26, 37, 75, 75, 81, 93, 45, 71, 79, 5, 55, 73, 42, 55, 56, 93, 86, 59, 22, 41, 6, 60, 87, 29, 35, 34, 41, 17, 38, 45, 56, 42, 35, 7, 37, 97, 19, 39, 16, 74, 18, 37, 55, 97, 28, 54, 30, 95, 54, 65, 68, 95, 93, 59, 93, 48, 64, 29, 8, 52, 20, 73, 29, 67, 93, 21, 52, 21, 75, 14, 85, 75, 71, 76, 20, 94, 19, 59, 91, 85, 82, 90, 51, 25, 20, 44, 40, 83, 79, 24, 35, 86, 28, 64, 90, 60, 27, 82, 12, 32, 87, 23, 68, 64, 52, 22, 32, 63, 37, 19, 65, 46, 67, 71, 2, 24, 36, 77, 8, 29, 88, 11, 42, 50, 1, 70, 72, 63, 94, 44, 9, 85, 34, 78, 94, 29, 88, 20, 32, 57, 45, 64, 50, 94, 62, 19, 84, 35, 14, 55, 83, 75, 57, 84, 76, 90, 48, 50, 44, 46, 74, 94, 67, 19, 44, 55, 28, 70, 37, 12, 58, 40, 31, 17, 20, 86, 76, 7, 46, 73, 72, 25, 23, 28, 25, 46, 41, 18, 91, 81, 14, 73, 43, 77, 76, 55, 50, 60, 47, 36, 35, 42, 79, 73, 11, 46, 30, 62, 26, 40, 42, 27, 12, 82, 20, 60, 26, 88, 23, 35, 96, 65, 88, 95, 47, 13, 51, 80, 24, 18, 88, 88, 31, 21, 60, 57, 13, 76, 51, 53, 24, 91, 85, 75, 80, 23, 96, 75, 92, 50, 52, 51, 72, 52, 73, 93, 47, 22, 44, 75, 67, 71, 26, 67, 70, 38, 34, 31, 16, 35, 38, 29, 26, 53, 40, 39, 75, 97, 95, 94, 89, 93, 93, 59, 64, 57, 25, 87, 5, 96, 36, 90, 40, 45, 46, 48, 50, 73, 52, 40, 45, 39, 82, 34, 11, 90, 88, 30, 11, 52, 53, 31, 34, 89, 38, 36, 0, 16, 49, 25, 72, 90, 25, 41, 77, 84, 7, 95, 47, 67, 27, 7, 95, 96, 59, 25, 22, 54, 70, 27, 68, 5, 54, 48, 53, 76, 21, 9, 92, 48, 45, 68, 13, 6, 40, 69, 47, 36, 24, 43, 3, 91, 88, 100, 18, 28, 63, 66, 39, 12, 26, 39, 93, 72, 25, 63, 10, 70, 51, 12, 37, 64, 20, 40, 86, 29, 0, 96, 25, 47, 88, 91, 92, 14, 96, 90, 71, 32, 40]
last_save: 1034

Gen:5
TrainFitness:0.6666666666666666
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(rlog(x[index]),+959205.0530).all():
      return False
    else:
      return False
  def adf1(index):
    if np.equal(x[index],-877974.6342).all():
      return False
    else:
      return False
  def adf2(index):
    if np.less(sigmoid(x[index]),+601519.8665).all():
      if np.greater(sigmoid(x[index]),-783806.4464).all():
        return False
      else:
        return True
      return False
    else:
      if np.less(np.tanh(x[index]),+182617.0082).all():
        return True
      else:
        return False
      return False
  def adf3(index):
    if np.equal(psqrt(x[index]),-830670.2876).all():
      return False
    else:
      return True
  def adf4(index):
    if np.equal(x[index],+922556.5087).all():
      return False
    else:
      return False
  def adf5(index):
    if np.less(x[index],+155083.1494).all():
      return True
    else:
      return False
  def adf6(index):
    if np.less(x[index],-380462.1432).all():
      return True
    else:
      return True
  def adf7(index):
    if np.greater(np.sin(x[index]),+535093.9767).all():
      if np.less(sigmoid(x[index]),+779438.8226).all():
        return False
      else:
        return True
      return True
    else:
      if np.equal(x[index],-449699.0018).all():
        return True
      else:
        return False
      return True
  def adf8(index):
    if np.greater(x[index],+025555.7495).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-521.630, adf1(1)*+847.709, adf2(2)*-716.836, adf3(3)*+274.463, adf4(4)*+813.556, adf5(5)*-307.903, adf6(6)*+132.837, adf7(7)*-805.871, adf8(8)*+644.315], [0, 0, 1, 0, 0, 0, 1, 1], 702.132)
result=p(); 0.6666666666666666
IndLenGenome:383
IndGenome:[80, 99, 66, 5, 29, 18, 40, 13, 8, 26, 69, 95, 79, 72, 50, 45, 40, 5, 93, 60, 97, 37, 77, 15, 14, 51, 23, 45, 63, 68, 77, 47, 69, 57, 74, 6, 13, 74, 42, 7, 23, 8, 62, 96, 37, 28, 45, 77, 16, 76, 36, 60, 51, 65, 71, 69, 68, 46, 96, 85, 43, 24, 24, 69, 84, 95, 79, 37, 18, 73, 28, 10, 86, 54, 94, 86, 44, 99, 40, 83, 53, 43, 18, 32, 63, 18, 38, 51, 18, 72, 26, 61, 67, 90, 80, 18, 2, 32, 79, 73, 92, 57, 59, 6, 17, 31, 21, 92, 78, 13, 30, 96, 37, 60, 42, 58, 37, 56, 73, 8, 61, 51, 83, 11, 62, 76, 66, 89, 42, 42, 95, 25, 16, 75, 60, 78, 27, 55, 41, 35, 23, 37, 83, 57, 86, 13, 31, 55, 55, 60, 48, 73, 71, 94, 19, 74, 52, 35, 48, 15, 46, 49, 28, 45, 30, 83, 58, 90, 54, 26, 92, 71, 24, 33, 12, 52, 10, 13, 6, 63, 21, 54, 84, 96, 68, 98, 15, 53, 35, 80, 69, 33, 79, 47, 46, 47, 47, 13, 52, 51, 61, 94, 56, 97, 97, 39, 14, 83, 58, 68, 42, 42, 76, 69, 16, 22, 53, 41, 11, 55, 21, 69, 74, 84, 89, 6, 69, 69, 90, 90, 91, 38, 58, 27, 98, 87, 71, 75, 29, 70, 20, 16, 70, 22, 65, 55, 75, 75, 17, 24, 69, 5, 90, 79, 11, 69, 100, 27, 15, 35, 2, 31, 6, 43, 60, 58, 42, 53, 68, 64, 97, 27, 30, 99, 37, 11, 0, 77, 91, 66, 38, 13, 46, 35, 42, 60, 72, 97, 64, 44, 56, 93, 28, 70, 9, 28, 31, 93, 65, 45, 56, 58, 81, 20, 33, 100, 57, 89, 80, 33, 63, 40, 97, 81, 73, 72, 38, 33, 47, 46, 93, 6, 48, 0, 15, 58, 77, 1, 86, 68, 73, 36, 84, 54, 23, 41, 5, 47, 30, 100, 9, 6, 76, 86, 5, 53, 43, 87, 90, 12, 21, 3, 72, 0, 11, 57, 15, 3, 28, 96, 20, 65, 9, 52, 41, 22, 15, 50, 83, 6, 48, 8, 34, 80, 3, 26, 60, 76, 17, 73, 7, 26, 56]
last_save: 1034

Gen:14
TrainFitness:0.7777777777777778
TestFitness:0.5555555555555556
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],+616074.9597).all():
      return False
    else:
      return False
  def adf1(index):
    if np.greater(np.cos(x[index]),-586758.6474).all():
      return True
    else:
      return False
  def adf2(index):
    if np.equal(np.tanh(x[index]),-258317.5769).all():
      return True
    else:
      return True
  def adf3(index):
    if np.greater(x[index],-050560.0977).all():
      return False
    else:
      return True
  def adf4(index):
    if np.greater(rlog(x[index]),-898953.7032).all():
      return True
    else:
      return True
  def adf5(index):
    if np.greater(x[index],-796171.9888).all():
      return False
    else:
      return False
  def adf6(index):
    if np.less(x[index],+006752.5435).all():
      return False
    else:
      return True
  def adf7(index):
    if np.greater(rlog(x[index]),+080000.4093).all():
      return True
    else:
      return True
  def adf8(index):
    if np.greater(x[index],+793934.7345).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-136.176, adf1(1)*-176.464, adf2(2)*-699.916, adf3(3)*+250.052, adf4(4)*-667.815, adf5(5)*+301.071, adf6(6)*+652.027, adf7(7)*+380.981, adf8(8)*-681.050], [1, 0, 1, 1, 0, 1, 1, 1], 837.636)
result=p(); 0.7777777777777778
IndLenGenome:442
IndGenome:[49, 83, 14, 93, 88, 71, 66, 38, 13, 66, 51, 56, 90, 67, 24, 49, 5, 89, 57, 51, 15, 32, 63, 96, 68, 91, 3, 11, 86, 65, 78, 26, 47, 25, 48, 16, 64, 77, 24, 14, 21, 35, 41, 20, 14, 14, 73, 37, 61, 32, 85, 78, 63, 61, 47, 65, 87, 36, 89, 56, 88, 17, 37, 96, 97, 57, 95, 62, 80, 15, 20, 25, 96, 80, 90, 9, 17, 37, 33, 86, 9, 27, 57, 36, 10, 50, 55, 11, 88, 19, 88, 79, 85, 83, 87, 50, 73, 52, 30, 70, 55, 21, 33, 99, 98, 27, 58, 67, 89, 36, 71, 57, 81, 79, 58, 48, 58, 65, 57, 59, 55, 73, 39, 73, 38, 38, 30, 70, 56, 27, 15, 32, 45, 34, 23, 15, 71, 80, 61, 45, 18, 34, 52, 97, 94, 26, 10, 28, 20, 80, 80, 20, 74, 30, 99, 23, 80, 64, 15, 21, 45, 77, 41, 40, 72, 87, 89, 23, 99, 13, 24, 67, 93, 54, 35, 24, 95, 7, 30, 85, 29, 67, 31, 23, 36, 61, 47, 26, 74, 75, 16, 41, 87, 16, 24, 96, 34, 42, 81, 81, 46, 59, 99, 39, 31, 86, 95, 58, 52, 42, 25, 30, 60, 85, 32, 33, 51, 79, 56, 56, 27, 68, 11, 15, 32, 92, 33, 13, 50, 71, 0, 77, 91, 66, 38, 13, 46, 35, 42, 60, 72, 97, 64, 44, 56, 93, 28, 70, 9, 28, 31, 93, 65, 45, 56, 58, 81, 20, 15, 100, 57, 89, 80, 33, 63, 40, 97, 81, 73, 72, 38, 33, 47, 46, 93, 6, 48, 0, 15, 58, 77, 1, 86, 68, 73, 36, 84, 54, 23, 3, 5, 47, 30, 100, 9, 6, 76, 86, 5, 53, 43, 87, 90, 72, 50, 36, 83, 7, 63, 14, 96, 56, 24, 79, 90, 9, 69, 78, 98, 75, 20, 93, 1, 96, 70, 25, 21, 89, 16, 53, 22, 93, 52, 67, 94, 89, 68, 48, 45, 64, 57, 79, 10, 2, 27, 29, 48, 78, 78, 4, 25, 18, 33, 70, 47, 73, 93, 14, 33, 94, 12, 53, 46, 15, 45, 34, 16, 40, 91, 37, 34, 3, 5, 41, 84, 98, 17, 83, 38, 0, 55, 37, 7, 84, 82, 85, 27, 67, 30, 83, 62, 93, 51, 16, 18, 86, 70, 4, 53, 39, 35, 5, 16, 38, 37, 3, 49, 74, 67, 88, 93, 86, 40, 83, 45, 3, 8, 8, 15, 79, 15, 86, 17, 89, 8, 4, 91, 32, 98, 2, 64, 24, 75, 21, 31, 69, 66, 10, 14, 43, 20, 18]
last_save: 1034

Gen:381
TrainFitness:0.8888888888888888
TestFitness:0.3333333333333333
MaxGenLen:605
Individual: def p():
  def adf0(index):
    if np.less(x[index],+916674.9221).all():
      return False
    else:
      return False
  def adf1(index):
    if np.greater(x[index],-658675.8637).all():
      return True
    else:
      return False
  def adf2(index):
    if np.equal(np.tanh(x[index]),-125831.7566).all():
      return False
    else:
      return True
  def adf3(index):
    if np.less(np.cos(x[index]),-050560.0977).all():
      return False
    else:
      return True
  def adf4(index):
    if np.greater(sigmoid(x[index]),-898953.7435).all():
      return True
    else:
      return True
  def adf5(index):
    if np.greater(x[index],-796171.9888).all():
      return False
    else:
      return False
  def adf6(index):
    if np.less(x[index],+006452.5435).all():
      return False
    else:
      return True
  def adf7(index):
    if np.greater(rlog(x[index]),+000000.4873).all():
      return True
    else:
      return False
  def adf8(index):
    if np.less(np.cos(x[index]),-361764.5617).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*-639.916, adf1(1)*+250.057, adf2(2)*+631.757, adf3(3)*-877.677, adf4(4)*+305.600, adf5(5)*-369.776, adf6(6)*+189.895, adf7(7)*-320.051, adf8(8)*-787.961], [1, 1, 0, 0, 0, 1, 1, 1], 393.880)
result=p(); 0.8888888888888888
IndLenGenome:602
IndGenome:[49, 83, 14, 93, 1, 71, 66, 38, 13, 9, 51, 56, 76, 67, 24, 49, 92, 42, 21, 51, 15, 32, 63, 66, 97, 9, 3, 32, 86, 65, 78, 26, 47, 25, 48, 16, 63, 77, 24, 13, 21, 5, 41, 20, 26, 77, 73, 53, 61, 32, 85, 78, 63, 61, 47, 65, 86, 36, 89, 56, 88, 17, 37, 96, 97, 57, 95, 10, 80, 15, 20, 25, 96, 80, 90, 9, 17, 37, 33, 86, 9, 27, 57, 36, 69, 50, 55, 11, 88, 19, 88, 79, 85, 83, 87, 94, 73, 25, 30, 70, 55, 21, 33, 99, 98, 27, 58, 67, 89, 36, 71, 57, 81, 79, 58, 48, 58, 65, 57, 59, 55, 73, 39, 73, 38, 38, 30, 70, 56, 4, 15, 32, 45, 34, 23, 15, 71, 80, 61, 45, 18, 34, 52, 97, 94, 26, 10, 20, 20, 80, 80, 20, 24, 98, 67, 93, 54, 35, 44, 95, 7, 30, 85, 29, 67, 31, 23, 36, 61, 47, 26, 74, 75, 16, 41, 87, 16, 24, 96, 34, 42, 81, 81, 46, 33, 99, 39, 31, 86, 95, 58, 64, 42, 25, 30, 60, 85, 37, 61, 32, 85, 26, 63, 61, 47, 65, 87, 36, 89, 56, 88, 17, 37, 96, 97, 57, 95, 62, 80, 53, 20, 25, 96, 80, 90, 9, 17, 37, 33, 86, 9, 27, 57, 36, 10, 50, 55, 11, 88, 19, 88, 79, 85, 83, 87, 50, 73, 52, 30, 70, 55, 21, 33, 99, 98, 27, 58, 67, 89, 36, 71, 57, 81, 79, 58, 48, 58, 65, 57, 59, 55, 73, 39, 73, 38, 38, 30, 70, 56, 27, 15, 32, 45, 34, 23, 15, 71, 80, 61, 45, 18, 34, 52, 97, 94, 26, 10, 28, 20, 80, 80, 20, 74, 30, 99, 23, 80, 64, 15, 21, 45, 77, 41, 40, 72, 87, 89, 23, 99, 13, 24, 67, 93, 54, 35, 24, 95, 7, 30, 85, 29, 67, 31, 23, 36, 16, 47, 26, 74, 75, 16, 41, 87, 16, 24, 96, 34, 42, 81, 81, 46, 59, 99, 39, 31, 86, 95, 58, 52, 42, 25, 30, 60, 85, 25, 30, 60, 85, 36, 33, 51, 79, 56, 56, 27, 68, 11, 15, 32, 92, 33, 13, 50, 71, 0, 77, 41, 66, 38, 13, 46, 35, 42, 60, 72, 97, 75, 20, 93, 1, 96, 70, 25, 21, 89, 16, 53, 1, 93, 52, 67, 94, 89, 68, 48, 45, 64, 57, 79, 10, 2, 95, 10, 80, 63, 40, 97, 81, 73, 72, 38, 33, 47, 46, 93, 6, 48, 0, 15, 58, 77, 1, 86, 68, 73, 36, 84, 54, 23, 3, 5, 47, 30, 100, 9, 6, 76, 86, 5, 53, 43, 87, 90, 72, 50, 36, 83, 7, 63, 14, 96, 56, 24, 79, 90, 9, 69, 78, 98, 75, 20, 93, 1, 96, 70, 25, 21, 89, 16, 53, 22, 93, 52, 67, 94, 89, 68, 48, 45, 64, 57, 79, 10, 2, 27, 29, 48, 78, 78, 4, 25, 18, 33, 70, 47, 73, 93, 14, 33, 94, 12, 53, 46, 15, 45, 34, 16, 40, 91, 37, 34, 3, 5, 41, 84, 98, 17, 83, 38, 0, 55, 37, 7, 84, 82, 85, 27, 67, 30, 83, 62, 93, 51, 16, 18, 86, 70, 4, 53, 39, 35, 5, 16, 38, 37, 3, 49, 74, 67, 88, 93, 86, 40, 83, 45, 3, 8, 8, 15, 79, 15, 86, 17, 89, 8, 4, 91, 32, 98, 2, 64, 24, 75, 21, 31, 69, 66, 10, 14, 43, 20, 18]
last_save: 1034

Gen:2381
last_save: 1034
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],-547259.2377).all():
      return False
    else:
      return False
  def adf1(index):
    if np.greater(np.tanh(x[index]),+402552.0512).all():
      return True
    else:
      return True
  def adf2(index):
    if np.greater(np.cos(x[index]),-625177.3968).all():
      return False
    else:
      return True
  def adf3(index):
    if np.equal(np.cos(x[index]),-983567.6268).all():
      return False
    else:
      return False
  def adf4(index):
    if np.greater(np.cos(x[index]),-866210.1860).all():
      return False
    else:
      return True
  def adf5(index):
    if np.less(x[index],+017201.8899).all():
      return False
    else:
      return True
  def adf6(index):
    if np.equal(x[index],+606295.8169).all():
      return False
    else:
      return False
  def adf7(index):
    if np.less(x[index],-890373.9781).all():
      return True
    else:
      return True
  def adf8(index):
    if np.equal(x[index],-520936.4897).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+451.904, adf1(1)*+224.889, adf2(2)*-052.856, adf3(3)*-679.480, adf4(4)*-582.310, adf5(5)*+482.594, adf6(6)*-192.857, adf7(7)*-178.840, adf8(8)*+620.398], [1, 1, 1, 1, 1, 0, 1, 1], 057.377)
result=p(); 0.6666666666666666
IndLenGenome:415
IndGenome:[71, 13, 81, 50, 94, 1, 43, 27, 9, 27, 28, 54, 9, 73, 2, 93, 93, 83, 50, 67, 62, 73, 19, 83, 15, 88, 26, 31, 21, 96, 85, 36, 70, 62, 61, 51, 43, 86, 55, 69, 97, 99, 76, 77, 16, 97, 4, 78, 7, 17, 5, 79, 84, 21, 57, 7, 36, 27, 36, 17, 60, 77, 61, 81, 16, 83, 67, 65, 19, 68, 11, 23, 50, 15, 50, 32, 33, 33, 82, 65, 78, 97, 7, 63, 76, 74, 48, 22, 31, 73, 32, 88, 31, 45, 95, 69, 97, 97, 53, 4, 61, 45, 17, 83, 79, 99, 98, 26, 53, 45, 90, 88, 93, 74, 39, 74, 36, 24, 22, 98, 35, 99, 78, 70, 22, 59, 32, 59, 23, 95, 70, 21, 20, 78, 28, 24, 48, 43, 47, 54, 12, 81, 86, 38, 39, 15, 14, 84, 18, 29, 71, 18, 50, 78, 24, 83, 19, 65, 80, 15, 79, 19, 89, 17, 41, 98, 44, 20, 29, 22, 12, 41, 67, 45, 43, 41, 79, 22, 28, 50, 56, 85, 36, 40, 38, 60, 66, 19, 94, 77, 12, 92, 94, 28, 42, 55, 97, 37, 49, 47, 66, 12, 38, 30, 67, 50, 92, 90, 48, 71, 42, 79, 63, 44, 72, 75, 65, 9, 86, 75, 72, 57, 25, 23, 22, 63, 66, 74, 91, 15, 72, 47, 47, 79, 45, 21, 51, 70, 29, 59, 28, 27, 14, 16, 80, 48, 65, 29, 86, 5, 77, 54, 59, 35, 1, 47, 79, 27, 10, 78, 2, 63, 29, 66, 35, 53, 27, 23, 48, 11, 50, 99, 46, 28, 16, 92, 48, 11, 13, 16, 97, 46, 98, 13, 0, 72, 76, 37, 20, 57, 55, 14, 3, 64, 77, 13, 69, 86, 1, 95, 62, 16, 21, 18, 4, 12, 14, 1, 44, 75, 31, 81, 89, 11, 77, 55, 46, 56, 10, 37, 53, 86, 43, 87, 12, 35, 90, 2, 4, 1, 48, 62, 23, 61, 0, 54, 49, 91, 43, 69, 71, 31, 13, 0, 97, 32, 88, 32, 25, 8, 13, 56, 34, 70, 97, 48, 81, 4, 73, 82, 4, 58, 56, 13, 23, 92, 57, 38, 28, 5, 77, 42, 47, 2, 42, 26, 77, 8, 77, 2, 57, 39, 52, 55, 58, 72, 19, 74, 16, 55, 81, 82, 39, 74, 90, 77, 84, 39, 64, 88, 2, 13, 48, 27, 60, 30, 67, 49, 12, 81, 3, 23, 42, 91, 58]
last_save: 1035

Gen:35
TrainFitness:0.7777777777777778
TestFitness:0.4444444444444444
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],-750550.6034).all():
      if np.equal(x[index],-583408.4937).all():
        return True
      else:
        return True
      return True
    else:
      if np.greater(x[index],-971515.8100).all():
        return False
      else:
        return True
      return False
  def adf1(index):
    if np.greater(rlog(x[index]),-484608.9722).all():
      return True
    else:
      return False
  def adf2(index):
    if np.less(x[index],-854933.3197).all():
      return False
    else:
      return True
  def adf3(index):
    if np.less(x[index],+005286.3173).all():
      return False
    else:
      return True
  def adf4(index):
    if np.less(x[index],+183624.2167).all():
      if np.greater(sigmoid(x[index]),-222917.4853).all():
        return True
      else:
        return False
      return False
    else:
      if np.less(x[index],-309256.2217).all():
        return True
      else:
        return True
      return True
  def adf5(index):
    if np.equal(x[index],-490794.1126).all():
      return True
    else:
      return False
  def adf6(index):
    if np.equal(np.sin(x[index]),+108091.0919).all():
      return False
    else:
      return True
  def adf7(index):
    if np.greater(x[index],-053555.8157).all():
      return True
    else:
      return False
  def adf8(index):
    if np.equal(np.sin(x[index]),-465028.2858).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+365.350, adf1(1)*-600.493, adf2(2)*+042.508, adf3(3)*-879.172, adf4(4)*+969.277, adf5(5)*+002.410, adf6(6)*+990.510, adf7(7)*-448.830, adf8(8)*-309.842], [1, 1, 0, 1, 0, 0, 0, 1], 775.200)
result=p(); 0.7777777777777778
IndLenGenome:397
IndGenome:[46, 98, 50, 78, 99, 12, 17, 92, 15, 13, 97, 75, 90, 75, 85, 20, 96, 20, 53, 34, 93, 77, 47, 32, 89, 83, 65, 58, 73, 24, 80, 88, 24, 9, 73, 7, 38, 38, 94, 13, 78, 67, 87, 77, 7, 79, 47, 1, 95, 21, 35, 48, 51, 90, 20, 53, 26, 45, 85, 59, 93, 26, 10, 9, 13, 35, 74, 98, 84, 96, 30, 18, 89, 47, 72, 82, 54, 91, 95, 35, 46, 65, 6, 49, 49, 48, 35, 64, 79, 43, 63, 63, 51, 29, 37, 51, 24, 96, 73, 16, 31, 29, 84, 33, 70, 90, 95, 12, 38, 16, 23, 81, 87, 43, 79, 60, 19, 98, 83, 85, 63, 18, 86, 56, 91, 88, 43, 96, 12, 84, 32, 61, 16, 77, 21, 69, 98, 27, 45, 33, 64, 42, 12, 12, 99, 21, 7, 4, 8, 15, 43, 72, 43, 17, 57, 55, 87, 93, 45, 59, 43, 10, 9, 72, 55, 56, 92, 22, 71, 77, 30, 92, 22, 91, 47, 56, 27, 100, 17, 96, 44, 49, 90, 27, 29, 54, 51, 51, 72, 36, 56, 19, 27, 81, 98, 96, 84, 35, 14, 38, 41, 20, 8, 50, 19, 91, 10, 79, 71, 49, 59, 2, 16, 41, 78, 67, 57, 55, 50, 90, 5, 13, 45, 55, 85, 8, 11, 5, 17, 86, 61, 41, 85, 98, 30, 0, 54, 39, 54, 64, 86, 5, 50, 22, 28, 92, 88, 35, 98, 19, 13, 19, 73, 67, 92, 88, 73, 56, 95, 13, 65, 70, 33, 39, 48, 46, 30, 90, 4, 49, 23, 31, 30, 65, 10, 64, 22, 25, 90, 78, 54, 31, 30, 88, 57, 29, 71, 27, 92, 17, 24, 93, 59, 86, 19, 72, 77, 77, 6, 20, 23, 80, 80, 12, 24, 61, 0, 18, 94, 10, 79, 29, 60, 15, 71, 20, 42, 67, 68, 54, 44, 78, 58, 53, 20, 28, 21, 58, 43, 20, 39, 8, 44, 62, 9, 79, 15, 46, 33, 84, 50, 90, 95, 67, 27, 57, 75, 52, 70, 0, 64, 67, 37, 45, 87, 79, 2, 33, 2, 9, 73, 47, 71, 48, 69, 72, 30, 18, 58, 54, 74, 77, 100, 95, 100, 16, 74, 25, 67, 17, 4, 85, 81, 12, 52, 54, 39, 14, 87, 22, 40, 44, 44, 89, 42, 54, 54]
last_save: 1035

Gen:2035
last_save: 1035
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.5555555555555556
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],+822509.3912).all():
      return True
    else:
      return True
  def adf1(index):
    if np.greater(psqrt(x[index]),+944317.0751).all():
      return True
    else:
      return True
  def adf2(index):
    if np.equal(np.sin(x[index]),+398155.4287).all():
      return False
    else:
      return True
  def adf3(index):
    if np.equal(x[index],-263174.0293).all():
      return True
    else:
      return True
  def adf4(index):
    if np.less(sigmoid(x[index]),-793725.5610).all():
      return False
    else:
      return True
  def adf5(index):
    if np.equal(x[index],+053298.3908).all():
      return False
    else:
      return True
  def adf6(index):
    if np.greater(x[index],+959728.5412).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(np.sin(x[index]),+749413.7819).all():
      return True
    else:
      return False
  def adf8(index):
    if np.greater(x[index],+948460.5411).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*-946.994, adf1(1)*-442.577, adf2(2)*-319.765, adf3(3)*-958.700, adf4(4)*-925.490, adf5(5)*-967.998, adf6(6)*+647.114, adf7(7)*+191.338, adf8(8)*-795.642], [0, 0, 1, 1, 1, 0, 0, 0], 189.852)
result=p(); 0.5555555555555556
IndLenGenome:415
IndGenome:[19, 60, 4, 88, 83, 75, 47, 3, 93, 94, 16, 77, 47, 21, 92, 59, 42, 46, 91, 36, 46, 17, 52, 4, 80, 79, 37, 38, 51, 75, 79, 11, 45, 25, 3, 2, 64, 79, 41, 63, 27, 62, 22, 64, 88, 72, 75, 41, 78, 71, 40, 19, 41, 49, 92, 60, 41, 11, 6, 79, 94, 22, 51, 33, 37, 81, 61, 37, 87, 28, 87, 26, 38, 24, 90, 11, 23, 69, 78, 15, 18, 71, 14, 98, 23, 25, 74, 51, 37, 85, 47, 15, 75, 38, 37, 85, 72, 99, 27, 19, 35, 99, 75, 69, 66, 6, 99, 86, 62, 68, 19, 56, 41, 59, 49, 60, 39, 92, 31, 18, 48, 81, 77, 64, 72, 72, 54, 14, 48, 47, 21, 63, 23, 54, 67, 97, 45, 77, 65, 54, 62, 62, 48, 94, 92, 54, 58, 21, 43, 17, 13, 70, 66, 43, 69, 72, 98, 36, 37, 60, 7, 43, 91, 7, 62, 15, 42, 52, 48, 27, 59, 99, 59, 81, 63, 71, 19, 23, 74, 43, 69, 25, 59, 99, 72, 54, 11, 88, 71, 90, 53, 65, 82, 90, 29, 67, 74, 25, 4, 19, 48, 60, 51, 73, 49, 95, 83, 58, 45, 85, 11, 83, 27, 44, 12, 91, 96, 49, 35, 97, 34, 36, 46, 12, 23, 65, 60, 41, 20, 58, 44, 7, 97, 42, 88, 73, 54, 18, 81, 4, 24, 49, 58, 12, 42, 75, 34, 88, 88, 29, 29, 37, 93, 98, 35, 43, 21, 30, 70, 36, 57, 56, 40, 37, 70, 34, 30, 64, 76, 99, 57, 21, 39, 10, 54, 95, 79, 74, 93, 99, 49, 29, 28, 25, 16, 93, 72, 2, 80, 26, 15, 55, 31, 53, 98, 49, 18, 96, 94, 83, 60, 65, 86, 94, 67, 59, 85, 8, 40, 79, 92, 10, 58, 68, 24, 88, 2, 43, 23, 5, 46, 52, 12, 73, 9, 61, 49, 61, 34, 37, 57, 99, 48, 60, 67, 50, 55, 40, 6, 53, 73, 19, 98, 31, 64, 66, 47, 28, 22, 69, 93, 74, 16, 15, 83, 80, 28, 0, 44, 10, 54, 93, 98, 40, 49, 69, 63, 18, 42, 61, 43, 5, 99, 95, 6, 90, 74, 71, 45, 33, 86, 32, 49, 53, 95, 17, 56, 84, 98, 33, 14, 55, 39, 3, 50, 24, 92, 57, 89, 43, 29, 99, 66, 69, 31, 35, 21, 53, 80, 36, 85, 31, 44, 85, 70]
last_save: 1036

Gen:10
TrainFitness:0.6666666666666666
TestFitness:0.5555555555555556
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(np.tanh(x[index]),-399013.4738).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(x[index],+315087.7197).all():
      return False
    else:
      return False
  def adf2(index):
    if np.less(np.cos(x[index]),-584253.1133).all():
      return True
    else:
      return True
  def adf3(index):
    if np.equal(x[index],+346667.3943).all():
      return True
    else:
      return False
  def adf4(index):
    if np.greater(x[index],+923418.3308).all():
      return True
    else:
      return False
  def adf5(index):
    if np.equal(sigmoid(x[index]),-187592.2199).all():
      return True
    else:
      return False
  def adf6(index):
    if np.equal(np.cos(x[index]),-867358.1876).all():
      return False
    else:
      return True
  def adf7(index):
    if np.greater(sigmoid(x[index]),-612689.4034).all():
      return True
    else:
      return False
  def adf8(index):
    if np.less(x[index],+021164.3359).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+754.574, adf1(1)*-205.572, adf2(2)*+060.072, adf3(3)*+526.108, adf4(4)*+743.075, adf5(5)*-520.370, adf6(6)*+290.267, adf7(7)*-762.884, adf8(8)*+949.447], [0, 1, 1, 0, 1, 1, 0, 0], 251.912)
result=p(); 0.6666666666666666
IndLenGenome:467
IndGenome:[96, 59, 37, 75, 90, 34, 2, 83, 89, 97, 43, 89, 49, 80, 11, 23, 34, 77, 23, 88, 11, 81, 76, 9, 40, 97, 45, 86, 97, 83, 1, 15, 90, 18, 97, 87, 11, 19, 17, 83, 59, 73, 13, 37, 24, 55, 87, 27, 27, 15, 98, 94, 92, 55, 93, 91, 61, 53, 3, 60, 96, 49, 99, 47, 19, 32, 66, 67, 63, 24, 46, 6, 56, 67, 93, 79, 44, 63, 48, 79, 10, 59, 15, 95, 7, 92, 79, 79, 62, 43, 94, 71, 8, 33, 93, 10, 28, 74, 75, 52, 55, 23, 16, 33, 46, 41, 73, 61, 18, 27, 65, 19, 72, 82, 51, 19, 69, 78, 59, 81, 99, 59, 74, 85, 67, 53, 65, 28, 76, 97, 33, 85, 88, 1, 68, 87, 26, 65, 72, 57, 83, 15, 16, 99, 40, 61, 64, 76, 21, 42, 46, 58, 49, 94, 20, 43, 14, 60, 21, 83, 35, 43, 1, 27, 86, 97, 10, 72, 31, 31, 26, 24, 73, 23, 85, 99, 74, 59, 14, 21, 80, 16, 80, 87, 5, 74, 55, 17, 14, 25, 49, 37, 72, 90, 95, 5, 47, 72, 63, 34, 24, 0, 86, 50, 70, 7, 22, 17, 30, 36, 95, 32, 76, 91, 10, 18, 16, 16, 71, 27, 94, 33, 30, 77, 55, 96, 61, 27, 65, 22, 80, 63, 27, 40, 29, 74, 16, 82, 19, 80, 62, 56, 27, 57, 51, 44, 97, 46, 72, 98, 58, 4, 61, 64, 93, 19, 34, 29, 44, 84, 77, 93, 76, 27, 17, 62, 89, 69, 70, 88, 95, 42, 85, 21, 89, 41, 42, 43, 80, 81, 54, 58, 28, 75, 96, 11, 12, 94, 89, 98, 67, 90, 77, 79, 95, 50, 27, 15, 84, 95, 74, 84, 19, 82, 42, 79, 84, 79, 16, 71, 40, 67, 79, 71, 88, 32, 53, 85, 74, 76, 10, 99, 36, 87, 18, 62, 14, 76, 12, 70, 48, 64, 90, 15, 98, 40, 94, 24, 22, 12, 48, 17, 53, 61, 27, 62, 32, 27, 66, 37, 68, 93, 10, 51, 84, 98, 30, 31, 56, 33, 38, 38, 1, 94, 46, 70, 50, 83, 40, 91, 16, 21, 57, 42, 95, 70, 26, 13, 92, 23, 83, 55, 22, 62, 86, 25, 75, 39, 12, 44, 99, 44, 86, 0, 95, 99, 59, 63, 25, 27, 48, 91, 27, 64, 20, 67, 52, 37, 7, 44, 78, 46, 45, 29, 96, 99, 94, 37, 85, 4, 33, 54, 25, 59, 7, 73, 35, 88, 58, 6, 1, 45, 69, 78, 100, 49, 46, 48, 70, 46, 52, 69, 19, 41, 70, 42, 16, 74, 15, 34, 8, 19, 62, 20, 60, 97, 4, 32, 19, 76, 7, 2, 96, 42, 96, 65, 10]
last_save: 1036

Gen:254
TrainFitness:0.7777777777777778
TestFitness:0.4444444444444444
MaxGenLen:560
Individual: def p():
  def adf0(index):
    if np.greater(np.tanh(x[index]),-389912.4538).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(sigmoid(x[index]),-899124.5389).all():
      return False
    else:
      return True
  def adf2(index):
    if np.greater(np.cos(x[index]),-682309.8383).all():
      if np.less(np.cos(x[index]),-169255.1173).all():
        return True
      else:
        return True
      return True
    else:
      if np.equal(x[index],+348067.3943).all():
        return True
      else:
        return False
      return True
  def adf3(index):
    if np.less(x[index],+291197.3084).all():
      return False
    else:
      return True
  def adf4(index):
    if np.equal(x[index],-167598.7499).all():
      return True
    else:
      return False
  def adf5(index):
    if np.equal(np.cos(x[index]),-837354.1871).all():
      return False
    else:
      return True
  def adf6(index):
    if np.greater(sigmoid(x[index]),-610679.4134).all():
      return True
    else:
      return False
  def adf7(index):
    if np.less(x[index],+006545.7459).all():
      return False
    else:
      return True
  def adf8(index):
    if np.equal(x[index],-406098.2706).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+617.430, adf1(1)*-175.203, adf2(2)*+436.341, adf3(3)*-759.221, adf4(4)*-919.945, adf5(5)*-197.358, adf6(6)*+652.730, adf7(7)*+767.021, adf8(8)*+235.943], [0, 0, 0, 1, 1, 1, 1, 0], 419.607)
result=p(); 0.7777777777777778
IndLenGenome:450
IndGenome:[12, 45, 37, 75, 42, 72, 26, 41, 33, 97, 43, 68, 49, 69, 11, 82, 34, 95, 23, 88, 79, 81, 76, 75, 40, 84, 45, 33, 97, 43, 68, 49, 69, 11, 82, 34, 95, 23, 88, 79, 81, 76, 75, 40, 84, 45, 86, 97, 37, 81, 15, 76, 38, 92, 13, 100, 19, 78, 83, 88, 73, 13, 37, 24, 55, 79, 79, 27, 1, 96, 59, 92, 55, 45, 91, 61, 27, 3, 62, 96, 94, 99, 47, 19, 40, 66, 67, 63, 24, 18, 10, 56, 67, 93, 79, 44, 63, 60, 79, 10, 59, 15, 19, 7, 92, 44, 79, 62, 9, 61, 71, 49, 7, 93, 10, 28, 74, 75, 52, 55, 77, 50, 33, 72, 41, 26, 61, 86, 27, 65, 19, 38, 47, 54, 19, 69, 78, 59, 8, 99, 59, 74, 85, 54, 53, 65, 28, 83, 97, 33, 85, 74, 1, 68, 87, 21, 65, 72, 92, 83, 15, 18, 99, 40, 99, 44, 76, 21, 30, 46, 47, 49, 94, 11, 43, 44, 84, 21, 83, 35, 100, 1, 27, 86, 97, 10, 80, 86, 5, 74, 55, 17, 14, 25, 49, 37, 14, 40, 95, 5, 47, 72, 63, 34, 24, 0, 86, 50, 89, 18, 22, 17, 30, 36, 95, 32, 76, 91, 10, 18, 16, 16, 71, 27, 94, 33, 30, 77, 25, 96, 61, 27, 65, 22, 80, 63, 27, 40, 29, 74, 23, 16, 33, 94, 41, 41, 61, 18, 27, 65, 19, 72, 82, 51, 60, 69, 78, 59, 81, 99, 59, 74, 85, 67, 53, 65, 41, 9, 97, 33, 85, 88, 1, 68, 87, 26, 65, 72, 57, 83, 60, 35, 100, 1, 27, 86, 97, 10, 72, 31, 66, 26, 24, 42, 23, 85, 99, 74, 73, 14, 62, 26, 24, 73, 23, 85, 21, 74, 59, 14, 21, 29, 16, 80, 87, 91, 74, 55, 19, 14, 25, 15, 98, 94, 92, 53, 61, 27, 62, 32, 27, 66, 37, 68, 93, 10, 51, 84, 98, 30, 31, 56, 33, 38, 38, 1, 94, 46, 70, 50, 83, 40, 91, 16, 21, 57, 42, 95, 70, 26, 13, 92, 23, 94, 55, 22, 62, 12, 25, 75, 87, 12, 44, 99, 44, 86, 0, 95, 99, 59, 63, 25, 27, 48, 91, 27, 64, 20, 67, 52, 37, 7, 44, 78, 46, 45, 29, 96, 99, 94, 37, 85, 4, 33, 54, 25, 59, 7, 73, 35, 88, 58, 6, 1, 45, 69, 78, 100, 49, 46, 48, 70, 46, 52, 69, 19, 41, 70, 42, 16, 74, 15, 34, 8, 19, 62, 20, 60, 97, 4, 32, 19, 76, 7, 2, 96, 42, 96, 65, 10]
last_save: 1036

Gen:2254
last_save: 1036
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.4444444444444444
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(np.tanh(x[index]),-607717.0350).all():
      return True
    else:
      return True
  def adf1(index):
    if np.less(np.tanh(x[index]),-815653.9491).all():
      return True
    else:
      return False
  def adf2(index):
    if np.equal(psqrt(x[index]),+044381.8374).all():
      return True
    else:
      return False
  def adf3(index):
    if np.less(x[index],-930750.0353).all():
      return False
    else:
      return False
  def adf4(index):
    if np.greater(x[index],+024871.2233).all():
      return True
    else:
      return False
  def adf5(index):
    if np.greater(np.sin(x[index]),+005918.4734).all():
      return False
    else:
      return False
  def adf6(index):
    if np.greater(np.tanh(x[index]),-256000.2888).all():
      return False
    else:
      return True
  def adf7(index):
    if np.less(x[index],-850965.1215).all():
      return True
    else:
      return False
  def adf8(index):
    if np.greater(np.tanh(x[index]),-345638.4669).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-362.774, adf1(1)*-018.968, adf2(2)*-541.684, adf3(3)*+152.332, adf4(4)*-187.629, adf5(5)*+829.128, adf6(6)*-416.223, adf7(7)*-858.800, adf8(8)*+358.306], [0, 0, 0, 0, 1, 1, 0, 1], 077.835)
result=p(); 0.6666666666666666
IndLenGenome:418
IndGenome:[94, 25, 66, 40, 9, 90, 68, 55, 77, 6, 18, 24, 5, 85, 79, 33, 48, 9, 71, 57, 40, 31, 52, 23, 30, 6, 42, 48, 55, 81, 28, 80, 30, 5, 20, 87, 58, 28, 4, 83, 23, 48, 77, 83, 92, 67, 65, 43, 74, 15, 43, 80, 99, 45, 12, 58, 82, 32, 42, 28, 14, 57, 38, 88, 36, 57, 69, 82, 13, 49, 60, 63, 63, 58, 19, 91, 28, 29, 62, 95, 2, 7, 3, 72, 54, 41, 28, 56, 36, 83, 70, 18, 44, 28, 80, 45, 91, 31, 47, 39, 41, 77, 53, 23, 47, 51, 20, 64, 12, 39, 90, 10, 26, 21, 21, 18, 97, 51, 55, 32, 78, 74, 41, 41, 33, 75, 20, 5, 71, 49, 21, 3, 94, 13, 74, 82, 17, 48, 47, 75, 58, 29, 83, 68, 51, 91, 52, 23, 86, 45, 48, 85, 10, 94, 40, 64, 64, 19, 66, 95, 50, 24, 80, 43, 76, 11, 47, 93, 79, 72, 43, 26, 80, 56, 17, 40, 55, 51, 32, 63, 13, 15, 76, 86, 57, 93, 77, 64, 15, 17, 56, 88, 11, 30, 75, 31, 79, 84, 68, 71, 78, 13, 87, 76, 91, 93, 54, 11, 86, 85, 68, 25, 39, 62, 50, 85, 62, 40, 41, 10, 36, 18, 92, 52, 30, 73, 29, 42, 28, 45, 61, 69, 75, 10, 19, 16, 71, 83, 94, 43, 79, 75, 98, 61, 41, 84, 68, 25, 27, 73, 90, 27, 26, 18, 24, 56, 93, 92, 32, 89, 95, 68, 30, 88, 70, 23, 11, 27, 36, 74, 68, 60, 96, 98, 52, 78, 48, 85, 46, 53, 43, 81, 92, 45, 45, 93, 20, 4, 36, 12, 33, 90, 54, 1, 62, 5, 36, 35, 48, 71, 28, 37, 98, 22, 14, 71, 16, 52, 97, 49, 3, 59, 36, 43, 28, 25, 68, 71, 10, 74, 47, 40, 92, 11, 100, 16, 1, 47, 0, 94, 64, 29, 72, 68, 21, 22, 91, 26, 37, 4, 84, 53, 12, 18, 79, 21, 4, 80, 13, 57, 79, 78, 35, 13, 80, 56, 2, 59, 77, 63, 88, 69, 84, 11, 25, 34, 20, 75, 37, 91, 11, 25, 91, 47, 25, 80, 29, 7, 83, 5, 95, 90, 91, 15, 55, 18, 30, 70, 31, 59, 42, 20, 11, 74, 74, 58, 87, 34, 39, 44, 4, 41, 91, 30, 84, 46, 94, 63, 79, 40, 25, 37, 64, 93, 58, 80, 59, 57]
last_save: 1037

Gen:16
TrainFitness:0.6666666666666666
TestFitness:0.5555555555555556
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],-673751.1534).all():
      return False
    else:
      return False
  def adf1(index):
    if np.greater(x[index],+033960.6117).all():
      return False
    else:
      return True
  def adf2(index):
    if np.equal(x[index],-679559.2941).all():
      return True
    else:
      return True
  def adf3(index):
    if np.equal(x[index],+936528.0975).all():
      return True
    else:
      return True
  def adf4(index):
    if np.equal(sigmoid(x[index]),-364514.0237).all():
      return True
    else:
      return True
  def adf5(index):
    if np.equal(x[index],-167478.0853).all():
      return True
    else:
      return False
  def adf6(index):
    if np.greater(x[index],-122233.9482).all():
      return False
    else:
      return False
  def adf7(index):
    if np.less(rlog(x[index]),-264944.1754).all():
      return True
    else:
      return True
  def adf8(index):
    if np.equal(np.sin(x[index]),-863116.9527).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-832.715, adf1(1)*+991.685, adf2(2)*-452.226, adf3(3)*+065.972, adf4(4)*-115.449, adf5(5)*+417.290, adf6(6)*+386.311, adf7(7)*-272.578, adf8(8)*-832.715], [0, 0, 1, 1, 1, 0, 0, 1], 534.522)
result=p(); 0.6666666666666666
IndLenGenome:453
IndGenome:[99, 87, 20, 25, 83, 73, 27, 33, 80, 16, 17, 63, 37, 75, 71, 41, 25, 83, 74, 71, 83, 30, 71, 36, 21, 86, 12, 14, 30, 93, 93, 79, 76, 40, 86, 41, 71, 17, 23, 90, 32, 27, 17, 13, 38, 5, 83, 16, 37, 99, 15, 75, 89, 62, 9, 74, 21, 62, 92, 22, 83, 29, 29, 54, 78, 92, 59, 13, 16, 75, 52, 38, 70, 69, 17, 45, 22, 76, 14, 39, 74, 4, 21, 37, 25, 24, 3, 36, 44, 95, 11, 74, 30, 92, 13, 97, 78, 96, 63, 87, 74, 7, 98, 71, 97, 81, 56, 97, 84, 77, 98, 80, 58, 65, 83, 16, 37, 99, 15, 75, 89, 62, 9, 74, 21, 62, 92, 22, 83, 93, 29, 54, 78, 92, 59, 13, 16, 7, 52, 38, 70, 69, 17, 45, 22, 76, 14, 39, 74, 4, 21, 37, 25, 24, 30, 36, 44, 95, 11, 90, 30, 92, 13, 33, 78, 96, 73, 51, 31, 36, 29, 85, 22, 67, 42, 11, 57, 58, 61, 15, 48, 68, 63, 52, 87, 61, 45, 77, 94, 98, 9, 49, 71, 26, 58, 15, 64, 25, 43, 4, 25, 12, 72, 32, 46, 91, 52, 52, 80, 66, 85, 49, 57, 42, 64, 25, 86, 81, 31, 65, 24, 44, 29, 28, 20, 44, 64, 81, 67, 22, 39, 90, 30, 92, 74, 33, 78, 96, 73, 51, 31, 36, 29, 85, 22, 67, 42, 65, 57, 58, 61, 15, 48, 68, 63, 52, 87, 61, 45, 77, 94, 98, 9, 49, 71, 26, 24, 15, 64, 25, 43, 4, 25, 12, 72, 56, 46, 77, 35, 15, 90, 85, 65, 71, 15, 18, 92, 19, 65, 73, 89, 17, 28, 33, 32, 65, 26, 70, 38, 72, 46, 88, 17, 43, 68, 17, 24, 55, 17, 57, 15, 32, 24, 13, 67, 39, 81, 93, 94, 34, 37, 30, 10, 45, 34, 66, 90, 44, 99, 79, 97, 86, 53, 94, 35, 53, 80, 5, 47, 76, 52, 37, 47, 49, 85, 20, 59, 94, 93, 4, 94, 84, 59, 7, 77, 21, 74, 32, 20, 0, 88, 78, 65, 87, 31, 31, 57, 59, 53, 75, 71, 92, 19, 91, 49, 37, 11, 38, 56, 51, 63, 41, 9, 26, 17, 16, 45, 84, 60, 66, 47, 59, 47, 59, 63, 61, 4, 23, 100, 5, 92, 69, 37, 29, 76, 65, 97, 95, 57, 51, 73, 0, 34, 50, 17, 83, 29, 62, 63, 63, 36, 26, 15, 84, 68, 22, 51, 21, 9, 19, 97, 54, 57, 30, 45, 73, 16, 66, 35, 56, 63, 15, 50, 30, 99, 98, 27, 57, 58, 67, 25, 17, 93]
last_save: 1037

Gen:45
TrainFitness:0.7777777777777778
TestFitness:0.3333333333333333
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],-673751.1534).all():
      return False
    else:
      return False
  def adf1(index):
    if np.greater(x[index],+003960.6117).all():
      return False
    else:
      return True
  def adf2(index):
    if np.equal(x[index],-679559.2941).all():
      return True
    else:
      return True
  def adf3(index):
    if np.equal(x[index],+936528.0975).all():
      return True
    else:
      return True
  def adf4(index):
    if np.equal(sigmoid(x[index]),-364514.0237).all():
      return True
    else:
      return True
  def adf5(index):
    if np.equal(x[index],-167678.0833).all():
      return True
    else:
      return False
  def adf6(index):
    if np.greater(x[index],-122233.9482).all():
      return False
    else:
      return False
  def adf7(index):
    if np.less(rlog(x[index]),-264944.1754).all():
      return True
    else:
      return True
  def adf8(index):
    if np.equal(np.sin(x[index]),-863116.9527).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-832.715, adf1(1)*+991.685, adf2(2)*-452.226, adf3(3)*+065.972, adf4(4)*-115.449, adf5(5)*+417.290, adf6(6)*+386.311, adf7(7)*-272.578, adf8(8)*-832.715], [0, 0, 1, 1, 1, 0, 0, 1], 534.522)
result=p(); 0.7777777777777778
IndLenGenome:453
IndGenome:[99, 87, 20, 25, 83, 73, 27, 33, 80, 16, 17, 63, 37, 75, 71, 41, 25, 83, 74, 71, 83, 30, 71, 36, 21, 86, 12, 14, 30, 40, 93, 79, 76, 40, 86, 41, 71, 17, 23, 90, 32, 27, 17, 13, 38, 5, 83, 16, 37, 99, 15, 75, 89, 62, 9, 74, 21, 62, 92, 22, 83, 29, 29, 54, 78, 92, 59, 13, 16, 75, 52, 38, 70, 69, 17, 45, 22, 76, 14, 39, 74, 4, 21, 37, 25, 24, 3, 36, 44, 95, 11, 74, 30, 92, 13, 97, 78, 96, 63, 87, 74, 7, 98, 71, 97, 81, 56, 97, 96, 77, 98, 80, 58, 43, 83, 16, 37, 99, 15, 75, 89, 62, 9, 74, 21, 62, 92, 22, 83, 93, 29, 54, 78, 92, 59, 13, 16, 7, 52, 38, 70, 69, 17, 44, 22, 76, 14, 39, 74, 4, 21, 37, 25, 24, 30, 36, 44, 95, 11, 90, 30, 92, 13, 33, 78, 96, 73, 51, 31, 36, 29, 85, 22, 67, 42, 11, 57, 58, 61, 15, 48, 68, 63, 52, 87, 61, 45, 77, 94, 98, 9, 49, 71, 26, 58, 15, 64, 25, 43, 4, 25, 12, 72, 32, 46, 91, 52, 52, 80, 66, 85, 49, 57, 42, 64, 25, 86, 81, 31, 65, 24, 44, 29, 28, 20, 44, 64, 81, 67, 22, 39, 90, 30, 92, 74, 33, 78, 96, 73, 51, 31, 36, 29, 85, 22, 67, 42, 65, 57, 58, 61, 15, 48, 68, 63, 52, 87, 61, 45, 77, 48, 98, 9, 49, 71, 26, 24, 15, 64, 25, 43, 4, 25, 12, 72, 56, 46, 77, 35, 15, 90, 85, 65, 71, 15, 18, 92, 19, 65, 73, 89, 17, 28, 33, 32, 65, 26, 70, 38, 72, 46, 88, 17, 43, 68, 17, 24, 55, 17, 57, 15, 32, 24, 13, 67, 39, 81, 93, 94, 34, 37, 30, 10, 45, 34, 66, 90, 44, 99, 79, 97, 86, 53, 94, 35, 53, 80, 5, 47, 76, 52, 37, 47, 49, 85, 20, 59, 94, 93, 4, 94, 84, 59, 7, 77, 21, 74, 32, 20, 0, 88, 78, 65, 87, 31, 31, 57, 59, 53, 75, 71, 92, 19, 91, 49, 37, 11, 38, 56, 51, 63, 41, 9, 26, 17, 16, 45, 84, 60, 66, 47, 59, 47, 59, 63, 61, 4, 23, 100, 5, 92, 69, 37, 29, 76, 65, 97, 95, 57, 51, 73, 0, 34, 50, 17, 83, 29, 62, 63, 63, 36, 26, 15, 84, 68, 22, 51, 21, 9, 19, 97, 54, 57, 30, 45, 73, 16, 66, 35, 56, 63, 15, 50, 30, 99, 98, 27, 57, 58, 67, 25, 17, 93]
last_save: 1037

Gen:2045
last_save: 1037
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.5555555555555556
TestFitness:0.5555555555555556
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(rlog(x[index]),-190876.1469).all():
      return False
    else:
      return False
  def adf1(index):
    if np.equal(x[index],+410968.5617).all():
      return True
    else:
      return False
  def adf2(index):
    if np.greater(x[index],+857929.7925).all():
      return True
    else:
      return True
  def adf3(index):
    if np.greater(np.sin(x[index]),-551613.7186).all():
      return False
    else:
      return False
  def adf4(index):
    if np.greater(x[index],-679161.7435).all():
      return False
    else:
      return False
  def adf5(index):
    if np.equal(sigmoid(x[index]),-885363.8415).all():
      return False
    else:
      return True
  def adf6(index):
    if np.less(x[index],+995003.6032).all():
      return True
    else:
      return True
  def adf7(index):
    if np.greater(np.cos(x[index]),+378286.3665).all():
      return False
    else:
      return False
  def adf8(index):
    if np.greater(psqrt(x[index]),-947597.2340).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*-423.032, adf1(1)*-136.409, adf2(2)*+341.672, adf3(3)*+612.526, adf4(4)*+082.470, adf5(5)*+785.992, adf6(6)*-581.108, adf7(7)*+378.412, adf8(8)*+567.057], [1, 0, 0, 1, 0, 0, 1, 0], 068.382)
result=p(); 0.5555555555555556
IndLenGenome:417
IndGenome:[26, 64, 62, 22, 12, 67, 26, 19, 82, 23, 61, 78, 50, 23, 93, 4, 91, 25, 93, 65, 57, 88, 4, 17, 45, 30, 73, 22, 1, 95, 44, 89, 63, 65, 90, 25, 17, 11, 34, 75, 79, 68, 47, 32, 86, 43, 80, 80, 73, 24, 55, 69, 36, 45, 22, 98, 24, 80, 62, 26, 4, 27, 73, 92, 68, 11, 16, 82, 19, 92, 48, 93, 82, 29, 83, 26, 17, 48, 85, 36, 14, 38, 44, 28, 86, 58, 86, 31, 47, 33, 34, 37, 89, 83, 24, 68, 22, 51, 76, 43, 83, 20, 97, 79, 34, 76, 21, 85, 46, 27, 87, 78, 63, 85, 71, 13, 82, 94, 32, 66, 49, 15, 96, 45, 50, 84, 23, 77, 99, 41, 30, 66, 20, 66, 91, 91, 40, 37, 42, 2, 83, 79, 30, 40, 22, 73, 43, 70, 88, 41, 45, 88, 40, 98, 92, 45, 45, 38, 38, 19, 63, 76, 18, 47, 68, 41, 23, 25, 97, 66, 21, 66, 31, 76, 29, 47, 22, 10, 26, 73, 90, 89, 46, 60, 31, 53, 52, 83, 19, 21, 28, 94, 96, 18, 46, 94, 50, 72, 35, 14, 85, 65, 87, 87, 10, 10, 26, 18, 21, 79, 36, 69, 65, 67, 87, 57, 12, 69, 17, 82, 66, 57, 80, 52, 22, 40, 74, 15, 50, 17, 16, 71, 55, 14, 78, 56, 14, 86, 90, 13, 13, 39, 49, 89, 52, 11, 52, 50, 26, 41, 44, 71, 11, 61, 17, 89, 11, 44, 11, 101, 37, 49, 65, 16, 26, 31, 83, 54, 14, 52, 47, 39, 73, 47, 20, 74, 15, 49, 96, 36, 55, 56, 14, 19, 14, 80, 55, 78, 70, 28, 10, 38, 46, 56, 50, 61, 55, 36, 53, 33, 55, 41, 91, 99, 85, 40, 57, 25, 83, 31, 42, 60, 37, 82, 51, 47, 42, 22, 71, 61, 24, 64, 42, 100, 40, 43, 67, 84, 62, 85, 88, 62, 33, 55, 89, 42, 70, 4, 93, 11, 23, 63, 24, 45, 77, 29, 50, 63, 81, 40, 81, 91, 95, 49, 35, 41, 96, 13, 58, 33, 68, 61, 82, 12, 40, 2, 78, 63, 75, 32, 22, 73, 89, 69, 65, 53, 80, 87, 89, 92, 69, 31, 61, 70, 85, 90, 48, 96, 35, 9, 98, 62, 70, 60, 81, 39, 15, 61, 73, 58, 59, 71, 47, 7, 82, 100, 48, 27, 62, 57, 12, 12, 11, 16, 46, 47, 18]
last_save: 1038

Gen:39
TrainFitness:0.6666666666666666
TestFitness:0.4444444444444444
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],-265226.1491).all():
      return True
    else:
      return False
  def adf1(index):
    if np.less(np.sin(x[index]),+734764.1490).all():
      return False
    else:
      return False
  def adf2(index):
    if np.equal(x[index],-646849.3875).all():
      return True
    else:
      return False
  def adf3(index):
    if np.equal(x[index],-784895.0117).all():
      return True
    else:
      return True
  def adf4(index):
    if np.less(x[index],-144756.8818).all():
      return False
    else:
      return True
  def adf5(index):
    if np.equal(x[index],+231570.9431).all():
      return False
    else:
      return False
  def adf6(index):
    if np.greater(x[index],+021034.1818).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(x[index],-175903.7151).all():
      return True
    else:
      return True
  def adf8(index):
    if np.equal(x[index],+863220.9139).all():
      if np.equal(x[index],+539617.7388).all():
        return False
      else:
        return False
      return False
    else:
      if np.greater(np.sin(x[index]),+103072.5071).all():
        return False
      else:
        return False
      return False
  return multiple_operation([adf0(0)*-274.711, adf1(1)*+611.349, adf2(2)*+835.027, adf3(3)*-848.175, adf4(4)*-046.363, adf5(5)*-905.481, adf6(6)*-872.852, adf7(7)*-545.207, adf8(8)*+995.597], [1, 1, 1, 0, 0, 0, 0, 0], 074.562)
result=p(); 0.6666666666666666
IndLenGenome:415
IndGenome:[32, 97, 87, 83, 94, 83, 25, 59, 87, 42, 76, 95, 52, 12, 46, 91, 44, 59, 51, 82, 59, 99, 91, 70, 32, 54, 53, 48, 70, 7, 93, 34, 77, 66, 64, 91, 44, 49, 10, 27, 85, 73, 37, 47, 73, 50, 25, 24, 6, 14, 96, 18, 94, 29, 43, 88, 17, 75, 84, 73, 63, 99, 80, 81, 10, 31, 21, 77, 98, 64, 58, 29, 55, 10, 31, 21, 77, 98, 64, 58, 29, 55, 85, 22, 11, 40, 71, 74, 24, 37, 15, 36, 28, 18, 41, 18, 91, 40, 55, 57, 11, 85, 92, 30, 57, 62, 53, 51, 55, 17, 30, 69, 64, 43, 21, 33, 83, 18, 21, 3, 73, 16, 62, 39, 20, 2, 11, 90, 83, 84, 31, 8, 91, 8, 56, 25, 26, 15, 48, 43, 16, 23, 14, 41, 77, 95, 29, 50, 53, 27, 61, 45, 61, 94, 78, 43, 64, 93, 95, 87, 55, 78, 29, 38, 76, 83, 52, 42, 20, 69, 51, 43, 89, 23, 86, 11, 99, 26, 82, 75, 43, 69, 86, 41, 87, 27, 73, 58, 48, 35, 35, 73, 31, 15, 74, 66, 59, 14, 62, 71, 70, 63, 30, 97, 12, 85, 50, 37, 41, 31, 79, 37, 97, 36, 12, 99, 61, 92, 37, 54, 27, 71, 11, 14, 58, 75, 56, 11, 31, 3, 64, 89, 43, 62, 31, 78, 93, 75, 90, 92, 37, 58, 11, 37, 98, 14, 78, 91, 87, 65, 47, 15, 44, 80, 74, 6, 43, 16, 53, 97, 55, 36, 99, 30, 45, 14, 98, 61, 40, 87, 77, 28, 77, 2, 28, 65, 2, 84, 53, 69, 85, 24, 35, 12, 30, 27, 3, 90, 12, 99, 69, 85, 85, 89, 47, 47, 23, 65, 17, 16, 72, 78, 94, 60, 53, 80, 87, 14, 35, 56, 82, 94, 11, 37, 1, 72, 37, 91, 16, 53, 14, 14, 70, 30, 0, 75, 48, 62, 72, 75, 86, 31, 56, 6, 47, 30, 77, 56, 99, 96, 53, 71, 96, 8, 66, 70, 36, 22, 65, 11, 45, 46, 77, 2, 28, 66, 25, 23, 60, 92, 37, 37, 77, 53, 2, 56, 38, 11, 57, 92, 19, 20, 15, 66, 73, 3, 22, 19, 76, 75, 57, 52, 75, 68, 95, 63, 52, 14, 46, 3, 43, 82, 58, 100, 15, 68, 46, 20, 53, 76, 89, 39, 27, 52, 82, 87, 27, 3, 9, 22, 4, 50, 81, 49, 30]
last_save: 1038

Gen:94
TrainFitness:0.7777777777777778
TestFitness:0.4444444444444444
MaxGenLen:515
Individual: def p():
  def adf0(index):
    if np.less(x[index],-265226.1191).all():
      return True
    else:
      return False
  def adf1(index):
    if np.less(np.sin(x[index]),+734764.1497).all():
      return False
    else:
      return False
  def adf2(index):
    if np.equal(x[index],-646849.3875).all():
      return False
    else:
      return False
  def adf3(index):
    if np.greater(psqrt(x[index]),+938754.3390).all():
      return False
    else:
      return True
  def adf4(index):
    if np.equal(rlog(x[index]),-011784.8955).all():
      return True
    else:
      return False
  def adf5(index):
    if np.equal(np.cos(x[index]),+818105.7152).all():
      return True
    else:
      return False
  def adf6(index):
    if np.less(x[index],+007913.9381).all():
      if np.equal(rlog(x[index]),+520723.1570).all():
        return False
      else:
        return False
      return True
    else:
      if np.greater(x[index],-711974.6291).all():
        return True
      else:
        return False
      return True
  def adf7(index):
    if np.equal(rlog(x[index]),+912747.1145).all():
      return False
    else:
      return True
  def adf8(index):
    if np.greater(psqrt(x[index]),+835827.8174).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*-404.636, adf1(1)*-690.548, adf2(2)*+787.285, adf3(3)*+959.520, adf4(4)*-299.739, adf5(5)*-576.284, adf6(6)*-745.624, adf7(7)*-274.711, adf8(8)*+611.349], [0, 1, 0, 1, 1, 0, 0, 1], 378.481)
result=p(); 0.7777777777777778
IndLenGenome:483
IndGenome:[32, 97, 87, 83, 94, 83, 0, 59, 87, 42, 76, 75, 52, 12, 46, 91, 11, 59, 51, 82, 59, 99, 91, 70, 32, 54, 53, 48, 70, 7, 93, 34, 77, 66, 64, 91, 44, 49, 87, 27, 85, 38, 37, 47, 73, 50, 25, 24, 6, 14, 96, 18, 94, 29, 43, 88, 17, 75, 5, 73, 63, 99, 24, 6, 11, 96, 2, 94, 29, 43, 88, 17, 75, 84, 73, 63, 99, 80, 81, 10, 31, 21, 77, 98, 64, 58, 29, 21, 10, 31, 21, 77, 98, 64, 58, 29, 55, 85, 22, 11, 40, 71, 74, 24, 37, 15, 36, 28, 18, 41, 18, 91, 40, 55, 57, 11, 85, 92, 40, 57, 62, 2, 78, 43, 29, 38, 72, 83, 30, 90, 7, 69, 51, 43, 89, 23, 28, 11, 99, 26, 82, 40, 55, 4, 11, 85, 72, 30, 57, 62, 53, 51, 55, 17, 30, 69, 71, 70, 63, 30, 97, 12, 85, 50, 37, 41, 31, 79, 37, 64, 36, 12, 99, 61, 92, 37, 54, 27, 71, 11, 14, 58, 75, 56, 11, 99, 61, 92, 37, 54, 27, 71, 11, 14, 95, 75, 56, 72, 31, 3, 64, 89, 43, 62, 31, 78, 93, 75, 58, 92, 37, 58, 11, 37, 54, 14, 78, 91, 87, 56, 47, 15, 44, 80, 74, 6, 43, 16, 41, 97, 55, 36, 99, 30, 45, 14, 98, 61, 40, 11, 77, 28, 77, 2, 28, 5, 2, 84, 53, 69, 85, 99, 35, 12, 30, 27, 3, 90, 12, 99, 69, 27, 33, 89, 47, 47, 23, 65, 17, 16, 72, 78, 94, 60, 53, 80, 87, 14, 35, 56, 82, 94, 12, 99, 2, 92, 37, 54, 27, 71, 11, 14, 58, 75, 56, 11, 31, 3, 64, 89, 43, 58, 31, 78, 93, 75, 90, 92, 37, 58, 73, 37, 98, 14, 78, 91, 87, 65, 47, 15, 44, 80, 74, 6, 43, 16, 53, 97, 55, 36, 99, 30, 45, 14, 98, 61, 40, 87, 77, 28, 77, 2, 28, 65, 2, 84, 53, 69, 22, 24, 35, 12, 30, 27, 3, 90, 77, 99, 69, 85, 85, 89, 47, 47, 23, 65, 17, 16, 72, 78, 94, 60, 53, 80, 87, 14, 35, 56, 82, 94, 11, 37, 1, 72, 37, 91, 16, 53, 14, 14, 70, 30, 0, 75, 48, 62, 72, 75, 86, 31, 56, 6, 47, 30, 77, 56, 99, 96, 53, 71, 96, 8, 66, 70, 36, 22, 65, 11, 45, 46, 77, 2, 28, 66, 25, 23, 60, 92, 37, 37, 77, 53, 2, 56, 38, 11, 57, 92, 19, 20, 15, 66, 73, 3, 22, 19, 76, 75, 57, 52, 75, 68, 95, 63, 52, 14, 46, 3, 43, 82, 58, 100, 15, 68, 46, 20, 53, 76, 89, 39, 27, 52, 82, 87, 27, 3, 9, 22, 4, 50, 81, 49, 30]
last_save: 1038

Gen:2094
last_save: 1038
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.5555555555555556
TestFitness:0.2222222222222222
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(np.cos(x[index]),-086153.9418).all():
      return False
    else:
      return True
  def adf1(index):
    if np.equal(np.sin(x[index]),+949860.4553).all():
      return False
    else:
      return False
  def adf2(index):
    if np.equal(x[index],+435705.6804).all():
      return True
    else:
      return False
  def adf3(index):
    if np.less(np.tanh(x[index]),+186393.5375).all():
      return True
    else:
      return True
  def adf4(index):
    if np.greater(x[index],+247999.7635).all():
      return False
    else:
      return False
  def adf5(index):
    if np.less(psqrt(x[index]),-768116.2593).all():
      return True
    else:
      return True
  def adf6(index):
    if np.less(np.sin(x[index]),-670819.1794).all():
      return True
    else:
      return False
  def adf7(index):
    if np.less(rlog(x[index]),+821311.3023).all():
      return True
    else:
      return False
  def adf8(index):
    if np.less(x[index],+432569.8355).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*-753.145, adf1(1)*+724.610, adf2(2)*+068.601, adf3(3)*+012.347, adf4(4)*-269.199, adf5(5)*-088.185, adf6(6)*+806.913, adf7(7)*-387.028, adf8(8)*+950.627], [1, 1, 1, 0, 0, 1, 1, 1], 670.499)
result=p(); 0.5555555555555556
IndLenGenome:418
IndGenome:[19, 77, 65, 82, 20, 16, 32, 86, 31, 23, 21, 39, 78, 66, 4, 77, 53, 85, 43, 49, 41, 89, 87, 30, 34, 59, 23, 71, 61, 89, 75, 57, 50, 74, 90, 26, 35, 40, 15, 80, 53, 73, 10, 95, 26, 85, 22, 74, 81, 45, 62, 89, 84, 81, 82, 3, 79, 68, 12, 71, 31, 38, 48, 95, 95, 84, 5, 24, 39, 69, 10, 57, 43, 44, 83, 27, 22, 76, 9, 10, 63, 44, 38, 94, 25, 93, 59, 42, 91, 44, 31, 16, 77, 96, 28, 29, 61, 37, 15, 72, 49, 51, 72, 50, 7, 99, 66, 90, 42, 40, 19, 93, 84, 20, 56, 44, 51, 4, 36, 41, 87, 60, 52, 88, 20, 36, 27, 64, 43, 67, 13, 46, 37, 89, 45, 97, 66, 81, 38, 73, 65, 48, 35, 79, 6, 73, 21, 46, 68, 44, 15, 56, 59, 10, 75, 74, 91, 33, 64, 49, 94, 52, 86, 31, 79, 31, 81, 40, 95, 49, 60, 28, 4, 43, 80, 32, 87, 23, 20, 41, 92, 14, 61, 31, 26, 73, 42, 40, 52, 96, 90, 16, 20, 40, 96, 56, 98, 89, 42, 95, 91, 91, 46, 23, 15, 21, 65, 61, 44, 92, 32, 72, 66, 33, 50, 23, 88, 65, 54, 13, 38, 53, 37, 23, 41, 50, 96, 35, 22, 71, 88, 27, 13, 75, 88, 46, 86, 79, 45, 36, 95, 18, 18, 63, 91, 88, 62, 47, 57, 98, 34, 94, 81, 84, 59, 64, 62, 16, 71, 77, 44, 79, 39, 83, 92, 32, 18, 55, 53, 48, 73, 49, 96, 81, 98, 57, 31, 26, 11, 55, 39, 8, 5, 86, 77, 20, 1, 52, 17, 88, 40, 92, 50, 88, 23, 86, 56, 3, 79, 51, 90, 76, 74, 79, 66, 44, 70, 32, 96, 12, 71, 37, 48, 64, 51, 50, 18, 64, 66, 5, 35, 44, 96, 2, 19, 25, 50, 10, 28, 13, 21, 56, 59, 5, 86, 98, 22, 4, 36, 73, 75, 57, 86, 97, 99, 84, 5, 51, 42, 86, 29, 19, 11, 57, 94, 23, 62, 68, 61, 0, 88, 94, 92, 93, 71, 13, 35, 65, 14, 91, 95, 62, 95, 50, 55, 90, 58, 27, 88, 53, 79, 79, 13, 25, 94, 49, 74, 61, 73, 46, 29, 6, 13, 80, 98, 58, 39, 89, 45, 22, 94, 77, 75, 30, 88, 46, 1, 60, 5, 10, 56, 98, 45, 24, 13, 48, 91, 49]
last_save: 1039

Gen:6
TrainFitness:0.6666666666666666
TestFitness:0.3333333333333333
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(psqrt(x[index]),+579468.3072).all():
      return True
    else:
      return True
  def adf1(index):
    if np.equal(np.sin(x[index]),-818393.5636).all():
      return True
    else:
      return False
  def adf2(index):
    if np.greater(sigmoid(x[index]),+556165.7613).all():
      return True
    else:
      return False
  def adf3(index):
    if np.less(sigmoid(x[index]),-716856.7990).all():
      return False
    else:
      return False
  def adf4(index):
    if np.less(np.cos(x[index]),-878427.5208).all():
      return True
    else:
      return True
  def adf5(index):
    if np.greater(np.cos(x[index]),-592612.9602).all():
      return True
    else:
      return False
  def adf6(index):
    if np.less(x[index],-253936.4036).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(psqrt(x[index]),+409151.4930).all():
      return False
    else:
      return False
  def adf8(index):
    if np.less(x[index],+028272.1663).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-575.503, adf1(1)*-186.430, adf2(2)*+192.454, adf3(3)*+640.189, adf4(4)*+809.633, adf5(5)*-058.381, adf6(6)*+066.200, adf7(7)*-779.599, adf8(8)*+272.904], [0, 0, 1, 1, 0, 1, 0, 0], 123.085)
result=p(); 0.6666666666666666
IndLenGenome:361
IndGenome:[19, 20, 84, 53, 15, 38, 95, 51, 78, 72, 15, 77, 29, 24, 6, 8, 33, 30, 97, 82, 38, 92, 51, 87, 20, 68, 78, 53, 35, 66, 68, 91, 78, 33, 9, 93, 25, 56, 33, 16, 22, 33, 16, 19, 18, 2, 57, 61, 40, 34, 75, 55, 46, 91, 36, 95, 87, 76, 91, 93, 26, 43, 47, 91, 13, 18, 27, 82, 75, 4, 87, 71, 86, 38, 35, 86, 47, 59, 19, 0, 15, 91, 36, 19, 13, 10, 49, 23, 83, 17, 28, 87, 38, 24, 72, 97, 85, 82, 80, 68, 50, 76, 69, 35, 27, 48, 97, 75, 91, 86, 35, 9, 52, 86, 81, 82, 39, 16, 60, 82, 40, 91, 26, 27, 79, 71, 43, 41, 37, 52, 85, 53, 79, 83, 36, 54, 10, 23, 86, 4, 13, 70, 73, 48, 80, 95, 93, 10, 97, 14, 60, 89, 51, 75, 51, 34, 39, 83, 80, 91, 55, 89, 99, 28, 19, 95, 50, 75, 60, 2, 88, 82, 37, 52, 91, 46, 66, 73, 4, 55, 68, 98, 87, 75, 50, 95, 77, 25, 45, 20, 23, 9, 69, 36, 31, 98, 36, 84, 63, 20, 59, 52, 52, 51, 59, 32, 44, 85, 24, 76, 68, 74, 96, 94, 50, 31, 68, 89, 67, 10, 83, 18, 50, 29, 16, 83, 33, 91, 29, 81, 60, 65, 58, 73, 78, 81, 58, 30, 77, 20, 16, 26, 42, 100, 30, 88, 81, 76, 7, 7, 9, 15, 79, 69, 81, 18, 74, 62, 47, 22, 69, 100, 74, 89, 98, 100, 63, 39, 34, 45, 0, 18, 74, 61, 62, 43, 90, 98, 35, 90, 96, 45, 22, 36, 66, 67, 18, 90, 49, 70, 50, 9, 43, 73, 31, 77, 33, 15, 27, 40, 0, 45, 35, 93, 91, 19, 36, 17, 20, 43, 47, 52, 47, 28, 80, 91, 45, 34, 88, 7, 99, 13, 33, 6, 80, 59, 41, 95, 44, 51, 62, 88, 8, 7, 42, 96, 87, 5, 11, 71, 24, 8, 37, 54, 9, 32, 4, 11, 69, 21, 72, 34, 12, 29, 40, 75, 87, 3, 10, 82, 81]
last_save: 1039

Gen:1231
TrainFitness:0.7777777777777778
TestFitness:0.3333333333333333
MaxGenLen:860
Individual: def p():
  def adf0(index):
    if np.greater(psqrt(x[index]),+589468.5072).all():
      return True
    else:
      return True
  def adf1(index):
    if np.equal(np.sin(x[index]),-846693.4636).all():
      return True
    else:
      return False
  def adf2(index):
    if np.greater(sigmoid(x[index]),+556165.7613).all():
      return True
    else:
      return False
  def adf3(index):
    if np.greater(sigmoid(x[index]),+065761.3637).all():
      if np.less(sigmoid(x[index]),-716856.7990).all():
        return False
      else:
        return False
      return True
    else:
      if np.less(sigmoid(x[index]),-830728.2170).all():
        return True
      else:
        return True
      return False
  def adf4(index):
    if np.less(sigmoid(x[index]),-636236.9827).all():
      if np.less(sigmoid(x[index]),+657613.6371).all():
        return False
      else:
        return True
      return False
    else:
      if np.less(x[index],+567980.5169).all():
        if np.less(x[index],-878427.5208).all():
          return True
        else:
          return True
        return False
      else:
        if np.greater(np.cos(x[index]),-592612.9602).all():
          return True
        else:
          return False
        return True
      return False
  def adf5(index):
    if np.less(x[index],+393640.3643).all():
      return True
    else:
      return False
  def adf6(index):
    if np.less(np.tanh(x[index]),+957875.1659).all():
      if np.greater(sigmoid(x[index]),+010791.3172).all():
        if np.equal(x[index],+036430.3805).all():
          return False
        else:
          return True
        return False
      else:
        if np.equal(x[index],-930159.9895).all():
          if np.greater(x[index],+216634.5887).all():
            if np.less(np.tanh(x[index]),-008659.1614).all():
              return False
            else:
              return False
            return True
          else:
            if np.less(x[index],-483643.0350).all():
              return False
            else:
              return False
            return True
          return False
        else:
          if np.greater(x[index],-576130.0167).all():
            if np.less(psqrt(x[index]),-140189.7038).all():
              return True
            else:
              return True
            return True
          else:
            if np.greater(x[index],-303505.3074).all():
              return True
            else:
              return False
            return False
          return False
        return False
      return True
    else:
      if np.equal(np.cos(x[index]),-895050.2827).all():
        return False
      else:
        return False
      return True
  def adf7(index):
    if np.less(x[index],+006331.9105).all():
      return True
    else:
      return False
  def adf8(index):
    if np.less(x[index],+620081.6779).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*-051.693, adf1(1)*-378.784, adf2(2)*-208.069, adf3(3)*-751.659, adf4(4)*+296.020, adf5(5)*+963.172, adf6(6)*-364.836, adf7(7)*-350.530, adf8(8)*+915.149], [0, 1, 1, 1, 1, 0, 1, 1], 502.827)
result=p(); 0.7777777777777778
IndLenGenome:815
IndGenome:[4, 20, 84, 53, 15, 38, 95, 51, 78, 72, 15, 78, 29, 24, 6, 8, 65, 30, 97, 82, 8, 68, 51, 87, 20, 68, 78, 53, 35, 94, 68, 54, 56, 76, 9, 93, 84, 56, 33, 16, 22, 33, 43, 19, 18, 2, 57, 43, 40, 34, 75, 55, 46, 91, 36, 95, 87, 76, 91, 93, 26, 43, 9, 52, 86, 81, 82, 39, 16, 60, 82, 40, 36, 95, 87, 76, 91, 93, 26, 43, 47, 91, 13, 18, 27, 82, 75, 4, 87, 71, 86, 38, 35, 86, 47, 59, 19, 0, 15, 91, 36, 19, 13, 10, 87, 23, 83, 6, 8, 33, 30, 97, 82, 38, 92, 51, 87, 20, 68, 78, 53, 89, 66, 68, 91, 78, 33, 9, 93, 25, 56, 33, 16, 22, 33, 16, 19, 18, 2, 57, 61, 40, 34, 75, 55, 46, 91, 36, 95, 87, 76, 91, 93, 26, 43, 47, 91, 13, 18, 27, 82, 75, 4, 87, 71, 86, 38, 35, 86, 47, 59, 58, 0, 15, 91, 36, 19, 13, 10, 49, 23, 83, 17, 28, 87, 38, 24, 72, 97, 85, 82, 80, 68, 50, 76, 69, 35, 27, 48, 97, 75, 91, 26, 35, 9, 52, 86, 81, 82, 39, 16, 60, 82, 40, 91, 26, 27, 79, 71, 43, 41, 37, 52, 85, 53, 79, 83, 36, 54, 10, 23, 86, 4, 13, 70, 73, 24, 72, 97, 85, 82, 80, 74, 50, 76, 69, 35, 27, 48, 97, 75, 91, 86, 35, 9, 52, 86, 81, 82, 39, 16, 60, 82, 40, 91, 30, 27, 79, 71, 43, 41, 37, 52, 85, 53, 79, 83, 36, 54, 10, 23, 86, 4, 73, 70, 73, 48, 80, 95, 93, 10, 97, 14, 60, 89, 51, 75, 51, 34, 39, 83, 80, 91, 55, 89, 99, 28, 19, 95, 50, 75, 60, 11, 88, 82, 37, 52, 91, 46, 66, 73, 4, 55, 68, 98, 87, 77, 25, 28, 86, 23, 9, 69, 100, 30, 88, 66, 55, 89, 51, 96, 51, 64, 39, 83, 80, 91, 55, 89, 18, 83, 36, 54, 88, 23, 86, 4, 13, 70, 73, 65, 80, 95, 93, 28, 87, 38, 80, 75, 55, 46, 91, 36, 95, 87, 76, 91, 93, 60, 40, 91, 26, 77, 25, 28, 20, 23, 9, 69, 36, 31, 94, 50, 31, 68, 89, 67, 10, 83, 18, 50, 100, 16, 83, 33, 91, 29, 81, 4, 13, 70, 73, 65, 80, 95, 93, 10, 97, 14, 60, 89, 51, 75, 51, 34, 39, 83, 80, 91, 55, 89, 99, 28, 19, 95, 50, 75, 60, 2, 88, 82, 37, 51, 91, 46, 66, 73, 4, 55, 68, 98, 18, 50, 100, 16, 83, 33, 91, 29, 81, 60, 65, 58, 73, 97, 81, 58, 41, 77, 20, 16, 96, 42, 100, 30, 88, 81, 76, 7, 7, 9, 15, 31, 69, 86, 47, 59, 19, 0, 15, 91, 36, 19, 13, 10, 87, 23, 83, 17, 28, 87, 38, 24, 72, 97, 85, 82, 80, 68, 50, 76, 69, 35, 47, 48, 97, 75, 91, 86, 35, 9, 52, 86, 81, 82, 39, 16, 60, 82, 40, 91, 26, 27, 79, 66, 43, 41, 37, 52, 85, 53, 79, 83, 36, 54, 88, 23, 86, 4, 13, 70, 73, 65, 80, 95, 93, 10, 97, 14, 60, 89, 51, 75, 51, 34, 39, 83, 80, 91, 55, 89, 99, 28, 19, 95, 50, 75, 60, 2, 88, 82, 37, 52, 91, 46, 66, 73, 4, 55, 68, 98, 87, 75, 50, 95, 77, 25, 45, 20, 23, 9, 69, 36, 31, 98, 36, 84, 63, 20, 59, 52, 52, 51, 59, 32, 44, 85, 24, 76, 68, 74, 96, 94, 50, 31, 68, 89, 67, 10, 68, 18, 50, 29, 16, 83, 33, 87, 75, 50, 95, 77, 25, 45, 20, 23, 9, 69, 36, 31, 98, 36, 84, 63, 20, 59, 52, 52, 51, 59, 32, 44, 85, 24, 76, 68, 74, 96, 94, 50, 31, 68, 89, 67, 10, 83, 18, 50, 29, 16, 83, 33, 91, 29, 81, 60, 65, 58, 73, 78, 81, 58, 30, 77, 20, 16, 26, 42, 100, 30, 88, 81, 76, 7, 7, 9, 15, 79, 69, 81, 18, 74, 62, 47, 22, 69, 100, 74, 89, 98, 100, 63, 39, 34, 45, 0, 18, 74, 61, 62, 43, 90, 98, 35, 90, 96, 45, 22, 36, 66, 67, 18, 90, 49, 70, 50, 9, 43, 73, 31, 77, 33, 15, 27, 40, 0, 45, 35, 93, 91, 19, 36, 17, 20, 43, 47, 52, 47, 28, 80, 91, 45, 34, 88, 7, 99, 13, 33, 6, 80, 59, 41, 95, 44, 51, 62, 88, 8, 7, 42, 96, 87, 5, 11, 71, 24, 8, 37, 54, 9, 32, 4, 11, 69, 21, 72, 34, 12, 29, 40, 75, 87, 3, 10, 82, 81]
last_save: 1039