Dataset:Meander/Full.csv
FS:True
Seed:1237
Size:10

Gen:1
TrainFitness:0.6666666666666666
TestFitness:1.0
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(x[index],-954826.3476).all():
      return True
    else:
      return True
  def adf1(index):
    if np.greater(np.cos(x[index]),-148957.7220).all():
      return True
    else:
      return True
  def adf2(index):
    if np.equal(np.tanh(x[index]),-213508.8322).all():
      return True
    else:
      return False
  def adf3(index):
    if np.less(psqrt(x[index]),-954712.5905).all():
      return True
    else:
      return True
  def adf4(index):
    if np.equal(x[index],-600929.0829).all():
      return True
    else:
      return True
  def adf7(index):
    if np.equal(x[index],-029113.0680).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+460.897, adf1(1)*-955.250, adf2(2)*+614.066, adf3(3)*+720.340, adf4(4)*-729.514, adf7(7)*+024.883], [0, 1, 0, 0, 0], 011.293)
result=p(); 0.6666666666666666
IndLenGenome:283
IndGenome:[51, 49, 60, 15, 27, 27, 19, 16, 10, 18, 16, 84, 65, 79, 28, 77, 29, 85, 58, 73, 20, 10, 67, 26, 41, 54, 17, 75, 88, 92, 25, 7, 71, 59, 20, 23, 75, 22, 49, 34, 19, 95, 30, 46, 85, 3, 47, 94, 38, 44, 85, 64, 53, 55, 46, 13, 17, 30, 25, 64, 96, 19, 28, 22, 35, 90, 91, 30, 32, 13, 55, 5, 11, 61, 32, 49, 31, 39, 46, 50, 68, 47, 20, 29, 72, 96, 57, 32, 49, 61, 3, 98, 91, 13, 31, 45, 65, 47, 36, 53, 94, 41, 33, 32, 17, 21, 62, 60, 84, 70, 41, 36, 76, 69, 21, 30, 19, 95, 62, 13, 10, 82, 92, 30, 38, 60, 79, 73, 86, 61, 47, 66, 19, 99, 38, 98, 93, 55, 38, 64, 42, 16, 50, 53, 30, 29, 91, 40, 18, 72, 75, 77, 85, 10, 99, 72, 20, 45, 82, 70, 65, 39, 39, 96, 24, 96, 69, 68, 34, 82, 99, 20, 18, 51, 83, 42, 92, 66, 27, 95, 19, 44, 45, 34, 83, 28, 90, 32, 28, 29, 1, 18, 16, 50, 91, 45, 45, 85, 92, 78, 92, 68, 27, 54, 94, 62, 89, 58, 67, 12, 61, 71, 56, 67, 19, 50, 68, 100, 48, 24, 16, 8, 65, 24, 31, 74, 90, 8, 60, 57, 49, 16, 54, 83, 64, 96, 14, 98, 66, 56, 59, 75, 48, 31, 21, 23, 98, 100, 27, 14, 52, 5, 17, 55, 84, 58, 93, 89, 27, 61, 36, 3, 35, 5, 13, 68, 78, 100, 33, 3, 47, 61, 78, 90, 51, 3, 22, 39, 68, 95, 31, 34, 88]
last_save: 1035

Gen:12
TrainFitness:0.8333333333333334
TestFitness:1.0
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(psqrt(x[index]),-793898.1887).all():
      return False
    else:
      return True
  def adf1(index):
    if np.equal(sigmoid(x[index]),-424048.5966).all():
      return True
    else:
      return False
  def adf2(index):
    if np.equal(np.cos(x[index]),-109305.7033).all():
      return False
    else:
      return True
  def adf3(index):
    if np.equal(x[index],-591749.6938).all():
      return False
    else:
      return True
  def adf4(index):
    if np.less(np.tanh(x[index]),-450246.9014).all():
      return False
    else:
      return True
  def adf7(index):
    if np.less(x[index],+033924.7339).all():
      if np.greater(x[index],+703176.2595).all():
        return True
      else:
        return False
      return True
    else:
      if np.less(x[index],+693816.4944).all():
        return True
      else:
        return False
      return False
  return multiple_operation([adf0(0)*+423.663, adf1(1)*+641.908, adf2(2)*+159.966, adf3(3)*+488.087, adf4(4)*+763.833, adf7(7)*-558.139], [1, 1, 0, 1, 1], 592.636)
result=p(); 0.8333333333333334
IndLenGenome:423
IndGenome:[19, 51, 76, 27, 22, 32, 65, 50, 63, 41, 27, 49, 43, 18, 49, 48, 51, 98, 18, 87, 51, 28, 11, 59, 47, 36, 9, 60, 41, 34, 64, 52, 84, 60, 4, 58, 65, 9, 96, 46, 20, 13, 73, 49, 62, 84, 37, 3, 63, 69, 31, 30, 69, 23, 90, 85, 97, 10, 83, 33, 37, 34, 52, 95, 89, 25, 66, 15, 38, 45, 49, 81, 57, 34, 49, 36, 49, 23, 38, 31, 16, 74, 49, 4, 74, 38, 29, 55, 99, 94, 5, 10, 62, 94, 36, 9, 60, 41, 34, 67, 52, 84, 60, 4, 58, 65, 9, 96, 46, 20, 13, 73, 49, 62, 84, 37, 3, 63, 69, 31, 30, 33, 23, 90, 85, 97, 10, 83, 21, 37, 36, 52, 95, 89, 25, 66, 15, 38, 45, 49, 81, 57, 34, 49, 36, 49, 23, 38, 31, 16, 74, 49, 4, 74, 38, 29, 55, 99, 94, 5, 94, 62, 94, 82, 13, 76, 36, 3, 39, 56, 73, 86, 24, 11, 29, 20, 48, 31, 12, 85, 31, 45, 69, 99, 26, 56, 88, 94, 52, 14, 78, 78, 90, 98, 37, 84, 72, 25, 47, 26, 53, 48, 13, 23, 39, 83, 35, 65, 95, 78, 11, 63, 19, 90, 85, 91, 48, 25, 43, 83, 35, 39, 32, 56, 83, 36, 97, 96, 52, 24, 53, 71, 59, 36, 15, 90, 94, 31, 46, 24, 23, 41, 71, 74, 96, 79, 82, 75, 92, 72, 92, 42, 1, 2, 96, 58, 44, 72, 66, 54, 89, 52, 50, 98, 43, 23, 87, 4, 53, 38, 23, 50, 53, 93, 41, 50, 40, 81, 74, 61, 43, 59, 63, 11, 75, 27, 39, 28, 59, 54, 90, 15, 96, 66, 6, 74, 70, 65, 23, 22, 69, 11, 91, 59, 95, 26, 100, 65, 19, 94, 28, 90, 20, 96, 55, 93, 33, 45, 34, 27, 40, 15, 64, 64, 62, 51, 76, 64, 73, 73, 16, 21, 46, 21, 77, 16, 78, 27, 54, 29, 81, 64, 92, 10, 46, 22, 78, 81, 18, 88, 53, 71, 95, 1, 26, 82, 18, 90, 23, 28, 93, 36, 74, 67, 78, 68, 2, 44, 66, 86, 23, 85, 71, 47, 34, 90, 42, 62, 85, 0, 48, 86, 21, 16, 20, 3, 62, 56, 97, 69, 51, 30, 90, 79, 16, 12, 43, 35, 10, 97, 15, 30, 93, 56, 44, 43, 56, 29, 75, 19, 8, 60, 36, 26, 18, 6, 98, 0, 89, 32, 66, 79, 80]
last_save: 1035

Gen:2012
last_save: 1035
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(sigmoid(x[index]),+298251.4820).all():
      return True
    else:
      return False
  def adf1(index):
    if np.less(x[index],+437559.3231).all():
      return True
    else:
      return False
  def adf2(index):
    if np.less(np.sin(x[index]),+606950.7866).all():
      return False
    else:
      return True
  def adf3(index):
    if np.greater(x[index],-728711.5242).all():
      return False
    else:
      return True
  def adf4(index):
    if np.less(x[index],-401572.8672).all():
      return False
    else:
      return False
  def adf7(index):
    if np.equal(np.tanh(x[index]),+356229.2603).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+258.099, adf1(1)*+465.170, adf2(2)*-982.654, adf3(3)*+124.501, adf4(4)*+915.855, adf7(7)*+746.795], [1, 0, 1, 0, 0], 092.502)
result=p(); 0.6666666666666666
IndLenGenome:283
IndGenome:[42, 20, 12, 72, 43, 57, 8, 55, 56, 5, 74, 28, 32, 35, 95, 90, 32, 46, 14, 38, 99, 84, 28, 37, 79, 84, 90, 91, 22, 75, 66, 68, 49, 89, 70, 26, 31, 70, 97, 53, 18, 88, 27, 83, 4, 97, 91, 18, 74, 33, 47, 71, 27, 92, 23, 89, 75, 27, 30, 36, 62, 80, 59, 64, 47, 31, 93, 21, 60, 76, 15, 36, 58, 99, 87, 21, 86, 83, 75, 59, 12, 47, 80, 87, 41, 59, 19, 70, 14, 36, 18, 33, 49, 95, 55, 56, 82, 79, 62, 44, 96, 54, 65, 64, 92, 66, 66, 60, 74, 76, 22, 97, 15, 37, 88, 15, 92, 40, 75, 95, 42, 57, 31, 72, 45, 85, 6, 35, 23, 86, 20, 99, 72, 55, 19, 45, 80, 55, 57, 93, 35, 76, 61, 97, 69, 45, 15, 5, 5, 42, 62, 95, 78, 51, 71, 88, 95, 72, 96, 92, 43, 14, 13, 52, 62, 16, 77, 59, 30, 74, 82, 92, 32, 78, 69, 21, 98, 77, 89, 83, 17, 80, 16, 95, 80, 66, 44, 95, 58, 41, 80, 94, 50, 88, 29, 88, 92, 3, 94, 99, 49, 89, 72, 20, 69, 96, 10, 33, 46, 54, 36, 84, 22, 10, 3, 13, 12, 21, 7, 91, 61, 9, 53, 68, 26, 36, 98, 14, 26, 84, 21, 42, 35, 88, 50, 32, 86, 3, 8, 86, 36, 19, 40, 96, 19, 96, 34, 64, 15, 65, 6, 63, 83, 90, 77, 57, 27, 60, 68, 11, 60, 32, 67, 69, 69, 62, 91, 57, 38, 20, 61, 8, 81, 21, 84, 74, 38, 41, 34, 23, 24, 42, 20]
last_save: 1036

Gen:28
TrainFitness:0.8333333333333334
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],-167598.2979).all():
      return True
    else:
      return False
  def adf1(index):
    if np.greater(np.tanh(x[index]),+709759.4339).all():
      return False
    else:
      return True
  def adf2(index):
    if np.less(x[index],-257860.0880).all():
      return False
    else:
      return True
  def adf3(index):
    if np.less(psqrt(x[index]),-635543.4564).all():
      return True
    else:
      return True
  def adf4(index):
    if np.less(np.sin(x[index]),-464938.0962).all():
      return True
    else:
      return False
  def adf7(index):
    if np.equal(x[index],+008801.2817).all():
      if np.equal(np.tanh(x[index]),-942035.6664).all():
        if np.equal(psqrt(x[index]),-491731.4386).all():
          return True
        else:
          return False
        return True
      else:
        if np.equal(x[index],-141065.5601).all():
          return False
        else:
          return True
        return False
      return False
    else:
      if np.greater(x[index],+027565.9326).all():
        if np.less(np.cos(x[index]),-122568.8744).all():
          return False
        else:
          return False
        return False
      else:
        if np.greater(x[index],+963043.2662).all():
          return True
        else:
          return True
        return True
      return False
  return multiple_operation([adf0(0)*-193.506, adf1(1)*-530.450, adf2(2)*-403.049, adf3(3)*-047.917, adf4(4)*-141.162, adf7(7)*-966.048], [0, 1, 0, 0, 0], 448.651)
result=p(); 0.8333333333333334
IndLenGenome:323
IndGenome:[35, 92, 63, 79, 18, 13, 7, 65, 60, 81, 16, 47, 55, 19, 58, 72, 49, 7, 69, 44, 39, 13, 21, 72, 96, 86, 21, 16, 87, 47, 40, 49, 77, 25, 59, 94, 63, 83, 79, 9, 76, 44, 41, 34, 59, 41, 43, 33, 62, 45, 37, 48, 56, 30, 100, 88, 28, 90, 21, 62, 19, 11, 61, 16, 47, 65, 21, 82, 36, 73, 95, 95, 44, 13, 54, 15, 36, 84, 94, 76, 38, 11, 37, 74, 60, 73, 97, 50, 34, 66, 44, 49, 83, 18, 90, 39, 86, 72, 68, 11, 41, 14, 33, 62, 45, 37, 48, 56, 30, 100, 88, 28, 90, 21, 62, 18, 91, 57, 52, 28, 23, 66, 38, 82, 77, 65, 19, 54, 72, 90, 13, 15, 36, 56, 66, 44, 49, 83, 18, 47, 69, 75, 75, 44, 59, 61, 87, 53, 101, 34, 33, 68, 6, 80, 23, 38, 27, 71, 51, 89, 99, 42, 81, 24, 81, 70, 56, 25, 35, 86, 50, 61, 97, 42, 17, 43, 36, 61, 24, 15, 87, 18, 51, 60, 32, 37, 75, 16, 55, 99, 83, 92, 96, 19, 19, 90, 49, 99, 95, 67, 21, 92, 92, 65, 46, 78, 88, 37, 74, 34, 27, 99, 47, 93, 96, 29, 61, 50, 82, 39, 26, 43, 50, 34, 23, 32, 86, 76, 92, 98, 12, 82, 69, 37, 67, 64, 49, 58, 11, 59, 13, 25, 90, 26, 94, 7, 91, 15, 43, 0, 24, 15, 60, 5, 33, 82, 74, 20, 73, 60, 94, 79, 31, 63, 13, 80, 4, 27, 59, 41, 97, 23, 59, 46, 61, 34, 1, 71, 16, 42, 94, 29, 97, 49, 76, 56, 20, 84, 58, 96, 46, 69, 98, 2, 98, 59, 74, 74, 28, 26, 45, 41, 82, 31, 28, 87, 14, 53, 1, 98, 93, 78, 88, 61, 78, 86, 19, 25, 51, 97, 45, 87, 83]
last_save: 1036

Gen:2028
last_save: 1036
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:1.0
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],+373755.8135).all():
      return False
    else:
      return True
  def adf1(index):
    if np.less(psqrt(x[index]),-431090.2474).all():
      return False
    else:
      return True
  def adf2(index):
    if np.equal(x[index],+234799.7384).all():
      return True
    else:
      return False
  def adf3(index):
    if np.less(x[index],+597357.4559).all():
      return False
    else:
      return True
  def adf4(index):
    if np.greater(x[index],-853782.8207).all():
      return True
    else:
      return False
  def adf7(index):
    if np.less(x[index],-079717.1336).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+548.634, adf1(1)*-676.961, adf2(2)*-868.974, adf3(3)*-517.404, adf4(4)*+516.455, adf7(7)*-218.283], [0, 1, 0, 0, 0], 778.720)
result=p(); 0.6666666666666666
IndLenGenome:280
IndGenome:[56, 67, 78, 51, 35, 50, 3, 33, 86, 85, 13, 94, 40, 80, 30, 47, 22, 59, 10, 44, 60, 78, 92, 87, 22, 60, 84, 18, 57, 17, 37, 1, 35, 83, 77, 55, 42, 21, 58, 58, 49, 37, 47, 39, 75, 81, 29, 43, 13, 35, 4, 39, 49, 60, 80, 2, 77, 13, 16, 60, 55, 94, 15, 61, 85, 51, 26, 24, 38, 36, 67, 83, 89, 85, 87, 23, 88, 84, 63, 77, 44, 80, 97, 13, 42, 71, 25, 70, 16, 37, 51, 51, 89, 52, 55, 94, 94, 32, 58, 39, 21, 59, 12, 40, 5, 79, 31, 25, 95, 15, 76, 55, 74, 83, 88, 78, 47, 89, 4, 40, 17, 52, 33, 35, 18, 54, 89, 84, 31, 15, 67, 48, 73, 66, 91, 63, 9, 27, 38, 10, 51, 98, 89, 76, 72, 26, 29, 30, 19, 43, 70, 48, 86, 41, 24, 27, 34, 22, 65, 37, 20, 39, 10, 24, 58, 84, 30, 52, 33, 26, 96, 85, 85, 13, 73, 81, 17, 28, 36, 77, 13, 64, 83, 85, 47, 35, 78, 89, 22, 52, 10, 58, 25, 50, 72, 66, 53, 87, 89, 61, 8, 96, 18, 63, 63, 44, 92, 18, 73, 19, 31, 0, 43, 41, 59, 74, 6, 56, 78, 93, 43, 64, 66, 12, 47, 28, 9, 34, 88, 82, 22, 31, 51, 71, 52, 88, 50, 48, 76, 79, 41, 90, 58, 4, 95, 56, 98, 10, 20, 29, 78, 75, 40, 60, 36, 21, 84, 63, 97, 84, 71, 29, 79, 63, 48, 98, 7, 48, 84, 32, 52, 97, 79, 37, 90, 91, 69, 56, 64, 64]
last_save: 1037

Gen:11
TrainFitness:0.8333333333333334
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(x[index],+855725.1232).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(x[index],-937916.3084).all():
      return True
    else:
      return True
  def adf2(index):
    if np.greater(sigmoid(x[index]),+508546.0232).all():
      return True
    else:
      return True
  def adf3(index):
    if np.equal(x[index],+357175.7712).all():
      return False
    else:
      return False
  def adf4(index):
    if np.equal(psqrt(x[index]),+397967.4422).all():
      if np.greater(x[index],+122631.5550).all():
        return False
      else:
        return False
      return False
    else:
      if np.less(x[index],+839681.4501).all():
        return True
      else:
        return False
      return True
  def adf7(index):
    if np.greater(x[index],+015517.8372).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+097.833, adf1(1)*+937.128, adf2(2)*-300.386, adf3(3)*+232.472, adf4(4)*-173.547, adf7(7)*-591.958], [1, 0, 0, 0, 1], 963.215)
result=p(); 0.8333333333333334
IndLenGenome:497
IndGenome:[17, 46, 22, 81, 44, 65, 16, 14, 20, 68, 15, 55, 87, 82, 95, 21, 22, 23, 72, 39, 9, 59, 93, 73, 85, 65, 3, 90, 29, 43, 87, 59, 11, 6, 3, 30, 48, 84, 32, 68, 99, 5, 39, 96, 69, 93, 34, 9, 55, 70, 38, 55, 94, 76, 40, 92, 53, 52, 62, 34, 60, 27, 65, 95, 73, 72, 77, 43, 5, 77, 41, 67, 15, 27, 97, 71, 22, 87, 23, 94, 76, 93, 17, 28, 11, 91, 94, 98, 83, 89, 37, 79, 36, 87, 34, 74, 92, 32, 31, 39, 49, 35, 54, 99, 81, 32, 22, 86, 83, 61, 85, 65, 35, 80, 67, 29, 53, 11, 19, 23, 71, 14, 78, 58, 93, 39, 36, 78, 61, 84, 95, 50, 21, 12, 21, 52, 41, 19, 6, 35, 33, 92, 71, 50, 81, 25, 85, 91, 37, 58, 73, 37, 52, 40, 61, 93, 15, 91, 34, 42, 60, 19, 87, 18, 93, 23, 74, 46, 20, 19, 23, 87, 51, 82, 8, 63, 99, 73, 13, 20, 50, 83, 58, 56, 44, 56, 69, 92, 33, 32, 54, 17, 12, 67, 99, 11, 51, 17, 93, 45, 24, 47, 13, 69, 73, 25, 29, 41, 19, 75, 68, 77, 43, 82, 76, 92, 85, 17, 79, 46, 3, 42, 21, 45, 68, 81, 87, 84, 20, 34, 24, 34, 66, 57, 75, 66, 88, 25, 66, 95, 27, 80, 67, 17, 62, 16, 38, 63, 91, 25, 47, 22, 38, 89, 70, 84, 89, 30, 95, 41, 14, 13, 68, 80, 65, 47, 56, 43, 77, 74, 56, 58, 90, 92, 51, 94, 38, 81, 57, 16, 37, 81, 2, 11, 45, 96, 69, 52, 47, 48, 12, 64, 45, 60, 40, 79, 12, 39, 59, 10, 56, 84, 12, 47, 60, 66, 30, 44, 37, 37, 41, 99, 31, 11, 44, 81, 99, 37, 10, 12, 40, 62, 99, 6, 69, 28, 97, 19, 46, 90, 16, 45, 69, 20, 35, 80, 78, 30, 65, 49, 39, 11, 91, 42, 90, 53, 36, 6, 55, 89, 35, 50, 4, 3, 4, 71, 77, 100, 66, 14, 46, 54, 75, 73, 57, 55, 59, 14, 100, 33, 64, 100, 97, 23, 91, 64, 88, 59, 93, 68, 15, 95, 24, 90, 24, 17, 66, 18, 37, 51, 90, 47, 24, 78, 83, 36, 18, 35, 41, 23, 83, 67, 91, 79, 96, 7, 85, 21, 43, 14, 34, 26, 55, 3, 14, 28, 99, 16, 85, 45, 73, 57, 94, 92, 13, 57, 98, 43, 4, 43, 62, 24, 98, 74, 24, 64, 61, 70, 8, 53, 85, 25, 20, 8, 38, 88, 68, 47, 81, 74, 30, 65, 14, 65, 24, 74, 0, 92, 21, 50, 7, 91, 75, 15, 96, 60, 23, 92, 56, 63, 30, 75, 0, 51, 40, 78, 82, 19, 28, 67, 2, 26, 33, 48, 1, 95, 50, 21, 84, 22, 1, 80, 13, 28, 61, 39, 32]
last_save: 1037

Gen:2011
last_save: 1037
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.8333333333333334
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(np.sin(x[index]),+895854.9163).all():
      return True
    else:
      return False
  def adf1(index):
    if np.less(psqrt(x[index]),-138181.4011).all():
      return False
    else:
      return False
  def adf2(index):
    if np.equal(np.sin(x[index]),+850910.8546).all():
      return True
    else:
      return False
  def adf3(index):
    if np.equal(np.tanh(x[index]),-356436.5778).all():
      return False
    else:
      return False
  def adf4(index):
    if np.less(x[index],+011230.2078).all():
      return True
    else:
      return False
  def adf7(index):
    if np.equal(rlog(x[index]),+042976.2264).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+707.642, adf1(1)*-881.220, adf2(2)*-495.577, adf3(3)*+038.439, adf4(4)*-823.611, adf7(7)*-048.376], [1, 1, 1, 0, 1], 251.622)
result=p(); 0.8333333333333334
IndLenGenome:286
IndGenome:[33, 24, 71, 95, 71, 53, 73, 46, 98, 46, 81, 11, 73, 49, 67, 95, 65, 72, 36, 75, 69, 84, 28, 47, 69, 62, 51, 32, 19, 53, 57, 7, 23, 94, 63, 16, 20, 79, 35, 31, 86, 89, 56, 94, 55, 11, 38, 74, 81, 16, 52, 67, 29, 3, 29, 68, 34, 35, 82, 58, 32, 82, 19, 22, 64, 12, 78, 70, 66, 69, 21, 37, 58, 94, 95, 29, 16, 58, 41, 36, 2, 88, 61, 23, 72, 58, 67, 7, 64, 31, 51, 40, 19, 30, 86, 61, 35, 26, 47, 55, 39, 96, 54, 98, 38, 23, 26, 18, 49, 56, 14, 26, 48, 50, 88, 18, 92, 91, 94, 71, 10, 62, 41, 76, 82, 78, 39, 15, 22, 28, 75, 83, 80, 60, 61, 67, 41, 84, 40, 72, 3, 78, 31, 15, 64, 88, 91, 23, 51, 13, 44, 13, 50, 47, 98, 87, 41, 18, 64, 73, 44, 45, 21, 28, 82, 47, 80, 36, 57, 24, 27, 70, 69, 19, 80, 31, 60, 11, 29, 3, 87, 25, 12, 78, 67, 96, 33, 74, 35, 13, 96, 46, 81, 68, 28, 53, 73, 13, 71, 58, 70, 75, 65, 20, 98, 4, 33, 11, 50, 99, 64, 1, 55, 62, 99, 68, 18, 57, 58, 60, 95, 86, 90, 57, 51, 99, 97, 68, 60, 65, 86, 31, 5, 59, 67, 3, 51, 93, 1, 66, 97, 33, 50, 87, 93, 86, 62, 34, 89, 88, 21, 5, 36, 58, 31, 0, 15, 94, 80, 3, 31, 30, 32, 25, 20, 84, 77, 54, 71, 29, 30, 68, 23, 78, 40, 11, 90, 71, 0, 93, 30, 63, 56, 52, 77, 40]
last_save: 1038

Gen:2001
last_save: 1038
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(np.tanh(x[index]),+626129.8342).all():
      return False
    else:
      return False
  def adf1(index):
    if np.greater(np.cos(x[index]),+031333.1703).all():
      return True
    else:
      return True
  def adf2(index):
    if np.less(x[index],+940002.8085).all():
      return True
    else:
      return False
  def adf3(index):
    if np.less(x[index],+101424.3920).all():
      return False
    else:
      return True
  def adf4(index):
    if np.equal(np.cos(x[index]),+858853.6068).all():
      return False
    else:
      return True
  def adf7(index):
    if np.equal(x[index],+356194.2008).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+810.456, adf1(1)*+446.284, adf2(2)*-184.041, adf3(3)*+856.600, adf4(4)*-605.033, adf7(7)*-933.118], [1, 1, 1, 0, 1], 280.565)
result=p(); 0.6666666666666666
IndLenGenome:283
IndGenome:[59, 44, 25, 10, 54, 41, 56, 24, 99, 62, 25, 41, 15, 68, 5, 46, 74, 63, 70, 83, 43, 10, 65, 88, 69, 48, 85, 99, 32, 10, 27, 61, 57, 14, 69, 87, 1, 59, 84, 26, 54, 55, 92, 73, 65, 34, 78, 73, 51, 86, 17, 21, 41, 60, 37, 88, 73, 93, 86, 12, 20, 60, 23, 91, 98, 93, 81, 30, 99, 58, 54, 7, 32, 87, 36, 10, 94, 18, 53, 33, 26, 94, 11, 53, 23, 75, 78, 50, 84, 80, 99, 36, 99, 83, 9, 98, 70, 78, 28, 47, 14, 94, 53, 36, 22, 13, 13, 41, 79, 73, 25, 32, 81, 31, 86, 85, 82, 50, 71, 22, 41, 81, 74, 74, 10, 29, 68, 71, 21, 10, 60, 60, 25, 68, 31, 42, 68, 37, 16, 46, 64, 89, 53, 43, 14, 76, 49, 70, 38, 38, 89, 52, 33, 53, 50, 22, 80, 79, 43, 74, 62, 4, 20, 40, 28, 10, 34, 58, 29, 44, 52, 85, 30, 90, 19, 92, 35, 76, 20, 36, 36, 18, 58, 15, 23, 58, 45, 48, 50, 35, 100, 6, 88, 96, 10, 87, 69, 58, 96, 91, 5, 72, 94, 43, 50, 51, 54, 66, 95, 29, 81, 35, 57, 45, 87, 40, 58, 57, 25, 33, 13, 23, 94, 55, 64, 78, 47, 81, 58, 3, 41, 46, 12, 9, 12, 50, 15, 47, 96, 43, 74, 55, 50, 89, 84, 92, 44, 73, 76, 13, 44, 31, 18, 74, 82, 63, 96, 65, 66, 14, 97, 40, 87, 72, 69, 30, 77, 4, 37, 72, 53, 58, 18, 79, 30, 17, 58, 58, 100, 66, 85, 61, 39]
last_save: 1039

Gen:2
TrainFitness:0.8333333333333334
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.equal(rlog(x[index]),-744945.4335).all():
      if np.less(psqrt(x[index]),-834787.0490).all():
        return False
      else:
        return True
      return True
    else:
      if np.equal(x[index],-266826.0715).all():
        return False
      else:
        return False
      return False
  def adf1(index):
    if np.greater(x[index],-381445.1551).all():
      return False
    else:
      return True
  def adf2(index):
    if np.less(x[index],+020691.8979).all():
      return True
    else:
      return False
  def adf3(index):
    if np.equal(np.cos(x[index]),-619942.2207).all():
      if np.less(x[index],+268728.9218).all():
        return False
      else:
        return True
      return True
    else:
      if np.equal(np.sin(x[index]),-253601.8932).all():
        if np.less(sigmoid(x[index]),-760717.2938).all():
          return True
        else:
          return True
        return True
      else:
        if np.equal(x[index],+438329.2560).all():
          return False
        else:
          return True
        return True
      return True
  def adf4(index):
    if np.less(psqrt(x[index]),-982637.2234).all():
      return True
    else:
      return True
  def adf7(index):
    if np.greater(rlog(x[index]),+042115.2754).all():
      return False
    else:
      return True
  return multiple_operation([adf0(0)*-659.263, adf1(1)*-719.780, adf2(2)*-468.024, adf3(3)*-684.393, adf4(4)*-818.787, adf7(7)*-238.029], [0, 0, 1, 0, 1], 089.252)
result=p(); 0.8333333333333334
IndLenGenome:361
IndGenome:[26, 72, 35, 90, 41, 23, 70, 28, 88, 79, 36, 27, 74, 84, 79, 14, 15, 74, 83, 83, 55, 25, 40, 76, 41, 93, 47, 91, 58, 53, 54, 67, 58, 37, 80, 84, 99, 30, 53, 50, 76, 3, 41, 3, 39, 89, 4, 42, 46, 96, 98, 92, 16, 80, 27, 31, 95, 13, 85, 71, 77, 77, 69, 75, 45, 59, 91, 13, 18, 81, 84, 64, 85, 31, 15, 25, 41, 35, 24, 37, 13, 82, 63, 60, 44, 7, 70, 12, 30, 26, 79, 61, 68, 99, 77, 79, 82, 31, 97, 96, 71, 83, 52, 91, 99, 23, 30, 86, 41, 19, 39, 84, 92, 12, 12, 10, 97, 17, 88, 89, 45, 32, 48, 92, 96, 58, 87, 62, 88, 69, 92, 31, 18, 87, 84, 96, 78, 38, 71, 92, 96, 44, 85, 54, 62, 25, 43, 16, 40, 81, 98, 49, 23, 32, 69, 73, 52, 45, 4, 27, 97, 37, 66, 30, 87, 71, 27, 62, 79, 53, 18, 44, 88, 2, 81, 8, 83, 79, 76, 81, 44, 3, 78, 83, 22, 69, 52, 35, 26, 10, 87, 36, 80, 56, 34, 85, 91, 62, 71, 80, 19, 37, 89, 28, 62, 46, 73, 77, 82, 12, 93, 84, 32, 72, 58, 49, 21, 72, 58, 79, 20, 63, 60, 54, 32, 61, 61, 15, 92, 17, 95, 14, 37, 36, 78, 97, 53, 37, 94, 66, 75, 89, 92, 26, 13, 38, 55, 45, 17, 91, 69, 57, 48, 40, 52, 39, 68, 64, 36, 98, 50, 52, 74, 31, 19, 56, 96, 78, 74, 3, 89, 23, 85, 43, 28, 48, 71, 28, 47, 98, 67, 51, 15, 2, 42, 13, 8, 10, 52, 59, 11, 44, 72, 79, 36, 93, 10, 90, 68, 99, 72, 85, 32, 6, 63, 57, 82, 12, 17, 70, 77, 56, 50, 11, 86, 5, 22, 9, 4, 9, 41, 1, 7, 29, 32, 0, 93, 96, 45, 60, 11, 46, 62, 1, 0, 35, 21, 42, 51, 39, 90, 65, 33, 14, 84, 59, 59, 88, 77, 29, 49, 63, 24, 32, 30, 0, 58, 67, 12, 18, 84]
last_save: 1039

Gen:2002
last_save: 1039
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:1.0
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(np.cos(x[index]),+690604.9764).all():
      return True
    else:
      return False
  def adf1(index):
    if np.equal(np.cos(x[index]),-512383.4780).all():
      return False
    else:
      return True
  def adf2(index):
    if np.greater(psqrt(x[index]),-272682.5020).all():
      return False
    else:
      return False
  def adf3(index):
    if np.less(np.sin(x[index]),+740216.0934).all():
      return True
    else:
      return True
  def adf4(index):
    if np.equal(np.sin(x[index]),-639091.9867).all():
      return False
    else:
      return False
  def adf7(index):
    if np.less(x[index],+789431.9445).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-888.917, adf1(1)*-888.834, adf2(2)*-303.988, adf3(3)*+952.383, adf4(4)*+122.208, adf7(7)*+313.439], [0, 0, 1, 0, 1], 510.851)
result=p(); 0.6666666666666666
IndLenGenome:286
IndGenome:[5, 35, 61, 6, 69, 41, 59, 99, 74, 56, 36, 31, 24, 98, 17, 73, 34, 55, 46, 32, 97, 87, 90, 63, 83, 69, 12, 76, 46, 31, 56, 82, 27, 13, 37, 55, 51, 4, 60, 56, 79, 66, 8, 82, 92, 20, 28, 53, 32, 63, 43, 84, 28, 1, 34, 83, 53, 71, 72, 13, 21, 66, 13, 82, 70, 60, 44, 95, 58, 35, 74, 45, 43, 74, 58, 84, 64, 19, 45, 75, 97, 68, 88, 50, 21, 7, 87, 45, 67, 70, 73, 70, 39, 39, 94, 12, 22, 98, 71, 7, 38, 99, 49, 48, 45, 63, 98, 12, 30, 79, 44, 23, 29, 67, 91, 13, 18, 39, 62, 54, 43, 55, 61, 4, 63, 50, 33, 50, 38, 83, 34, 19, 51, 63, 52, 33, 54, 22, 39, 16, 95, 36, 64, 58, 51, 41, 68, 79, 78, 48, 2, 48, 19, 56, 79, 54, 56, 27, 74, 90, 54, 27, 76, 72, 63, 88, 52, 51, 49, 91, 3, 22, 72, 7, 82, 17, 46, 50, 26, 17, 79, 70, 86, 83, 24, 69, 80, 84, 21, 8, 69, 39, 49, 64, 23, 30, 64, 48, 34, 29, 68, 39, 63, 12, 58, 30, 53, 29, 64, 100, 35, 77, 48, 87, 81, 4, 61, 29, 54, 44, 54, 47, 34, 74, 47, 44, 35, 26, 97, 84, 14, 75, 95, 66, 67, 45, 1, 13, 71, 100, 52, 61, 7, 59, 84, 61, 12, 43, 75, 88, 21, 27, 84, 27, 99, 94, 74, 83, 16, 79, 17, 7, 75, 44, 42, 71, 2, 64, 59, 55, 42, 79, 27, 59, 93, 78, 5, 78, 32, 91, 67, 1, 17, 34, 48, 68]
last_save: 10310

Gen:18
TrainFitness:0.8333333333333334
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(x[index],+916673.5648).all():
      return False
    else:
      return False
  def adf1(index):
    if np.equal(np.sin(x[index]),-394931.9186).all():
      return True
    else:
      return True
  def adf2(index):
    if np.greater(x[index],-687902.2562).all():
      return False
    else:
      return True
  def adf3(index):
    if np.equal(psqrt(x[index]),+559330.1505).all():
      if np.equal(x[index],+713439.0527).all():
        return False
      else:
        return True
      return True
    else:
      if np.greater(x[index],+011113.7200).all():
        if np.greater(x[index],-776046.9564).all():
          return True
        else:
          return True
        return False
      else:
        if np.equal(x[index],+393394.9334).all():
          if np.greater(psqrt(x[index]),-847424.1379).all():
            return True
          else:
            return False
          return False
        else:
          if np.less(x[index],-739036.8284).all():
            if np.less(sigmoid(x[index]),+442508.2817).all():
              if np.less(x[index],-842921.3011).all():
                if np.less(x[index],-368178.9446).all():
                  return True
                else:
                  return True
                return True
              else:
                if np.equal(psqrt(x[index]),-688409.1724).all():
                  return False
                else:
                  return True
                return False
              return False
            else:
              if np.greater(x[index],-344254.8234).all():
                if np.greater(x[index],-900783.5020).all():
                  return True
                else:
                  return True
                return False
              else:
                if np.greater(x[index],+075904.0985).all():
                  return False
                else:
                  return False
                return True
              return False
            return True
          else:
            if np.greater(x[index],+703533.3214).all():
              return False
            else:
              return False
            return False
          return False
        return True
      return False
  def adf4(index):
    if np.equal(x[index],-156254.9481).all():
      return True
    else:
      return False
  def adf7(index):
    if np.equal(x[index],-243828.4348).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+689.433, adf1(1)*-591.753, adf2(2)*+439.147, adf3(3)*-900.383, adf4(4)*+181.003, adf7(7)*+020.513], [0, 1, 1, 0, 1], 071.454)
result=p(); 0.8333333333333334
IndLenGenome:484
IndGenome:[76, 28, 41, 87, 27, 17, 23, 50, 18, 39, 11, 86, 56, 17, 3, 35, 46, 44, 68, 67, 99, 37, 71, 68, 64, 12, 83, 9, 23, 93, 19, 14, 69, 33, 41, 79, 71, 98, 96, 76, 8, 59, 15, 33, 47, 40, 93, 27, 6, 48, 7, 99, 20, 62, 2, 75, 96, 82, 97, 98, 27, 26, 90, 80, 92, 83, 22, 44, 28, 25, 5, 29, 13, 83, 60, 11, 15, 40, 95, 27, 86, 69, 40, 18, 89, 47, 11, 63, 24, 53, 49, 70, 65, 42, 37, 81, 86, 46, 94, 59, 57, 15, 56, 78, 3, 20, 31, 91, 91, 41, 63, 7, 12, 30, 70, 39, 33, 77, 61, 63, 93, 77, 37, 16, 60, 94, 26, 9, 95, 46, 64, 92, 22, 85, 94, 91, 74, 37, 76, 64, 12, 83, 9, 23, 93, 19, 14, 69, 33, 83, 94, 55, 57, 78, 29, 75, 37, 93, 58, 74, 47, 84, 82, 14, 51, 73, 17, 89, 94, 21, 55, 96, 35, 76, 87, 94, 37, 60, 97, 83, 29, 40, 93, 96, 58, 72, 48, 14, 98, 45, 73, 92, 27, 77, 10, 31, 54, 84, 42, 65, 90, 38, 72, 68, 91, 77, 60, 33, 22, 79, 26, 83, 73, 58, 14, 72, 69, 12, 31, 23, 40, 81, 71, 15, 34, 29, 71, 25, 17, 33, 76, 28, 91, 17, 98, 79, 34, 24, 86, 58, 26, 94, 61, 38, 66, 41, 37, 25, 11, 36, 18, 68, 54, 70, 9, 31, 47, 52, 34, 13, 90, 65, 17, 66, 43, 33, 71, 79, 79, 24, 33, 34, 74, 62, 15, 54, 58, 62, 13, 34, 45, 39, 61, 69, 49, 36, 89, 50, 60, 87, 8, 33, 85, 60, 22, 70, 52, 16, 57, 85, 21, 35, 3, 74, 34, 20, 77, 85, 89, 40, 14, 20, 29, 68, 5, 93, 73, 30, 65, 90, 53, 42, 15, 55, 32, 24, 57, 90, 93, 25, 93, 23, 93, 52, 11, 24, 15, 93, 95, 77, 80, 13, 66, 77, 71, 39, 46, 7, 18, 31, 35, 56, 32, 65, 24, 49, 94, 18, 11, 64, 23, 83, 55, 56, 13, 36, 15, 47, 12, 64, 83, 78, 12, 88, 64, 33, 34, 68, 44, 92, 14, 97, 56, 86, 31, 56, 58, 19, 84, 73, 43, 64, 13, 68, 45, 29, 1, 17, 75, 63, 14, 68, 10, 84, 73, 39, 61, 44, 57, 88, 1, 2, 59, 80, 100, 93, 28, 33, 75, 64, 14, 91, 48, 51, 10, 50, 63, 11, 14, 58, 20, 82, 50, 45, 21, 43, 88, 58, 75, 3, 26, 87, 86, 80, 47, 31, 14, 55, 34, 86, 87, 26, 85, 74, 74, 45, 41, 74, 78, 38, 78, 36, 29, 76, 38, 87, 34, 64, 57, 62, 3, 78, 92, 71, 34, 68, 16, 68, 33, 25, 56, 70, 22, 99]
last_save: 10310

Gen:2018
last_save: 10310
Exit:FalseFalseTrue