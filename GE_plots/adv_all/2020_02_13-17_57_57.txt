Dataset:Meander/Full.csv
FS:True
Seed:1238
Size:10

Gen:1
TrainFitness:0.6666666666666666
TestFitness:1.0
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.less(rlog(x[index]),+099852.0258).all():
      return False
    else:
      return False
  def adf1(index):
    if np.less(x[index],-007948.7290).all():
      return False
    else:
      return False
  def adf2(index):
    if np.equal(np.sin(x[index]),-463827.4604).all():
      return True
    else:
      return True
  def adf3(index):
    if np.less(np.tanh(x[index]),-059896.2501).all():
      return False
    else:
      return True
  def adf4(index):
    if np.equal(sigmoid(x[index]),+858616.8442).all():
      return True
    else:
      return False
  def adf7(index):
    if np.less(sigmoid(x[index]),-006701.1784).all():
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+517.702, adf1(1)*-327.074, adf2(2)*+239.594, adf3(3)*-105.677, adf4(4)*+137.955, adf7(7)*-034.257], [0, 1, 0, 1, 0], 281.802)
result=p(); 0.6666666666666666
IndLenGenome:286
IndGenome:[42, 77, 91, 52, 1, 63, 14, 9, 72, 72, 90, 89, 51, 91, 38, 55, 15, 88, 31, 49, 34, 54, 43, 16, 40, 55, 49, 14, 10, 57, 79, 81, 50, 45, 49, 44, 37, 24, 65, 68, 33, 28, 91, 43, 48, 15, 58, 72, 81, 82, 92, 88, 86, 64, 72, 27, 37, 27, 39, 97, 89, 40, 65, 7, 98, 35, 51, 67, 10, 57, 72, 28, 52, 6, 93, 49, 45, 85, 9, 30, 87, 37, 13, 72, 28, 65, 32, 29, 14, 72, 54, 57, 63, 82, 67, 9, 66, 81, 70, 24, 29, 35, 86, 32, 50, 48, 45, 76, 35, 77, 78, 95, 35, 49, 84, 41, 69, 16, 35, 14, 87, 74, 60, 28, 18, 98, 23, 19, 94, 15, 13, 95, 20, 98, 47, 52, 28, 96, 12, 13, 92, 81, 83, 16, 46, 42, 38, 8, 64, 26, 64, 35, 78, 94, 70, 92, 40, 89, 93, 91, 92, 19, 10, 58, 70, 65, 60, 84, 64, 41, 77, 56, 22, 63, 77, 88, 69, 74, 99, 40, 87, 59, 50, 20, 84, 48, 11, 20, 67, 51, 96, 22, 2, 76, 64, 28, 33, 47, 86, 21, 77, 32, 3, 35, 0, 12, 89, 10, 33, 91, 47, 33, 70, 75, 71, 50, 32, 83, 8, 13, 2, 40, 54, 75, 3, 17, 98, 100, 85, 100, 90, 64, 47, 26, 27, 51, 1, 99, 79, 8, 9, 43, 25, 86, 71, 17, 71, 92, 32, 20, 26, 89, 90, 29, 50, 92, 42, 62, 95, 13, 93, 61, 57, 28, 69, 93, 25, 89, 13, 40, 30, 18, 31, 66, 40, 51, 34, 19, 50, 56, 4, 71, 18, 71, 69, 69]
last_save: 1045

Gen:58
TrainFitness:0.8333333333333334
TestFitness:1.0
MaxGenLen:515
Individual: def p():
  def adf0(index):
    if np.equal(x[index],-657665.3016).all():
      return True
    else:
      return True
  def adf1(index):
    if np.greater(psqrt(x[index]),-371492.8474).all():
      return False
    else:
      return True
  def adf2(index):
    if np.equal(x[index],+930460.8952).all():
      return True
    else:
      return False
  def adf3(index):
    if np.less(x[index],+033253.9237).all():
      return True
    else:
      return False
  def adf4(index):
    if np.greater(np.cos(x[index]),+997981.7714).all():
      return True
    else:
      return False
  def adf7(index):
    if np.less(x[index],-118016.6352).all():
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+543.334, adf1(1)*-726.453, adf2(2)*+081.166, adf3(3)*+776.893, adf4(4)*+544.929, adf7(7)*+649.118], [1, 0, 1, 0, 0], 896.659)
result=p(); 0.8333333333333334
IndLenGenome:405
IndGenome:[40, 64, 13, 57, 65, 53, 34, 19, 91, 56, 35, 57, 16, 56, 5, 53, 40, 41, 16, 78, 16, 56, 93, 15, 56, 83, 65, 47, 72, 73, 67, 21, 74, 29, 22, 98, 14, 77, 94, 15, 52, 90, 85, 59, 39, 49, 30, 82, 19, 73, 90, 74, 66, 30, 38, 59, 25, 12, 46, 83, 36, 39, 52, 99, 59, 66, 82, 30, 13, 33, 52, 85, 73, 19, 82, 13, 27, 24, 99, 79, 69, 99, 18, 31, 31, 94, 68, 79, 89, 27, 39, 8, 91, 57, 7, 21, 24, 78, 71, 99, 45, 25, 95, 13, 67, 91, 81, 91, 78, 20, 81, 76, 46, 23, 85, 12, 24, 1, 38, 51, 91, 64, 37, 15, 74, 83, 73, 53, 14, 60, 33, 60, 87, 42, 26, 44, 35, 33, 72, 88, 32, 100, 88, 21, 21, 16, 96, 65, 68, 21, 97, 37, 6, 88, 39, 73, 37, 50, 21, 55, 14, 74, 19, 32, 19, 34, 2, 42, 36, 14, 49, 51, 71, 58, 33, 95, 34, 57, 6, 62, 87, 58, 19, 76, 16, 65, 29, 88, 69, 70, 51, 85, 54, 70, 76, 78, 43, 81, 58, 38, 96, 29, 1, 73, 44, 37, 48, 86, 91, 12, 49, 93, 100, 88, 21, 21, 82, 96, 65, 68, 21, 97, 11, 6, 91, 39, 73, 37, 52, 8, 55, 14, 74, 19, 32, 19, 34, 2, 42, 91, 83, 1, 79, 21, 64, 15, 71, 51, 45, 25, 48, 12, 62, 45, 19, 63, 66, 25, 59, 19, 67, 65, 90, 24, 97, 47, 66, 40, 52, 85, 17, 40, 15, 35, 49, 23, 39, 54, 27, 93, 79, 36, 50, 86, 19, 84, 39, 52, 99, 59, 66, 82, 30, 48, 33, 52, 85, 73, 19, 57, 42, 99, 81, 91, 41, 58, 78, 40, 53, 33, 15, 89, 72, 45, 14, 66, 81, 29, 92, 84, 11, 28, 9, 54, 80, 88, 68, 65, 46, 30, 19, 38, 66, 40, 59, 82, 13, 6, 55, 67, 100, 74, 6, 10, 41, 58, 77, 58, 21, 71, 27, 14, 43, 49, 29, 84, 45, 25, 20, 36, 61, 96, 52, 87, 33, 49, 74, 81, 28, 12, 24, 19, 28, 24, 22, 16, 11, 13, 13, 1, 37, 85, 21, 56, 56, 42, 56, 50, 64, 40, 13, 12, 94, 72, 17, 1, 90, 10, 99, 42, 13, 40, 41, 81, 9]
last_save: 1045

Gen:2058
last_save: 1045
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.6666666666666666
TestFitness:0.8333333333333334
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(psqrt(x[index]),-874237.9156).all():
      return False
    else:
      return False
  def adf1(index):
    if np.equal(x[index],-060656.2400).all():
      return False
    else:
      return True
  def adf2(index):
    if np.greater(np.sin(x[index]),-471789.0873).all():
      return False
    else:
      return False
  def adf3(index):
    if np.greater(np.cos(x[index]),-049117.9358).all():
      return True
    else:
      return False
  def adf4(index):
    if np.less(x[index],-249745.2950).all():
      return True
    else:
      return False
  def adf7(index):
    if np.greater(sigmoid(x[index]),+443697.1242).all():
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+322.437, adf1(1)*-146.365, adf2(2)*-140.792, adf3(3)*+045.352, adf4(4)*-313.152, adf7(7)*-762.787], [1, 1, 1, 1, 0], 225.707)
result=p(); 0.6666666666666666
IndLenGenome:285
IndGenome:[23, 1, 78, 42, 34, 83, 1, 33, 79, 97, 3, 52, 79, 97, 73, 22, 43, 82, 58, 66, 41, 35, 9, 84, 95, 52, 68, 64, 65, 21, 12, 60, 57, 65, 12, 51, 12, 25, 17, 27, 62, 23, 8, 74, 53, 9, 63, 71, 91, 14, 23, 85, 86, 27, 76, 27, 7, 56, 21, 39, 17, 26, 80, 90, 47, 37, 34, 64, 61, 26, 44, 4, 44, 59, 84, 67, 91, 72, 63, 31, 59, 49, 21, 31, 91, 23, 97, 53, 67, 23, 64, 64, 30, 64, 66, 45, 9, 32, 35, 12, 6, 26, 13, 82, 55, 39, 15, 92, 90, 84, 91, 39, 46, 33, 13, 52, 44, 88, 38, 24, 52, 12, 58, 45, 14, 76, 80, 15, 64, 57, 27, 57, 18, 22, 62, 42, 11, 25, 22, 31, 76, 62, 73, 47, 70, 16, 15, 23, 54, 70, 35, 71, 55, 69, 47, 59, 64, 45, 47, 92, 53, 47, 18, 75, 70, 7, 59, 51, 21, 20, 67, 10, 22, 5, 91, 80, 58, 59, 24, 27, 56, 63, 91, 48, 17, 83, 20, 62, 27, 55, 49, 38, 8, 39, 64, 74, 100, 57, 88, 18, 2, 78, 47, 42, 93, 43, 23, 58, 95, 42, 72, 96, 40, 11, 23, 28, 5, 28, 45, 6, 60, 10, 7, 49, 74, 26, 63, 14, 38, 100, 63, 23, 28, 23, 50, 88, 1, 38, 24, 87, 19, 23, 1, 61, 21, 100, 6, 87, 81, 1, 61, 62, 52, 59, 58, 92, 69, 42, 70, 62, 80, 49, 18, 12, 9, 84, 58, 12, 73, 60, 92, 11, 20, 36, 71, 30, 13, 69, 95, 43, 18, 40, 14, 2, 54]
last_save: 1046

Gen:13
TrainFitness:0.8333333333333334
TestFitness:0.6666666666666666
MaxGenLen:500
Individual: def p():
  def adf0(index):
    if np.greater(psqrt(x[index]),-007535.6201).all():
      return True
    else:
      return False
  def adf1(index):
    if np.equal(psqrt(x[index]),-719388.8770).all():
      return False
    else:
      return False
  def adf2(index):
    if np.greater(np.sin(x[index]),-329760.5133).all():
      return False
    else:
      return True
  def adf3(index):
    if np.equal(x[index],+599015.1976).all():
      return True
    else:
      return True
  def adf4(index):
    if np.greater(x[index],-168981.3897).all():
      if np.less(np.tanh(x[index]),+321377.9019).all():
        return False
      else:
        return True
      return True
    else:
      if np.greater(x[index],-121361.5221).all():
        return False
      else:
        return True
      return False
  def adf7(index):
    if np.less(psqrt(x[index]),+885603.8527).all():
      if np.greater(x[index],+016964.9054).all():
        return True
      else:
        return False
      return True
    else:
      if np.equal(x[index],+852732.1857).all():
        if np.less(x[index],-973404.4437).all():
          return True
        else:
          return True
        return True
      else:
        if np.equal(x[index],-064640.3746).all():
          return True
        else:
          return True
        return False
      return False
  return multiple_operation([adf0(0)*+889.794, adf1(1)*+532.651, adf2(2)*+173.062, adf3(3)*+570.624, adf4(4)*+607.768, adf7(7)*-852.935], [1, 1, 1, 1, 1], 796.011)
result=p(); 0.8333333333333334
IndLenGenome:489
IndGenome:[1, 94, 28, 95, 21, 52, 59, 92, 97, 62, 10, 80, 47, 75, 53, 55, 86, 62, 80, 61, 2, 35, 59, 37, 80, 36, 71, 27, 5, 3, 97, 41, 29, 23, 68, 48, 48, 47, 77, 60, 41, 69, 91, 31, 12, 84, 54, 73, 47, 92, 73, 2, 39, 87, 86, 70, 75, 51, 53, 33, 79, 92, 82, 29, 11, 89, 43, 52, 57, 5, 49, 29, 20, 81, 85, 71, 69, 87, 96, 14, 18, 50, 14, 97, 60, 85, 2, 11, 7, 71, 26, 88, 29, 58, 61, 93, 88, 39, 7, 45, 55, 82, 74, 79, 88, 4, 63, 12, 61, 33, 57, 47, 99, 40, 41, 39, 17, 78, 94, 49, 42, 71, 64, 65, 47, 31, 92, 11, 23, 76, 81, 55, 12, 92, 31, 45, 32, 73, 94, 12, 89, 67, 56, 53, 51, 94, 61, 18, 68, 55, 26, 90, 33, 48, 75, 52, 27, 63, 42, 91, 74, 94, 75, 50, 11, 46, 19, 26, 74, 99, 20, 15, 54, 24, 53, 74, 44, 18, 68, 55, 26, 90, 33, 48, 75, 52, 27, 63, 42, 91, 68, 55, 37, 85, 28, 71, 40, 101, 11, 99, 27, 3, 34, 90, 64, 64, 84, 3, 37, 92, 14, 82, 77, 35, 35, 38, 25, 39, 20, 86, 34, 36, 44, 20, 3, 87, 54, 36, 20, 84, 57, 39, 86, 10, 66, 20, 3, 88, 98, 39, 97, 9, 74, 85, 20, 38, 85, 13, 12, 86, 65, 41, 88, 12, 54, 11, 67, 23, 30, 46, 32, 83, 72, 7, 85, 7, 80, 76, 22, 74, 97, 34, 61, 46, 30, 27, 47, 86, 68, 29, 99, 57, 48, 45, 72, 49, 3, 55, 16, 67, 17, 41, 69, 69, 97, 27, 39, 16, 90, 81, 31, 95, 79, 40, 71, 52, 76, 89, 29, 87, 14, 92, 43, 49, 61, 96, 17, 29, 67, 95, 34, 82, 33, 66, 46, 66, 71, 41, 23, 83, 90, 99, 68, 19, 19, 30, 46, 66, 37, 8, 20, 72, 19, 17, 78, 29, 89, 72, 82, 47, 69, 60, 8, 71, 81, 56, 12, 71, 17, 68, 84, 53, 74, 44, 87, 63, 87, 70, 81, 34, 44, 67, 31, 78, 43, 69, 22, 81, 88, 99, 96, 79, 78, 81, 87, 31, 62, 20, 23, 19, 80, 52, 84, 83, 38, 5, 97, 70, 41, 30, 50, 23, 69, 63, 80, 68, 83, 97, 29, 8, 98, 76, 59, 87, 52, 92, 51, 98, 23, 0, 60, 62, 83, 17, 87, 35, 46, 46, 38, 30, 48, 54, 66, 17, 92, 63, 83, 9, 87, 19, 56, 46, 98, 19, 37, 81, 69, 16, 12, 45, 37, 23, 16, 7, 70, 16, 86, 87, 45, 61, 31, 95, 75, 21, 16, 68, 6, 10, 1, 77, 53, 35, 89, 75, 8, 25, 57, 30, 83, 32, 92, 43, 15, 36, 86, 9, 61, 100, 24]
last_save: 1046