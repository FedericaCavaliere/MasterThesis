Dataset:Spiral/new_Full.csv
FS:False
Seed:1235
Size:10

Gen:1
TrainFitness:0.806060606060606
TestFitness:0.7894736842105263
MaxGenLen:400
Individual: def p():
  def adf0(index):
    if np.greater(x[index],30059.36537):
      return True
    else:
      return True
  def adf1(index):
    if np.less(x[index],11992.81915):
      return False
    else:
      return True
  def adf2(index):
    if np.greater(x[index],89724.65111):
      return True
    else:
      return False
  def adf3(index):
    if np.less(x[index],32843.61163):
      return False
    else:
      return True
  def adf4(index):
    if np.equal(x[index],17734.96766):
      return True
    else:
      return True
  def adf5(index):
    if np.less(x[index],58454.39175):
      return True
    else:
      return True
  def adf6(index):
    if np.greater(x[index],68484.28578):
      return True
    else:
      return True
  def adf7(index):
    if np.equal(x[index],27717.13920):
      return False
    else:
      return True
  def adf8(index):
    if np.equal(x[index],71643.87236):
      return True
    else:
      return True
  return multiple_operation([adf0(0)*-92.66, adf1(1)*-94.45, adf2(2)*-33.10, adf3(3)*+60.27, adf4(4)*+98.42, adf5(5)*+54.42, adf6(6)*+70.00, adf7(7)*+49.66, adf8(8)*-27.67], 52.68)
result=p(); 0.806060606060606
IndLenGenome:339
IndGenome:[21, 36, 73, 91, 98, 29, 27, 75, 46, 88, 73, 41, 37, 33, 95, 95, 60, 65, 96, 76, 18, 13, 86, 15, 89, 95, 55, 38, 85, 45, 15, 84, 36, 70, 84, 60, 24, 42, 92, 57, 16, 70, 95, 16, 15, 33, 43, 39, 67, 31, 69, 10, 34, 83, 88, 94, 10, 82, 95, 74, 38, 86, 80, 11, 40, 66, 40, 71, 87, 67, 92, 89, 58, 56, 55, 65, 30, 10, 70, 32, 28, 75, 47, 30, 62, 72, 77, 66, 3, 96, 17, 65, 16, 20, 12, 80, 88, 24, 70, 89, 26, 30, 3, 68, 39, 15, 99, 83, 42, 79, 26, 98, 98, 9, 46, 8, 81, 25, 24, 66, 38, 98, 11, 93, 27, 39, 99, 91, 84, 45, 22, 58, 29, 36, 99, 77, 14, 25, 17, 80, 55, 91, 58, 15, 41, 45, 79, 88, 64, 33, 94, 16, 52, 24, 67, 45, 71, 74, 86, 41, 99, 66, 63, 32, 27, 83, 36, 59, 66, 53, 60, 52, 30, 95, 41, 23, 98, 38, 98, 86, 83, 28, 76, 26, 81, 61, 67, 45, 72, 95, 5, 5, 12, 24, 38, 18, 91, 72, 97, 19, 86, 67, 61, 31, 97, 54, 14, 57, 67, 82, 29, 1, 74, 63, 87, 42, 31, 17, 61, 83, 43, 91, 30, 90, 61, 53, 63, 11, 46, 6, 32, 47, 44, 67, 18, 32, 53, 81, 98, 64, 49, 76, 7, 39, 15, 12, 28, 91, 66, 41, 91, 3, 51, 68, 92, 7, 10, 1, 64, 52, 49, 46, 100, 42, 40, 94, 84, 100, 66, 37, 45, 47, 0, 36, 93, 33, 87, 14, 67, 43, 70, 55, 20, 24, 5, 87, 71, 48, 14, 100, 57, 47, 23, 45, 17, 29, 12, 55, 45, 9, 34, 58, 65, 30, 30, 6, 28, 93, 95, 22, 56, 94, 81, 48, 0, 67, 56, 70, 99, 34, 96, 49, 43, 26, 10, 51, 56, 39, 8, 34, 8, 11, 14, 61, 66, 99, 48, 75, 32]
last_save: 101

Gen:251
last_save: 101
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.806060606060606
TestFitness:0.7894736842105263
MaxGenLen:400
Individual: def p():
  def adf0(index):
    if np.equal(x[index],16375.72155):
      return True
    else:
      return True
  def adf1(index):
    if np.less(x[index],18718.33801):
      return True
    else:
      return True
  def adf2(index):
    if np.equal(x[index],28859.72969):
      return False
    else:
      return True
  def adf3(index):
    if np.less(x[index],46274.11976):
      return True
    else:
      return True
  def adf4(index):
    if np.less(x[index],27943.51008):
      return False
    else:
      return False
  def adf5(index):
    if np.equal(x[index],11967.66991):
      return True
    else:
      return False
  def adf6(index):
    if np.less(x[index],60428.10695):
      return True
    else:
      return True
  def adf7(index):
    if np.equal(x[index],40335.82829):
      return True
    else:
      return True
  def adf8(index):
    if np.less(x[index],47902.95782):
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+47.06, adf1(1)*+61.26, adf2(2)*+95.56, adf3(3)*+74.30, adf4(4)*+15.32, adf5(5)*+98.04, adf6(6)*+65.41, adf7(7)*-82.57, adf8(8)*+57.90], 18.01)
result=p(); 0.806060606060606
IndLenGenome:339
IndGenome:[48, 60, 94, 93, 25, 62, 72, 45, 50, 97, 55, 68, 82, 80, 18, 55, 9, 90, 3, 55, 60, 5, 47, 54, 19, 98, 36, 16, 57, 29, 40, 90, 36, 40, 79, 33, 54, 24, 60, 57, 58, 51, 22, 92, 98, 25, 50, 7, 60, 85, 15, 27, 20, 17, 25, 59, 62, 67, 98, 2, 38, 82, 38, 25, 51, 67, 90, 34, 31, 92, 31, 23, 16, 6, 31, 96, 4, 4, 30, 91, 24, 65, 94, 30, 39, 18, 80, 98, 40, 68, 20, 67, 42, 78, 71, 61, 16, 53, 22, 8, 21, 74, 79, 75, 97, 76, 4, 57, 25, 4, 25, 66, 33, 90, 65, 47, 22, 41, 75, 91, 62, 24, 77, 69, 49, 28, 25, 49, 72, 71, 26, 73, 45, 92, 41, 64, 81, 30, 53, 86, 6, 40, 70, 26, 41, 29, 85, 20, 96, 11, 28, 56, 79, 29, 40, 35, 52, 64, 78, 33, 41, 45, 47, 41, 52, 27, 78, 41, 84, 81, 30, 52, 97, 69, 51, 53, 53, 89, 55, 94, 38, 10, 32, 13, 40, 67, 32, 89, 90, 98, 94, 70, 99, 72, 29, 37, 86, 31, 66, 47, 24, 27, 41, 41, 13, 79, 66, 68, 79, 86, 79, 80, 45, 19, 71, 42, 15, 68, 22, 39, 36, 12, 89, 39, 88, 57, 35, 61, 44, 24, 47, 10, 35, 43, 93, 1, 79, 95, 78, 95, 47, 74, 27, 100, 90, 77, 92, 89, 16, 55, 17, 9, 93, 52, 89, 57, 42, 69, 83, 4, 7, 72, 1, 7, 92, 22, 21, 32, 78, 89, 15, 1, 16, 97, 7, 46, 43, 32, 78, 85, 24, 93, 41, 50, 49, 25, 30, 83, 7, 57, 65, 71, 55, 55, 100, 47, 70, 60, 100, 27, 48, 53, 47, 10, 70, 27, 21, 96, 85, 5, 21, 91, 58, 92, 68, 14, 20, 77, 38, 6, 72, 92, 29, 72, 4, 90, 89, 52, 37, 43, 83, 41, 13, 96, 100, 36, 100, 62, 100]
last_save: 101

Gen:251
last_save: 101
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.8036253776435045
TestFitness:0.8108108108108109
MaxGenLen:400
Individual: def p():
  def adf0(index):
    if np.greater(x[index],71368.65658):
      return False
    else:
      return True
  def adf1(index):
    if np.equal(x[index],85328.82237):
      return False
    else:
      return True
  def adf2(index):
    if np.less(x[index],68436.53957):
      return False
    else:
      return False
  def adf3(index):
    if np.greater(x[index],14429.96508):
      return True
    else:
      return True
  def adf4(index):
    if np.less(x[index],59013.22704):
      return False
    else:
      return False
  def adf5(index):
    if np.equal(x[index],49906.02146):
      return False
    else:
      return True
  def adf6(index):
    if np.equal(x[index],87759.27922):
      return True
    else:
      return False
  def adf7(index):
    if np.less(x[index],55998.88282):
      return False
    else:
      return False
  def adf8(index):
    if np.less(x[index],07103.47468):
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-13.58, adf1(1)*+39.50, adf2(2)*+62.29, adf3(3)*+47.80, adf4(4)*-72.78, adf5(5)*+72.93, adf6(6)*+13.97, adf7(7)*+34.19, adf8(8)*-94.72], 20.95)
result=p(); 0.8036253776435045
IndLenGenome:339
IndGenome:[9, 66, 52, 59, 81, 15, 45, 4, 17, 55, 50, 40, 76, 20, 51, 88, 65, 6, 47, 80, 79, 69, 77, 48, 15, 85, 91, 62, 27, 67, 70, 56, 25, 15, 96, 56, 79, 89, 20, 22, 20, 76, 54, 93, 1, 34, 17, 19, 29, 90, 12, 43, 94, 40, 92, 73, 33, 38, 17, 86, 82, 81, 79, 73, 29, 51, 7, 28, 40, 64, 98, 98, 59, 86, 83, 86, 61, 25, 63, 4, 67, 27, 29, 24, 31, 33, 86, 90, 21, 98, 45, 32, 20, 41, 32, 20, 22, 57, 67, 91, 19, 42, 18, 32, 33, 34, 11, 65, 69, 4, 68, 86, 69, 73, 50, 46, 53, 85, 71, 90, 3, 55, 90, 85, 96, 82, 10, 18, 55, 24, 27, 60, 70, 23, 55, 87, 99, 44, 43, 61, 96, 5, 38, 14, 99, 54, 97, 10, 80, 86, 95, 82, 95, 38, 20, 93, 32, 58, 43, 59, 50, 82, 95, 91, 25, 88, 27, 45, 62, 74, 88, 38, 42, 98, 21, 46, 83, 68, 92, 87, 65, 41, 36, 34, 66, 50, 39, 51, 80, 43, 50, 52, 29, 99, 84, 15, 37, 54, 52, 72, 52, 72, 29, 3, 71, 35, 26, 59, 65, 56, 58, 97, 11, 50, 52, 79, 90, 36, 78, 14, 69, 35, 72, 16, 83, 77, 72, 65, 60, 79, 7, 76, 2, 40, 31, 92, 65, 47, 80, 67, 1, 69, 3, 64, 81, 59, 42, 1, 55, 21, 72, 85, 86, 77, 10, 31, 91, 35, 68, 89, 64, 60, 17, 46, 4, 58, 96, 73, 99, 69, 33, 41, 85, 59, 59, 86, 20, 13, 56, 21, 0, 78, 3, 57, 45, 95, 38, 34, 80, 85, 85, 71, 91, 55, 88, 28, 50, 78, 95, 62, 82, 27, 74, 71, 75, 79, 17, 12, 97, 40, 79, 1, 86, 36, 28, 90, 41, 15, 100, 5, 59, 88, 83, 57, 91, 61, 37, 20, 28, 18, 72, 22, 85, 16, 6, 60, 50, 62, 25]
last_save: 101

Gen:251
last_save: 101
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.8036253776435045
TestFitness:0.8108108108108109
MaxGenLen:400
Individual: def p():
  def adf0(index):
    if np.equal(x[index],87002.71004):
      return False
    else:
      return True
  def adf1(index):
    if np.less(x[index],30416.87594):
      return True
    else:
      return False
  def adf2(index):
    if np.equal(x[index],46380.46177):
      return False
    else:
      return True
  def adf3(index):
    if np.greater(x[index],42422.20164):
      return False
    else:
      return False
  def adf4(index):
    if np.greater(x[index],66281.53178):
      return True
    else:
      return True
  def adf5(index):
    if np.greater(x[index],42085.10863):
      return False
    else:
      return False
  def adf6(index):
    if np.equal(x[index],75978.14518):
      return True
    else:
      return False
  def adf7(index):
    if np.greater(x[index],89894.67030):
      return False
    else:
      return False
  def adf8(index):
    if np.less(x[index],14756.49275):
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+14.04, adf1(1)*+33.39, adf2(2)*-03.31, adf3(3)*+31.51, adf4(4)*+95.28, adf5(5)*-68.27, adf6(6)*+06.84, adf7(7)*+33.90, adf8(8)*-90.62], 36.31)
result=p(); 0.8036253776435045
IndLenGenome:339
IndGenome:[26, 39, 40, 55, 86, 80, 95, 95, 65, 10, 5, 70, 63, 1, 95, 75, 74, 93, 29, 54, 48, 25, 40, 14, 65, 77, 75, 41, 48, 85, 10, 30, 62, 62, 13, 58, 49, 80, 85, 15, 85, 75, 79, 63, 16, 28, 12, 93, 45, 67, 10, 70, 35, 20, 72, 45, 43, 39, 29, 44, 19, 10, 21, 75, 89, 48, 40, 82, 40, 70, 13, 79, 95, 97, 66, 52, 92, 75, 70, 88, 81, 67, 54, 53, 84, 62, 14, 44, 51, 90, 20, 4, 15, 24, 56, 40, 64, 98, 52, 17, 62, 27, 84, 96, 18, 76, 95, 59, 46, 73, 86, 94, 57, 34, 63, 36, 83, 54, 86, 78, 11, 25, 55, 50, 63, 85, 36, 17, 30, 59, 77, 60, 99, 43, 79, 68, 49, 89, 95, 49, 74, 46, 18, 28, 41, 90, 99, 92, 80, 24, 22, 54, 34, 51, 51, 68, 56, 88, 52, 76, 62, 86, 77, 28, 80, 77, 78, 17, 15, 52, 54, 57, 28, 86, 61, 46, 97, 36, 88, 28, 36, 99, 31, 44, 81, 43, 81, 94, 53, 45, 53, 84, 81, 61, 47, 85, 90, 42, 17, 74, 71, 67, 23, 48, 78, 63, 88, 10, 90, 70, 49, 99, 25, 24, 53, 40, 74, 67, 43, 41, 80, 23, 31, 83, 12, 90, 98, 94, 76, 95, 47, 59, 26, 50, 32, 47, 37, 60, 29, 10, 40, 36, 33, 78, 92, 14, 78, 21, 90, 38, 98, 72, 22, 74, 15, 33, 73, 44, 66, 23, 82, 2, 35, 11, 22, 44, 78, 11, 26, 99, 41, 97, 79, 84, 35, 4, 2, 50, 99, 62, 65, 100, 19, 56, 2, 13, 43, 59, 72, 50, 10, 41, 38, 5, 82, 54, 77, 100, 21, 32, 30, 63, 50, 85, 31, 51, 12, 92, 6, 98, 8, 32, 14, 48, 27, 98, 53, 46, 10, 78, 38, 69, 63, 23, 6, 15, 33, 99, 44, 70, 88, 7, 40, 36, 19, 45, 52, 37, 25]
last_save: 101

Gen:251
last_save: 101
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.8036253776435045
TestFitness:0.8108108108108109
MaxGenLen:400
Individual: def p():
  def adf0(index):
    if np.less(x[index],77903.30809):
      return True
    else:
      return True
  def adf1(index):
    if np.equal(x[index],45223.78442):
      return False
    else:
      return False
  def adf2(index):
    if np.equal(x[index],38030.26220):
      return False
    else:
      return False
  def adf3(index):
    if np.greater(x[index],52585.78884):
      return False
    else:
      return True
  def adf4(index):
    if np.equal(x[index],12331.89166):
      return False
    else:
      return False
  def adf5(index):
    if np.greater(x[index],77195.09147):
      return False
    else:
      return False
  def adf6(index):
    if np.less(x[index],71738.94272):
      return False
    else:
      return True
  def adf7(index):
    if np.less(x[index],85486.85715):
      return True
    else:
      return True
  def adf8(index):
    if np.equal(x[index],41968.98195):
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+95.95, adf1(1)*+46.25, adf2(2)*-27.02, adf3(3)*-50.61, adf4(4)*-64.90, adf5(5)*+57.15, adf6(6)*+98.05, adf7(7)*+43.27, adf8(8)*-90.38], 83.63)
result=p(); 0.8036253776435045
IndLenGenome:339
IndGenome:[47, 14, 30, 87, 56, 60, 92, 50, 91, 50, 75, 80, 80, 35, 3, 35, 71, 22, 98, 96, 75, 42, 23, 7, 7, 80, 10, 94, 79, 45, 35, 76, 34, 36, 37, 35, 69, 68, 27, 11, 76, 94, 98, 91, 17, 73, 65, 98, 46, 13, 27, 56, 38, 76, 70, 4, 11, 25, 80, 31, 86, 50, 39, 50, 28, 51, 38, 56, 90, 87, 94, 29, 35, 58, 62, 70, 27, 53, 44, 65, 94, 97, 31, 45, 26, 15, 24, 30, 33, 78, 39, 41, 44, 64, 77, 46, 63, 83, 52, 52, 92, 81, 38, 10, 61, 68, 16, 58, 95, 81, 93, 12, 56, 19, 71, 57, 65, 84, 25, 68, 57, 48, 29, 48, 48, 58, 29, 1, 22, 65, 36, 35, 98, 42, 92, 25, 60, 54, 64, 59, 32, 24, 35, 64, 13, 37, 49, 51, 2, 50, 39, 87, 24, 63, 13, 65, 70, 85, 98, 65, 32, 83, 23, 40, 52, 88, 78, 84, 93, 52, 77, 95, 81, 79, 11, 64, 45, 82, 40, 52, 87, 2, 39, 65, 92, 85, 44, 29, 80, 59, 68, 15, 97, 65, 30, 21, 26, 29, 98, 49, 20, 57, 97, 21, 27, 73, 64, 44, 23, 66, 42, 22, 82, 27, 29, 16, 37, 71, 75, 64, 79, 99, 61, 48, 28, 59, 53, 50, 45, 80, 86, 93, 0, 28, 28, 77, 26, 100, 42, 70, 66, 89, 100, 89, 88, 46, 88, 54, 34, 79, 22, 25, 51, 38, 1, 84, 47, 83, 60, 23, 8, 25, 42, 27, 94, 69, 56, 23, 11, 37, 35, 3, 32, 7, 20, 27, 11, 100, 28, 6, 41, 32, 63, 80, 60, 98, 13, 18, 9, 43, 88, 84, 83, 41, 32, 33, 66, 96, 94, 100, 79, 60, 77, 2, 37, 68, 22, 86, 13, 79, 52, 38, 18, 58, 69, 62, 41, 47, 6, 28, 100, 20, 30, 54, 33, 61, 93, 69, 7, 93, 64, 81, 62, 21, 59, 5, 9, 2, 51]
last_save: 101

Gen:251
last_save: 101
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.8036253776435045
TestFitness:0.8108108108108109
MaxGenLen:400
Individual: def p():
  def adf0(index):
    if np.less(x[index],74756.54935):
      return True
    else:
      return False
  def adf1(index):
    if np.greater(x[index],40128.77071):
      return False
    else:
      return True
  def adf2(index):
    if np.less(x[index],52492.80379):
      return True
    else:
      return True
  def adf3(index):
    if np.equal(x[index],89296.51602):
      return True
    else:
      return False
  def adf4(index):
    if np.less(x[index],75537.34349):
      return True
    else:
      return True
  def adf5(index):
    if np.equal(x[index],92673.86741):
      return True
    else:
      return True
  def adf6(index):
    if np.equal(x[index],41563.12108):
      return False
    else:
      return True
  def adf7(index):
    if np.greater(x[index],76827.63781):
      return True
    else:
      return False
  def adf8(index):
    if np.equal(x[index],76780.03445):
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+14.56, adf1(1)*+82.76, adf2(2)*+36.57, adf3(3)*+79.59, adf4(4)*+58.96, adf5(5)*+26.35, adf6(6)*-88.89, adf7(7)*+36.00, adf8(8)*+09.03], 78.53)
result=p(); 0.8036253776435045
IndLenGenome:339
IndGenome:[73, 78, 82, 90, 29, 58, 46, 10, 9, 90, 65, 29, 35, 18, 65, 50, 52, 8, 50, 22, 77, 73, 27, 53, 35, 63, 83, 7, 21, 25, 43, 88, 30, 98, 44, 45, 25, 22, 60, 94, 19, 40, 43, 95, 72, 26, 99, 54, 45, 98, 73, 44, 18, 49, 89, 59, 44, 42, 84, 71, 47, 14, 49, 82, 89, 17, 79, 10, 71, 45, 58, 91, 38, 26, 61, 62, 14, 85, 21, 24, 93, 70, 97, 97, 98, 47, 51, 91, 55, 23, 56, 19, 3, 19, 17, 87, 78, 97, 85, 10, 36, 78, 92, 95, 34, 46, 44, 67, 96, 41, 24, 86, 83, 38, 21, 36, 62, 66, 51, 38, 44, 23, 81, 78, 83, 46, 70, 46, 67, 90, 15, 26, 24, 62, 42, 36, 67, 18, 92, 80, 67, 90, 98, 64, 72, 74, 67, 77, 50, 50, 47, 14, 42, 46, 27, 87, 60, 24, 56, 62, 75, 93, 93, 87, 16, 65, 77, 37, 93, 93, 13, 62, 89, 5, 99, 99, 71, 70, 19, 52, 75, 35, 39, 45, 95, 98, 85, 63, 11, 10, 93, 94, 92, 15, 82, 40, 23, 67, 58, 70, 68, 69, 79, 30, 71, 38, 38, 66, 80, 96, 53, 18, 96, 97, 86, 64, 15, 54, 73, 26, 17, 59, 47, 59, 71, 35, 27, 6, 15, 0, 8, 79, 65, 54, 82, 25, 87, 19, 66, 20, 88, 65, 47, 33, 45, 54, 25, 46, 30, 9, 38, 72, 60, 34, 56, 8, 46, 66, 69, 13, 84, 69, 45, 43, 26, 5, 81, 49, 76, 19, 24, 2, 48, 3, 99, 34, 49, 18, 65, 28, 8, 90, 79, 10, 22, 46, 37, 11, 17, 26, 44, 32, 42, 98, 16, 53, 6, 47, 42, 62, 2, 29, 98, 1, 26, 61, 6, 12, 23, 4, 90, 18, 59, 41, 46, 29, 57, 6, 6, 46, 37, 30, 52, 25, 47, 42, 70, 25, 48, 2, 63, 55, 78, 62, 77, 29, 59, 95, 64]
last_save: 101

Gen:251
last_save: 101
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.8042168674698795
TestFitness:0.8055555555555556
MaxGenLen:400
Individual: def p():
  def adf0(index):
    if np.greater(x[index],55529.94079):
      return True
    else:
      return False
  def adf1(index):
    if np.equal(x[index],27462.87273):
      return True
    else:
      return False
  def adf2(index):
    if np.greater(x[index],89264.75765):
      return True
    else:
      return True
  def adf3(index):
    if np.equal(x[index],05039.88875):
      return True
    else:
      return False
  def adf4(index):
    if np.equal(x[index],35307.19075):
      return False
    else:
      return False
  def adf5(index):
    if np.equal(x[index],77634.71105):
      return True
    else:
      return True
  def adf6(index):
    if np.greater(x[index],77363.60308):
      return True
    else:
      return False
  def adf7(index):
    if np.equal(x[index],80685.69246):
      return False
    else:
      return True
  def adf8(index):
    if np.greater(x[index],13156.26789):
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+07.84, adf1(1)*-41.79, adf2(2)*+74.87, adf3(3)*+52.11, adf4(4)*-50.09, adf5(5)*-28.95, adf6(6)*+19.09, adf7(7)*+89.84, adf8(8)*-39.84], 64.54)
result=p(); 0.8042168674698795
IndLenGenome:339
IndGenome:[5, 75, 9, 63, 85, 41, 3, 70, 11, 95, 24, 96, 19, 28, 61, 15, 2, 90, 68, 69, 25, 65, 37, 83, 9, 15, 20, 63, 97, 57, 5, 28, 62, 17, 56, 51, 16, 51, 52, 58, 63, 50, 90, 50, 90, 90, 98, 96, 25, 33, 70, 73, 61, 54, 17, 35, 35, 98, 75, 20, 32, 94, 97, 45, 63, 91, 46, 60, 25, 79, 65, 31, 27, 92, 11, 89, 66, 59, 15, 66, 59, 26, 27, 58, 84, 39, 2, 30, 86, 75, 94, 56, 86, 75, 14, 90, 84, 20, 65, 46, 93, 97, 79, 21, 56, 90, 97, 10, 77, 33, 24, 18, 48, 28, 41, 44, 58, 87, 70, 52, 87, 99, 44, 33, 8, 66, 78, 5, 61, 84, 96, 70, 53, 22, 10, 39, 87, 51, 93, 74, 56, 72, 58, 93, 60, 26, 34, 69, 69, 29, 95, 65, 97, 25, 88, 94, 68, 6, 49, 90, 52, 32, 78, 34, 51, 75, 61, 61, 22, 78, 18, 65, 34, 65, 42, 75, 36, 10, 12, 82, 28, 73, 50, 49, 37, 63, 47, 37, 35, 71, 10, 55, 89, 36, 88, 55, 80, 29, 62, 59, 64, 77, 45, 20, 28, 87, 30, 74, 67, 11, 12, 67, 77, 64, 81, 17, 54, 37, 75, 45, 59, 13, 49, 40, 36, 67, 79, 64, 88, 38, 25, 7, 15, 89, 33, 29, 52, 56, 58, 23, 66, 75, 37, 4, 41, 77, 37, 93, 76, 39, 92, 78, 48, 90, 30, 85, 100, 18, 41, 11, 6, 40, 62, 52, 80, 54, 52, 54, 88, 91, 82, 40, 2, 39, 36, 30, 70, 0, 16, 15, 8, 24, 27, 39, 4, 74, 79, 1, 87, 26, 100, 45, 27, 34, 89, 5, 6, 42, 28, 44, 71, 55, 26, 28, 36, 96, 87, 97, 20, 22, 17, 4, 55, 59, 66, 42, 17, 49, 77, 73, 77, 16, 80, 19, 67, 9, 59, 32, 34, 36, 9, 25, 99, 76, 27, 1, 46, 83, 0]
last_save: 101

Gen:251
last_save: 101
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.8042168674698795
TestFitness:0.8055555555555556
MaxGenLen:400
Individual: def p():
  def adf0(index):
    if np.less(x[index],40561.88331):
      return True
    else:
      return True
  def adf1(index):
    if np.less(x[index],26807.57882):
      return False
    else:
      return True
  def adf2(index):
    if np.greater(x[index],18512.07127):
      return False
    else:
      return False
  def adf3(index):
    if np.less(x[index],11319.97586):
      return True
    else:
      return False
  def adf4(index):
    if np.less(x[index],00425.60006):
      return True
    else:
      return False
  def adf5(index):
    if np.less(x[index],04402.92780):
      return False
    else:
      return False
  def adf6(index):
    if np.equal(x[index],04896.25414):
      return False
    else:
      return True
  def adf7(index):
    if np.less(x[index],07586.48203):
      return False
    else:
      return True
  def adf8(index):
    if np.equal(x[index],91598.70303):
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+97.40, adf1(1)*+59.01, adf2(2)*+44.80, adf3(3)*-48.46, adf4(4)*+78.68, adf5(5)*+15.98, adf6(6)*+96.31, adf7(7)*+07.99, adf8(8)*-08.55], 01.22)
result=p(); 0.8042168674698795
IndLenGenome:339
IndGenome:[97, 95, 47, 22, 79, 38, 1, 18, 25, 20, 74, 31, 72, 44, 73, 35, 15, 10, 30, 5, 4, 69, 42, 22, 69, 40, 22, 41, 4, 58, 60, 98, 85, 64, 66, 65, 47, 44, 97, 25, 90, 62, 72, 52, 34, 77, 38, 41, 93, 72, 99, 11, 98, 18, 79, 82, 49, 90, 59, 86, 24, 65, 14, 17, 68, 77, 56, 58, 70, 57, 35, 96, 46, 70, 96, 34, 64, 95, 22, 25, 94, 60, 32, 37, 94, 82, 84, 65, 94, 87, 91, 53, 79, 75, 78, 31, 4, 25, 43, 53, 40, 58, 75, 60, 21, 13, 72, 76, 30, 77, 81, 61, 34, 13, 95, 98, 14, 18, 79, 77, 57, 31, 84, 34, 19, 7, 30, 93, 55, 30, 73, 89, 58, 61, 57, 99, 44, 61, 87, 99, 92, 39, 75, 29, 69, 73, 15, 89, 15, 45, 30, 53, 68, 70, 90, 19, 66, 3, 18, 90, 51, 69, 30, 18, 88, 95, 85, 58, 16, 90, 26, 66, 40, 31, 88, 37, 21, 26, 70, 22, 80, 28, 64, 19, 86, 10, 50, 23, 91, 92, 17, 73, 47, 68, 28, 69, 66, 45, 16, 95, 47, 14, 52, 61, 51, 85, 62, 18, 30, 63, 26, 10, 40, 28, 17, 62, 88, 54, 92, 84, 90, 59, 70, 50, 14, 97, 56, 57, 38, 79, 66, 75, 21, 62, 72, 59, 8, 75, 9, 57, 58, 38, 9, 87, 13, 20, 95, 100, 58, 1, 21, 80, 1, 20, 90, 16, 73, 37, 0, 97, 26, 21, 22, 7, 62, 74, 52, 91, 42, 41, 65, 31, 72, 66, 30, 35, 67, 55, 69, 84, 11, 41, 83, 51, 36, 34, 63, 5, 77, 71, 39, 13, 57, 91, 21, 40, 45, 81, 8, 41, 89, 37, 91, 67, 9, 89, 92, 78, 33, 44, 72, 74, 86, 32, 90, 53, 96, 96, 58, 92, 76, 47, 47, 27, 26, 74, 44, 93, 54, 4, 65, 91, 96, 0, 25, 8, 58, 34, 17]
last_save: 101

Gen:151
TrainFitness:0.8072289156626506
TestFitness:0.8055555555555556
MaxGenLen:430
Individual: def p():
  def adf0(index):
    if np.less(x[index],59322.74708):
      return False
    else:
      return True
  def adf1(index):
    if np.less(x[index],05127.55085):
      if np.equal(x[index],47226.35908):
        return True
      else:
        return False
    else:
      if np.less(x[index],37042.09258):
        return True
      else:
        return False
  def adf2(index):
    if np.greater(x[index],97356.17614):
      return True
    else:
      return False
  def adf3(index):
    if np.equal(x[index],94256.18259):
      return False
    else:
      return False
  def adf4(index):
    if np.equal(x[index],50445.47882):
      return False
    else:
      return True
  def adf5(index):
    if np.less(x[index],13958.14113):
      return True
    else:
      return True
  def adf6(index):
    if np.less(x[index],60917.43480):
      return False
    else:
      return True
  def adf7(index):
    if np.greater(x[index],59550.87202):
      return True
    else:
      return False
  def adf8(index):
    if np.less(x[index],83558.00968):
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+06.51, adf1(1)*+80.36, adf2(2)*+42.83, adf3(3)*+94.38, adf4(4)*-15.01, adf5(5)*+09.17, adf6(6)*+46.83, adf7(7)*+15.58, adf8(8)*-60.67], 07.41)
result=p(); 0.8072289156626506
IndLenGenome:275
IndGenome:[5, 10, 64, 90, 100, 31, 71, 45, 49, 3, 62, 32, 47, 94, 7, 90, 18, 21, 26, 27, 36, 41, 55, 32, 60, 35, 51, 32, 97, 45, 55, 100, 38, 45, 54, 59, 83, 34, 47, 92, 52, 76, 23, 25, 99, 30, 38, 10, 53, 36, 49, 39, 93, 37, 100, 24, 42, 60, 89, 42, 5, 68, 72, 59, 76, 25, 97, 27, 91, 89, 37, 93, 15, 46, 91, 87, 96, 31, 64, 100, 93, 76, 25, 97, 29, 91, 49, 24, 12, 15, 26, 91, 98, 62, 55, 69, 95, 35, 39, 85, 78, 23, 15, 5, 50, 44, 24, 65, 14, 17, 68, 28, 32, 73, 66, 42, 45, 52, 94, 75, 91, 53, 79, 75, 78, 31, 4, 61, 51, 53, 82, 58, 75, 60, 21, 13, 72, 76, 30, 9, 81, 87, 34, 13, 14, 18, 30, 73, 50, 58, 75, 29, 42, 25, 15, 89, 15, 45, 30, 78, 17, 82, 90, 72, 66, 3, 18, 90, 72, 13, 52, 18, 83, 95, 85, 58, 80, 90, 29, 66, 58, 38, 50, 88, 95, 85, 58, 1, 90, 26, 45, 61, 55, 62, 62, 18, 30, 63, 26, 10, 78, 28, 44, 12, 88, 43, 33, 10, 90, 59, 64, 3, 18, 90, 51, 69, 31, 85, 20, 21, 26, 70, 59, 80, 79, 1, 97, 51, 38, 11, 4, 46, 58, 13, 96, 94, 47, 11, 5, 5, 18, 63, 25, 0, 96, 30, 16, 57, 67, 30, 37, 94, 71, 14, 83, 83, 50, 40, 10, 50, 41, 48, 55, 92, 67, 18, 68, 50, 37, 7, 96, 6, 74, 56, 98]
last_save: 101

Gen:166
TrainFitness:0.8102409638554217
TestFitness:0.8055555555555556
MaxGenLen:430
Individual: def p():
  def adf0(index):
    if np.less(x[index],59322.74708):
      return False
    else:
      return True
  def adf1(index):
    if np.less(x[index],05027.55085):
      if np.equal(x[index],47226.35908):
        return True
      else:
        return False
    else:
      if np.less(x[index],37042.09258):
        return True
      else:
        return False
  def adf2(index):
    if np.greater(x[index],97356.12614):
      return True
    else:
      return False
  def adf3(index):
    if np.equal(x[index],94256.18259):
      return False
    else:
      return False
  def adf4(index):
    if np.equal(x[index],50445.47882):
      return False
    else:
      return True
  def adf5(index):
    if np.less(x[index],13958.14113):
      return True
    else:
      return True
  def adf6(index):
    if np.less(x[index],60917.43480):
      return False
    else:
      return True
  def adf7(index):
    if np.greater(x[index],59550.87202):
      return True
    else:
      return False
  def adf8(index):
    if np.less(x[index],83558.00968):
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+06.51, adf1(1)*+80.36, adf2(2)*+42.83, adf3(3)*+94.38, adf4(4)*-15.01, adf5(5)*+09.17, adf6(6)*+46.83, adf7(7)*+15.58, adf8(8)*-60.67], 07.29)
result=p(); 0.8102409638554217
IndLenGenome:407
IndGenome:[5, 10, 64, 90, 100, 31, 71, 45, 49, 3, 62, 32, 47, 94, 7, 90, 18, 21, 26, 27, 36, 21, 55, 32, 60, 35, 30, 32, 97, 45, 55, 100, 38, 45, 54, 59, 83, 34, 47, 92, 52, 76, 23, 25, 99, 30, 38, 10, 53, 36, 49, 39, 93, 37, 100, 24, 42, 60, 89, 42, 5, 68, 72, 59, 76, 25, 97, 27, 91, 89, 37, 93, 15, 46, 91, 12, 96, 31, 74, 100, 93, 76, 25, 34, 29, 91, 49, 24, 12, 15, 26, 91, 98, 62, 55, 69, 95, 35, 39, 85, 78, 23, 15, 5, 50, 44, 24, 65, 14, 17, 68, 28, 32, 73, 66, 42, 45, 52, 94, 75, 91, 53, 79, 75, 78, 31, 4, 61, 51, 53, 82, 58, 75, 60, 21, 13, 72, 76, 30, 9, 81, 87, 34, 13, 14, 18, 30, 73, 50, 58, 75, 29, 42, 25, 15, 89, 15, 45, 30, 78, 17, 82, 90, 72, 66, 3, 18, 90, 72, 13, 52, 18, 83, 95, 85, 58, 80, 90, 29, 66, 58, 38, 50, 88, 95, 85, 58, 1, 90, 26, 45, 61, 55, 62, 62, 18, 30, 63, 26, 10, 78, 28, 44, 12, 88, 43, 33, 10, 90, 59, 64, 3, 18, 90, 51, 69, 31, 85, 20, 21, 26, 70, 59, 80, 79, 1, 97, 51, 38, 11, 4, 46, 58, 13, 96, 94, 47, 11, 5, 5, 18, 63, 25, 0, 96, 30, 16, 57, 67, 30, 37, 82, 9, 80, 30, 97, 69, 58, 16, 90, 26, 66, 62, 31, 85, 20, 21, 26, 70, 59, 80, 28, 46, 22, 47, 28, 64, 65, 40, 75, 93, 74, 20, 37, 55, 76, 95, 46, 32, 96, 24, 57, 89, 59, 61, 16, 67, 83, 44, 54, 43, 47, 85, 31, 11, 47, 64, 46, 50, 41, 16, 12, 60, 54, 55, 63, 29, 38, 87, 27, 56, 41, 30, 25, 98, 50, 81, 59, 92, 64, 69, 100, 99, 98, 60, 42, 90, 5, 57, 29, 70, 74, 70, 58, 80, 71, 33, 12, 19, 100, 77, 34, 80, 20, 98, 59, 41, 58, 31, 89, 24, 69, 8, 60, 42, 57, 32, 49, 3, 57, 69, 63, 77, 36, 48, 95, 98, 95, 72, 75, 74, 31, 67, 78, 47, 35, 98, 64, 58, 49, 14, 64, 96, 7, 58, 39, 2, 46, 32, 58, 3, 58, 39, 2, 85, 53, 72]
last_save: 101

Gen:287
TrainFitness:0.8132530120481928
TestFitness:0.8055555555555556
MaxGenLen:460
Individual: def p():
  def adf0(index):
    if np.less(x[index],59322.74708):
      return False
    else:
      return True
  def adf1(index):
    if np.less(x[index],05027.55085):
      if np.equal(x[index],46226.35908):
        return True
      else:
        return False
    else:
      if np.less(x[index],37042.09258):
        return True
      else:
        return False
  def adf2(index):
    if np.greater(x[index],97352.17614):
      return True
    else:
      return False
  def adf3(index):
    if np.equal(x[index],94356.12014):
      return True
    else:
      return False
  def adf4(index):
    if np.equal(x[index],94256.18259):
      return False
    else:
      return False
  def adf5(index):
    if np.equal(x[index],51326.35171):
      return False
    else:
      return True
  def adf6(index):
    if np.equal(x[index],59955.95508):
      return False
    else:
      return True
  def adf7(index):
    if np.greater(x[index],02318.32661):
      if np.less(x[index],55095.83550):
        if np.less(x[index],47882.36252):
          return True
        else:
          return False
      else:
        if np.equal(x[index],58141.36225):
          return True
        else:
          return False
    else:
      if np.greater(x[index],40901.52160):
        if np.equal(x[index],16163.05703):
          return False
        else:
          return False
      else:
        if np.less(x[index],16163.05703):
          return False
        else:
          return False
  def adf8(index):
    if np.greater(x[index],47882.36252):
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-14.11, adf1(1)*+50.13, adf2(2)*+91.74, adf3(3)*+03.08, adf4(4)*-55.95, adf5(5)*+72.02, adf6(6)*-02.32, adf7(7)*-58.00, adf8(8)*+80.85], 81.06)
result=p(); 0.8132530120481928
IndLenGenome:401
IndGenome:[5, 10, 64, 90, 100, 31, 71, 45, 49, 3, 62, 32, 47, 94, 7, 90, 18, 21, 26, 27, 36, 41, 55, 32, 60, 35, 20, 32, 97, 45, 55, 100, 38, 45, 54, 59, 83, 34, 36, 92, 52, 76, 23, 25, 99, 30, 38, 10, 53, 36, 49, 39, 93, 37, 100, 24, 42, 60, 89, 42, 5, 68, 72, 59, 76, 25, 97, 27, 85, 89, 37, 93, 15, 2, 91, 87, 96, 31, 64, 100, 93, 76, 25, 97, 29, 91, 49, 24, 93, 15, 46, 91, 12, 50, 31, 74, 100, 93, 76, 25, 34, 29, 91, 49, 24, 12, 15, 26, 91, 98, 62, 55, 69, 95, 35, 39, 85, 78, 23, 15, 5, 21, 13, 72, 76, 93, 75, 81, 87, 51, 51, 14, 18, 30, 73, 50, 58, 75, 29, 9, 25, 15, 89, 15, 45, 30, 78, 17, 82, 90, 72, 53, 3, 38, 90, 72, 13, 71, 18, 83, 22, 86, 26, 91, 98, 70, 55, 95, 95, 30, 39, 85, 78, 23, 15, 5, 50, 44, 28, 24, 14, 17, 68, 28, 32, 73, 66, 42, 45, 52, 42, 75, 91, 53, 79, 75, 78, 31, 4, 61, 23, 6, 82, 2, 75, 60, 21, 13, 72, 76, 44, 30, 19, 60, 91, 85, 72, 81, 16, 90, 42, 23, 40, 31, 26, 81, 96, 73, 70, 15, 67, 30, 63, 61, 31, 41, 25, 40, 31, 26, 81, 96, 73, 70, 15, 67, 30, 53, 61, 31, 41, 25, 44, 24, 65, 14, 17, 68, 28, 32, 73, 66, 42, 45, 52, 94, 75, 91, 53, 79, 75, 78, 31, 4, 61, 51, 53, 82, 5, 75, 60, 21, 13, 72, 76, 30, 9, 81, 87, 34, 13, 14, 18, 30, 73, 50, 58, 75, 29, 42, 25, 15, 89, 15, 45, 30, 78, 17, 82, 90, 72, 66, 3, 18, 90, 72, 13, 52, 18, 83, 95, 85, 58, 80, 90, 29, 66, 62, 38, 50, 88, 95, 85, 58, 1, 90, 26, 37, 61, 55, 62, 62, 18, 30, 63, 26, 10, 78, 28, 44, 12, 88, 43, 49, 10, 90, 59, 64, 3, 18, 90, 51, 69, 31, 70, 15, 67, 30, 53, 61, 31, 18, 13, 96, 88, 20, 37, 94, 71, 14, 83, 83, 50, 40, 10, 50, 41, 48, 55, 92, 67, 18, 68, 50, 37, 7, 96, 6, 74, 56, 98]
last_save: 101

Gen:500
last_save: 101
Exit:FalseTrueFalse

Gen:1
TrainFitness:0.8042168674698795
TestFitness:0.8055555555555556
MaxGenLen:400
Individual: def p():
  def adf0(index):
    if np.greater(x[index],25569.05495):
      return True
    else:
      return True
  def adf1(index):
    if np.less(x[index],21852.81411):
      return True
    else:
      return False
  def adf2(index):
    if np.greater(x[index],87508.07301):
      return True
    else:
      return False
  def adf3(index):
    if np.equal(x[index],07520.95736):
      return False
    else:
      return True
  def adf4(index):
    if np.equal(x[index],37689.83842):
      return True
    else:
      return True
  def adf5(index):
    if np.less(x[index],28385.23855):
      return False
    else:
      return False
  def adf6(index):
    if np.less(x[index],43207.71890):
      return False
    else:
      return False
  def adf7(index):
    if np.greater(x[index],19009.33258):
      return False
    else:
      return False
  def adf8(index):
    if np.less(x[index],38161.71899):
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+98.43, adf1(1)*-85.65, adf2(2)*+41.56, adf3(3)*+31.15, adf4(4)*+58.38, adf5(5)*+01.08, adf6(6)*+81.42, adf7(7)*+74.37, adf8(8)*+36.01], 42.59)
result=p(); 0.8042168674698795
IndLenGenome:339
IndGenome:[52, 15, 45, 71, 75, 45, 31, 60, 44, 90, 49, 64, 5, 2, 25, 35, 27, 88, 10, 4, 22, 5, 86, 61, 41, 34, 18, 48, 63, 88, 10, 97, 63, 9, 69, 87, 21, 28, 47, 25, 98, 19, 2, 57, 85, 33, 92, 72, 39, 1, 55, 76, 51, 71, 14, 6, 47, 25, 48, 14, 81, 96, 37, 89, 86, 18, 55, 46, 93, 89, 90, 44, 51, 35, 45, 89, 25, 43, 49, 42, 44, 15, 41, 22, 75, 17, 60, 32, 33, 29, 15, 38, 11, 14, 32, 16, 62, 45, 32, 53, 38, 91, 91, 89, 35, 15, 88, 65, 54, 67, 24, 35, 67, 44, 73, 14, 95, 69, 65, 51, 21, 40, 80, 13, 11, 68, 28, 86, 90, 98, 52, 48, 35, 40, 32, 92, 62, 27, 65, 90, 6, 95, 90, 40, 27, 53, 93, 58, 34, 88, 93, 87, 83, 45, 27, 79, 98, 76, 48, 38, 38, 23, 21, 12, 35, 22, 51, 29, 14, 31, 96, 17, 85, 17, 53, 73, 51, 41, 12, 67, 65, 68, 68, 59, 24, 73, 63, 40, 20, 51, 58, 16, 71, 37, 44, 31, 90, 45, 35, 86, 46, 54, 15, 80, 42, 98, 60, 26, 29, 43, 78, 33, 65, 52, 33, 51, 32, 46, 95, 67, 77, 23, 95, 20, 80, 29, 70, 87, 96, 0, 33, 49, 44, 79, 96, 22, 56, 59, 34, 52, 99, 70, 25, 61, 93, 92, 9, 91, 6, 75, 61, 3, 41, 47, 0, 96, 88, 83, 28, 58, 61, 87, 78, 26, 19, 61, 8, 0, 27, 30, 55, 1, 38, 78, 57, 61, 47, 63, 80, 66, 31, 27, 42, 16, 72, 65, 20, 69, 89, 75, 94, 89, 45, 40, 5, 89, 19, 63, 46, 80, 45, 27, 13, 90, 51, 78, 88, 50, 64, 16, 95, 51, 99, 52, 46, 62, 79, 86, 70, 40, 20, 55, 4, 56, 74, 39, 94, 55, 9, 75, 68, 8, 94, 38, 31, 30, 83, 54, 50]
last_save: 101

Gen:251
last_save: 101
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.8042168674698795
TestFitness:0.8055555555555556
MaxGenLen:400
Individual: def p():
  def adf0(index):
    if np.equal(x[index],58313.76429):
      return True
    else:
      return True
  def adf1(index):
    if np.equal(x[index],32391.04764):
      return False
    else:
      return False
  def adf2(index):
    if np.equal(x[index],89617.49699):
      return True
    else:
      return False
  def adf3(index):
    if np.greater(x[index],76181.41121):
      return True
    else:
      return True
  def adf4(index):
    if np.less(x[index],22185.36087):
      return True
    else:
      return True
  def adf5(index):
    if np.equal(x[index],76323.20774):
      return False
    else:
      return True
  def adf6(index):
    if np.less(x[index],25028.19897):
      return True
    else:
      return False
  def adf7(index):
    if np.equal(x[index],19900.79081):
      return True
    else:
      return True
  def adf8(index):
    if np.less(x[index],71812.68872):
      return True
    else:
      return True
  return multiple_operation([adf0(0)*-19.93, adf1(1)*-91.71, adf2(2)*-60.13, adf3(3)*+41.04, adf4(4)*+02.36, adf5(5)*-10.42, adf6(6)*+67.24, adf7(7)*+22.70, adf8(8)*+04.61], 07.07)
result=p(); 0.8042168674698795
IndLenGenome:339
IndGenome:[10, 88, 79, 77, 9, 65, 8, 82, 6, 15, 12, 78, 40, 6, 81, 80, 60, 90, 70, 88, 86, 20, 71, 38, 6, 25, 49, 25, 10, 27, 40, 30, 55, 52, 40, 57, 23, 68, 70, 72, 14, 37, 90, 40, 12, 49, 47, 87, 44, 37, 52, 34, 2, 86, 51, 18, 45, 17, 62, 20, 67, 33, 77, 91, 36, 40, 91, 40, 91, 46, 59, 71, 83, 89, 59, 91, 20, 28, 22, 97, 98, 98, 41, 82, 88, 25, 16, 97, 61, 15, 78, 35, 32, 54, 59, 48, 11, 32, 83, 35, 36, 59, 32, 96, 92, 73, 20, 82, 27, 94, 59, 9, 71, 86, 91, 98, 69, 27, 87, 95, 64, 28, 13, 33, 47, 38, 26, 67, 19, 71, 26, 44, 67, 88, 4, 89, 59, 89, 71, 56, 79, 39, 65, 20, 12, 56, 91, 58, 35, 20, 43, 19, 72, 54, 14, 48, 41, 52, 45, 34, 11, 11, 77, 95, 19, 34, 34, 51, 60, 50, 31, 13, 80, 30, 40, 66, 53, 17, 17, 22, 28, 64, 51, 96, 20, 82, 58, 92, 37, 11, 6, 82, 53, 89, 90, 36, 77, 21, 14, 69, 32, 44, 66, 27, 78, 19, 13, 45, 12, 12, 36, 39, 24, 21, 70, 51, 43, 73, 52, 77, 6, 91, 12, 70, 51, 44, 66, 62, 81, 75, 13, 67, 56, 40, 38, 40, 18, 24, 21, 26, 81, 85, 14, 70, 30, 72, 15, 29, 11, 26, 31, 94, 68, 28, 47, 11, 42, 2, 77, 74, 9, 6, 59, 10, 88, 91, 60, 52, 75, 85, 20, 81, 55, 81, 69, 82, 58, 44, 29, 16, 95, 64, 93, 22, 72, 1, 24, 84, 32, 75, 20, 42, 33, 76, 78, 96, 57, 4, 44, 66, 3, 96, 37, 19, 40, 78, 18, 35, 84, 29, 38, 57, 9, 87, 52, 12, 67, 62, 72, 19, 87, 65, 3, 19, 86, 31, 21, 63, 7, 10, 100, 98, 56, 50, 28, 30, 13, 18, 11]
last_save: 101

Gen:251
last_save: 101
Exit:FalseFalseTrue