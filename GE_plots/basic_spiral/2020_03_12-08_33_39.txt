 Dataset:Spiral/new_Full.csv
FS:False
Seed:1236
Size:10

Gen:1
TrainFitness:0.806060606060606
TestFitness:0.7894736842105263
MaxGenLen:400
Individual: def p():
  def adf0(index):
    if np.less(x[index],26326.98571):
      return True
    else:
      return True
  def adf1(index):
    if np.less(x[index],95171.30158):
      return True
    else:
      return False
  def adf2(index):
    if np.greater(x[index],84701.61820):
      return True
    else:
      return False
  def adf3(index):
    if np.less(x[index],67513.68296):
      return False
    else:
      return True
  def adf4(index):
    if np.greater(x[index],85280.45481):
      return False
    else:
      return False
  def adf5(index):
    if np.equal(x[index],80169.57989):
      return False
    else:
      return True
  def adf6(index):
    if np.less(x[index],19153.73377):
      return False
    else:
      return False
  def adf7(index):
    if np.less(x[index],65508.61092):
      return False
    else:
      return False
  def adf8(index):
    if np.less(x[index],54045.48595):
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+89.14, adf1(1)*-94.31, adf2(2)*+81.65, adf3(3)*-56.59, adf4(4)*-98.85, adf5(5)*+83.11, adf6(6)*+99.82, adf7(7)*+38.85, adf8(8)*-35.01], 27.44)
result=p(); 0.806060606060606
IndLenGenome:339
IndGenome:[11, 94, 86, 28, 57, 40, 85, 84, 90, 34, 14, 55, 15, 34, 15, 13, 96, 55, 37, 62, 70, 96, 62, 12, 60, 52, 23, 89, 45, 15, 16, 38, 98, 68, 10, 20, 24, 41, 71, 52, 24, 26, 89, 32, 36, 66, 34, 48, 79, 76, 76, 48, 46, 8, 75, 85, 85, 39, 78, 16, 41, 53, 78, 33, 95, 64, 25, 31, 41, 1, 11, 8, 41, 91, 25, 81, 20, 99, 25, 8, 40, 77, 28, 70, 11, 59, 32, 98, 54, 62, 53, 71, 33, 25, 2, 85, 24, 48, 83, 79, 90, 87, 51, 16, 62, 55, 99, 39, 58, 81, 98, 91, 58, 36, 91, 96, 41, 29, 25, 71, 52, 37, 95, 40, 69, 65, 45, 98, 64, 88, 84, 63, 47, 47, 40, 84, 21, 79, 96, 69, 55, 2, 18, 49, 23, 99, 71, 59, 76, 49, 69, 45, 76, 96, 48, 66, 12, 94, 38, 98, 35, 82, 54, 42, 67, 44, 75, 95, 90, 83, 38, 60, 70, 76, 61, 57, 78, 48, 47, 64, 83, 18, 66, 11, 11, 85, 36, 38, 68, 52, 77, 67, 43, 23, 31, 41, 82, 21, 70, 43, 97, 97, 85, 99, 15, 63, 33, 79, 69, 85, 30, 38, 41, 64, 75, 11, 24, 21, 38, 99, 24, 95, 10, 17, 57, 94, 16, 26, 12, 31, 44, 8, 68, 21, 58, 37, 18, 99, 55, 68, 91, 100, 23, 96, 57, 24, 83, 75, 36, 4, 67, 30, 10, 96, 57, 92, 75, 22, 66, 71, 8, 69, 48, 69, 30, 99, 6, 87, 53, 9, 27, 52, 57, 45, 98, 58, 86, 7, 68, 65, 30, 96, 59, 8, 44, 78, 47, 94, 90, 87, 40, 58, 74, 42, 7, 95, 93, 43, 22, 9, 24, 70, 9, 39, 49, 22, 56, 36, 75, 68, 19, 1, 61, 39, 6, 43, 3, 11, 76, 26, 49, 47, 49, 10, 75, 9, 38, 81, 92, 61, 93, 1, 69, 35, 20, 11, 78, 13, 6]
last_save: 102

Gen:251
last_save: 102
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.806060606060606
TestFitness:0.7894736842105263
MaxGenLen:400
Individual: def p():
  def adf0(index):
    if np.less(x[index],17994.26411):
      return False
    else:
      return False
  def adf1(index):
    if np.less(x[index],73529.27192):
      return True
    else:
      return False
  def adf2(index):
    if np.greater(x[index],91527.07905):
      return True
    else:
      return True
  def adf3(index):
    if np.less(x[index],55614.63523):
      return True
    else:
      return True
  def adf4(index):
    if np.less(x[index],65312.61941):
      return False
    else:
      return False
  def adf5(index):
    if np.equal(x[index],79225.15700):
      return False
    else:
      return True
  def adf6(index):
    if np.greater(x[index],82369.89954):
      return False
    else:
      return True
  def adf7(index):
    if np.greater(x[index],07737.20141):
      return False
    else:
      return True
  def adf8(index):
    if np.greater(x[index],57594.96127):
      return False
    else:
      return True
  return multiple_operation([adf0(0)*-74.71, adf1(1)*+24.46, adf2(2)*+80.40, adf3(3)*+79.97, adf4(4)*+57.64, adf5(5)*+65.08, adf6(6)*+73.08, adf7(7)*+92.52, adf8(8)*-84.09], 07.49)
result=p(); 0.806060606060606
IndLenGenome:339
IndGenome:[38, 11, 3, 38, 96, 75, 42, 49, 71, 81, 60, 55, 96, 30, 51, 78, 55, 5, 10, 28, 45, 18, 66, 53, 68, 8, 54, 75, 40, 69, 28, 89, 18, 78, 38, 94, 5, 84, 61, 52, 99, 68, 70, 7, 39, 60, 15, 99, 50, 28, 34, 37, 96, 44, 95, 55, 47, 69, 91, 52, 47, 32, 41, 66, 12, 84, 69, 72, 11, 29, 74, 97, 29, 71, 50, 85, 40, 54, 73, 60, 79, 56, 26, 64, 30, 70, 27, 87, 87, 61, 75, 40, 75, 41, 95, 87, 51, 10, 86, 61, 81, 12, 77, 70, 80, 93, 18, 42, 24, 17, 35, 83, 90, 68, 70, 76, 17, 64, 61, 52, 29, 98, 95, 67, 30, 54, 55, 39, 43, 63, 81, 77, 11, 65, 56, 87, 62, 57, 39, 27, 49, 41, 19, 92, 47, 49, 6, 75, 75, 22, 86, 57, 85, 72, 32, 91, 23, 55, 15, 16, 71, 54, 94, 84, 42, 82, 77, 65, 83, 62, 15, 59, 15, 32, 75, 60, 70, 31, 79, 76, 92, 60, 37, 87, 45, 54, 22, 75, 68, 66, 19, 54, 41, 10, 24, 80, 29, 52, 54, 66, 89, 70, 21, 61, 67, 51, 99, 25, 63, 47, 56, 17, 24, 57, 57, 66, 56, 78, 84, 32, 49, 53, 95, 49, 19, 58, 63, 41, 91, 38, 99, 24, 50, 34, 92, 95, 56, 30, 59, 14, 96, 83, 44, 91, 14, 87, 85, 85, 16, 78, 8, 19, 99, 25, 13, 27, 62, 72, 73, 31, 15, 17, 56, 70, 65, 1, 92, 77, 2, 56, 5, 91, 3, 43, 63, 7, 82, 2, 34, 72, 39, 55, 96, 92, 49, 40, 28, 27, 6, 98, 100, 9, 67, 79, 32, 82, 11, 63, 50, 93, 94, 89, 14, 25, 17, 6, 25, 41, 96, 49, 26, 54, 85, 34, 20, 32, 67, 69, 46, 63, 9, 87, 20, 68, 32, 94, 82, 31, 45, 31, 35, 92, 15, 50, 46, 27, 88, 92, 17]
last_save: 102

Gen:251
last_save: 102
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.8036253776435045
TestFitness:0.8108108108108109
MaxGenLen:400
Individual: def p():
  def adf0(index):
    if np.equal(x[index],12448.66667):
      return True
    else:
      return True
  def adf1(index):
    if np.less(x[index],58918.94992):
      return False
    else:
      return True
  def adf2(index):
    if np.greater(x[index],26119.46171):
      return False
    else:
      return False
  def adf3(index):
    if np.greater(x[index],55756.37208):
      return False
    else:
      return True
  def adf4(index):
    if np.equal(x[index],81158.15689):
      return False
    else:
      return False
  def adf5(index):
    if np.equal(x[index],36125.44800):
      return False
    else:
      return True
  def adf6(index):
    if np.greater(x[index],31689.68979):
      return True
    else:
      return False
  def adf7(index):
    if np.less(x[index],21519.52245):
      return True
    else:
      return False
  def adf8(index):
    if np.greater(x[index],02093.21482):
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+48.44, adf1(1)*+65.05, adf2(2)*+19.72, adf3(3)*+43.95, adf4(4)*+29.14, adf5(5)*-80.21, adf6(6)*+12.98, adf7(7)*+86.94, adf8(8)*-46.43], 20.11)
result=p(); 0.8036253776435045
IndLenGenome:339
IndGenome:[26, 32, 57, 58, 27, 5, 55, 35, 28, 60, 85, 3, 44, 95, 63, 5, 84, 38, 88, 62, 19, 15, 37, 27, 57, 55, 68, 60, 28, 26, 76, 45, 55, 7, 12, 41, 90, 85, 88, 48, 28, 47, 56, 91, 10, 74, 82, 41, 95, 63, 5, 37, 10, 65, 81, 79, 75, 90, 90, 62, 80, 91, 98, 15, 48, 27, 41, 41, 79, 78, 14, 19, 32, 34, 31, 19, 20, 15, 57, 56, 51, 46, 2, 86, 76, 51, 84, 70, 75, 72, 35, 20, 17, 81, 74, 43, 68, 2, 48, 22, 77, 94, 14, 81, 12, 24, 92, 62, 72, 64, 84, 36, 96, 4, 99, 64, 90, 76, 6, 94, 44, 46, 64, 91, 36, 33, 43, 73, 46, 24, 87, 50, 78, 41, 41, 77, 91, 60, 94, 82, 38, 18, 71, 78, 76, 85, 60, 79, 32, 79, 32, 56, 53, 22, 43, 30, 13, 72, 60, 27, 52, 62, 24, 13, 56, 31, 59, 14, 67, 37, 65, 36, 90, 65, 12, 11, 70, 90, 99, 23, 25, 15, 65, 12, 55, 90, 74, 50, 15, 88, 62, 79, 19, 93, 34, 48, 19, 52, 52, 99, 63, 27, 81, 14, 74, 59, 42, 11, 98, 57, 11, 39, 16, 39, 51, 21, 88, 15, 85, 31, 89, 86, 44, 96, 36, 58, 24, 100, 84, 3, 74, 47, 37, 14, 57, 31, 42, 96, 52, 91, 42, 75, 35, 85, 40, 58, 26, 25, 98, 72, 22, 35, 29, 75, 32, 96, 57, 47, 48, 70, 46, 35, 14, 44, 91, 90, 99, 11, 27, 75, 100, 70, 4, 12, 61, 93, 70, 74, 34, 63, 87, 53, 2, 72, 93, 95, 88, 87, 78, 14, 59, 19, 26, 32, 76, 11, 85, 96, 49, 94, 72, 79, 97, 29, 0, 43, 32, 2, 69, 28, 28, 98, 98, 0, 55, 1, 73, 98, 23, 3, 1, 27, 62, 68, 13, 41, 91, 16, 37, 81, 23, 20, 83, 7, 28, 41, 56, 97, 38]
last_save: 102

Gen:251
last_save: 102
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.8036253776435045
TestFitness:0.8108108108108109
MaxGenLen:400
Individual: def p():
  def adf0(index):
    if np.less(x[index],53157.70894):
      return True
    else:
      return False
  def adf1(index):
    if np.equal(x[index],68384.68949):
      return False
    else:
      return True
  def adf2(index):
    if np.less(x[index],08835.98799):
      return True
    else:
      return False
  def adf3(index):
    if np.greater(x[index],98674.10323):
      return False
    else:
      return False
  def adf4(index):
    if np.less(x[index],85306.48490):
      return True
    else:
      return False
  def adf5(index):
    if np.less(x[index],80652.21594):
      return False
    else:
      return False
  def adf6(index):
    if np.greater(x[index],45795.62822):
      return True
    else:
      return True
  def adf7(index):
    if np.equal(x[index],72002.29141):
      return True
    else:
      return True
  def adf8(index):
    if np.equal(x[index],04320.77069):
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+55.36, adf1(1)*+78.85, adf2(2)*+30.23, adf3(3)*-14.46, adf4(4)*+78.84, adf5(5)*+38.30, adf6(6)*+24.97, adf7(7)*+84.50, adf8(8)*+25.59], 48.92)
result=p(); 0.8036253776435045
IndLenGenome:339
IndGenome:[91, 64, 46, 60, 80, 85, 24, 13, 80, 47, 42, 1, 72, 44, 93, 48, 7, 40, 88, 6, 81, 74, 39, 22, 55, 24, 5, 10, 55, 1, 23, 69, 37, 96, 60, 60, 29, 69, 35, 21, 40, 24, 91, 52, 19, 88, 18, 14, 55, 98, 32, 35, 17, 81, 71, 36, 48, 29, 58, 12, 97, 84, 85, 28, 24, 77, 5, 65, 40, 67, 74, 67, 83, 25, 53, 87, 75, 24, 92, 29, 57, 58, 38, 78, 74, 72, 30, 44, 83, 55, 20, 98, 8, 40, 68, 98, 32, 48, 53, 99, 63, 10, 14, 84, 49, 80, 85, 86, 37, 65, 33, 54, 37, 31, 6, 22, 69, 99, 77, 54, 28, 32, 65, 30, 13, 52, 39, 75, 96, 70, 79, 42, 27, 99, 77, 14, 66, 39, 44, 49, 63, 47, 93, 88, 80, 62, 61, 52, 68, 39, 58, 32, 69, 25, 78, 78, 97, 31, 85, 74, 98, 42, 65, 76, 87, 33, 38, 79, 76, 62, 90, 65, 23, 69, 10, 47, 16, 82, 83, 24, 58, 66, 15, 39, 13, 74, 94, 80, 67, 20, 18, 60, 33, 52, 71, 72, 30, 69, 64, 13, 31, 35, 75, 37, 20, 38, 83, 89, 65, 31, 89, 88, 68, 43, 62, 85, 58, 36, 54, 10, 43, 60, 39, 24, 28, 66, 84, 67, 27, 38, 87, 73, 100, 87, 23, 88, 17, 19, 64, 77, 77, 25, 95, 60, 56, 42, 94, 58, 82, 63, 46, 15, 62, 100, 94, 46, 12, 52, 42, 17, 49, 86, 75, 12, 29, 71, 2, 41, 96, 50, 36, 66, 73, 70, 76, 90, 77, 68, 17, 71, 35, 7, 48, 6, 52, 75, 98, 42, 72, 28, 73, 64, 92, 47, 65, 22, 36, 61, 12, 28, 55, 1, 65, 77, 21, 70, 3, 22, 14, 72, 71, 58, 68, 14, 4, 40, 5, 6, 71, 5, 61, 1, 16, 2, 66, 31, 29, 68, 32, 48, 37, 30, 76, 78, 96, 31, 30, 1, 38]
last_save: 102

Gen:251
last_save: 102
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.8036253776435045
TestFitness:0.8108108108108109
MaxGenLen:400
Individual: def p():
  def adf0(index):
    if np.equal(x[index],04243.28273):
      return False
    else:
      return False
  def adf1(index):
    if np.less(x[index],78676.79295):
      return False
    else:
      return False
  def adf2(index):
    if np.equal(x[index],73396.75668):
      return False
    else:
      return True
  def adf3(index):
    if np.greater(x[index],12852.24952):
      return False
    else:
      return False
  def adf4(index):
    if np.equal(x[index],58719.87975):
      return False
    else:
      return True
  def adf5(index):
    if np.equal(x[index],29561.25051):
      return True
    else:
      return False
  def adf6(index):
    if np.greater(x[index],31297.18229):
      return False
    else:
      return True
  def adf7(index):
    if np.less(x[index],03021.31215):
      return False
    else:
      return True
  def adf8(index):
    if np.equal(x[index],48138.70586):
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+05.36, adf1(1)*-32.21, adf2(2)*+10.99, adf3(3)*-18.65, adf4(4)*+54.02, adf5(5)*+97.62, adf6(6)*+27.86, adf7(7)*+15.11, adf8(8)*+79.55], 71.98)
result=p(); 0.8036253776435045
IndLenGenome:339
IndGenome:[99, 42, 54, 20, 28, 56, 12, 19, 71, 37, 34, 5, 10, 40, 15, 35, 97, 50, 65, 84, 47, 72, 61, 24, 60, 75, 77, 87, 96, 57, 28, 44, 34, 41, 19, 92, 81, 65, 19, 15, 85, 65, 64, 57, 74, 99, 39, 37, 95, 73, 41, 57, 67, 91, 91, 77, 27, 38, 60, 70, 61, 29, 44, 45, 25, 45, 98, 48, 61, 40, 30, 75, 15, 41, 95, 41, 78, 86, 23, 96, 75, 10, 14, 42, 29, 66, 25, 32, 72, 2, 83, 92, 49, 27, 39, 56, 41, 62, 45, 61, 42, 20, 11, 76, 50, 52, 72, 69, 39, 96, 62, 20, 93, 30, 87, 52, 70, 82, 97, 95, 47, 94, 72, 79, 88, 63, 41, 12, 65, 20, 41, 55, 6, 25, 32, 92, 21, 87, 87, 17, 81, 27, 96, 49, 15, 78, 84, 11, 80, 11, 36, 91, 16, 15, 78, 45, 16, 63, 89, 11, 77, 33, 62, 32, 14, 80, 17, 73, 58, 98, 65, 10, 84, 27, 28, 15, 72, 36, 64, 83, 12, 59, 39, 44, 35, 80, 86, 44, 38, 49, 96, 35, 57, 72, 73, 46, 14, 35, 79, 99, 68, 13, 58, 48, 82, 11, 38, 11, 55, 21, 42, 14, 71, 82, 30, 93, 59, 62, 38, 33, 92, 43, 87, 49, 91, 55, 9, 14, 13, 63, 28, 22, 41, 46, 56, 20, 8, 67, 93, 5, 19, 87, 95, 9, 41, 4, 36, 40, 19, 92, 79, 78, 19, 62, 20, 50, 59, 23, 51, 9, 40, 79, 38, 99, 9, 87, 49, 59, 48, 16, 57, 13, 59, 92, 6, 74, 9, 86, 32, 38, 16, 10, 12, 11, 39, 38, 98, 28, 28, 28, 5, 57, 16, 28, 1, 61, 21, 70, 14, 69, 60, 49, 46, 1, 0, 85, 12, 35, 64, 48, 65, 64, 25, 99, 13, 40, 24, 100, 12, 58, 100, 22, 99, 32, 25, 32, 97, 23, 95, 96, 10, 100, 54, 5, 80, 65, 21, 58, 5]
last_save: 102

Gen:251
last_save: 102
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.8066465256797583
TestFitness:0.8108108108108109
MaxGenLen:400
Individual: def p():
  def adf0(index):
    if np.greater(x[index],55961.52383):
      if np.equal(x[index],93472.00955):
        return False
      else:
        return False
    else:
      if np.equal(x[index],06537.84951):
        return True
      else:
        return False
  def adf1(index):
    if np.less(x[index],05801.05226):
      if np.less(x[index],05121.86538):
        return True
      else:
        return False
    else:
      if np.equal(x[index],06197.18172):
        return False
      else:
        return False
  def adf2(index):
    if np.equal(x[index],08185.42807):
      if np.equal(x[index],33059.24660):
        return True
      else:
        return True
    else:
      if np.equal(x[index],53425.59593):
        return False
      else:
        return True
  def adf3(index):
    if np.less(x[index],23405.56768):
      if np.equal(x[index],46280.19899):
        return True
      else:
        return True
    else:
      if np.less(x[index],86132.70463):
        return True
      else:
        return True
  def adf4(index):
    if np.equal(x[index],34471.11809):
      if np.greater(x[index],33846.03396):
        return True
      else:
        return True
    else:
      if np.greater(x[index],87357.70029):
        return True
      else:
        return True
  def adf5(index):
    if np.less(x[index],91699.36886):
      if np.equal(x[index],78436.03431):
        return True
      else:
        return True
    else:
      if np.less(x[index],32430.18466):
        return False
      else:
        return False
  def adf6(index):
    if np.equal(x[index],22681.91860):
      if np.equal(x[index],17716.92757):
        return True
      else:
        return False
    else:
      if np.greater(x[index],06181.89853):
        return True
      else:
        return True
  def adf7(index):
    if np.less(x[index],32907.37641):
      if np.equal(x[index],51507.47042):
        return True
      else:
        return True
    else:
      if np.less(x[index],94357.75711):
        return False
      else:
        return True
  def adf8(index):
    if np.less(x[index],19473.81868):
      if np.greater(x[index],62837.65268):
        return False
      else:
        return True
    else:
      if np.equal(x[index],25790.95452):
        return False
      else:
        return True
  return multiple_operation([adf0(0)*+23.35, adf1(1)*-84.60, adf2(2)*-19.45, adf3(3)*+38.82, adf4(4)*+21.32, adf5(5)*+10.70, adf6(6)*-71.31, adf7(7)*+29.87, adf8(8)*+96.76], 42.84)
result=p(); 0.8066465256797583
IndLenGenome:717
IndGenome:[44, 30, 78, 31, 28, 90, 79, 45, 44, 59, 66, 48, 15, 98, 57, 76, 77, 93, 33, 54, 91, 19, 10, 95, 68, 71, 76, 86, 97, 26, 91, 99, 60, 81, 50, 5, 51, 87, 90, 36, 97, 26, 11, 21, 90, 12, 40, 89, 34, 43, 3, 59, 91, 56, 48, 85, 17, 34, 47, 64, 15, 89, 2, 71, 34, 98, 67, 12, 64, 17, 85, 94, 20, 75, 53, 68, 11, 83, 68, 98, 77, 23, 47, 99, 57, 92, 31, 44, 34, 27, 51, 22, 48, 89, 82, 49, 70, 73, 59, 17, 12, 96, 94, 67, 42, 12, 60, 15, 57, 45, 82, 50, 99, 31, 51, 73, 42, 63, 68, 17, 65, 33, 50, 77, 53, 96, 97, 12, 26, 58, 65, 60, 31, 11, 86, 64, 37, 21, 45, 98, 88, 59, 57, 40, 53, 77, 51, 13, 27, 45, 41, 58, 27, 59, 85, 83, 52, 28, 48, 12, 23, 55, 55, 2, 95, 16, 60, 30, 33, 38, 87, 69, 80, 88, 80, 78, 77, 37, 45, 41, 76, 78, 26, 87, 64, 56, 97, 63, 52, 20, 16, 18, 34, 19, 29, 95, 16, 98, 91, 35, 91, 48, 35, 66, 80, 16, 68, 85, 33, 52, 51, 63, 99, 72, 24, 42, 62, 16, 18, 96, 18, 53, 38, 48, 66, 80, 40, 19, 72, 38, 48, 35, 79, 33, 41, 83, 95, 39, 96, 14, 72, 39, 60, 66, 11, 50, 62, 76, 81, 98, 74, 32, 43, 75, 13, 83, 35, 32, 85, 61, 47, 15, 65, 67, 11, 21, 15, 51, 55, 41, 72, 69, 82, 25, 81, 60, 32, 60, 90, 99, 84, 76, 98, 76, 17, 33, 40, 15, 40, 46, 51, 25, 64, 66, 29, 15, 92, 72, 43, 31, 10, 93, 34, 63, 46, 38, 84, 53, 36, 66, 90, 46, 17, 36, 58, 51, 19, 92, 87, 70, 75, 65, 20, 84, 94, 32, 16, 32, 23, 89, 56, 88, 93, 68, 63, 69, 92, 35, 76, 39, 70, 32, 85, 11, 66, 56, 96, 97, 92, 99, 53, 58, 43, 60, 41, 53, 27, 27, 60, 95, 97, 48, 40, 79, 94, 67, 72, 94, 78, 31, 19, 98, 89, 10, 30, 78, 54, 77, 40, 81, 33, 42, 82, 65, 53, 72, 21, 46, 93, 53, 27, 36, 90, 68, 34, 89, 91, 87, 56, 40, 58, 86, 62, 69, 78, 55, 79, 32, 40, 82, 88, 78, 88, 78, 28, 49, 19, 79, 14, 11, 40, 46, 30, 55, 14, 83, 29, 16, 81, 1, 23, 97, 71, 37, 78, 35, 92, 73, 30, 62, 65, 51, 46, 85, 39, 86, 33, 98, 43, 70, 97, 63, 14, 61, 14, 43, 14, 34, 36, 47, 65, 41, 38, 27, 80, 27, 70, 93, 47, 75, 46, 55, 68, 22, 29, 84, 32, 26, 32, 35, 14, 47, 12, 26, 5, 6, 68, 70, 35, 44, 81, 69, 73, 53, 26, 62, 67, 82, 94, 34, 31, 58, 19, 8, 41, 75, 32, 60, 45, 14, 63, 100, 64, 57, 71, 59, 46, 72, 54, 31, 93, 60, 8, 99, 23, 14, 96, 27, 91, 1, 25, 82, 84, 83, 35, 39, 44, 93, 81, 20, 57, 68, 97, 72, 90, 86, 6, 48, 15, 83, 38, 60, 15, 21, 54, 59, 75, 52, 34, 48, 92, 36, 14, 100, 85, 83, 17, 33, 58, 64, 55, 81, 0, 32, 4, 100, 83, 22, 66, 56, 64, 19, 12, 60, 40, 34, 59, 98, 11, 78, 13, 10, 38, 58, 46, 1, 33, 8, 100, 79, 27, 0, 53, 38, 36, 72, 84, 90, 51, 38, 45, 31, 98, 52, 92, 84, 53, 36, 39, 80, 37, 9, 8, 6, 92, 32, 21, 86, 73, 64, 88, 96, 100, 53, 35, 59, 93, 12, 90, 15, 36, 62, 15, 12, 33, 60, 14, 38, 85, 7, 96, 83, 17, 10, 64, 86, 36, 78, 80, 42, 95, 100, 40, 52, 56, 59, 6, 31, 70, 99, 52, 28, 22, 98, 100, 3, 18, 59, 60, 95, 53, 71, 28, 44, 63, 67, 63, 35, 38, 90, 27, 76, 26, 21, 5, 97, 2, 81, 86, 47, 62, 34, 2, 24, 59, 67, 26, 66, 61, 15, 92, 17, 79, 28, 30, 48, 22]
last_save: 102

Gen:251
last_save: 102
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.8042168674698795
TestFitness:0.8055555555555556
MaxGenLen:400
Individual: def p():
  def adf0(index):
    if np.equal(x[index],01299.68874):
      return True
    else:
      return False
  def adf1(index):
    if np.equal(x[index],72645.71683):
      return False
    else:
      return False
  def adf2(index):
    if np.greater(x[index],89265.67120):
      return False
    else:
      return True
  def adf3(index):
    if np.greater(x[index],54153.88219):
      return True
    else:
      return False
  def adf4(index):
    if np.equal(x[index],43783.96164):
      return False
    else:
      return True
  def adf5(index):
    if np.less(x[index],92384.96215):
      return False
    else:
      return False
  def adf6(index):
    if np.less(x[index],47795.89589):
      return True
    else:
      return True
  def adf7(index):
    if np.equal(x[index],88921.00971):
      return False
    else:
      return False
  def adf8(index):
    if np.equal(x[index],98904.00375):
      return False
    else:
      return True
  return multiple_operation([adf0(0)*-51.38, adf1(1)*+49.46, adf2(2)*+71.74, adf3(3)*-36.18, adf4(4)*+60.82, adf5(5)*+15.80, adf6(6)*-12.92, adf7(7)*+79.30, adf8(8)*+23.30], 54.19)
result=p(); 0.8042168674698795
IndLenGenome:339
IndGenome:[71, 63, 16, 33, 23, 35, 16, 45, 50, 11, 82, 71, 19, 21, 16, 96, 92, 44, 61, 85, 81, 76, 88, 14, 76, 32, 39, 31, 60, 29, 35, 40, 85, 10, 95, 64, 70, 73, 78, 55, 86, 51, 48, 14, 36, 88, 39, 50, 58, 24, 62, 84, 57, 18, 18, 77, 5, 35, 13, 62, 17, 88, 11, 41, 50, 45, 99, 6, 87, 50, 47, 37, 63, 49, 83, 58, 59, 43, 26, 73, 90, 78, 45, 50, 91, 96, 41, 39, 45, 35, 65, 54, 80, 78, 31, 51, 21, 28, 94, 30, 27, 79, 79, 31, 86, 82, 95, 15, 32, 73, 32, 99, 63, 63, 47, 37, 39, 61, 68, 54, 37, 49, 84, 69, 51, 60, 32, 86, 20, 20, 65, 20, 22, 20, 89, 80, 62, 63, 27, 76, 39, 32, 51, 76, 47, 44, 39, 60, 81, 82, 39, 43, 78, 85, 70, 36, 61, 55, 88, 32, 24, 16, 61, 32, 58, 49, 15, 24, 86, 22, 51, 49, 87, 74, 6, 46, 84, 83, 80, 85, 34, 82, 98, 80, 69, 89, 74, 78, 71, 96, 37, 18, 99, 41, 18, 85, 89, 47, 88, 87, 81, 50, 39, 22, 66, 70, 52, 39, 65, 29, 34, 66, 56, 34, 43, 39, 48, 31, 9, 83, 45, 69, 16, 96, 67, 10, 88, 38, 6, 56, 33, 93, 28, 9, 15, 95, 32, 92, 17, 16, 40, 59, 60, 94, 87, 34, 52, 4, 16, 18, 61, 35, 24, 77, 79, 64, 68, 16, 47, 54, 51, 35, 57, 93, 50, 27, 48, 33, 48, 65, 34, 53, 79, 8, 26, 93, 17, 41, 88, 32, 50, 71, 64, 74, 79, 98, 90, 52, 99, 17, 25, 90, 46, 41, 7, 82, 87, 88, 24, 49, 51, 14, 100, 0, 95, 27, 74, 85, 58, 94, 67, 27, 59, 84, 32, 66, 88, 99, 18, 36, 1, 44, 34, 32, 9, 9, 40, 87, 13, 0, 45, 53, 32, 52, 5, 2, 65, 55, 55]
last_save: 102

Gen:251
last_save: 102
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.8042168674698795
TestFitness:0.8055555555555556
MaxGenLen:400
Individual: def p():
  def adf0(index):
    if np.greater(x[index],41127.84419):
      return False
    else:
      return True
  def adf1(index):
    if np.equal(x[index],07235.52399):
      return True
    else:
      return True
  def adf2(index):
    if np.equal(x[index],21006.71107):
      return True
    else:
      return False
  def adf3(index):
    if np.less(x[index],77684.72713):
      return True
    else:
      return True
  def adf4(index):
    if np.greater(x[index],12111.66040):
      return True
    else:
      return False
  def adf5(index):
    if np.equal(x[index],05854.32509):
      return False
    else:
      return False
  def adf6(index):
    if np.less(x[index],21520.53404):
      return True
    else:
      return False
  def adf7(index):
    if np.equal(x[index],54324.17122):
      return True
    else:
      return False
  def adf8(index):
    if np.greater(x[index],42782.43292):
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+80.10, adf1(1)*-22.58, adf2(2)*+47.58, adf3(3)*+49.71, adf4(4)*-28.13, adf5(5)*+07.78, adf6(6)*+02.96, adf7(7)*+09.33, adf8(8)*-17.51], 96.74)
result=p(); 0.8042168674698795
IndLenGenome:339
IndGenome:[27, 51, 38, 40, 90, 8, 70, 65, 91, 49, 85, 25, 80, 95, 30, 54, 82, 10, 69, 51, 3, 2, 83, 29, 99, 28, 28, 44, 32, 97, 49, 4, 72, 60, 60, 51, 34, 98, 35, 96, 31, 85, 13, 31, 79, 11, 56, 22, 36, 54, 59, 36, 34, 28, 99, 66, 51, 20, 63, 56, 86, 32, 94, 7, 7, 69, 81, 22, 47, 17, 35, 57, 46, 48, 28, 46, 72, 23, 11, 48, 53, 79, 99, 35, 95, 80, 91, 34, 24, 77, 40, 35, 64, 93, 10, 52, 42, 97, 27, 71, 97, 37, 94, 96, 40, 66, 6, 64, 71, 77, 69, 30, 88, 25, 70, 23, 32, 14, 54, 39, 81, 63, 53, 80, 84, 95, 39, 89, 84, 12, 50, 40, 87, 52, 24, 65, 47, 42, 12, 68, 92, 62, 65, 55, 45, 64, 36, 58, 65, 41, 58, 70, 25, 74, 31, 60, 62, 70, 92, 92, 10, 42, 71, 53, 56, 94, 39, 52, 68, 50, 41, 48, 35, 50, 37, 55, 28, 38, 5, 91, 34, 60, 54, 97, 71, 70, 90, 72, 47, 85, 45, 87, 63, 42, 89, 43, 22, 79, 71, 93, 80, 85, 50, 93, 75, 65, 33, 7, 57, 14, 30, 17, 30, 52, 16, 70, 81, 71, 20, 27, 77, 72, 49, 61, 32, 49, 80, 42, 76, 44, 39, 35, 10, 53, 6, 7, 16, 14, 22, 54, 88, 87, 63, 91, 40, 28, 38, 54, 41, 79, 98, 24, 68, 56, 31, 47, 23, 34, 5, 69, 42, 100, 62, 46, 90, 73, 84, 28, 30, 84, 86, 6, 67, 100, 51, 11, 65, 34, 99, 67, 8, 93, 71, 70, 28, 75, 17, 81, 85, 57, 64, 19, 83, 38, 76, 32, 70, 1, 59, 28, 82, 60, 57, 36, 36, 86, 69, 97, 11, 98, 59, 52, 17, 26, 75, 24, 11, 77, 39, 70, 95, 98, 31, 40, 93, 7, 89, 66, 6, 39, 30, 81, 44, 66, 39, 49, 11, 3, 94]
last_save: 102

Gen:251
last_save: 102
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.8042168674698795
TestFitness:0.8055555555555556
MaxGenLen:400
Individual: def p():
  def adf0(index):
    if np.greater(x[index],08064.22427):
      return True
    else:
      return False
  def adf1(index):
    if np.equal(x[index],90709.12418):
      return False
    else:
      return False
  def adf2(index):
    if np.greater(x[index],43477.67119):
      return True
    else:
      return True
  def adf3(index):
    if np.equal(x[index],97558.26410):
      return True
    else:
      return True
  def adf4(index):
    if np.equal(x[index],03330.38047):
      return True
    else:
      return False
  def adf5(index):
    if np.greater(x[index],05064.06488):
      return True
    else:
      return True
  def adf6(index):
    if np.less(x[index],28128.52080):
      return False
    else:
      return True
  def adf7(index):
    if np.less(x[index],46704.28617):
      return True
    else:
      return False
  def adf8(index):
    if np.less(x[index],72277.34657):
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-92.62, adf1(1)*+53.57, adf2(2)*-19.01, adf3(3)*-73.45, adf4(4)*-50.37, adf5(5)*+66.25, adf6(6)*+85.81, adf7(7)*+82.23, adf8(8)*+97.21], 41.45)
result=p(); 0.8042168674698795
IndLenGenome:339
IndGenome:[93, 11, 96, 88, 85, 64, 7, 5, 10, 45, 22, 14, 17, 60, 34, 52, 45, 93, 50, 11, 80, 72, 11, 99, 29, 43, 48, 63, 70, 2, 10, 63, 60, 73, 70, 21, 1, 55, 39, 92, 10, 74, 33, 44, 68, 22, 50, 40, 99, 88, 77, 62, 42, 6, 83, 70, 70, 19, 80, 29, 99, 32, 67, 48, 74, 39, 96, 65, 18, 2, 70, 95, 48, 66, 38, 30, 74, 28, 13, 43, 30, 24, 35, 98, 88, 70, 1, 14, 21, 35, 72, 36, 91, 27, 28, 40, 52, 15, 45, 26, 30, 52, 82, 57, 24, 84, 87, 46, 72, 66, 57, 36, 98, 23, 84, 61, 53, 5, 75, 2, 70, 85, 99, 95, 61, 95, 27, 76, 54, 90, 35, 80, 86, 5, 47, 89, 92, 26, 26, 46, 30, 31, 22, 81, 79, 38, 64, 72, 55, 32, 40, 68, 33, 10, 13, 60, 33, 41, 51, 79, 55, 59, 72, 72, 60, 28, 45, 52, 57, 48, 62, 90, 40, 97, 50, 37, 54, 95, 63, 11, 78, 41, 94, 88, 65, 99, 63, 46, 70, 10, 7, 54, 20, 94, 87, 92, 37, 47, 62, 74, 18, 14, 96, 12, 41, 98, 67, 32, 32, 63, 23, 93, 34, 29, 86, 37, 91, 66, 71, 37, 47, 34, 76, 67, 51, 21, 34, 56, 75, 1, 82, 50, 13, 61, 55, 62, 65, 19, 41, 21, 39, 38, 82, 33, 65, 53, 35, 13, 54, 48, 3, 50, 87, 91, 51, 76, 95, 3, 64, 72, 61, 52, 29, 66, 53, 19, 14, 16, 93, 15, 24, 72, 21, 67, 38, 66, 54, 26, 4, 49, 89, 11, 80, 43, 43, 18, 21, 72, 29, 25, 56, 36, 92, 32, 66, 20, 32, 84, 34, 86, 46, 50, 66, 51, 26, 71, 33, 49, 50, 20, 90, 96, 99, 42, 52, 17, 68, 97, 76, 63, 78, 62, 59, 68, 4, 62, 60, 69, 23, 11, 79, 6, 99, 16, 71, 100, 71, 27, 54]
last_save: 102

Gen:251
last_save: 102
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.8042168674698795
TestFitness:0.8055555555555556
MaxGenLen:400
Individual: def p():
  def adf0(index):
    if np.greater(x[index],32750.42128):
      return False
    else:
      return False
  def adf1(index):
    if np.greater(x[index],84932.32119):
      return False
    else:
      return False
  def adf2(index):
    if np.greater(x[index],01047.90621):
      return True
    else:
      return True
  def adf3(index):
    if np.greater(x[index],97514.82062):
      return True
    else:
      return False
  def adf4(index):
    if np.greater(x[index],90388.05250):
      return True
    else:
      return False
  def adf5(index):
    if np.equal(x[index],19484.66103):
      return True
    else:
      return False
  def adf6(index):
    if np.less(x[index],64601.04559):
      return False
    else:
      return False
  def adf7(index):
    if np.greater(x[index],99222.95418):
      return False
    else:
      return False
  def adf8(index):
    if np.equal(x[index],95064.88705):
      return False
    else:
      return True
  return multiple_operation([adf0(0)*-73.11, adf1(1)*-12.30, adf2(2)*+89.59, adf3(3)*+26.96, adf4(4)*+42.41, adf5(5)*-33.74, adf6(6)*+70.91, adf7(7)*-94.67, adf8(8)*+41.74], 50.28)
result=p(); 0.8042168674698795
IndLenGenome:339
IndGenome:[65, 73, 90, 28, 55, 50, 14, 55, 31, 93, 87, 70, 63, 32, 78, 18, 15, 59, 90, 95, 17, 22, 43, 49, 30, 55, 16, 39, 81, 70, 88, 30, 51, 15, 86, 49, 84, 20, 29, 88, 2, 22, 16, 11, 35, 84, 51, 80, 33, 63, 75, 92, 40, 41, 85, 84, 65, 44, 10, 15, 4, 20, 86, 92, 98, 89, 46, 18, 68, 11, 49, 48, 71, 59, 30, 45, 19, 56, 17, 48, 70, 9, 21, 94, 35, 82, 76, 44, 88, 49, 79, 59, 55, 37, 67, 12, 62, 84, 43, 31, 96, 57, 69, 23, 73, 99, 75, 60, 31, 39, 93, 28, 90, 94, 91, 69, 65, 54, 76, 70, 84, 60, 72, 87, 26, 23, 52, 51, 69, 14, 59, 99, 68, 66, 47, 52, 73, 95, 50, 59, 71, 74, 15, 94, 75, 32, 94, 91, 65, 27, 14, 30, 52, 33, 9, 67, 44, 52, 29, 23, 92, 74, 78, 88, 87, 76, 13, 61, 36, 99, 84, 99, 76, 31, 56, 38, 29, 95, 54, 51, 18, 20, 10, 51, 84, 41, 16, 58, 44, 89, 43, 28, 97, 21, 19, 72, 44, 72, 75, 50, 21, 87, 31, 54, 20, 89, 94, 42, 55, 81, 85, 12, 48, 46, 80, 37, 65, 19, 12, 35, 53, 80, 98, 10, 90, 88, 63, 67, 54, 89, 36, 70, 38, 17, 16, 80, 91, 63, 23, 35, 50, 59, 14, 44, 41, 1, 52, 20, 74, 96, 57, 9, 50, 97, 73, 42, 12, 38, 25, 24, 93, 25, 64, 91, 31, 50, 57, 96, 40, 59, 71, 78, 26, 68, 44, 25, 47, 59, 90, 44, 45, 47, 86, 66, 65, 7, 65, 35, 52, 86, 97, 72, 83, 43, 43, 48, 73, 10, 53, 92, 87, 96, 61, 60, 40, 25, 100, 96, 2, 86, 39, 97, 77, 40, 76, 64, 95, 70, 21, 34, 16, 84, 76, 82, 63, 73, 36, 100, 40, 77, 20, 16, 31, 54, 46, 48, 87, 49, 31]
last_save: 102

Gen:251
last_save: 102
Exit:FalseFalseTrue