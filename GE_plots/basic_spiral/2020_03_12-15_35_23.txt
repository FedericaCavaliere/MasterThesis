Dataset:Spiral/new_Full.csv
FS:False
Seed:1234
Size:7

Gen:1
TrainFitness:0.8057324840764332
TestFitness:0.7962962962962963
MaxGenLen:400
Individual: def p():
  def adf0(index):
    if np.less(x[index],37037.76823):
      return True
    else:
      return False
  def adf1(index):
    if np.less(x[index],73961.61807):
      return True
    else:
      return True
  def adf2(index):
    if np.greater(x[index],82067.40904):
      return False
    else:
      return True
  def adf3(index):
    if np.equal(x[index],56083.13996):
      return False
    else:
      return False
  def adf4(index):
    if np.greater(x[index],32185.12568):
      return False
    else:
      return True
  def adf5(index):
    if np.greater(x[index],85336.52797):
      return False
    else:
      return True
  def adf6(index):
    if np.less(x[index],26837.18984):
      return False
    else:
      return True
  def adf7(index):
    if np.less(x[index],21947.43365):
      return False
    else:
      return True
  def adf8(index):
    if np.greater(x[index],10772.30184):
      return True
    else:
      return True
  return multiple_operation([adf0(0)*-29.91, adf1(1)*+24.30, adf2(2)*+71.26, adf3(3)*-67.56, adf4(4)*+15.47, adf5(5)*+00.80, adf6(6)*-62.34, adf7(7)*+73.80, adf8(8)*+51.28], 68.01)
result=p(); 0.8057324840764332
IndLenGenome:339
IndGenome:[39, 90, 58, 63, 44, 2, 1, 95, 40, 17, 73, 6, 80, 96, 10, 18, 95, 58, 25, 78, 96, 31, 42, 1, 80, 15, 90, 73, 97, 58, 79, 83, 22, 71, 39, 31, 17, 54, 69, 8, 91, 57, 9, 20, 25, 51, 4, 67, 44, 59, 38, 70, 45, 88, 30, 10, 91, 30, 52, 57, 66, 90, 57, 40, 61, 92, 59, 92, 20, 50, 63, 87, 59, 87, 83, 33, 70, 85, 26, 19, 64, 10, 17, 65, 26, 10, 15, 31, 62, 51, 51, 44, 99, 15, 43, 95, 18, 83, 67, 38, 83, 87, 40, 82, 81, 97, 22, 28, 76, 25, 24, 58, 91, 71, 40, 42, 18, 56, 80, 32, 78, 23, 98, 18, 74, 14, 12, 20, 87, 18, 90, 89, 41, 71, 88, 53, 66, 71, 89, 47, 81, 37, 26, 20, 75, 72, 87, 52, 41, 16, 47, 81, 82, 96, 41, 22, 95, 23, 43, 78, 29, 95, 73, 42, 15, 96, 39, 62, 19, 89, 47, 12, 14, 62, 63, 14, 37, 17, 93, 63, 45, 40, 57, 46, 49, 32, 90, 30, 90, 12, 20, 69, 8, 46, 48, 24, 38, 83, 57, 43, 15, 50, 59, 69, 69, 82, 33, 35, 27, 11, 94, 95, 96, 63, 46, 63, 88, 84, 52, 46, 51, 81, 18, 77, 26, 98, 29, 15, 0, 100, 86, 36, 81, 83, 77, 31, 84, 72, 59, 65, 24, 69, 15, 35, 18, 37, 68, 33, 87, 6, 76, 21, 57, 99, 26, 90, 13, 60, 97, 4, 54, 2, 22, 47, 38, 36, 82, 12, 91, 88, 42, 84, 52, 93, 69, 92, 2, 27, 18, 28, 73, 50, 71, 26, 15, 0, 83, 57, 60, 73, 95, 61, 97, 88, 5, 71, 75, 20, 5, 7, 65, 64, 22, 9, 96, 25, 87, 84, 75, 2, 72, 61, 29, 46, 45, 33, 0, 44, 58, 86, 37, 93, 14, 16, 29, 62, 21, 12, 46, 98, 19, 83, 45, 58, 21, 7, 72, 49, 63]
last_save: 70

Gen:251
last_save: 70
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.8057324840764332
TestFitness:0.7962962962962963
MaxGenLen:400
Individual: def p():
  def adf0(index):
    if np.greater(x[index],76392.91687):
      return True
    else:
      return True
  def adf1(index):
    if np.less(x[index],03768.60046):
      return False
    else:
      return True
  def adf2(index):
    if np.equal(x[index],30928.85075):
      return True
    else:
      return False
  def adf3(index):
    if np.greater(x[index],58001.26265):
      return True
    else:
      return True
  def adf4(index):
    if np.equal(x[index],62590.61889):
      return True
    else:
      return False
  def adf5(index):
    if np.greater(x[index],62096.58502):
      return True
    else:
      return False
  def adf6(index):
    if np.less(x[index],59422.60817):
      return False
    else:
      return True
  def adf7(index):
    if np.equal(x[index],80846.13957):
      return True
    else:
      return True
  def adf8(index):
    if np.less(x[index],69432.33731):
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+27.42, adf1(1)*+92.31, adf2(2)*-82.24, adf3(3)*+39.40, adf4(4)*+66.90, adf5(5)*-58.26, adf6(6)*-49.52, adf7(7)*+82.23, adf8(8)*-08.26], 04.37)
result=p(); 0.8057324840764332
IndLenGenome:339
IndGenome:[45, 68, 59, 14, 24, 95, 1, 50, 76, 3, 26, 40, 25, 83, 45, 35, 53, 55, 49, 36, 16, 28, 37, 20, 68, 12, 39, 42, 24, 34, 30, 25, 3, 66, 14, 99, 64, 24, 31, 55, 32, 5, 65, 69, 42, 6, 89, 77, 75, 87, 45, 84, 85, 14, 19, 24, 45, 75, 81, 14, 95, 49, 23, 76, 88, 50, 33, 32, 10, 10, 38, 69, 66, 21, 86, 26, 26, 15, 28, 42, 44, 4, 36, 20, 33, 7, 67, 67, 83, 89, 13, 24, 96, 13, 64, 4, 59, 47, 72, 3, 32, 51, 13, 56, 76, 14, 63, 24, 98, 25, 23, 21, 90, 41, 85, 84, 96, 12, 14, 24, 12, 63, 56, 56, 65, 60, 21, 52, 92, 75, 14, 80, 25, 58, 36, 32, 57, 45, 67, 12, 53, 84, 40, 45, 91, 81, 19, 12, 75, 13, 96, 38, 38, 7, 74, 93, 99, 12, 18, 55, 31, 80, 72, 18, 22, 29, 79, 59, 30, 50, 76, 20, 35, 38, 72, 32, 60, 60, 37, 29, 27, 98, 73, 35, 56, 82, 95, 94, 59, 50, 72, 90, 23, 56, 95, 43, 35, 12, 56, 64, 38, 88, 89, 56, 38, 30, 76, 17, 27, 80, 10, 57, 70, 24, 95, 26, 89, 52, 51, 86, 67, 49, 83, 58, 77, 14, 82, 38, 93, 64, 58, 46, 35, 50, 66, 49, 39, 15, 8, 79, 70, 10, 57, 86, 10, 97, 62, 42, 9, 18, 30, 91, 0, 60, 21, 99, 44, 16, 39, 94, 36, 14, 58, 37, 33, 61, 89, 81, 44, 28, 60, 64, 98, 60, 80, 76, 74, 53, 87, 74, 46, 48, 78, 17, 54, 34, 46, 22, 95, 84, 48, 4, 37, 35, 75, 87, 58, 70, 4, 32, 50, 15, 3, 89, 89, 43, 41, 45, 57, 16, 38, 79, 0, 20, 14, 86, 54, 48, 28, 88, 91, 57, 64, 23, 50, 72, 55, 37, 71, 45, 48, 50, 50, 85, 28, 40, 66, 36, 58]
last_save: 70

Gen:251
last_save: 70
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.8037974683544303
TestFitness:0.8076923076923077
MaxGenLen:400
Individual: def p():
  def adf0(index):
    if np.less(x[index],05727.72707):
      return False
    else:
      return False
  def adf1(index):
    if np.less(x[index],82485.78425):
      return False
    else:
      return True
  def adf2(index):
    if np.equal(x[index],87812.36953):
      return True
    else:
      return True
  def adf3(index):
    if np.equal(x[index],41215.90524):
      return False
    else:
      return True
  def adf4(index):
    if np.greater(x[index],65256.29598):
      return False
    else:
      return True
  def adf5(index):
    if np.greater(x[index],70452.89460):
      return True
    else:
      return True
  def adf6(index):
    if np.equal(x[index],79875.86135):
      return False
    else:
      return True
  def adf7(index):
    if np.greater(x[index],43590.72782):
      return False
    else:
      return True
  def adf8(index):
    if np.greater(x[index],31936.89543):
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+10.91, adf1(1)*-70.56, adf2(2)*-43.75, adf3(3)*+18.92, adf4(4)*-09.47, adf5(5)*-17.39, adf6(6)*+75.29, adf7(7)*+10.27, adf8(8)*+72.73], 32.60)
result=p(); 0.8037974683544303
IndLenGenome:339
IndGenome:[1, 52, 53, 31, 19, 51, 97, 10, 41, 18, 94, 79, 15, 60, 48, 50, 77, 6, 56, 80, 60, 79, 55, 13, 17, 36, 10, 83, 23, 54, 12, 20, 30, 33, 87, 42, 78, 78, 22, 44, 64, 12, 19, 55, 53, 78, 53, 23, 23, 75, 95, 21, 8, 57, 71, 40, 17, 93, 16, 94, 32, 52, 27, 75, 44, 95, 65, 4, 36, 81, 2, 6, 28, 54, 64, 50, 69, 82, 82, 81, 76, 56, 72, 58, 56, 41, 35, 52, 51, 79, 87, 69, 31, 49, 68, 67, 56, 21, 33, 84, 52, 85, 50, 40, 25, 98, 71, 31, 47, 6, 33, 20, 68, 62, 37, 51, 55, 50, 56, 25, 55, 37, 52, 92, 90, 94, 92, 79, 17, 88, 54, 53, 41, 30, 78, 19, 95, 75, 61, 83, 23, 67, 19, 45, 21, 74, 17, 89, 68, 85, 83, 87, 21, 75, 15, 12, 29, 39, 57, 22, 32, 55, 92, 29, 37, 15, 55, 69, 76, 64, 14, 34, 96, 24, 28, 52, 92, 65, 79, 15, 67, 40, 82, 58, 77, 26, 18, 51, 92, 53, 3, 32, 93, 19, 96, 17, 20, 31, 43, 55, 47, 38, 22, 53, 97, 36, 89, 55, 85, 58, 52, 57, 31, 32, 67, 34, 14, 49, 38, 36, 99, 75, 66, 80, 50, 17, 23, 44, 62, 49, 46, 44, 99, 7, 70, 80, 19, 86, 10, 81, 22, 48, 52, 30, 45, 70, 50, 74, 51, 36, 24, 60, 45, 90, 80, 97, 73, 67, 83, 62, 33, 90, 45, 100, 23, 94, 82, 10, 2, 50, 3, 2, 47, 62, 9, 71, 84, 46, 17, 0, 89, 46, 12, 56, 0, 19, 17, 59, 82, 74, 35, 96, 11, 4, 99, 39, 43, 1, 24, 60, 8, 78, 2, 72, 44, 5, 91, 28, 36, 44, 11, 92, 25, 39, 22, 92, 97, 0, 31, 88, 90, 55, 5, 86, 65, 14, 52, 31, 18, 96, 11, 7, 69, 54, 32, 17, 93, 75, 63]
last_save: 70

Gen:250
TrainFitness:0.810126582278481
TestFitness:0.8076923076923077
MaxGenLen:460
Individual: def p():
  def adf0(index):
    if np.equal(x[index],78952.66738):
      return True
    else:
      return False
  def adf1(index):
    if np.less(x[index],04976.30156):
      return True
    else:
      return False
  def adf2(index):
    if np.greater(x[index],56977.69088):
      return True
    else:
      return False
  def adf3(index):
    if np.less(x[index],15416.86490):
      return True
    else:
      return False
  def adf4(index):
    if np.greater(x[index],56491.44394):
      return False
    else:
      return True
  def adf5(index):
    if np.less(x[index],90804.60625):
      return True
    else:
      return False
  def adf6(index):
    if np.less(x[index],01604.46182):
      return True
    else:
      return True
  def adf7(index):
    if np.equal(x[index],92064.26957):
      if np.equal(x[index],64440.10735):
        return False
      else:
        return True
    else:
      if np.less(x[index],56088.73810):
        return True
      else:
        return False
  def adf8(index):
    if np.equal(x[index],21370.07590):
      return True
    else:
      return True
  return multiple_operation([adf0(0)*-73.97, adf1(1)*-95.89, adf2(2)*-22.06, adf3(3)*-69.50, adf4(4)*+64.26, adf5(5)*+45.78, adf6(6)*-03.63, adf7(7)*-15.44, adf8(8)*+93.22], 42.64)
result=p(); 0.810126582278481
IndLenGenome:337
IndGenome:[83, 34, 91, 95, 71, 26, 44, 57, 68, 59, 85, 92, 16, 76, 37, 43, 78, 52, 75, 30, 10, 55, 4, 90, 60, 24, 29, 97, 46, 3, 100, 61, 5, 56, 2, 31, 30, 45, 59, 51, 39, 35, 76, 69, 27, 67, 66, 49, 90, 88, 78, 48, 75, 30, 10, 59, 4, 77, 11, 55, 14, 61, 46, 28, 56, 4, 19, 20, 24, 97, 42, 45, 59, 51, 39, 35, 76, 54, 49, 61, 64, 34, 23, 69, 54, 47, 34, 45, 65, 4, 67, 52, 29, 80, 88, 60, 34, 66, 30, 86, 82, 75, 84, 59, 54, 0, 73, 16, 73, 90, 41, 76, 70, 94, 64, 16, 41, 38, 32, 78, 28, 1, 11, 9, 83, 75, 89, 62, 80, 16, 14, 12, 46, 79, 35, 87, 84, 11, 5, 16, 54, 34, 24, 50, 11, 50, 87, 13, 45, 11, 100, 26, 4, 69, 75, 6, 50, 68, 48, 67, 93, 58, 71, 30, 88, 73, 39, 60, 90, 74, 3, 72, 21, 83, 37, 30, 20, 97, 95, 69, 50, 10, 58, 38, 65, 5, 45, 20, 77, 83, 39, 57, 54, 85, 45, 69, 95, 28, 19, 50, 15, 82, 82, 72, 90, 26, 14, 59, 30, 16, 69, 45, 90, 77, 38, 58, 16, 14, 12, 46, 79, 78, 58, 94, 85, 57, 28, 75, 65, 92, 70, 23, 66, 43, 57, 85, 5, 21, 75, 64, 74, 83, 68, 98, 69, 23, 22, 12, 77, 84, 22, 36, 64, 36, 57, 74, 44, 95, 51, 10, 36, 96, 61, 23, 22, 69, 58, 99, 32, 88, 73, 39, 65, 65, 96, 29, 79, 57, 10, 5, 84, 69, 21, 30, 37, 30, 86, 21, 95, 90, 28, 73, 86, 41, 97, 41, 38, 24, 44, 50, 1, 77, 9, 31, 39, 63, 76, 24, 29, 50, 24, 71, 97, 55, 32, 40, 32, 82, 90, 56, 15, 67, 40, 100, 19, 47, 97, 4, 32, 40, 29, 67, 15, 11, 30, 16, 76]
last_save: 70

Gen:500
last_save: 70
Exit:FalseTrueTrue

Gen:1
TrainFitness:0.8037974683544303
TestFitness:0.8076923076923077
MaxGenLen:400
Individual: def p():
  def adf0(index):
    if np.greater(x[index],47321.79912):
      return False
    else:
      return False
  def adf1(index):
    if np.less(x[index],02467.36310):
      return False
    else:
      return False
  def adf2(index):
    if np.greater(x[index],89721.46269):
      return False
    else:
      return False
  def adf3(index):
    if np.less(x[index],78939.61062):
      return False
    else:
      return True
  def adf4(index):
    if np.equal(x[index],26319.03652):
      return False
    else:
      return False
  def adf5(index):
    if np.greater(x[index],37301.53943):
      return False
    else:
      return True
  def adf6(index):
    if np.less(x[index],07574.79707):
      return False
    else:
      return False
  def adf7(index):
    if np.greater(x[index],32197.40804):
      return True
    else:
      return False
  def adf8(index):
    if np.equal(x[index],58331.55415):
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+95.74, adf1(1)*+38.64, adf2(2)*+62.52, adf3(3)*+54.51, adf4(4)*+30.53, adf5(5)*+87.53, adf6(6)*+65.65, adf7(7)*+86.55, adf8(8)*-76.46], 55.06)
result=p(); 0.8037974683544303
IndLenGenome:339
IndGenome:[62, 87, 19, 7, 44, 6, 33, 61, 98, 70, 98, 15, 15, 75, 70, 67, 65, 90, 3, 11, 28, 41, 96, 71, 91, 35, 9, 69, 3, 76, 35, 28, 83, 66, 58, 21, 41, 17, 60, 6, 45, 99, 40, 92, 74, 93, 10, 60, 88, 31, 73, 20, 30, 60, 75, 68, 89, 45, 8, 35, 40, 78, 12, 88, 84, 50, 53, 76, 32, 85, 49, 77, 76, 55, 75, 14, 67, 62, 46, 66, 33, 83, 16, 18, 57, 10, 38, 15, 79, 29, 92, 71, 31, 49, 46, 46, 53, 85, 39, 17, 31, 16, 36, 75, 64, 43, 45, 68, 92, 47, 10, 34, 58, 75, 79, 19, 22, 54, 79, 39, 36, 40, 25, 37, 90, 38, 49, 37, 23, 13, 16, 53, 10, 85, 53, 15, 13, 30, 11, 95, 23, 42, 31, 79, 62, 84, 27, 39, 97, 89, 32, 69, 53, 25, 33, 46, 26, 54, 97, 96, 27, 54, 87, 66, 73, 88, 78, 50, 35, 12, 66, 65, 47, 89, 29, 72, 91, 71, 26, 10, 85, 90, 17, 66, 90, 91, 56, 11, 13, 63, 85, 13, 67, 96, 19, 38, 99, 46, 37, 36, 73, 56, 46, 15, 15, 55, 81, 77, 53, 94, 96, 91, 21, 23, 14, 60, 34, 16, 84, 31, 97, 44, 62, 20, 85, 43, 66, 17, 12, 77, 68, 50, 1, 95, 81, 0, 25, 10, 14, 52, 4, 24, 90, 80, 47, 50, 96, 21, 11, 27, 84, 74, 25, 53, 43, 14, 34, 11, 64, 72, 5, 86, 85, 55, 16, 52, 88, 70, 90, 94, 81, 77, 25, 54, 6, 32, 44, 36, 8, 36, 74, 69, 58, 38, 56, 25, 56, 82, 39, 26, 5, 16, 50, 53, 80, 78, 55, 13, 78, 92, 50, 7, 10, 36, 68, 24, 16, 24, 42, 29, 80, 88, 59, 5, 3, 8, 59, 26, 10, 5, 65, 40, 45, 49, 13, 100, 54, 40, 6, 16, 38, 61, 71, 39, 87, 30, 1, 49, 84]
last_save: 70

Gen:251
last_save: 70
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.8037974683544303
TestFitness:0.8076923076923077
MaxGenLen:400
Individual: def p():
  def adf0(index):
    if np.equal(x[index],42632.17516):
      return True
    else:
      return True
  def adf1(index):
    if np.equal(x[index],57436.09715):
      return False
    else:
      return False
  def adf2(index):
    if np.less(x[index],85888.22959):
      return True
    else:
      return False
  def adf3(index):
    if np.equal(x[index],67436.70946):
      return False
    else:
      return False
  def adf4(index):
    if np.less(x[index],97692.29482):
      return False
    else:
      return False
  def adf5(index):
    if np.equal(x[index],01347.40765):
      return False
    else:
      return True
  def adf6(index):
    if np.equal(x[index],19073.39447):
      return False
    else:
      return True
  def adf7(index):
    if np.equal(x[index],24520.93056):
      return True
    else:
      return True
  def adf8(index):
    if np.greater(x[index],50670.11252):
      return False
    else:
      return False
  return multiple_operation([adf0(0)*-39.61, adf1(1)*-10.37, adf2(2)*+12.06, adf3(3)*-72.55, adf4(4)*-17.61, adf5(5)*+27.43, adf6(6)*+12.45, adf7(7)*+63.55, adf8(8)*+22.59], 66.35)
result=p(); 0.8037974683544303
IndLenGenome:339
IndGenome:[43, 30, 60, 73, 1, 50, 38, 97, 85, 89, 82, 76, 1, 73, 89, 66, 40, 76, 51, 45, 87, 51, 66, 52, 27, 79, 91, 92, 31, 42, 71, 37, 16, 91, 83, 16, 50, 20, 51, 86, 84, 55, 1, 39, 3, 83, 7, 35, 26, 51, 50, 99, 80, 83, 17, 72, 18, 87, 38, 77, 9, 58, 95, 95, 92, 36, 45, 88, 35, 44, 58, 77, 6, 69, 85, 41, 90, 60, 39, 101, 78, 6, 62, 39, 75, 57, 72, 61, 71, 54, 46, 47, 94, 60, 67, 83, 83, 97, 45, 72, 83, 55, 90, 91, 24, 55, 97, 16, 49, 76, 82, 94, 68, 53, 80, 56, 27, 14, 25, 37, 58, 62, 95, 62, 47, 33, 50, 5, 85, 24, 39, 93, 38, 76, 96, 74, 55, 86, 47, 45, 51, 86, 91, 93, 62, 8, 52, 39, 50, 12, 90, 42, 75, 41, 10, 19, 77, 45, 39, 45, 8, 10, 47, 86, 86, 59, 79, 57, 93, 53, 54, 60, 27, 44, 31, 23, 86, 45, 55, 89, 27, 32, 90, 32, 90, 62, 37, 69, 87, 54, 40, 84, 43, 69, 45, 29, 31, 51, 55, 32, 49, 58, 17, 21, 96, 52, 44, 92, 57, 12, 24, 56, 52, 95, 46, 21, 81, 54, 92, 49, 43, 17, 22, 85, 60, 10, 20, 15, 92, 95, 81, 30, 34, 90, 3, 51, 92, 41, 7, 6, 39, 93, 87, 20, 31, 7, 24, 25, 36, 46, 65, 87, 63, 84, 87, 78, 63, 76, 55, 80, 43, 42, 17, 41, 17, 2, 4, 8, 98, 40, 56, 56, 59, 39, 44, 58, 41, 94, 49, 61, 30, 41, 61, 61, 99, 29, 46, 29, 52, 70, 42, 90, 83, 28, 49, 12, 80, 25, 49, 65, 54, 91, 49, 21, 82, 29, 17, 29, 58, 4, 63, 18, 5, 85, 77, 56, 88, 14, 88, 62, 64, 25, 25, 20, 21, 19, 18, 79, 19, 24, 13, 79, 88, 8, 95, 28, 87, 47, 90]
last_save: 70

Gen:251
last_save: 70
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.8037974683544303
TestFitness:0.8076923076923077
MaxGenLen:400
Individual: def p():
  def adf0(index):
    if np.less(x[index],38479.04888):
      return False
    else:
      return False
  def adf1(index):
    if np.equal(x[index],95440.23500):
      return False
    else:
      return False
  def adf2(index):
    if np.equal(x[index],34799.01426):
      return False
    else:
      return True
  def adf3(index):
    if np.greater(x[index],43929.44155):
      return False
    else:
      return False
  def adf4(index):
    if np.less(x[index],37959.94358):
      return False
    else:
      return True
  def adf5(index):
    if np.greater(x[index],47237.68168):
      return False
    else:
      return False
  def adf6(index):
    if np.greater(x[index],88414.50999):
      return True
    else:
      return False
  def adf7(index):
    if np.greater(x[index],32671.71132):
      return True
    else:
      return False
  def adf8(index):
    if np.greater(x[index],26437.54878):
      return True
    else:
      return True
  return multiple_operation([adf0(0)*-42.30, adf1(1)*-61.51, adf2(2)*-14.01, adf3(3)*+02.44, adf4(4)*+16.88, adf5(5)*-72.13, adf6(6)*+24.12, adf7(7)*-15.64, adf8(8)*+91.27], 56.30)
result=p(); 0.8037974683544303
IndLenGenome:339
IndGenome:[38, 15, 7, 72, 10, 43, 96, 13, 61, 97, 5, 60, 60, 7, 33, 94, 90, 50, 12, 38, 95, 72, 23, 54, 35, 81, 14, 91, 24, 94, 37, 23, 34, 66, 35, 37, 19, 67, 97, 21, 60, 17, 59, 11, 33, 19, 40, 28, 10, 57, 90, 70, 29, 3, 90, 12, 84, 2, 50, 96, 69, 17, 75, 26, 54, 45, 47, 19, 62, 93, 39, 52, 86, 75, 38, 11, 55, 24, 18, 93, 81, 80, 90, 44, 63, 26, 41, 64, 53, 91, 67, 64, 22, 54, 46, 82, 69, 35, 44, 81, 17, 80, 69, 80, 67, 73, 20, 96, 61, 14, 66, 78, 57, 13, 96, 66, 57, 29, 25, 45, 81, 89, 25, 60, 88, 96, 31, 62, 68, 75, 81, 69, 19, 46, 40, 11, 26, 55, 87, 78, 94, 74, 35, 29, 34, 12, 28, 52, 85, 55, 69, 26, 48, 1, 52, 44, 16, 21, 26, 42, 73, 87, 35, 91, 60, 88, 63, 25, 17, 59, 67, 62, 99, 78, 18, 50, 60, 94, 87, 37, 41, 89, 18, 12, 16, 42, 39, 79, 64, 94, 53, 44, 30, 84, 45, 2, 38, 51, 54, 47, 23, 74, 99, 43, 39, 79, 37, 95, 23, 35, 78, 28, 43, 93, 22, 22, 19, 87, 87, 81, 83, 56, 62, 64, 51, 81, 70, 35, 6, 83, 14, 95, 44, 48, 36, 24, 97, 60, 78, 22, 44, 32, 60, 46, 37, 24, 74, 5, 45, 62, 49, 77, 30, 6, 82, 41, 35, 56, 16, 46, 45, 64, 75, 25, 49, 71, 82, 85, 99, 0, 36, 94, 47, 54, 38, 68, 11, 24, 44, 28, 74, 36, 21, 51, 9, 17, 24, 58, 90, 91, 52, 91, 75, 82, 45, 62, 99, 42, 43, 35, 10, 93, 77, 41, 25, 62, 22, 32, 69, 97, 62, 1, 87, 79, 28, 36, 44, 64, 17, 14, 27, 82, 17, 45, 51, 37, 35, 5, 49, 23, 99, 35, 47, 26, 72, 26, 20, 10, 8]
last_save: 70

Gen:251
last_save: 70
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.8037974683544303
TestFitness:0.8076923076923077
MaxGenLen:400
Individual: def p():
  def adf0(index):
    if np.greater(x[index],81088.18088):
      return True
    else:
      return True
  def adf1(index):
    if np.equal(x[index],60458.89931):
      return True
    else:
      return False
  def adf2(index):
    if np.greater(x[index],63298.12238):
      return False
    else:
      return True
  def adf3(index):
    if np.less(x[index],68176.93898):
      return True
    else:
      return True
  def adf4(index):
    if np.less(x[index],19736.95173):
      return True
    else:
      return False
  def adf5(index):
    if np.greater(x[index],75330.29276):
      return True
    else:
      return True
  def adf6(index):
    if np.greater(x[index],02608.88692):
      return True
    else:
      return False
  def adf7(index):
    if np.less(x[index],28187.86130):
      return False
    else:
      return False
  def adf8(index):
    if np.less(x[index],62744.49281):
      return False
    else:
      return True
  return multiple_operation([adf0(0)*-66.38, adf1(1)*+23.31, adf2(2)*-26.86, adf3(3)*+44.66, adf4(4)*+33.42, adf5(5)*+64.87, adf6(6)*+96.42, adf7(7)*+38.71, adf8(8)*+37.26], 07.19)
result=p(); 0.8037974683544303
IndLenGenome:339
IndGenome:[53, 24, 35, 11, 76, 53, 45, 90, 10, 38, 65, 20, 63, 10, 55, 24, 27, 60, 47, 18, 55, 84, 76, 94, 72, 89, 71, 93, 18, 75, 82, 2, 55, 36, 57, 28, 83, 23, 51, 8, 41, 16, 15, 43, 32, 83, 30, 52, 58, 72, 20, 68, 31, 50, 72, 76, 47, 47, 85, 77, 83, 76, 91, 44, 42, 66, 86, 99, 12, 52, 89, 19, 60, 28, 39, 45, 38, 36, 11, 57, 75, 73, 88, 74, 30, 26, 60, 49, 96, 15, 16, 53, 15, 44, 15, 61, 37, 22, 40, 49, 52, 49, 45, 46, 93, 22, 89, 98, 76, 63, 12, 82, 43, 22, 41, 16, 16, 70, 49, 41, 19, 24, 94, 70, 54, 88, 4, 91, 21, 93, 98, 64, 23, 66, 96, 87, 98, 69, 87, 37, 36, 33, 88, 36, 96, 23, 6, 37, 28, 89, 78, 54, 53, 40, 38, 34, 42, 38, 67, 79, 81, 86, 4, 87, 34, 63, 43, 88, 28, 44, 82, 69, 66, 24, 88, 43, 92, 71, 83, 67, 40, 39, 90, 62, 70, 10, 47, 42, 72, 27, 74, 76, 51, 67, 28, 31, 32, 18, 18, 98, 88, 38, 5, 21, 36, 52, 41, 52, 54, 13, 37, 73, 76, 41, 78, 44, 22, 62, 91, 48, 93, 94, 76, 16, 84, 13, 96, 76, 15, 19, 31, 66, 6, 56, 19, 47, 16, 22, 64, 11, 9, 30, 82, 0, 55, 92, 48, 7, 36, 30, 39, 93, 57, 79, 76, 4, 76, 68, 75, 44, 79, 81, 37, 33, 76, 54, 52, 32, 98, 53, 20, 90, 97, 61, 40, 15, 98, 75, 96, 45, 92, 30, 83, 5, 28, 12, 30, 97, 13, 74, 24, 71, 38, 39, 41, 92, 96, 57, 59, 86, 84, 21, 67, 24, 63, 37, 19, 82, 70, 65, 90, 38, 70, 68, 3, 62, 2, 11, 81, 94, 74, 41, 47, 87, 27, 35, 3, 73, 44, 96, 97, 62, 9, 46, 31, 24, 31, 90, 31]
last_save: 70

Gen:251
last_save: 70
Exit:FalseFalseTrue