Dataset:Spiral/new_Full.csv
FS:False
Seed:1235
Size:7

Gen:1
TrainFitness:0.8057324840764332
TestFitness:0.7962962962962963
MaxGenLen:400
Individual: def p():
  def adf0(index):
    if np.equal(x[index],08350.84810):
      return False
    else:
      return True
  def adf1(index):
    if np.less(x[index],02786.99246):
      return False
    else:
      return False
  def adf2(index):
    if np.less(x[index],46612.70348):
      return False
    else:
      return False
  def adf3(index):
    if np.equal(x[index],13280.47205):
      return True
    else:
      return True
  def adf4(index):
    if np.less(x[index],43345.01634):
      return True
    else:
      return True
  def adf5(index):
    if np.greater(x[index],54125.77704):
      return False
    else:
      return False
  def adf6(index):
    if np.greater(x[index],65973.81620):
      return True
    else:
      return False
  def adf7(index):
    if np.equal(x[index],42038.66932):
      return False
    else:
      return False
  def adf8(index):
    if np.equal(x[index],76715.24854):
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+13.93, adf1(1)*+96.85, adf2(2)*-39.56, adf3(3)*+29.86, adf4(4)*+93.34, adf5(5)*+26.97, adf6(6)*+39.90, adf7(7)*-34.23, adf8(8)*-99.76], 14.80)
result=p(); 0.8057324840764332
IndLenGenome:339
IndGenome:[50, 90, 13, 65, 25, 20, 38, 30, 15, 90, 3, 4, 60, 85, 23, 36, 81, 85, 91, 26, 14, 37, 94, 88, 50, 86, 89, 11, 10, 87, 58, 81, 45, 83, 75, 41, 90, 2, 64, 7, 39, 66, 70, 71, 22, 95, 93, 90, 79, 76, 9, 60, 50, 58, 90, 92, 92, 85, 84, 53, 74, 45, 92, 5, 23, 49, 69, 62, 93, 4, 70, 95, 36, 78, 69, 65, 61, 21, 87, 20, 90, 30, 75, 51, 79, 30, 79, 66, 14, 96, 93, 40, 39, 68, 37, 18, 97, 81, 89, 93, 92, 94, 42, 67, 42, 44, 42, 33, 93, 59, 49, 73, 28, 52, 51, 93, 42, 24, 93, 40, 28, 22, 30, 44, 15, 46, 22, 69, 88, 86, 45, 36, 46, 10, 60, 22, 91, 30, 90, 21, 44, 65, 42, 98, 43, 75, 50, 22, 14, 55, 51, 55, 46, 72, 76, 23, 5, 58, 69, 56, 74, 13, 14, 38, 75, 38, 64, 25, 69, 94, 68, 78, 13, 85, 14, 65, 26, 9, 40, 42, 74, 77, 90, 51, 66, 53, 44, 22, 53, 98, 47, 73, 94, 87, 64, 44, 53, 94, 52, 57, 15, 25, 82, 27, 41, 86, 70, 39, 47, 29, 61, 16, 27, 53, 97, 99, 84, 84, 40, 22, 40, 15, 73, 89, 90, 89, 27, 12, 40, 32, 67, 67, 6, 93, 17, 90, 58, 66, 3, 79, 86, 7, 71, 30, 55, 27, 88, 14, 61, 81, 66, 90, 88, 55, 61, 23, 2, 5, 77, 7, 17, 96, 25, 96, 87, 10, 36, 48, 24, 40, 80, 0, 36, 89, 0, 3, 37, 25, 13, 15, 12, 82, 85, 2, 86, 44, 30, 28, 37, 95, 25, 45, 57, 47, 34, 70, 28, 81, 9, 96, 52, 52, 75, 81, 42, 61, 89, 83, 97, 97, 56, 30, 73, 58, 50, 42, 41, 58, 38, 58, 1, 91, 57, 35, 84, 70, 55, 53, 99, 54, 1, 10, 63, 18, 99, 71, 3, 16, 3]
last_save: 71

Gen:251
last_save: 71
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.8057324840764332
TestFitness:0.7962962962962963
MaxGenLen:400
Individual: def p():
  def adf0(index):
    if np.equal(x[index],68745.77976):
      return True
    else:
      return True
  def adf1(index):
    if np.greater(x[index],89820.09108):
      return False
    else:
      return True
  def adf2(index):
    if np.equal(x[index],71769.29341):
      return True
    else:
      return True
  def adf3(index):
    if np.greater(x[index],89698.15776):
      return False
    else:
      return True
  def adf4(index):
    if np.less(x[index],48422.38117):
      return True
    else:
      return False
  def adf5(index):
    if np.equal(x[index],22910.95559):
      return False
    else:
      return False
  def adf6(index):
    if np.equal(x[index],25349.02824):
      return True
    else:
      return True
  def adf7(index):
    if np.equal(x[index],37580.35568):
      return True
    else:
      return True
  def adf8(index):
    if np.greater(x[index],05816.29406):
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+80.05, adf1(1)*-33.58, adf2(2)*+73.13, adf3(3)*-51.31, adf4(4)*+87.14, adf5(5)*-48.38, adf6(6)*+77.95, adf7(7)*-80.36, adf8(8)*+59.63], 54.79)
result=p(); 0.8057324840764332
IndLenGenome:339
IndGenome:[68, 22, 95, 69, 29, 47, 70, 15, 68, 44, 8, 78, 41, 93, 45, 89, 56, 38, 15, 39, 94, 35, 45, 47, 20, 6, 38, 75, 67, 45, 6, 62, 71, 23, 7, 46, 5, 46, 57, 94, 70, 83, 87, 35, 51, 4, 52, 35, 85, 38, 44, 31, 40, 49, 25, 56, 76, 80, 5, 51, 29, 87, 59, 4, 63, 16, 86, 57, 83, 17, 21, 70, 73, 58, 90, 74, 80, 45, 68, 33, 11, 56, 84, 25, 13, 63, 8, 61, 78, 16, 39, 91, 19, 60, 23, 81, 88, 55, 25, 89, 81, 47, 63, 33, 66, 42, 40, 27, 44, 95, 71, 40, 43, 85, 53, 39, 17, 91, 52, 90, 17, 82, 40, 67, 88, 43, 19, 58, 95, 6, 25, 44, 82, 70, 9, 45, 10, 83, 96, 16, 56, 63, 74, 30, 88, 17, 34, 25, 77, 90, 38, 21, 39, 88, 38, 24, 87, 29, 36, 17, 61, 56, 40, 51, 83, 45, 66, 32, 32, 36, 20, 66, 13, 89, 48, 18, 31, 98, 86, 48, 89, 98, 78, 20, 61, 88, 1, 88, 42, 85, 98, 80, 64, 22, 25, 91, 80, 82, 46, 69, 49, 62, 94, 15, 47, 68, 89, 54, 67, 39, 72, 57, 2, 82, 83, 40, 96, 15, 95, 14, 41, 57, 35, 78, 13, 39, 68, 59, 56, 13, 46, 65, 62, 62, 17, 64, 97, 11, 51, 74, 94, 44, 79, 96, 64, 45, 100, 44, 82, 80, 33, 4, 22, 19, 50, 19, 61, 18, 5, 21, 55, 88, 21, 19, 81, 29, 68, 77, 31, 3, 87, 80, 11, 68, 20, 71, 23, 20, 90, 87, 84, 18, 29, 34, 82, 62, 33, 95, 86, 11, 8, 41, 93, 2, 60, 9, 77, 14, 95, 24, 7, 71, 99, 26, 55, 84, 59, 53, 37, 88, 81, 48, 32, 48, 36, 7, 75, 38, 100, 74, 89, 78, 77, 43, 5, 56, 92, 72, 18, 38, 62, 2, 82, 26, 64, 27, 3, 65, 79]
last_save: 71

Gen:251
last_save: 71
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.8037974683544303
TestFitness:0.8076923076923077
MaxGenLen:400
Individual: def p():
  def adf0(index):
    if np.equal(x[index],79182.42987):
      return False
    else:
      return True
  def adf1(index):
    if np.less(x[index],63917.68682):
      return True
    else:
      return True
  def adf2(index):
    if np.greater(x[index],29561.93372):
      return True
    else:
      return True
  def adf3(index):
    if np.less(x[index],96474.48401):
      return True
    else:
      return True
  def adf4(index):
    if np.less(x[index],05833.78128):
      return False
    else:
      return True
  def adf5(index):
    if np.equal(x[index],80482.49181):
      return False
    else:
      return False
  def adf6(index):
    if np.less(x[index],10535.70729):
      return False
    else:
      return True
  def adf7(index):
    if np.less(x[index],47686.94596):
      return False
    else:
      return True
  def adf8(index):
    if np.equal(x[index],06851.49404):
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+47.42, adf1(1)*+05.84, adf2(2)*+89.99, adf3(3)*-22.24, adf4(4)*-19.00, adf5(5)*-29.62, adf6(6)*+63.51, adf7(7)*+50.92, adf8(8)*+39.47], 31.05)
result=p(); 0.8037974683544303
IndLenGenome:339
IndGenome:[67, 94, 35, 26, 9, 98, 53, 87, 81, 11, 20, 33, 53, 81, 63, 39, 69, 50, 20, 39, 95, 70, 80, 70, 66, 57, 96, 6, 19, 47, 97, 95, 23, 95, 10, 11, 29, 46, 33, 15, 69, 91, 94, 26, 68, 20, 70, 19, 13, 47, 27, 36, 43, 31, 39, 24, 52, 6, 88, 61, 46, 72, 32, 94, 70, 88, 66, 44, 42, 25, 47, 71, 29, 90, 90, 20, 82, 22, 25, 24, 70, 50, 17, 44, 32, 20, 18, 11, 23, 81, 37, 82, 54, 7, 44, 24, 79, 26, 99, 10, 81, 48, 25, 51, 98, 9, 78, 10, 48, 38, 68, 39, 22, 66, 99, 38, 30, 53, 62, 39, 67, 32, 75, 30, 82, 50, 39, 12, 84, 16, 58, 53, 13, 77, 32, 77, 39, 11, 92, 33, 55, 60, 19, 95, 85, 50, 86, 52, 55, 68, 52, 55, 82, 87, 75, 29, 81, 73, 56, 23, 89, 28, 84, 81, 24, 53, 63, 10, 89, 89, 15, 84, 91, 94, 89, 89, 42, 98, 34, 32, 81, 14, 76, 46, 94, 69, 57, 98, 90, 29, 66, 83, 40, 57, 16, 54, 64, 91, 85, 67, 82, 32, 92, 91, 67, 26, 28, 79, 39, 24, 79, 77, 50, 68, 53, 98, 24, 14, 21, 60, 46, 70, 45, 78, 49, 34, 85, 65, 81, 75, 78, 36, 68, 62, 65, 0, 48, 19, 97, 59, 51, 23, 88, 94, 3, 26, 29, 52, 89, 96, 77, 29, 26, 5, 73, 93, 56, 92, 3, 92, 35, 30, 87, 72, 89, 55, 5, 25, 39, 16, 7, 33, 96, 96, 20, 31, 35, 63, 72, 2, 10, 44, 24, 42, 83, 50, 41, 58, 31, 49, 67, 27, 37, 32, 64, 12, 2, 85, 91, 32, 78, 77, 92, 29, 13, 75, 51, 29, 57, 8, 33, 11, 44, 30, 65, 36, 53, 25, 84, 63, 98, 23, 95, 18, 68, 46, 23, 21, 19, 47, 26, 59, 29, 42, 4, 9, 26, 34, 67]
last_save: 71

Gen:251
last_save: 71
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.8037974683544303
TestFitness:0.8076923076923077
MaxGenLen:400
Individual: def p():
  def adf0(index):
    if np.less(x[index],49810.64469):
      return False
    else:
      return False
  def adf1(index):
    if np.equal(x[index],31360.80170):
      return False
    else:
      return True
  def adf2(index):
    if np.equal(x[index],61922.53607):
      return False
    else:
      return False
  def adf3(index):
    if np.greater(x[index],18611.05760):
      return True
    else:
      return True
  def adf4(index):
    if np.less(x[index],34002.92303):
      return False
    else:
      return True
  def adf5(index):
    if np.equal(x[index],20615.05618):
      return False
    else:
      return True
  def adf6(index):
    if np.greater(x[index],51996.03978):
      return True
    else:
      return False
  def adf7(index):
    if np.less(x[index],69368.66397):
      return False
    else:
      return False
  def adf8(index):
    if np.less(x[index],10333.10312):
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-71.27, adf1(1)*+29.15, adf2(2)*+92.08, adf3(3)*+99.32, adf4(4)*+40.46, adf5(5)*+10.10, adf6(6)*-80.42, adf7(7)*-68.86, adf8(8)*+33.25], 55.36)
result=p(); 0.8037974683544303
IndLenGenome:339
IndGenome:[54, 14, 84, 88, 43, 20, 77, 16, 96, 96, 60, 64, 13, 70, 20, 70, 20, 32, 25, 97, 70, 64, 49, 52, 5, 64, 80, 83, 80, 65, 8, 67, 60, 28, 38, 95, 42, 13, 94, 26, 60, 62, 74, 69, 10, 23, 5, 22, 81, 17, 25, 35, 83, 52, 84, 66, 9, 80, 70, 20, 18, 58, 67, 47, 90, 3, 25, 36, 36, 81, 46, 2, 80, 31, 41, 64, 25, 31, 90, 48, 41, 12, 60, 43, 16, 69, 14, 99, 35, 66, 83, 93, 26, 43, 43, 82, 88, 19, 69, 86, 66, 91, 16, 92, 54, 74, 62, 76, 27, 71, 73, 15, 68, 21, 26, 12, 29, 45, 25, 59, 88, 86, 79, 74, 22, 89, 56, 66, 15, 97, 46, 13, 96, 32, 99, 80, 74, 78, 22, 97, 13, 37, 30, 25, 73, 76, 21, 66, 40, 20, 39, 12, 45, 75, 7, 60, 11, 95, 80, 10, 40, 11, 37, 91, 48, 95, 81, 17, 27, 10, 11, 25, 93, 23, 78, 40, 41, 19, 73, 89, 30, 16, 11, 83, 5, 15, 92, 27, 33, 79, 41, 41, 35, 96, 50, 36, 11, 98, 25, 87, 58, 80, 12, 26, 30, 51, 94, 84, 96, 83, 49, 61, 56, 40, 75, 77, 32, 71, 83, 31, 73, 20, 73, 26, 22, 60, 96, 11, 78, 47, 57, 15, 22, 25, 21, 18, 6, 33, 17, 80, 2, 21, 76, 36, 74, 71, 90, 2, 100, 48, 54, 38, 56, 27, 11, 76, 60, 4, 36, 27, 22, 0, 71, 26, 10, 48, 73, 7, 53, 69, 60, 58, 49, 12, 48, 16, 2, 3, 42, 12, 53, 41, 75, 2, 38, 1, 65, 24, 76, 7, 51, 85, 82, 71, 63, 19, 81, 8, 27, 39, 93, 11, 85, 89, 14, 43, 53, 24, 10, 25, 97, 6, 81, 86, 71, 73, 3, 52, 51, 14, 19, 35, 79, 58, 48, 76, 28, 0, 88, 69, 11, 11, 50, 9, 72, 31, 94, 3, 30]
last_save: 71

Gen:251
last_save: 71
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.8037974683544303
TestFitness:0.8076923076923077
MaxGenLen:400
Individual: def p():
  def adf0(index):
    if np.less(x[index],26727.76361):
      return False
    else:
      return False
  def adf1(index):
    if np.less(x[index],67045.84290):
      return True
    else:
      return False
  def adf2(index):
    if np.greater(x[index],28615.80634):
      return False
    else:
      return True
  def adf3(index):
    if np.less(x[index],25657.07763):
      return True
    else:
      return True
  def adf4(index):
    if np.equal(x[index],93898.49083):
      return True
    else:
      return True
  def adf5(index):
    if np.greater(x[index],67781.45914):
      return False
    else:
      return True
  def adf6(index):
    if np.equal(x[index],29982.53701):
      return True
    else:
      return True
  def adf7(index):
    if np.greater(x[index],01255.30586):
      return True
    else:
      return True
  def adf8(index):
    if np.less(x[index],48550.83673):
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+71.02, adf1(1)*+38.26, adf2(2)*+53.50, adf3(3)*+55.77, adf4(4)*+36.25, adf5(5)*+46.91, adf6(6)*+49.17, adf7(7)*-21.66, adf8(8)*+35.05], 60.85)
result=p(); 0.8037974683544303
IndLenGenome:339
IndGenome:[63, 42, 6, 30, 99, 31, 55, 22, 37, 43, 57, 30, 50, 72, 28, 48, 25, 30, 29, 76, 11, 28, 44, 67, 83, 76, 70, 44, 34, 17, 24, 10, 44, 70, 20, 87, 50, 35, 90, 32, 15, 66, 82, 49, 54, 22, 16, 27, 66, 76, 31, 22, 68, 19, 18, 88, 67, 93, 83, 51, 82, 44, 65, 6, 89, 93, 35, 39, 47, 98, 80, 65, 51, 45, 60, 13, 94, 30, 35, 69, 36, 27, 61, 23, 97, 83, 90, 70, 72, 78, 84, 90, 34, 15, 87, 6, 92, 84, 79, 89, 38, 43, 8, 66, 60, 82, 21, 83, 65, 57, 82, 11, 33, 44, 50, 90, 75, 47, 27, 63, 7, 44, 31, 38, 15, 14, 15, 75, 61, 71, 64, 56, 46, 56, 92, 95, 74, 42, 11, 10, 18, 60, 96, 90, 53, 95, 47, 26, 33, 69, 38, 89, 39, 4, 15, 21, 17, 43, 45, 33, 13, 43, 37, 31, 14, 19, 75, 42, 20, 59, 64, 19, 64, 55, 16, 98, 82, 28, 88, 26, 72, 38, 96, 73, 65, 18, 91, 45, 80, 11, 46, 85, 11, 65, 35, 21, 66, 84, 96, 52, 86, 33, 17, 52, 53, 67, 62, 15, 78, 65, 97, 75, 60, 40, 95, 36, 87, 22, 20, 42, 19, 89, 68, 31, 85, 53, 45, 13, 6, 37, 52, 96, 23, 85, 17, 4, 1, 31, 40, 43, 44, 50, 43, 32, 56, 97, 43, 47, 30, 13, 68, 71, 35, 27, 95, 56, 53, 2, 79, 16, 33, 8, 31, 11, 98, 67, 73, 92, 8, 6, 83, 74, 73, 5, 65, 70, 31, 100, 53, 30, 38, 21, 85, 18, 92, 75, 46, 82, 63, 60, 12, 1, 38, 51, 27, 28, 84, 2, 52, 0, 39, 0, 45, 63, 17, 13, 85, 93, 49, 93, 78, 32, 12, 86, 25, 16, 3, 90, 72, 88, 16, 67, 43, 33, 18, 51, 32, 62, 0, 53, 83, 48, 93, 23, 20, 7, 13, 86, 11]
last_save: 71

Gen:251
last_save: 71
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.8037974683544303
TestFitness:0.8076923076923077
MaxGenLen:400
Individual: def p():
  def adf0(index):
    if np.less(x[index],57058.54557):
      return False
    else:
      return True
  def adf1(index):
    if np.greater(x[index],29933.86941):
      return True
    else:
      return True
  def adf2(index):
    if np.equal(x[index],81645.25361):
      return True
    else:
      return True
  def adf3(index):
    if np.equal(x[index],22136.02478):
      return False
    else:
      return False
  def adf4(index):
    if np.equal(x[index],38715.36177):
      return True
    else:
      return False
  def adf5(index):
    if np.greater(x[index],63576.02990):
      return False
    else:
      return True
  def adf6(index):
    if np.greater(x[index],52954.28941):
      return True
    else:
      return True
  def adf7(index):
    if np.less(x[index],75348.97760):
      return False
    else:
      return False
  def adf8(index):
    if np.greater(x[index],09515.63647):
      return True
    else:
      return False
  return multiple_operation([adf0(0)*-08.50, adf1(1)*+53.62, adf2(2)*+32.03, adf3(3)*+93.14, adf4(4)*+15.91, adf5(5)*-01.93, adf6(6)*+04.28, adf7(7)*+01.17, adf8(8)*+30.56], 81.94)
result=p(); 0.8037974683544303
IndLenGenome:339
IndGenome:[52, 59, 6, 5, 56, 16, 55, 75, 59, 70, 68, 12, 61, 60, 76, 34, 30, 65, 74, 24, 27, 38, 75, 85, 89, 51, 45, 62, 43, 82, 78, 85, 49, 23, 92, 9, 47, 23, 35, 29, 2, 84, 66, 11, 83, 78, 11, 80, 5, 75, 94, 80, 3, 84, 95, 52, 33, 43, 55, 26, 90, 90, 57, 16, 46, 28, 27, 75, 80, 39, 39, 47, 88, 57, 57, 60, 15, 96, 64, 98, 60, 90, 97, 69, 89, 15, 26, 68, 15, 49, 36, 29, 61, 80, 48, 44, 38, 32, 54, 17, 59, 32, 29, 92, 4, 30, 78, 13, 63, 95, 18, 90, 42, 43, 65, 65, 34, 95, 60, 51, 65, 85, 75, 11, 63, 48, 91, 34, 11, 74, 63, 61, 47, 80, 39, 70, 95, 11, 50, 10, 42, 97, 72, 81, 28, 52, 42, 48, 22, 22, 97, 25, 85, 80, 30, 87, 82, 89, 55, 54, 16, 27, 87, 16, 58, 66, 41, 32, 53, 98, 79, 76, 90, 77, 33, 73, 96, 62, 83, 55, 85, 89, 21, 13, 82, 19, 19, 26, 64, 61, 77, 96, 45, 28, 29, 53, 10, 43, 46, 83, 20, 71, 22, 59, 94, 43, 75, 36, 76, 64, 68, 71, 34, 23, 98, 55, 45, 41, 85, 31, 51, 97, 43, 46, 47, 28, 3, 26, 12, 79, 95, 97, 73, 66, 41, 69, 70, 68, 39, 20, 34, 1, 46, 43, 78, 73, 37, 30, 59, 38, 2, 67, 8, 21, 32, 65, 11, 68, 0, 44, 96, 96, 91, 13, 38, 89, 42, 17, 98, 52, 87, 87, 74, 84, 57, 3, 3, 96, 33, 54, 52, 99, 87, 94, 8, 91, 25, 84, 96, 88, 51, 49, 10, 50, 55, 35, 68, 59, 64, 15, 62, 80, 37, 11, 79, 23, 60, 9, 86, 47, 95, 92, 10, 49, 70, 49, 40, 44, 33, 12, 61, 11, 72, 38, 82, 11, 1, 72, 85, 41, 72, 100, 17, 30, 99, 69, 82, 72, 93]
last_save: 71

Gen:166
TrainFitness:0.8069620253164557
TestFitness:0.7884615384615384
MaxGenLen:445
Individual: def p():
  def adf0(index):
    if np.greater(x[index],03040.31366):
      if np.equal(x[index],88295.75275):
        return False
      else:
        return True
    else:
      if np.greater(x[index],63915.96567):
        return False
      else:
        return False
  def adf1(index):
    if np.greater(x[index],02405.44715):
      return False
    else:
      return False
  def adf2(index):
    if np.less(x[index],82930.97359):
      return True
    else:
      return False
  def adf3(index):
    if np.greater(x[index],05248.34423):
      if np.less(x[index],30166.87581):
        return True
      else:
        return False
    else:
      if np.greater(x[index],05618.08729):
        return False
      else:
        return True
  def adf4(index):
    if np.greater(x[index],19348.44798):
      return False
    else:
      return False
  def adf5(index):
    if np.less(x[index],18023.52420):
      return False
    else:
      return False
  def adf6(index):
    if np.greater(x[index],94849.11046):
      return False
    else:
      return True
  def adf7(index):
    if np.less(x[index],15200.22751):
      if np.greater(x[index],27150.07225):
        return True
      else:
        return False
    else:
      if np.greater(x[index],81482.50151):
        return False
      else:
        return True
  def adf8(index):
    if np.less(x[index],22982.76135):
      if np.greater(x[index],49086.70982):
        return False
      else:
        return True
    else:
      if np.greater(x[index],18846.36383):
        return True
      else:
        return False
  return multiple_operation([adf0(0)*+50.41, adf1(1)*-50.09, adf2(2)*+51.63, adf3(3)*-08.90, adf4(4)*-38.67, adf5(5)*-27.61, adf6(6)*+27.74, adf7(7)*+12.50, adf8(8)*-13.89], 75.98)
result=p(); 0.8069620253164557
IndLenGenome:405
IndGenome:[81, 54, 52, 21, 22, 51, 79, 80, 53, 70, 64, 30, 63, 51, 33, 86, 16, 42, 38, 11, 8, 98, 92, 19, 85, 47, 35, 42, 87, 75, 65, 42, 63, 18, 35, 96, 23, 69, 51, 95, 59, 6, 5, 56, 67, 55, 75, 59, 70, 68, 12, 61, 60, 92, 34, 30, 65, 34, 24, 27, 91, 75, 25, 89, 51, 45, 31, 43, 82, 78, 92, 49, 23, 20, 9, 47, 23, 35, 29, 68, 89, 66, 11, 83, 78, 11, 90, 5, 92, 94, 8, 3, 84, 24, 52, 33, 43, 97, 43, 53, 90, 81, 16, 46, 28, 27, 55, 98, 81, 38, 47, 88, 57, 27, 60, 15, 96, 41, 98, 60, 68, 97, 52, 89, 15, 26, 68, 15, 46, 36, 10, 51, 69, 23, 44, 38, 24, 54, 17, 59, 38, 29, 85, 44, 30, 61, 13, 63, 31, 18, 90, 42, 43, 65, 22, 34, 52, 60, 51, 65, 85, 75, 11, 63, 48, 59, 34, 88, 74, 79, 61, 81, 80, 34, 26, 95, 94, 50, 36, 39, 28, 58, 71, 55, 52, 50, 70, 22, 22, 97, 25, 1, 80, 30, 87, 82, 97, 21, 85, 80, 30, 87, 82, 12, 55, 54, 75, 36, 57, 64, 68, 71, 34, 98, 62, 55, 30, 41, 85, 31, 51, 0, 43, 46, 32, 28, 13, 32, 12, 79, 38, 2, 67, 16, 21, 13, 65, 11, 60, 48, 44, 19, 30, 78, 96, 37, 30, 59, 38, 2, 67, 16, 21, 45, 65, 11, 68, 28, 44, 96, 23, 76, 13, 48, 13, 42, 17, 51, 86, 92, 70, 68, 15, 20, 34, 1, 60, 53, 78, 55, 40, 30, 59, 38, 2, 67, 55, 21, 36, 73, 93, 41, 69, 70, 68, 39, 20, 34, 1, 19, 53, 78, 96, 37, 30, 59, 38, 2, 67, 16, 21, 40, 80, 65, 52, 87, 87, 74, 2, 22, 8, 21, 32, 65, 0, 44, 69, 96, 91, 13, 48, 89, 42, 47, 75, 59, 28, 77, 94, 50, 57, 62, 3, 96, 33, 54, 52, 20, 90, 94, 8, 91, 25, 84, 96, 88, 22, 97, 10, 50, 90, 57, 68, 59, 64, 62, 62, 80, 68, 11, 79, 51, 11, 9, 86, 47, 70, 92, 80, 83, 70, 49, 57, 44, 33, 12, 61, 11, 72, 58, 82, 11, 1, 72, 85, 41, 72, 100, 17, 30, 99, 69, 82, 72, 93]
last_save: 71

Gen:345
TrainFitness:0.810126582278481
TestFitness:0.7884615384615384
MaxGenLen:490
Individual: def p():
  def adf0(index):
    if np.greater(x[index],03040.31361):
      if np.greater(x[index],02295.75205):
        return True
      else:
        return True
    else:
      if np.less(x[index],43918.86567):
        return False
      else:
        return False
  def adf1(index):
    if np.less(x[index],52905.24965):
      return False
    else:
      return False
  def adf2(index):
    if np.greater(x[index],83539.98897):
      return True
    else:
      return False
  def adf3(index):
    if np.equal(x[index],45254.34426):
      if np.greater(x[index],39266.57511):
        return True
      else:
        return False
    else:
      if np.greater(x[index],05654.09629):
        return False
      else:
        return True
  def adf4(index):
    if np.greater(x[index],19346.44798):
      return False
    else:
      return False
  def adf5(index):
    if np.less(x[index],18523.50029):
      return False
    else:
      return False
  def adf6(index):
    if np.greater(x[index],97245.11026):
      return True
    else:
      return True
  def adf7(index):
    if np.less(x[index],02200.42751):
      if np.greater(x[index],57152.07622):
        return True
      else:
        return False
    else:
      if np.less(x[index],50032.23429):
        return True
      else:
        return True
  def adf8(index):
    if np.less(x[index],10899.01670):
      if np.equal(x[index],78855.18882):
        return True
      else:
        return True
    else:
      if np.greater(x[index],67162.00550):
        return False
      else:
        return True
  return multiple_operation([adf0(0)*+98.27, adf1(1)*-33.99, adf2(2)*+04.19, adf3(3)*+80.58, adf4(4)*-10.46, adf5(5)*-42.28, adf6(6)*+04.96, adf7(7)*-92.75, adf8(8)*-89.04], 93.86)
result=p(); 0.810126582278481
IndLenGenome:416
IndGenome:[89, 54, 90, 21, 22, 51, 79, 80, 53, 70, 64, 30, 63, 51, 33, 86, 51, 83, 12, 11, 10, 42, 92, 19, 85, 47, 35, 42, 90, 75, 4, 42, 97, 97, 35, 94, 53, 69, 51, 8, 28, 6, 5, 56, 67, 55, 67, 9, 70, 68, 58, 61, 95, 92, 59, 30, 65, 62, 24, 49, 16, 35, 15, 89, 51, 45, 31, 60, 82, 78, 63, 65, 23, 19, 9, 58, 28, 59, 57, 68, 89, 7, 11, 9, 47, 11, 74, 15, 92, 75, 64, 3, 84, 24, 52, 56, 43, 3, 43, 23, 49, 52, 26, 46, 15, 27, 55, 81, 81, 38, 47, 52, 57, 27, 60, 15, 56, 35, 24, 60, 39, 66, 52, 89, 15, 26, 36, 15, 46, 36, 96, 51, 69, 23, 44, 46, 24, 54, 17, 59, 38, 29, 85, 44, 30, 61, 13, 63, 31, 18, 75, 42, 53, 65, 0, 50, 52, 69, 51, 71, 49, 75, 11, 24, 48, 59, 77, 12, 74, 55, 61, 81, 80, 72, 26, 36, 94, 50, 36, 39, 28, 26, 60, 32, 52, 50, 70, 24, 22, 97, 25, 1, 85, 30, 20, 65, 97, 1, 85, 92, 30, 87, 86, 12, 72, 8, 75, 36, 97, 21, 85, 80, 30, 63, 82, 12, 13, 64, 12, 79, 38, 2, 90, 1, 21, 7, 65, 11, 60, 48, 59, 19, 70, 61, 96, 37, 30, 59, 38, 2, 67, 48, 58, 45, 65, 11, 68, 28, 48, 32, 30, 76, 13, 48, 13, 66, 17, 51, 86, 92, 70, 70, 15, 75, 20, 1, 60, 82, 78, 55, 26, 30, 59, 38, 2, 67, 55, 21, 36, 73, 93, 99, 69, 70, 68, 39, 20, 34, 1, 19, 53, 78, 96, 48, 30, 15, 38, 2, 67, 88, 21, 40, 94, 56, 52, 87, 87, 74, 2, 22, 8, 21, 32, 65, 0, 44, 69, 96, 91, 13, 48, 89, 42, 47, 75, 41, 69, 70, 68, 39, 20, 34, 1, 19, 53, 78, 96, 37, 30, 59, 38, 2, 19, 53, 78, 96, 37, 30, 59, 38, 2, 67, 16, 21, 40, 33, 54, 52, 20, 90, 94, 8, 91, 25, 84, 57, 88, 22, 45, 10, 50, 90, 57, 68, 59, 64, 62, 62, 80, 68, 11, 79, 51, 11, 9, 86, 47, 70, 92, 80, 83, 70, 49, 57, 44, 33, 12, 61, 11, 72, 58, 82, 11, 1, 72, 85, 41, 72, 100, 17, 30, 99, 69, 82, 72, 93]
last_save: 71

Gen:500
last_save: 71
Exit:FalseTrueFalse

Gen:1
TrainFitness:0.8037974683544303
TestFitness:0.8076923076923077
MaxGenLen:400
Individual: def p():
  def adf0(index):
    if np.less(x[index],43459.78978):
      return True
    else:
      return True
  def adf1(index):
    if np.less(x[index],25422.38448):
      return False
    else:
      return True
  def adf2(index):
    if np.less(x[index],52959.03016):
      return False
    else:
      return True
  def adf3(index):
    if np.equal(x[index],82135.09727):
      return True
    else:
      return True
  def adf4(index):
    if np.less(x[index],70509.88043):
      return True
    else:
      return True
  def adf5(index):
    if np.equal(x[index],45769.72345):
      return True
    else:
      return True
  def adf6(index):
    if np.equal(x[index],03269.73611):
      return False
    else:
      return True
  def adf7(index):
    if np.greater(x[index],94753.55009):
      return True
    else:
      return True
  def adf8(index):
    if np.equal(x[index],07656.17554):
      return True
    else:
      return True
  return multiple_operation([adf0(0)*-69.11, adf1(1)*+79.73, adf2(2)*-82.40, adf3(3)*+02.35, adf4(4)*-20.68, adf5(5)*-15.54, adf6(6)*+38.13, adf7(7)*+82.96, adf8(8)*+56.66], 65.42)
result=p(); 0.8037974683544303
IndLenGenome:339
IndGenome:[62, 65, 69, 24, 41, 35, 36, 92, 89, 60, 55, 60, 15, 90, 72, 68, 35, 19, 62, 52, 10, 55, 64, 72, 8, 14, 26, 60, 80, 5, 81, 37, 84, 92, 68, 43, 36, 44, 27, 14, 88, 64, 41, 85, 21, 16, 45, 70, 50, 30, 45, 68, 17, 55, 43, 78, 95, 16, 90, 86, 70, 49, 15, 66, 57, 96, 63, 93, 78, 17, 64, 74, 67, 9, 40, 60, 87, 10, 97, 37, 8, 12, 86, 47, 30, 96, 42, 29, 28, 83, 79, 69, 64, 44, 81, 91, 98, 55, 96, 96, 84, 88, 75, 53, 41, 41, 52, 92, 68, 30, 53, 58, 89, 76, 48, 40, 71, 37, 49, 48, 52, 80, 65, 76, 43, 18, 38, 94, 99, 70, 51, 47, 16, 72, 38, 34, 85, 94, 79, 32, 47, 57, 61, 44, 16, 17, 70, 56, 53, 35, 75, 86, 63, 37, 15, 62, 85, 95, 60, 59, 89, 98, 37, 42, 34, 64, 44, 55, 31, 67, 15, 52, 19, 93, 22, 92, 80, 6, 90, 46, 82, 14, 76, 70, 14, 43, 15, 66, 46, 61, 70, 25, 73, 62, 61, 91, 55, 59, 89, 45, 64, 42, 29, 95, 30, 87, 94, 96, 52, 88, 77, 19, 39, 19, 12, 68, 70, 67, 66, 53, 25, 21, 53, 52, 68, 37, 94, 74, 32, 28, 62, 91, 7, 96, 36, 81, 39, 31, 16, 22, 60, 5, 81, 19, 0, 75, 20, 57, 44, 22, 93, 98, 50, 29, 62, 50, 78, 75, 3, 70, 1, 4, 26, 51, 19, 44, 26, 72, 47, 49, 10, 62, 73, 100, 32, 84, 92, 41, 53, 50, 33, 31, 5, 39, 40, 4, 84, 58, 71, 77, 90, 69, 0, 78, 86, 73, 58, 20, 73, 47, 77, 74, 7, 67, 63, 53, 22, 81, 62, 53, 45, 21, 26, 98, 72, 78, 42, 97, 100, 18, 73, 97, 21, 11, 17, 66, 11, 29, 62, 74, 40, 16, 86, 51, 73, 41, 95, 5, 6]
last_save: 71

Gen:251
last_save: 71
Exit:FalseFalseTrue