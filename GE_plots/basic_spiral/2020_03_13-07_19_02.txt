Dataset:Spiral/new_Full.csv
FS:False
Seed:1236
Size:7

Gen:1
TrainFitness:0.8121019108280255
TestFitness:0.7777777777777778
MaxGenLen:400
Individual: def p():
  def adf0(index):
    if np.greater(x[index],19424.32469):
      if np.greater(x[index],79579.93495):
        return True
      else:
        return True
    else:
      if np.greater(x[index],13213.04921):
        return True
      else:
        return False
  def adf1(index):
    if np.greater(x[index],78778.83694):
      if np.equal(x[index],41107.03440):
        return True
      else:
        return False
    else:
      if np.greater(x[index],16679.22510):
        return False
      else:
        return True
  def adf2(index):
    if np.greater(x[index],81457.66803):
      if np.greater(x[index],34795.66557):
        return False
      else:
        return True
    else:
      if np.equal(x[index],55043.64154):
        return True
      else:
        return False
  def adf3(index):
    if np.greater(x[index],45819.77294):
      if np.less(x[index],07072.27312):
        return False
      else:
        return True
    else:
      if np.less(x[index],29743.23445):
        return True
      else:
        return False
  def adf4(index):
    if np.greater(x[index],26249.34098):
      if np.equal(x[index],93491.36664):
        return True
      else:
        return False
    else:
      if np.equal(x[index],11910.07172):
        return False
      else:
        return True
  def adf5(index):
    if np.less(x[index],32708.20217):
      if np.equal(x[index],05527.96157):
        return False
      else:
        return False
    else:
      if np.equal(x[index],52466.03216):
        return False
      else:
        return True
  def adf6(index):
    if np.greater(x[index],17853.36929):
      if np.greater(x[index],31878.30914):
        return True
      else:
        return True
    else:
      if np.greater(x[index],09712.55911):
        return True
      else:
        return False
  def adf7(index):
    if np.greater(x[index],02192.00388):
      if np.greater(x[index],96317.81631):
        return True
      else:
        return True
    else:
      if np.greater(x[index],33397.40784):
        return True
      else:
        return False
  def adf8(index):
    if np.less(x[index],38528.04524):
      if np.equal(x[index],62305.30429):
        return True
      else:
        return False
    else:
      if np.greater(x[index],79098.31883):
        return True
      else:
        return False
  return multiple_operation([adf0(0)*+41.45, adf1(1)*-10.43, adf2(2)*-68.84, adf3(3)*+01.49, adf4(4)*+21.57, adf5(5)*+41.34, adf6(6)*-43.56, adf7(7)*-64.97, adf8(8)*-08.07], 08.02)
result=p(); 0.8121019108280255
IndLenGenome:717
IndGenome:[51, 16, 2, 60, 5, 10, 22, 50, 94, 96, 51, 58, 77, 51, 91, 66, 51, 30, 9, 48, 62, 96, 87, 94, 64, 51, 18, 22, 47, 65, 59, 78, 14, 49, 80, 46, 88, 59, 86, 14, 93, 50, 94, 75, 41, 47, 71, 56, 39, 69, 52, 29, 84, 65, 37, 70, 26, 59, 82, 39, 31, 76, 87, 57, 60, 31, 59, 36, 83, 73, 52, 84, 78, 76, 44, 79, 13, 73, 89, 87, 28, 22, 51, 87, 31, 4, 18, 27, 13, 40, 79, 31, 81, 13, 21, 64, 40, 96, 61, 29, 12, 89, 97, 12, 36, 40, 50, 81, 77, 50, 32, 90, 25, 2, 89, 64, 61, 94, 50, 40, 6, 3, 89, 75, 49, 63, 14, 92, 86, 20, 14, 58, 79, 56, 11, 86, 14, 21, 13, 25, 53, 68, 54, 30, 85, 47, 54, 70, 88, 44, 29, 32, 54, 47, 89, 71, 74, 32, 95, 73, 98, 47, 88, 45, 49, 71, 92, 69, 56, 41, 78, 94, 66, 12, 33, 36, 37, 57, 96, 57, 80, 36, 25, 66, 91, 54, 53, 76, 27, 13, 54, 44, 59, 83, 39, 5, 55, 15, 82, 86, 40, 34, 77, 80, 42, 82, 17, 64, 46, 79, 61, 48, 72, 72, 51, 74, 90, 75, 34, 66, 97, 67, 35, 34, 37, 46, 11, 90, 80, 68, 13, 61, 52, 74, 14, 99, 72, 65, 26, 81, 81, 23, 45, 61, 48, 81, 44, 84, 43, 80, 61, 89, 74, 58, 32, 17, 75, 68, 50, 89, 22, 74, 54, 14, 17, 45, 56, 91, 84, 62, 36, 50, 64, 98, 30, 79, 65, 74, 14, 70, 54, 30, 94, 39, 9, 43, 45, 45, 36, 66, 23, 98, 16, 30, 65, 56, 64, 88, 30, 56, 42, 79, 60, 44, 83, 96, 43, 49, 19, 89, 82, 48, 83, 42, 84, 57, 65, 62, 42, 50, 80, 36, 75, 55, 52, 21, 10, 65, 36, 73, 37, 74, 16, 33, 70, 55, 67, 4, 75, 74, 16, 67, 81, 54, 12, 27, 59, 54, 18, 85, 84, 58, 3, 85, 21, 42, 64, 81, 13, 67, 83, 43, 52, 62, 97, 81, 70, 84, 62, 83, 31, 61, 93, 31, 95, 68, 48, 21, 34, 86, 42, 43, 70, 77, 23, 91, 97, 43, 85, 21, 94, 33, 32, 11, 38, 87, 84, 21, 84, 77, 19, 27, 40, 73, 93, 43, 93, 49, 45, 79, 27, 44, 51, 55, 70, 24, 52, 87, 18, 42, 96, 70, 16, 79, 65, 14, 97, 81, 96, 74, 81, 50, 12, 48, 73, 95, 39, 40, 74, 25, 11, 45, 6, 29, 37, 37, 40, 62, 30, 87, 71, 87, 60, 42, 33, 48, 29, 57, 81, 43, 93, 98, 29, 13, 29, 22, 40, 16, 11, 17, 68, 18, 39, 19, 58, 30, 13, 33, 22, 61, 63, 24, 98, 7, 13, 76, 72, 71, 95, 23, 1, 91, 45, 43, 65, 25, 70, 10, 31, 21, 65, 100, 13, 80, 53, 23, 17, 89, 23, 87, 71, 98, 38, 7, 5, 87, 52, 47, 20, 17, 31, 98, 95, 82, 57, 88, 79, 40, 79, 73, 68, 40, 72, 76, 72, 17, 99, 71, 11, 87, 75, 81, 10, 96, 93, 33, 7, 61, 63, 30, 54, 61, 36, 0, 63, 84, 50, 57, 99, 75, 75, 24, 16, 96, 1, 11, 95, 0, 98, 47, 77, 38, 38, 65, 91, 52, 62, 87, 6, 65, 14, 64, 80, 36, 56, 53, 46, 16, 0, 33, 46, 10, 82, 98, 9, 66, 89, 26, 41, 0, 53, 79, 3, 9, 73, 85, 5, 31, 71, 99, 98, 9, 64, 63, 15, 19, 60, 18, 22, 57, 76, 92, 60, 45, 70, 81, 43, 95, 92, 3, 71, 16, 97, 86, 43, 30, 90, 6, 1, 4, 45, 90, 96, 97, 29, 44, 63, 13, 30, 92, 100, 56, 51, 4, 43, 50, 86, 54, 69, 51, 1, 69, 36, 86, 20, 79, 65, 24, 40, 71, 44, 26, 24, 74, 72, 57, 29, 79, 90, 50, 99, 43, 31, 64, 29, 35, 61, 83, 32, 29, 100, 33, 20, 31, 81, 87, 50, 78, 56, 14, 53, 5, 71, 52, 53, 66, 100, 87, 57, 5, 79, 90, 62, 66, 42, 16, 46]
last_save: 72

Gen:251
last_save: 72
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.8057324840764332
TestFitness:0.7962962962962963
MaxGenLen:400
Individual: def p():
  def adf0(index):
    if np.equal(x[index],12772.53600):
      return True
    else:
      return True
  def adf1(index):
    if np.equal(x[index],22697.64606):
      return False
    else:
      return False
  def adf2(index):
    if np.equal(x[index],73270.11682):
      return False
    else:
      return False
  def adf3(index):
    if np.equal(x[index],60825.23014):
      return True
    else:
      return False
  def adf4(index):
    if np.equal(x[index],85481.80846):
      return False
    else:
      return True
  def adf5(index):
    if np.equal(x[index],40124.05384):
      return True
    else:
      return False
  def adf6(index):
    if np.greater(x[index],54236.47643):
      return True
    else:
      return False
  def adf7(index):
    if np.equal(x[index],28890.12657):
      return True
    else:
      return False
  def adf8(index):
    if np.equal(x[index],31513.15262):
      return True
    else:
      return False
  return multiple_operation([adf0(0)*+46.32, adf1(1)*-80.24, adf2(2)*-16.13, adf3(3)*+61.44, adf4(4)*+61.64, adf5(5)*+59.94, adf6(6)*+96.30, adf7(7)*-25.61, adf8(8)*-38.95], 62.71)
result=p(); 0.8057324840764332
IndLenGenome:339
IndGenome:[44, 78, 55, 31, 53, 7, 30, 26, 77, 13, 50, 40, 40, 44, 97, 22, 76, 73, 99, 29, 61, 10, 62, 99, 70, 75, 34, 26, 54, 50, 63, 50, 92, 46, 42, 27, 28, 27, 69, 92, 30, 42, 19, 89, 15, 30, 21, 71, 42, 28, 39, 42, 69, 16, 55, 13, 12, 9, 36, 70, 43, 95, 74, 81, 71, 98, 83, 48, 13, 58, 56, 55, 76, 68, 40, 85, 50, 73, 53, 83, 75, 96, 46, 75, 86, 54, 83, 94, 99, 18, 12, 40, 16, 64, 59, 66, 49, 5, 85, 5, 43, 16, 44, 61, 31, 14, 2, 89, 92, 36, 64, 61, 63, 94, 36, 43, 12, 29, 62, 69, 64, 49, 29, 72, 20, 51, 37, 96, 67, 76, 99, 46, 20, 40, 26, 77, 96, 14, 35, 89, 78, 99, 90, 37, 24, 83, 24, 62, 36, 68, 46, 93, 10, 11, 74, 85, 78, 87, 60, 88, 62, 98, 50, 53, 72, 64, 51, 23, 12, 86, 81, 94, 34, 38, 30, 48, 12, 32, 75, 81, 54, 71, 25, 81, 30, 66, 87, 56, 63, 71, 72, 25, 21, 85, 33, 11, 84, 17, 56, 12, 56, 68, 92, 97, 85, 52, 74, 55, 81, 30, 98, 93, 44, 91, 10, 37, 22, 30, 16, 82, 35, 51, 23, 63, 87, 62, 68, 44, 75, 42, 30, 18, 36, 85, 63, 66, 24, 73, 24, 97, 20, 25, 9, 17, 90, 36, 50, 97, 48, 62, 94, 29, 77, 51, 82, 50, 75, 53, 39, 6, 73, 18, 65, 9, 0, 73, 89, 22, 75, 81, 3, 81, 67, 71, 64, 83, 39, 84, 49, 39, 47, 16, 70, 51, 15, 23, 30, 87, 20, 91, 45, 22, 64, 0, 66, 40, 50, 44, 78, 36, 74, 98, 37, 79, 17, 96, 33, 1, 82, 45, 84, 29, 86, 10, 55, 10, 22, 21, 83, 21, 68, 75, 57, 71, 8, 100, 61, 54, 6, 46, 36, 87, 57, 90, 95, 68, 63, 0, 59]
last_save: 72

Gen:251
last_save: 72
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.8037974683544303
TestFitness:0.8076923076923077
MaxGenLen:400
Individual: def p():
  def adf0(index):
    if np.equal(x[index],53527.77613):
      return False
    else:
      return True
  def adf1(index):
    if np.equal(x[index],94380.10865):
      return False
    else:
      return True
  def adf2(index):
    if np.greater(x[index],25817.26603):
      return False
    else:
      return False
  def adf3(index):
    if np.greater(x[index],72551.15921):
      return False
    else:
      return False
  def adf4(index):
    if np.equal(x[index],61889.46082):
      return True
    else:
      return True
  def adf5(index):
    if np.greater(x[index],61731.91187):
      return True
    else:
      return True
  def adf6(index):
    if np.greater(x[index],29901.30953):
      return False
    else:
      return False
  def adf7(index):
    if np.equal(x[index],04955.00307):
      return False
    else:
      return True
  def adf8(index):
    if np.less(x[index],33511.43791):
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+52.43, adf1(1)*+84.77, adf2(2)*+17.11, adf3(3)*+44.45, adf4(4)*-58.23, adf5(5)*+07.21, adf6(6)*+68.43, adf7(7)*+34.28, adf8(8)*+32.41], 51.94)
result=p(); 0.8037974683544303
IndLenGenome:339
IndGenome:[47, 91, 6, 70, 79, 60, 46, 4, 89, 55, 54, 69, 51, 78, 47, 15, 90, 75, 15, 45, 48, 80, 75, 87, 5, 8, 21, 82, 27, 90, 75, 14, 26, 4, 80, 86, 44, 23, 97, 65, 66, 38, 1, 88, 24, 9, 56, 57, 50, 84, 45, 84, 16, 24, 63, 77, 32, 46, 45, 15, 63, 90, 15, 35, 28, 55, 31, 45, 89, 64, 48, 37, 74, 34, 30, 92, 47, 93, 90, 7, 53, 63, 28, 90, 65, 78, 61, 81, 82, 24, 17, 95, 32, 18, 62, 74, 14, 97, 44, 86, 18, 65, 72, 45, 46, 66, 20, 12, 96, 47, 19, 40, 99, 88, 91, 72, 48, 64, 47, 62, 75, 14, 22, 82, 23, 12, 8, 71, 52, 52, 5, 52, 14, 58, 41, 38, 1, 98, 43, 55, 33, 60, 63, 15, 72, 89, 57, 81, 51, 61, 25, 19, 61, 67, 11, 44, 17, 31, 91, 94, 91, 28, 57, 25, 33, 61, 97, 93, 73, 61, 23, 93, 9, 39, 98, 93, 65, 81, 57, 86, 34, 54, 43, 40, 23, 87, 91, 38, 96, 49, 69, 31, 70, 15, 11, 44, 40, 48, 91, 63, 21, 19, 10, 19, 50, 47, 82, 95, 17, 61, 82, 28, 12, 98, 25, 76, 93, 41, 10, 38, 69, 88, 35, 54, 70, 71, 6, 40, 40, 94, 31, 48, 91, 34, 70, 9, 64, 23, 23, 48, 33, 82, 3, 8, 37, 57, 60, 62, 14, 15, 46, 76, 18, 7, 62, 72, 76, 67, 81, 94, 8, 46, 2, 34, 25, 56, 20, 88, 96, 6, 92, 54, 83, 71, 91, 80, 56, 46, 91, 52, 43, 89, 82, 54, 27, 80, 72, 78, 1, 71, 53, 80, 18, 44, 59, 96, 94, 8, 41, 30, 62, 72, 49, 73, 60, 24, 11, 70, 93, 72, 83, 11, 15, 30, 88, 62, 70, 67, 36, 34, 55, 25, 85, 8, 25, 71, 59, 13, 14, 64, 58, 79, 22, 68, 33, 1, 62, 76, 52]
last_save: 72

Gen:251
last_save: 72
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.8037974683544303
TestFitness:0.8076923076923077
MaxGenLen:400
Individual: def p():
  def adf0(index):
    if np.equal(x[index],66638.02270):
      return False
    else:
      return True
  def adf1(index):
    if np.greater(x[index],02618.13068):
      return True
    else:
      return False
  def adf2(index):
    if np.equal(x[index],71075.29489):
      return False
    else:
      return False
  def adf3(index):
    if np.greater(x[index],70506.12157):
      return False
    else:
      return False
  def adf4(index):
    if np.equal(x[index],23084.21370):
      return True
    else:
      return False
  def adf5(index):
    if np.less(x[index],37418.39129):
      return False
    else:
      return True
  def adf6(index):
    if np.greater(x[index],26067.58982):
      return False
    else:
      return True
  def adf7(index):
    if np.equal(x[index],15024.88905):
      return True
    else:
      return False
  def adf8(index):
    if np.less(x[index],31063.97286):
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+42.75, adf1(1)*+27.07, adf2(2)*+67.93, adf3(3)*+55.28, adf4(4)*+93.79, adf5(5)*+98.59, adf6(6)*-39.46, adf7(7)*+11.65, adf8(8)*+48.77], 04.75)
result=p(); 0.8037974683544303
IndLenGenome:339
IndGenome:[27, 34, 90, 18, 55, 69, 80, 51, 75, 35, 70, 10, 51, 25, 91, 80, 47, 95, 5, 50, 84, 57, 25, 24, 76, 11, 13, 50, 22, 19, 70, 14, 93, 33, 89, 69, 11, 32, 69, 18, 93, 47, 73, 81, 22, 18, 62, 83, 87, 18, 9, 98, 49, 74, 80, 73, 27, 74, 93, 40, 51, 78, 47, 30, 42, 68, 17, 65, 16, 18, 53, 40, 21, 76, 21, 26, 94, 62, 36, 96, 13, 25, 97, 89, 47, 63, 74, 92, 65, 24, 18, 22, 37, 59, 27, 59, 80, 10, 29, 55, 86, 39, 66, 23, 27, 31, 53, 1, 32, 35, 99, 64, 65, 10, 85, 18, 28, 65, 27, 38, 31, 66, 71, 40, 69, 34, 49, 15, 89, 44, 28, 17, 88, 47, 14, 97, 74, 97, 87, 63, 57, 32, 21, 69, 42, 15, 89, 97, 75, 61, 43, 47, 17, 79, 75, 49, 26, 99, 62, 77, 18, 33, 89, 28, 92, 52, 82, 41, 60, 91, 80, 63, 51, 62, 88, 45, 48, 26, 46, 45, 87, 20, 85, 72, 93, 67, 19, 74, 16, 90, 57, 35, 28, 12, 24, 31, 71, 35, 90, 30, 29, 78, 42, 2, 48, 92, 46, 77, 70, 23, 56, 86, 34, 69, 48, 43, 40, 21, 79, 84, 52, 17, 92, 40, 81, 73, 0, 68, 82, 46, 77, 40, 88, 79, 70, 46, 72, 67, 33, 71, 63, 17, 18, 19, 22, 48, 89, 96, 91, 87, 93, 83, 96, 63, 28, 78, 5, 98, 95, 89, 84, 16, 16, 64, 63, 88, 2, 24, 19, 16, 58, 32, 69, 19, 12, 89, 50, 91, 46, 88, 99, 94, 57, 38, 77, 24, 94, 92, 27, 89, 22, 81, 68, 13, 1, 20, 58, 79, 83, 73, 74, 26, 22, 3, 14, 4, 99, 96, 72, 48, 4, 71, 29, 0, 51, 69, 71, 35, 12, 81, 75, 20, 79, 34, 81, 12, 71, 64, 2, 9, 55, 32, 30, 65, 72, 30, 3, 73, 0]
last_save: 72

Gen:251
last_save: 72
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.8037974683544303
TestFitness:0.8076923076923077
MaxGenLen:400
Individual: def p():
  def adf0(index):
    if np.less(x[index],66584.37602):
      return False
    else:
      return False
  def adf1(index):
    if np.less(x[index],77474.20076):
      return False
    else:
      return False
  def adf2(index):
    if np.less(x[index],25990.68131):
      return False
    else:
      return False
  def adf3(index):
    if np.equal(x[index],98201.80597):
      return True
    else:
      return True
  def adf4(index):
    if np.less(x[index],61057.47327):
      return True
    else:
      return True
  def adf5(index):
    if np.greater(x[index],92241.41054):
      return False
    else:
      return False
  def adf6(index):
    if np.equal(x[index],18914.55120):
      return False
    else:
      return True
  def adf7(index):
    if np.equal(x[index],61075.38516):
      return False
    else:
      return False
  def adf8(index):
    if np.less(x[index],59932.29432):
      return False
    else:
      return False
  return multiple_operation([adf0(0)*-30.37, adf1(1)*-48.42, adf2(2)*-60.58, adf3(3)*-67.62, adf4(4)*+75.00, adf5(5)*+41.14, adf6(6)*+94.97, adf7(7)*+14.64, adf8(8)*+41.26], 44.24)
result=p(); 0.8037974683544303
IndLenGenome:339
IndGenome:[43, 55, 53, 70, 66, 26, 10, 88, 67, 13, 8, 60, 15, 30, 97, 25, 67, 98, 40, 94, 42, 5, 16, 22, 59, 63, 95, 44, 11, 8, 20, 42, 43, 32, 75, 48, 14, 45, 13, 4, 45, 73, 54, 53, 23, 60, 39, 83, 72, 11, 39, 61, 4, 19, 62, 17, 50, 30, 7, 48, 87, 93, 73, 47, 69, 71, 27, 64, 99, 57, 70, 39, 26, 88, 54, 84, 52, 17, 17, 41, 51, 50, 76, 45, 67, 77, 12, 63, 34, 76, 45, 16, 37, 21, 22, 85, 41, 20, 52, 97, 14, 57, 35, 62, 53, 10, 68, 13, 71, 75, 56, 50, 58, 71, 25, 60, 15, 65, 86, 88, 78, 98, 73, 90, 50, 89, 24, 71, 66, 56, 73, 74, 29, 83, 16, 80, 75, 46, 73, 77, 70, 71, 2, 84, 32, 24, 11, 85, 33, 24, 31, 71, 57, 22, 64, 12, 65, 84, 95, 98, 86, 13, 11, 38, 46, 85, 37, 68, 28, 57, 89, 20, 46, 56, 34, 23, 20, 40, 71, 75, 11, 55, 64, 99, 77, 62, 71, 98, 88, 64, 69, 52, 14, 50, 21, 12, 60, 82, 65, 81, 65, 72, 17, 69, 71, 36, 10, 49, 10, 67, 19, 34, 44, 43, 92, 61, 45, 16, 53, 16, 24, 79, 50, 56, 18, 78, 62, 39, 12, 0, 49, 65, 28, 80, 94, 45, 80, 100, 56, 61, 30, 1, 34, 42, 100, 64, 69, 62, 88, 71, 38, 80, 49, 32, 29, 10, 56, 4, 87, 72, 98, 71, 69, 70, 56, 76, 51, 59, 77, 75, 52, 16, 52, 69, 74, 99, 38, 9, 70, 45, 27, 66, 86, 78, 22, 71, 4, 3, 90, 56, 0, 13, 20, 96, 45, 60, 2, 38, 68, 93, 5, 61, 52, 61, 86, 76, 13, 71, 56, 85, 46, 64, 26, 73, 14, 83, 74, 85, 24, 31, 24, 84, 64, 99, 81, 30, 81, 27, 70, 90, 75, 66, 67, 44, 25, 29, 22, 14, 70]
last_save: 72

Gen:251
last_save: 72
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.8037974683544303
TestFitness:0.8076923076923077
MaxGenLen:400
Individual: def p():
  def adf0(index):
    if np.equal(x[index],72066.67241):
      return False
    else:
      return True
  def adf1(index):
    if np.equal(x[index],26819.50794):
      return False
    else:
      return True
  def adf2(index):
    if np.equal(x[index],41783.84264):
      return False
    else:
      return False
  def adf3(index):
    if np.equal(x[index],02417.34868):
      return True
    else:
      return False
  def adf4(index):
    if np.greater(x[index],88227.06969):
      return False
    else:
      return False
  def adf5(index):
    if np.equal(x[index],88038.91039):
      return False
    else:
      return False
  def adf6(index):
    if np.equal(x[index],74588.98313):
      return False
    else:
      return True
  def adf7(index):
    if np.less(x[index],78103.37991):
      return True
    else:
      return False
  def adf8(index):
    if np.greater(x[index],42627.16742):
      return False
    else:
      return False
  return multiple_operation([adf0(0)*+07.26, adf1(1)*+43.96, adf2(2)*-38.67, adf3(3)*-62.31, adf4(4)*+15.03, adf5(5)*+93.56, adf6(6)*+38.56, adf7(7)*-36.48, adf8(8)*-33.33], 49.34)
result=p(); 0.8037974683544303
IndLenGenome:339
IndGenome:[58, 13, 8, 11, 95, 62, 50, 49, 5, 43, 60, 55, 41, 56, 25, 24, 98, 31, 29, 68, 57, 97, 52, 54, 44, 69, 57, 40, 89, 98, 85, 26, 85, 28, 17, 28, 84, 93, 69, 12, 67, 17, 49, 34, 63, 93, 20, 91, 27, 75, 91, 68, 33, 81, 96, 62, 57, 71, 98, 67, 25, 16, 38, 89, 88, 75, 75, 53, 38, 20, 43, 23, 57, 78, 81, 43, 96, 98, 31, 44, 48, 97, 74, 31, 43, 47, 64, 10, 61, 33, 64, 63, 95, 46, 55, 65, 24, 39, 17, 19, 98, 22, 2, 53, 66, 32, 76, 73, 53, 38, 74, 1, 72, 47, 67, 54, 41, 11, 95, 69, 26, 29, 86, 73, 15, 72, 32, 77, 11, 44, 21, 32, 3, 8, 96, 98, 90, 30, 88, 82, 37, 54, 15, 81, 98, 13, 22, 18, 34, 49, 18, 41, 56, 82, 66, 46, 83, 63, 15, 15, 49, 71, 40, 9, 24, 42, 77, 34, 64, 97, 46, 42, 93, 95, 71, 37, 15, 19, 17, 77, 58, 40, 8, 82, 24, 86, 80, 93, 78, 12, 55, 42, 66, 29, 57, 37, 99, 78, 50, 11, 16, 53, 10, 66, 12, 83, 55, 17, 54, 36, 88, 75, 38, 26, 94, 47, 89, 79, 66, 22, 66, 89, 80, 22, 38, 28, 60, 46, 13, 84, 1, 12, 93, 32, 30, 32, 5, 100, 24, 15, 20, 91, 78, 95, 33, 52, 33, 33, 58, 57, 17, 23, 73, 69, 36, 5, 88, 59, 11, 47, 78, 13, 53, 58, 1, 14, 24, 41, 86, 31, 91, 0, 36, 38, 14, 58, 21, 81, 50, 52, 54, 77, 84, 93, 2, 1, 19, 17, 8, 40, 97, 53, 59, 99, 63, 21, 11, 41, 5, 17, 71, 87, 36, 6, 65, 60, 69, 49, 9, 87, 38, 71, 9, 9, 94, 58, 54, 31, 57, 82, 94, 0, 51, 97, 100, 40, 98, 97, 32, 34, 38, 24, 12, 43, 1, 46, 39, 28, 59]
last_save: 72

Gen:251
last_save: 72
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.8037974683544303
TestFitness:0.8076923076923077
MaxGenLen:400
Individual: def p():
  def adf0(index):
    if np.greater(x[index],56817.70932):
      return False
    else:
      return True
  def adf1(index):
    if np.greater(x[index],07372.16519):
      return True
    else:
      return True
  def adf2(index):
    if np.less(x[index],76924.01612):
      return True
    else:
      return True
  def adf3(index):
    if np.greater(x[index],21460.17416):
      return True
    else:
      return True
  def adf4(index):
    if np.equal(x[index],93245.31869):
      return False
    else:
      return False
  def adf5(index):
    if np.equal(x[index],99332.82805):
      return False
    else:
      return False
  def adf6(index):
    if np.less(x[index],55883.43890):
      return True
    else:
      return True
  def adf7(index):
    if np.equal(x[index],51674.08902):
      return True
    else:
      return False
  def adf8(index):
    if np.greater(x[index],78302.38629):
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+47.81, adf1(1)*+52.27, adf2(2)*+82.30, adf3(3)*+00.06, adf4(4)*-31.80, adf5(5)*+36.13, adf6(6)*+49.40, adf7(7)*-67.93, adf8(8)*+08.77], 43.70)
result=p(); 0.8037974683544303
IndLenGenome:339
IndGenome:[35, 49, 37, 57, 80, 36, 62, 11, 26, 92, 70, 49, 57, 41, 30, 54, 74, 40, 20, 81, 52, 35, 55, 92, 7, 25, 7, 99, 36, 33, 54, 38, 9, 77, 20, 50, 70, 18, 94, 91, 28, 58, 68, 60, 56, 74, 35, 28, 83, 84, 90, 11, 73, 18, 74, 98, 83, 61, 17, 35, 58, 11, 18, 3, 8, 10, 84, 18, 16, 54, 94, 67, 82, 52, 69, 17, 60, 13, 80, 71, 68, 31, 90, 85, 91, 1, 36, 79, 72, 99, 29, 47, 80, 57, 25, 48, 79, 85, 45, 31, 97, 57, 16, 17, 31, 20, 31, 63, 64, 54, 42, 89, 83, 50, 56, 87, 77, 15, 41, 35, 16, 44, 96, 61, 33, 82, 92, 11, 58, 19, 54, 12, 57, 76, 28, 16, 37, 97, 49, 33, 64, 92, 73, 63, 56, 46, 29, 24, 46, 40, 5, 22, 54, 20, 31, 18, 36, 21, 27, 41, 20, 63, 56, 32, 97, 40, 47, 33, 10, 99, 78, 30, 26, 33, 65, 95, 40, 44, 81, 68, 42, 87, 8, 99, 23, 45, 38, 81, 5, 1, 86, 59, 48, 60, 48, 25, 53, 45, 99, 22, 70, 44, 84, 33, 17, 40, 88, 21, 17, 65, 73, 64, 32, 41, 98, 60, 58, 92, 80, 89, 53, 62, 89, 68, 53, 15, 76, 41, 42, 25, 61, 14, 51, 30, 69, 66, 41, 9, 22, 82, 79, 81, 35, 0, 0, 65, 78, 20, 16, 6, 94, 50, 67, 14, 18, 35, 87, 86, 63, 82, 77, 14, 67, 46, 63, 10, 60, 93, 99, 19, 8, 45, 28, 35, 54, 59, 35, 21, 66, 80, 82, 23, 37, 96, 48, 38, 19, 78, 52, 99, 44, 64, 41, 88, 47, 15, 2, 52, 57, 14, 37, 38, 85, 41, 84, 82, 70, 42, 60, 96, 58, 56, 37, 17, 73, 71, 15, 75, 4, 95, 28, 99, 72, 56, 4, 47, 15, 50, 17, 59, 2, 80, 49, 35, 73, 13, 80, 36, 3]
last_save: 72

Gen:251
last_save: 72
Exit:FalseFalseTrue