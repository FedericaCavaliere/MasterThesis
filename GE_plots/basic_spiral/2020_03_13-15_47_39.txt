Dataset:Spiral/new_Full.csv
FS:False
Seed:1234
Size:3

Gen:1
TrainFitness:0.8081632653061225
TestFitness:0.8048780487804879
MaxGenLen:400
Individual: def p():
  def adf0(index):
    if np.equal(x[index],41528.74870):
      if np.less(x[index],67876.40523):
        return False
      else:
        return True
    else:
      if np.equal(x[index],64602.84182):
        return False
      else:
        return False
  def adf1(index):
    if np.greater(x[index],29203.15004):
      if np.less(x[index],29675.77429):
        return True
      else:
        return False
    else:
      if np.equal(x[index],68786.44682):
        return True
      else:
        return True
  def adf2(index):
    if np.greater(x[index],85362.73286):
      if np.less(x[index],65109.90534):
        return False
      else:
        return False
    else:
      if np.equal(x[index],00636.50833):
        return True
      else:
        return False
  def adf3(index):
    if np.greater(x[index],68149.65140):
      if np.greater(x[index],67155.44459):
        return True
      else:
        return True
    else:
      if np.equal(x[index],02935.52370):
        return False
      else:
        return True
  def adf4(index):
    if np.less(x[index],98079.79020):
      if np.less(x[index],06374.23122):
        return True
      else:
        return True
    else:
      if np.less(x[index],48824.18034):
        return False
      else:
        return False
  def adf5(index):
    if np.equal(x[index],95282.91804):
      if np.equal(x[index],72954.20968):
        return True
      else:
        return False
    else:
      if np.equal(x[index],42907.50857):
        return False
      else:
        return False
  def adf6(index):
    if np.greater(x[index],99137.29493):
      if np.equal(x[index],16263.97014):
        return False
      else:
        return True
    else:
      if np.greater(x[index],35631.38503):
        return False
      else:
        return True
  def adf7(index):
    if np.greater(x[index],02310.06970):
      if np.greater(x[index],58451.87241):
        return False
      else:
        return True
    else:
      if np.equal(x[index],12112.71558):
        return True
      else:
        return False
  def adf8(index):
    if np.equal(x[index],14627.46691):
      if np.greater(x[index],89560.09139):
        return True
      else:
        return False
    else:
      if np.greater(x[index],40342.01076):
        return True
      else:
        return True
  return multiple_operation([adf0(0)*+29.60, adf1(1)*-48.67, adf2(2)*-41.77, adf3(3)*+04.94, adf4(4)*+36.22, adf5(5)*-81.88, adf6(6)*-10.40, adf7(7)*-03.52, adf8(8)*+46.48], 27.79)
result=p(); 0.8081632653061225
IndLenGenome:717
IndGenome:[18, 62, 13, 46, 69, 49, 75, 40, 69, 43, 38, 93, 16, 66, 71, 26, 60, 93, 74, 40, 84, 28, 64, 13, 49, 21, 83, 32, 97, 84, 80, 95, 71, 54, 19, 7, 47, 4, 70, 71, 39, 27, 62, 91, 94, 99, 60, 22, 16, 63, 30, 18, 16, 28, 98, 84, 76, 62, 57, 49, 53, 52, 45, 44, 27, 18, 9, 72, 45, 19, 12, 97, 27, 81, 72, 27, 49, 55, 11, 32, 24, 49, 71, 50, 20, 73, 86, 78, 28, 101, 65, 93, 40, 56, 38, 21, 40, 96, 16, 41, 49, 22, 14, 11, 15, 95, 34, 83, 18, 33, 48, 31, 52, 54, 61, 90, 37, 42, 50, 90, 97, 56, 64, 20, 70, 50, 62, 89, 81, 60, 47, 85, 57, 48, 43, 28, 3, 10, 51, 71, 90, 58, 20, 92, 74, 42, 42, 35, 31, 68, 61, 98, 57, 14, 95, 19, 56, 90, 82, 5, 39, 57, 82, 97, 78, 95, 90, 6, 54, 10, 97, 32, 98, 39, 85, 38, 83, 24, 57, 83, 97, 20, 90, 49, 52, 24, 56, 85, 39, 25, 32, 2, 47, 84, 59, 59, 37, 21, 6, 21, 63, 22, 40, 62, 47, 68, 82, 96, 78, 53, 93, 25, 32, 16, 16, 15, 31, 91, 54, 44, 78, 85, 9, 12, 30, 24, 40, 79, 93, 81, 75, 33, 89, 31, 85, 29, 42, 20, 84, 50, 97, 70, 15, 25, 99, 11, 40, 70, 98, 53, 81, 86, 12, 84, 28, 5, 56, 56, 42, 45, 90, 90, 13, 46, 12, 28, 58, 58, 57, 20, 21, 32, 52, 83, 94, 54, 10, 12, 86, 14, 68, 70, 56, 87, 57, 13, 63, 39, 98, 33, 64, 76, 24, 23, 90, 54, 93, 5, 11, 74, 67, 15, 35, 71, 36, 10, 42, 40, 74, 50, 65, 58, 65, 46, 61, 21, 47, 79, 96, 36, 47, 58, 73, 54, 28, 44, 89, 71, 85, 8, 31, 49, 33, 39, 72, 99, 35, 58, 59, 95, 18, 29, 33, 84, 7, 16, 14, 55, 28, 56, 84, 50, 96, 76, 99, 38, 90, 71, 33, 5, 95, 42, 66, 60, 30, 89, 39, 14, 82, 44, 25, 2, 13, 41, 56, 38, 71, 10, 31, 62, 63, 26, 50, 56, 36, 77, 71, 47, 78, 29, 88, 12, 64, 34, 64, 79, 62, 56, 25, 61, 84, 68, 44, 60, 97, 77, 19, 59, 56, 27, 74, 71, 97, 11, 82, 12, 87, 30, 59, 44, 32, 60, 62, 84, 55, 24, 69, 10, 56, 73, 58, 11, 81, 89, 90, 76, 17, 13, 85, 17, 62, 69, 45, 52, 48, 42, 95, 15, 81, 46, 35, 21, 46, 54, 43, 41, 73, 53, 40, 42, 30, 19, 67, 93, 15, 61, 52, 83, 48, 82, 46, 65, 62, 56, 10, 53, 74, 32, 86, 83, 9, 63, 10, 69, 17, 56, 67, 19, 49, 38, 33, 80, 44, 100, 84, 55, 88, 51, 71, 91, 11, 64, 19, 59, 56, 100, 25, 92, 49, 44, 71, 74, 99, 7, 66, 29, 95, 3, 1, 86, 60, 77, 70, 47, 6, 70, 80, 2, 91, 91, 74, 47, 82, 61, 88, 17, 80, 25, 49, 51, 40, 0, 69, 80, 1, 55, 94, 5, 52, 7, 55, 82, 49, 68, 92, 55, 2, 84, 85, 61, 81, 40, 95, 78, 31, 37, 84, 12, 38, 0, 62, 22, 4, 43, 26, 43, 95, 28, 72, 26, 83, 70, 44, 10, 11, 17, 64, 78, 54, 55, 96, 5, 29, 22, 46, 13, 57, 5, 9, 33, 73, 20, 13, 98, 45, 15, 41, 24, 88, 16, 55, 92, 53, 57, 12, 53, 88, 46, 73, 15, 46, 70, 88, 47, 32, 83, 38, 17, 33, 3, 80, 19, 4, 63, 73, 17, 100, 51, 60, 15, 36, 26, 71, 95, 25, 100, 96, 81, 32, 24, 96, 33, 2, 86, 41, 51, 63, 86, 100, 18, 38, 52, 37, 11, 1, 89, 75, 41, 1, 28, 53, 87, 11, 78, 90, 53, 95, 91, 60, 83, 46, 13, 23, 44, 9, 38, 24, 53, 89, 86, 9, 2, 59, 69, 56, 78, 12, 35, 30, 93, 64, 22, 70, 11, 22, 3, 57, 12, 69, 53, 41, 86, 65, 15, 35, 36, 36]
last_save: 30

Gen:251
last_save: 30
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.8040816326530612
TestFitness:0.8048780487804879
MaxGenLen:400
Individual: def p():
  def adf0(index):
    if np.less(x[index],16885.99655):
      return True
    else:
      return False
  def adf1(index):
    if np.greater(x[index],54449.00985):
      return True
    else:
      return False
  def adf2(index):
    if np.greater(x[index],67801.67859):
      return False
    else:
      return False
  def adf3(index):
    if np.greater(x[index],88750.22983):
      return True
    else:
      return True
  def adf4(index):
    if np.less(x[index],97162.15728):
      return True
    else:
      return False
  def adf5(index):
    if np.equal(x[index],52855.05078):
      return True
    else:
      return False
  def adf6(index):
    if np.equal(x[index],97230.46276):
      return True
    else:
      return True
  def adf7(index):
    if np.equal(x[index],71265.38091):
      return False
    else:
      return True
  def adf8(index):
    if np.equal(x[index],69187.87453):
      return True
    else:
      return True
  return multiple_operation([adf0(0)*+46.10, adf1(1)*+32.28, adf2(2)*-77.69, adf3(3)*-00.53, adf4(4)*+98.97, adf5(5)*-06.08, adf6(6)*-76.13, adf7(7)*+43.98, adf8(8)*-00.74], 69.49)
result=p(); 0.8040816326530612
IndLenGenome:339
IndGenome:[21, 99, 12, 73, 57, 89, 15, 87, 64, 65, 65, 16, 70, 92, 65, 4, 71, 64, 91, 94, 69, 35, 10, 28, 75, 50, 18, 85, 4, 53, 74, 38, 17, 88, 76, 79, 44, 93, 92, 90, 96, 56, 98, 87, 34, 52, 33, 11, 100, 82, 72, 75, 99, 59, 86, 15, 35, 24, 35, 87, 1, 24, 67, 95, 68, 92, 14, 55, 63, 14, 85, 45, 70, 98, 52, 93, 46, 72, 100, 28, 13, 43, 24, 99, 92, 39, 5, 65, 65, 95, 63, 59, 64, 95, 37, 81, 10, 44, 36, 83, 17, 92, 19, 31, 52, 50, 51, 70, 88, 24, 86, 92, 45, 90, 85, 14, 41, 30, 45, 45, 68, 75, 6, 63, 26, 70, 49, 92, 18, 77, 49, 87, 88, 43, 18, 63, 19, 78, 94, 10, 60, 70, 21, 49, 99, 56, 26, 88, 17, 37, 92, 93, 83, 27, 15, 12, 29, 98, 85, 25, 62, 57, 79, 17, 36, 45, 90, 58, 82, 76, 86, 42, 89, 88, 50, 81, 37, 35, 37, 95, 99, 87, 44, 46, 71, 88, 64, 63, 24, 99, 24, 85, 98, 21, 11, 11, 38, 79, 98, 17, 80, 28, 25, 39, 22, 26, 79, 89, 82, 68, 28, 53, 57, 10, 31, 59, 68, 11, 24, 57, 90, 30, 66, 17, 66, 59, 91, 39, 45, 44, 80, 56, 7, 63, 65, 56, 73, 33, 36, 17, 66, 97, 25, 58, 65, 15, 23, 72, 47, 54, 60, 15, 6, 14, 80, 80, 20, 37, 10, 64, 70, 92, 83, 32, 89, 29, 53, 10, 50, 63, 31, 92, 59, 25, 98, 75, 76, 28, 31, 49, 93, 3, 9, 69, 38, 30, 59, 23, 92, 33, 86, 64, 6, 22, 18, 38, 22, 27, 44, 28, 80, 31, 43, 22, 60, 16, 45, 27, 36, 14, 24, 93, 68, 36, 85, 97, 80, 18, 65, 65, 53, 54, 71, 13, 16, 57, 59, 24, 23, 65, 12, 92, 15, 91, 83, 93, 48, 46, 65]
last_save: 30

Gen:251
last_save: 30
Exit:FalseFalseTrue

Gen:1
TrainFitness:0.8048780487804879
TestFitness:0.8032786885245902
MaxGenLen:400
Individual: def p():
  def adf0(index):
    if np.equal(x[index],57575.95121):
      return True
    else:
      return True
  def adf1(index):
    if np.equal(x[index],13940.43442):
      return True
    else:
      return True
  def adf2(index):
    if np.equal(x[index],92826.26721):
      return False
    else:
      return True
  def adf3(index):
    if np.greater(x[index],41170.45533):
      return True
    else:
      return True
  def adf4(index):
    if np.less(x[index],80810.59985):
      return True
    else:
      return True
  def adf5(index):
    if np.greater(x[index],08480.89281):
      return True
    else:
      return False
  def adf6(index):
    if np.greater(x[index],27381.19453):
      return False
    else:
      return True
  def adf7(index):
    if np.equal(x[index],62281.36726):
      return False
    else:
      return True
  def adf8(index):
    if np.less(x[index],79827.24705):
      return False
    else:
      return True
  return multiple_operation([adf0(0)*+50.63, adf1(1)*-70.76, adf2(2)*+99.96, adf3(3)*+27.94, adf4(4)*-05.33, adf5(5)*-01.41, adf6(6)*+54.25, adf7(7)*-00.09, adf8(8)*+57.37], 79.10)
result=p(); 0.8048780487804879
IndLenGenome:339
IndGenome:[13, 99, 93, 19, 46, 61, 53, 54, 85, 61, 50, 64, 4, 39, 90, 92, 27, 70, 40, 71, 94, 40, 37, 14, 5, 50, 13, 5, 54, 39, 12, 27, 30, 95, 17, 95, 70, 25, 66, 55, 12, 32, 2, 59, 79, 29, 49, 81, 92, 62, 88, 79, 16, 37, 58, 51, 82, 38, 61, 97, 55, 70, 98, 85, 30, 95, 37, 7, 58, 66, 88, 96, 42, 10, 53, 99, 38, 50, 70, 31, 73, 92, 43, 74, 40, 70, 87, 9, 9, 37, 80, 42, 39, 99, 54, 25, 18, 64, 14, 43, 90, 14, 39, 88, 81, 53, 50, 40, 25, 26, 42, 19, 95, 82, 43, 10, 18, 24, 77, 55, 85, 48, 82, 41, 45, 83, 13, 33, 3, 91, 15, 87, 34, 92, 10, 25, 47, 79, 64, 64, 45, 22, 46, 47, 41, 26, 34, 65, 90, 61, 71, 61, 53, 81, 96, 16, 77, 19, 26, 68, 48, 11, 92, 61, 76, 55, 37, 54, 27, 80, 89, 91, 23, 97, 94, 66, 83, 59, 15, 60, 28, 42, 14, 23, 74, 6, 17, 82, 86, 86, 28, 88, 99, 44, 40, 49, 70, 38, 88, 74, 31, 39, 50, 39, 42, 25, 22, 40, 34, 79, 58, 38, 96, 92, 14, 98, 77, 21, 37, 35, 71, 65, 55, 22, 79, 85, 99, 34, 78, 34, 98, 29, 100, 88, 67, 57, 96, 51, 90, 32, 85, 11, 33, 24, 53, 75, 93, 30, 63, 42, 26, 12, 89, 65, 83, 61, 53, 63, 61, 33, 17, 55, 42, 73, 78, 90, 5, 73, 79, 91, 65, 80, 0, 97, 74, 49, 3, 11, 18, 65, 36, 63, 80, 19, 91, 40, 68, 42, 17, 72, 56, 91, 84, 99, 3, 27, 30, 41, 26, 35, 23, 66, 0, 32, 33, 23, 34, 49, 88, 24, 49, 99, 3, 37, 59, 100, 52, 86, 37, 82, 70, 67, 69, 6, 53, 92, 19, 77, 73, 91, 56, 57, 93, 0, 83, 54, 7, 88, 89]
last_save: 30

Gen:145
TrainFitness:0.8089430894308943
TestFitness:0.8032786885245902
MaxGenLen:430
Individual: def p():
  def adf0(index):
    if np.less(x[index],50595.04362):
      return True
    else:
      return False
  def adf1(index):
    if np.greater(x[index],56854.42144):
      if np.equal(x[index],78847.02946):
        if np.less(x[index],05545.82267):
          return True
        else:
          return True
      else:
        if np.equal(x[index],41602.67648):
          return True
        else:
          return False
    else:
      if np.greater(x[index],18928.02848):
        if np.equal(x[index],42306.50757):
          return False
        else:
          return True
      else:
        if np.greater(x[index],60848.29515):
          return False
        else:
          return True
  def adf2(index):
    if np.greater(x[index],07617.38394):
      return True
    else:
      return True
  def adf3(index):
    if np.less(x[index],76760.68535):
      return False
    else:
      return True
  def adf4(index):
    if np.less(x[index],55567.04851):
      return True
    else:
      return False
  def adf5(index):
    if np.equal(x[index],15213.27133):
      return True
    else:
      return False
  def adf6(index):
    if np.greater(x[index],68294.84119):
      return False
    else:
      return False
  def adf7(index):
    if np.less(x[index],70590.42496):
      if np.greater(x[index],02304.88880):
        return False
      else:
        return True
    else:
      if np.equal(x[index],74390.07220):
        return True
      else:
        return True
  def adf8(index):
    if np.greater(x[index],05486.53178):
      return False
    else:
      return True
  return multiple_operation([adf0(0)*-62.73, adf1(1)*-21.97, adf2(2)*+55.72, adf3(3)*-14.52, adf4(4)*+30.68, adf5(5)*-08.63, adf6(6)*+37.50, adf7(7)*+67.44, adf8(8)*-12.77], 15.73)
result=p(); 0.8089430894308943
IndLenGenome:421
IndGenome:[37, 2, 12, 15, 56, 31, 81, 15, 30, 35, 49, 95, 30, 14, 73, 56, 82, 76, 25, 97, 92, 26, 63, 72, 15, 26, 98, 95, 14, 24, 72, 71, 64, 74, 60, 35, 79, 7, 18, 98, 34, 57, 60, 82, 19, 84, 46, 36, 13, 27, 90, 5, 25, 94, 55, 48, 72, 22, 16, 67, 92, 92, 92, 95, 26, 54, 71, 16, 20, 72, 6, 27, 56, 4, 48, 22, 89, 56, 0, 95, 11, 98, 49, 42, 28, 40, 12, 38, 94, 68, 95, 53, 7, 64, 82, 33, 30, 36, 15, 90, 67, 75, 17, 57, 30, 43, 57, 36, 16, 20, 68, 44, 68, 62, 69, 5, 81, 55, 65, 88, 19, 25, 73, 36, 29, 70, 77, 96, 71, 97, 43, 18, 13, 9, 94, 72, 46, 47, 65, 56, 13, 61, 47, 46, 87, 36, 20, 46, 18, 95, 33, 5, 25, 18, 76, 35, 54, 91, 61, 25, 45, 75, 66, 67, 80, 84, 18, 55, 51, 38, 15, 73, 95, 64, 77, 56, 31, 25, 12, 81, 43, 62, 47, 61, 3, 53, 64, 65, 37, 90, 99, 21, 75, 86, 28, 72, 59, 34, 18, 64, 61, 61, 59, 77, 91, 70, 51, 97, 85, 33, 17, 0, 85, 49, 70, 44, 52, 14, 49, 56, 36, 93, 50, 0, 72, 13, 20, 24, 88, 18, 88, 18, 60, 79, 28, 58, 50, 61, 27, 24, 13, 89, 90, 70, 97, 52, 32, 50, 36, 68, 37, 0, 63, 90, 14, 10, 95, 14, 28, 66, 45, 23, 61, 37, 78, 63, 6, 14, 21, 35, 89, 41, 6, 52, 47, 93, 24, 25, 31, 2, 71, 29, 57, 44, 40, 43, 75, 95, 87, 82, 56, 43, 16, 51, 14, 75, 62, 100, 56, 63, 3, 50, 6, 88, 14, 69, 50, 10, 98, 86, 13, 14, 42, 16, 73, 57, 75, 90, 29, 82, 21, 66, 47, 74, 24, 80, 31, 2, 71, 52, 57, 17, 40, 81, 75, 37, 53, 45, 56, 51, 47, 53, 3, 43, 42, 6, 53, 55, 80, 43, 82, 45, 47, 46, 28, 35, 40, 52, 53, 75, 43, 42, 16, 37, 55, 80, 45, 69, 45, 47, 46, 28, 35, 40, 11, 87, 31, 56, 69, 25, 9, 96, 66, 16, 62, 58, 25, 86, 54, 99, 45, 10, 14, 29, 2, 93, 1, 72, 41, 29, 19, 7, 46, 73, 11, 87, 59, 2, 11, 50, 64, 64, 42, 71, 30, 83, 87, 34, 89, 27, 96]
last_save: 30

Gen:395
last_save: 30
Exit:FalseFalseTrue