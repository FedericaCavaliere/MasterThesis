<p> ::= <defp>{::}<callp>
<defp> ::= def p():{:{::}<defadf0>{::}<defadf1>{::}<defadf2>{::}<defadf3>{::}<defadf4>{::}<defadf5>{::}<defadf6>{::}<defadf7>{::}<defadf8>{::}<codep>:}
<callp> ::= result=p()

<defadf0> ::= def adf0(index):{:{::}<code>{::}:}
<defadf1> ::= def adf1(index):{:{::}<code>{::}:}
<defadf2> ::= def adf2(index):{:{::}<code>{::}:}
<defadf3> ::= def adf3(index):{:{::}<code>{::}:}
<defadf4> ::= def adf4(index):{:{::}<code>{::}:}
<defadf5> ::= def adf5(index):{:{::}<code>{::}:}
<defadf6> ::= def adf6(index):{:{::}<code>{::}:}
<defadf7> ::= def adf7(index):{:{::}<code>{::}:}
<defadf8> ::= def adf8(index):{:{::}<code>{::}:}

<v> ::= [adf0(0)*<k>, adf1(1)*<k>, adf2(2)*<k>, adf3(3)*<k>, adf4(4)*<k>, adf5(5)*<k>, adf6(6)*<k>, adf7(7)*<k>, adf8(8)*<k>]

<codep> ::= return multiple_operation(<v>, <un-k>)

<code> ::= <p0> | <p1> | <p2> | <p3> | <p4>

<p0> ::= if <cond>:{:return <bool>:}{::}else:{:return <bool>:}
<p1> ::= if <cond>:{:<p0>:}{::}else:{:<p0>:}
<p2> ::= if <cond>:{:<p1>:}{::}else:{:<p1>:}
<p3> ::= if <cond>:{:<p2>:}{::}else:{:<p2>:}
<p4> ::= if <cond>:{:<p3>:}{::}else:{:<p3>:}

<cond> ::= np'.'greater(x[index]','<un-number>) | np'.'less(x[index]','<un-number>) | np'.'equal(x[index]','<un-number>)

<un-number> ::= <c><c><c><c><c>'.'<c><c><c><c><c>
<k> ::= <sign><un-k>
<un-k> ::= <c><c>'.'<c><c>
<sign> ::= "+" | "-"

<bool> ::= True | False
<c> ::=  0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9